
Lab_Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba3c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c14  0800bc28  0800bc28  0001bc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d83c  0800d83c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d83c  0800d83c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d83c  0800d83c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d83c  0800d83c  0001d83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d840  0800d840  0001d840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  200001e0  0800da24  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800da24  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebf6  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002378  00000000  00000000  0002edff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00031178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b389  00000000  00000000  00032a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed92  00000000  00000000  0004dda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009de2d  00000000  00000000  0005cb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa968  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000fa9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bc0c 	.word	0x0800bc0c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800bc0c 	.word	0x0800bc0c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LCD_WR_REG+0x44>)
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	611a      	str	r2, [r3, #16]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LCD_WR_DATAX+0x44>)
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	611a      	str	r2, [r3, #16]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c38:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c3c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c40:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c44:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c5e:	2240      	movs	r2, #64	; 0x40
 8000c60:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <LCD_RD_DATA+0x84>)
 8000c64:	889b      	ldrh	r3, [r3, #4]
 8000c66:	f648 1289 	movw	r2, #35209	; 0x8989
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d102      	bne.n	8000c74 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f005 ff02 	bl	8006a78 <HAL_Delay>
	t = DATAIN
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c7c:	2240      	movs	r2, #64	; 0x40
 8000c7e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c8a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c8e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c92:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c96:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	60da      	str	r2, [r3, #12]
	return t;
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	2000020c 	.word	0x2000020c

08000cb8 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	80fb      	strh	r3, [r7, #6]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff68 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <LCD_WriteReg+0x50>)
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	60d3      	str	r3, [r2, #12]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff41 	bl	8000ba0 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000d1e:	f7ff ff87 	bl	8000c30 <LCD_RD_DATA>
 8000d22:	4603      	mov	r3, r0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <LCD_WriteRAM_Prepare+0x14>)
 8000d32:	891b      	ldrh	r3, [r3, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <LCD_WR_REG>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000020c 	.word	0x2000020c

08000d44 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	80fb      	strh	r3, [r7, #6]
 8000d50:	4613      	mov	r3, r2
 8000d52:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000d54:	4b73      	ldr	r3, [pc, #460]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d56:	889b      	ldrh	r3, [r3, #4]
 8000d58:	f249 3241 	movw	r2, #37697	; 0x9341
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d005      	beq.n	8000d6c <LCD_SetCursor+0x28>
 8000d60:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	f245 3210 	movw	r2, #21264	; 0x5310
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d164      	bne.n	8000e36 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000d6c:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d6e:	895b      	ldrh	r3, [r3, #10]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff15 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	4b6a      	ldr	r3, [pc, #424]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b67      	ldr	r3, [pc, #412]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	4b65      	ldr	r3, [pc, #404]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	4b64      	ldr	r3, [pc, #400]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000da4:	4b60      	ldr	r3, [pc, #384]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4a5d      	ldr	r2, [pc, #372]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fee3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000e34:	e248      	b.n	80012c8 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	f646 0204 	movw	r2, #26628	; 0x6804
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d176      	bne.n	8000f30 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3b01      	subs	r3, #1
 8000e56:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e5a:	895b      	ldrh	r3, [r3, #10]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe9f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	60d3      	str	r3, [r2, #12]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000ebe:	899b      	ldrh	r3, [r3, #12]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe6d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	60d3      	str	r3, [r2, #12]
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	611a      	str	r2, [r3, #16]
}
 8000f20:	e1d2      	b.n	80012c8 <LCD_SetCursor+0x584>
 8000f22:	bf00      	nop
 8000f24:	2000020c 	.word	0x2000020c
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000f30:	4b99      	ldr	r3, [pc, #612]	; (8001198 <LCD_SetCursor+0x454>)
 8000f32:	889b      	ldrh	r3, [r3, #4]
 8000f34:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 8133 	bne.w	80011a4 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000f3e:	4b96      	ldr	r3, [pc, #600]	; (8001198 <LCD_SetCursor+0x454>)
 8000f40:	799b      	ldrb	r3, [r3, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d163      	bne.n	800100e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000f46:	4b94      	ldr	r3, [pc, #592]	; (8001198 <LCD_SetCursor+0x454>)
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000f54:	4b90      	ldr	r3, [pc, #576]	; (8001198 <LCD_SetCursor+0x454>)
 8000f56:	895b      	ldrh	r3, [r3, #10]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe21 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000f5e:	4b8f      	ldr	r3, [pc, #572]	; (800119c <LCD_SetCursor+0x458>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	4b8d      	ldr	r3, [pc, #564]	; (800119c <LCD_SetCursor+0x458>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4b89      	ldr	r3, [pc, #548]	; (800119c <LCD_SetCursor+0x458>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	4b88      	ldr	r3, [pc, #544]	; (800119c <LCD_SetCursor+0x458>)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	4b86      	ldr	r3, [pc, #536]	; (800119c <LCD_SetCursor+0x458>)
 8000f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f86:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f88:	4b84      	ldr	r3, [pc, #528]	; (800119c <LCD_SetCursor+0x458>)
 8000f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	4b82      	ldr	r3, [pc, #520]	; (800119c <LCD_SetCursor+0x458>)
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	; (800119c <LCD_SetCursor+0x458>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b7d      	ldr	r3, [pc, #500]	; (800119c <LCD_SetCursor+0x458>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <LCD_SetCursor+0x458>)
 8000fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <LCD_SetCursor+0x458>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	4b78      	ldr	r3, [pc, #480]	; (800119c <LCD_SetCursor+0x458>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <LCD_SetCursor+0x458>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <LCD_SetCursor+0x458>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	4b70      	ldr	r3, [pc, #448]	; (800119c <LCD_SetCursor+0x458>)
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <LCD_SetCursor+0x458>)
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	; (800119c <LCD_SetCursor+0x458>)
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4a6b      	ldr	r2, [pc, #428]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	60d3      	str	r3, [r2, #12]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <LCD_SetCursor+0x458>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	4b67      	ldr	r3, [pc, #412]	; (800119c <LCD_SetCursor+0x458>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <LCD_SetCursor+0x458>)
 8001006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	e061      	b.n	80010d2 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800100e:	4b62      	ldr	r3, [pc, #392]	; (8001198 <LCD_SetCursor+0x454>)
 8001010:	895b      	ldrh	r3, [r3, #10]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fdc4 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8001018:	4b60      	ldr	r3, [pc, #384]	; (800119c <LCD_SetCursor+0x458>)
 800101a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	4b5e      	ldr	r3, [pc, #376]	; (800119c <LCD_SetCursor+0x458>)
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <LCD_SetCursor+0x45c>)
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <LCD_SetCursor+0x458>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <LCD_SetCursor+0x458>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <LCD_SetCursor+0x458>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001046:	4b55      	ldr	r3, [pc, #340]	; (800119c <LCD_SetCursor+0x458>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <LCD_SetCursor+0x458>)
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <LCD_SetCursor+0x45c>)
 800105a:	b2db      	uxtb	r3, r3
 800105c:	60d3      	str	r3, [r2, #12]
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <LCD_SetCursor+0x458>)
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <LCD_SetCursor+0x458>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <LCD_SetCursor+0x458>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001072:	4b4a      	ldr	r3, [pc, #296]	; (800119c <LCD_SetCursor+0x458>)
 8001074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <LCD_SetCursor+0x458>)
 800107c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <LCD_SetCursor+0x454>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3b01      	subs	r3, #1
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <LCD_SetCursor+0x45c>)
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <LCD_SetCursor+0x458>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <LCD_SetCursor+0x458>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	4b40      	ldr	r3, [pc, #256]	; (800119c <LCD_SetCursor+0x458>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <LCD_SetCursor+0x458>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <LCD_SetCursor+0x458>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <LCD_SetCursor+0x454>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <LCD_SetCursor+0x45c>)
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	60d3      	str	r3, [r2, #12]
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <LCD_SetCursor+0x458>)
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <LCD_SetCursor+0x458>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <LCD_SetCursor+0x458>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <LCD_SetCursor+0x454>)
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fd62 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <LCD_SetCursor+0x458>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <LCD_SetCursor+0x458>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <LCD_SetCursor+0x45c>)
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <LCD_SetCursor+0x458>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <LCD_SetCursor+0x458>)
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <LCD_SetCursor+0x458>)
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <LCD_SetCursor+0x458>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <LCD_SetCursor+0x458>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <LCD_SetCursor+0x45c>)
 800111e:	b2db      	uxtb	r3, r3
 8001120:	60d3      	str	r3, [r2, #12]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <LCD_SetCursor+0x458>)
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <LCD_SetCursor+0x458>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <LCD_SetCursor+0x458>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <LCD_SetCursor+0x458>)
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <LCD_SetCursor+0x458>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <LCD_SetCursor+0x454>)
 8001148:	885b      	ldrh	r3, [r3, #2]
 800114a:	3b01      	subs	r3, #1
 800114c:	121a      	asrs	r2, r3, #8
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <LCD_SetCursor+0x45c>)
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <LCD_SetCursor+0x458>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <LCD_SetCursor+0x458>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <LCD_SetCursor+0x458>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <LCD_SetCursor+0x458>)
 8001168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LCD_SetCursor+0x458>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LCD_SetCursor+0x454>)
 8001178:	885b      	ldrh	r3, [r3, #2]
 800117a:	3b01      	subs	r3, #1
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <LCD_SetCursor+0x45c>)
 800117e:	b2db      	uxtb	r3, r3
 8001180:	60d3      	str	r3, [r2, #12]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <LCD_SetCursor+0x458>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <LCD_SetCursor+0x458>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <LCD_SetCursor+0x458>)
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	611a      	str	r2, [r3, #16]
}
 8001196:	e097      	b.n	80012c8 <LCD_SetCursor+0x584>
 8001198:	2000020c 	.word	0x2000020c
 800119c:	40011000 	.word	0x40011000
 80011a0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	f245 5210 	movw	r2, #21776	; 0x5510
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d172      	bne.n	8001296 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011b2:	895b      	ldrh	r3, [r3, #10]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fcf3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <LCD_SetCursor+0x590>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <LCD_SetCursor+0x590>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <LCD_SetCursor+0x594>)
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <LCD_SetCursor+0x590>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <LCD_SetCursor+0x590>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <LCD_SetCursor+0x590>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011ea:	895b      	ldrh	r3, [r3, #10]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fcd5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <LCD_SetCursor+0x590>)
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <LCD_SetCursor+0x590>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <LCD_SetCursor+0x594>)
 800120a:	b2db      	uxtb	r3, r3
 800120c:	60d3      	str	r3, [r2, #12]
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <LCD_SetCursor+0x590>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <LCD_SetCursor+0x590>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <LCD_SetCursor+0x590>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <LCD_SetCursor+0x58c>)
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fcba 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <LCD_SetCursor+0x590>)
 800122e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <LCD_SetCursor+0x590>)
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <LCD_SetCursor+0x594>)
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <LCD_SetCursor+0x590>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <LCD_SetCursor+0x590>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <LCD_SetCursor+0x590>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <LCD_SetCursor+0x58c>)
 800125c:	899b      	ldrh	r3, [r3, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc9c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <LCD_SetCursor+0x590>)
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <LCD_SetCursor+0x590>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <LCD_SetCursor+0x594>)
 800127c:	b2db      	uxtb	r3, r3
 800127e:	60d3      	str	r3, [r2, #12]
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <LCD_SetCursor+0x590>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <LCD_SetCursor+0x590>)
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <LCD_SetCursor+0x590>)
 800128e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001292:	611a      	str	r2, [r3, #16]
}
 8001294:	e018      	b.n	80012c8 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <LCD_SetCursor+0x58c>)
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d106      	bne.n	80012ac <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b01      	subs	r3, #1
 80012aa:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012ae:	895b      	ldrh	r3, [r3, #10]
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fcff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012bc:	899b      	ldrh	r3, [r3, #12]
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcf8 	bl	8000cb8 <LCD_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80012f0:	799b      	ldrb	r3, [r3, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10b      	bne.n	800130e <LCD_Scan_Dir+0x32>
 80012f6:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80012fe:	4293      	cmp	r3, r2
 8001300:	d005      	beq.n	800130e <LCD_Scan_Dir+0x32>
 8001302:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	f641 1263 	movw	r2, #6499	; 0x1963
 800130a:	4293      	cmp	r3, r2
 800130c:	d109      	bne.n	8001322 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d134      	bne.n	8001380 <LCD_Scan_Dir+0xa4>
 8001316:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	f641 1263 	movw	r2, #6499	; 0x1963
 800131e:	4293      	cmp	r3, r2
 8001320:	d12e      	bne.n	8001380 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b07      	cmp	r3, #7
 8001326:	d82c      	bhi.n	8001382 <LCD_Scan_Dir+0xa6>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <LCD_Scan_Dir+0x54>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001351 	.word	0x08001351
 8001334:	08001357 	.word	0x08001357
 8001338:	0800135d 	.word	0x0800135d
 800133c:	08001363 	.word	0x08001363
 8001340:	08001369 	.word	0x08001369
 8001344:	0800136f 	.word	0x0800136f
 8001348:	08001375 	.word	0x08001375
 800134c:	0800137b 	.word	0x0800137b
		{
		case 0:
			dir = 6;
 8001350:	2306      	movs	r3, #6
 8001352:	71fb      	strb	r3, [r7, #7]
			break;
 8001354:	e015      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 8001356:	2307      	movs	r3, #7
 8001358:	71fb      	strb	r3, [r7, #7]
			break;
 800135a:	e012      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	71fb      	strb	r3, [r7, #7]
			break;
 8001360:	e00f      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 8001362:	2305      	movs	r3, #5
 8001364:	71fb      	strb	r3, [r7, #7]
			break;
 8001366:	e00c      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
			break;
 800136c:	e009      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
			break;
 8001372:	e006      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	71fb      	strb	r3, [r7, #7]
			break;
 8001378:	e003      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 800137a:	2302      	movs	r3, #2
 800137c:	71fb      	strb	r3, [r7, #7]
			break;
 800137e:	e000      	b.n	8001382 <LCD_Scan_Dir+0xa6>
		}
	}
 8001380:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001382:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001384:	889b      	ldrh	r3, [r3, #4]
 8001386:	f249 3241 	movw	r2, #37697	; 0x9341
 800138a:	4293      	cmp	r3, r2
 800138c:	d018      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
 800138e:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001390:	889b      	ldrh	r3, [r3, #4]
 8001392:	f646 0204 	movw	r2, #26628	; 0x6804
 8001396:	4293      	cmp	r3, r2
 8001398:	d012      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	f245 3210 	movw	r2, #21264	; 0x5310
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00c      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80013a8:	889b      	ldrh	r3, [r3, #4]
 80013aa:	f245 5210 	movw	r2, #21776	; 0x5510
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d006      	beq.n	80013c0 <LCD_Scan_Dir+0xe4>
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80013ba:	4293      	cmp	r3, r2
 80013bc:	f040 824f 	bne.w	800185e <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d835      	bhi.n	8001432 <LCD_Scan_Dir+0x156>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <LCD_Scan_Dir+0xf0>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001433 	.word	0x08001433
 80013d0:	080013ed 	.word	0x080013ed
 80013d4:	080013f7 	.word	0x080013f7
 80013d8:	08001401 	.word	0x08001401
 80013dc:	0800140b 	.word	0x0800140b
 80013e0:	08001415 	.word	0x08001415
 80013e4:	0800141f 	.word	0x0800141f
 80013e8:	08001429 	.word	0x08001429
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f2:	81fb      	strh	r3, [r7, #14]
			break;
 80013f4:	e01d      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fc:	81fb      	strh	r3, [r7, #14]
			break;
 80013fe:	e018      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001406:	81fb      	strh	r3, [r7, #14]
			break;
 8001408:	e013      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	81fb      	strh	r3, [r7, #14]
			break;
 8001412:	e00e      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800141a:	81fb      	strh	r3, [r7, #14]
			break;
 800141c:	e009      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001424:	81fb      	strh	r3, [r7, #14]
			break;
 8001426:	e004      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800142e:	81fb      	strh	r3, [r7, #14]
			break;
 8001430:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	f245 5210 	movw	r2, #21776	; 0x5510
 800143a:	4293      	cmp	r3, r2
 800143c:	d103      	bne.n	8001446 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800143e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001442:	81bb      	strh	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001446:	2336      	movs	r3, #54	; 0x36
 8001448:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001452:	4293      	cmp	r3, r2
 8001454:	d00f      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	f245 5210 	movw	r2, #21776	; 0x5510
 800145e:	4293      	cmp	r3, r2
 8001460:	d009      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	f641 1263 	movw	r2, #6499	; 0x1963
 800146a:	4293      	cmp	r3, r2
 800146c:	d003      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	f646 0204 	movw	r2, #26628	; 0x6804
 800147e:	4293      	cmp	r3, r2
 8001480:	d103      	bne.n	800148a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800148a:	89fa      	ldrh	r2, [r7, #14]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc11 	bl	8000cb8 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	f641 1263 	movw	r2, #6499	; 0x1963
 800149e:	4293      	cmp	r3, r2
 80014a0:	d028      	beq.n	80014f4 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d21d      	bcs.n	80014f4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c0:	885a      	ldrh	r2, [r3, #2]
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014c6:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c8:	897b      	ldrh	r3, [r7, #10]
 80014ca:	8053      	strh	r3, [r2, #2]
 80014cc:	e012      	b.n	80014f4 <LCD_Scan_Dir+0x218>
 80014ce:	bf00      	nop
 80014d0:	2000020c 	.word	0x2000020c
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014da:	885b      	ldrh	r3, [r3, #2]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d909      	bls.n	80014f4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014e8:	885a      	ldrh	r2, [r3, #2]
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014ec:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014ee:	4a79      	ldr	r2, [pc, #484]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80014f4:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	f245 5210 	movw	r2, #21776	; 0x5510
 80014fc:	4293      	cmp	r3, r2
 80014fe:	f040 80ef 	bne.w	80016e0 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001504:	895b      	ldrh	r3, [r3, #10]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb4a 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <LCD_Scan_Dir+0x400>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001538:	895b      	ldrh	r3, [r3, #10]
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fb2e 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001544:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001570:	895b      	ldrh	r3, [r3, #10]
 8001572:	3302      	adds	r3, #2
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb12 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800157e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	121a      	asrs	r2, r3, #8
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015ae:	895b      	ldrh	r3, [r3, #10]
 80015b0:	3303      	adds	r3, #3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff faf3 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a42      	ldr	r2, [pc, #264]	; (80016dc <LCD_Scan_Dir+0x400>)
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	60d3      	str	r3, [r2, #12]
 80015d6:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015ec:	899b      	ldrh	r3, [r3, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fad6 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001620:	899b      	ldrh	r3, [r3, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff faba 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800162e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <LCD_Scan_Dir+0x400>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001658:	899b      	ldrh	r3, [r3, #12]
 800165a:	3302      	adds	r3, #2
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa9e 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001676:	885b      	ldrh	r3, [r3, #2]
 8001678:	3b01      	subs	r3, #1
 800167a:	121a      	asrs	r2, r3, #8
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <LCD_Scan_Dir+0x400>)
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001696:	899b      	ldrh	r3, [r3, #12]
 8001698:	3303      	adds	r3, #3
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa7f 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <LCD_Scan_Dir+0x400>)
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	60d3      	str	r3, [r2, #12]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016d2:	e10b      	b.n	80018ec <LCD_Scan_Dir+0x610>
 80016d4:	2000020c 	.word	0x2000020c
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <LCD_Scan_Dir+0x618>)
 80016e2:	895b      	ldrh	r3, [r3, #10]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa5b 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <LCD_Scan_Dir+0x620>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001714:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b71      	ldr	r3, [pc, #452]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <LCD_Scan_Dir+0x618>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	121a      	asrs	r2, r3, #8
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <LCD_Scan_Dir+0x618>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60d3      	str	r3, [r2, #12]
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <LCD_Scan_Dir+0x618>)
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f9fc 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <LCD_Scan_Dir+0x620>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	4b4e      	ldr	r3, [pc, #312]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <LCD_Scan_Dir+0x620>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <LCD_Scan_Dir+0x618>)
 800180e:	885b      	ldrh	r3, [r3, #2]
 8001810:	3b01      	subs	r3, #1
 8001812:	121a      	asrs	r2, r3, #8
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <LCD_Scan_Dir+0x618>)
 800183e:	885b      	ldrh	r3, [r3, #2]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001844:	b2db      	uxtb	r3, r3
 8001846:	60d3      	str	r3, [r2, #12]
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185a:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800185c:	e046      	b.n	80018ec <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d836      	bhi.n	80018d2 <LCD_Scan_Dir+0x5f6>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <LCD_Scan_Dir+0x590>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800188d 	.word	0x0800188d
 8001870:	08001897 	.word	0x08001897
 8001874:	080018a1 	.word	0x080018a1
 8001878:	080018d3 	.word	0x080018d3
 800187c:	080018ab 	.word	0x080018ab
 8001880:	080018b5 	.word	0x080018b5
 8001884:	080018bf 	.word	0x080018bf
 8001888:	080018c9 	.word	0x080018c9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001892:	81fb      	strh	r3, [r7, #14]
			break;
 8001894:	e01d      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	81fb      	strh	r3, [r7, #14]
			break;
 800189e:	e018      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	81fb      	strh	r3, [r7, #14]
			break;
 80018a8:	e013      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80018b0:	81fb      	strh	r3, [r7, #14]
			break;
 80018b2:	e00e      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80018ba:	81fb      	strh	r3, [r7, #14]
			break;
 80018bc:	e009      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	f043 0318 	orr.w	r3, r3, #24
 80018c4:	81fb      	strh	r3, [r7, #14]
			break;
 80018c6:	e004      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	81fb      	strh	r3, [r7, #14]
			break;
 80018d0:	bf00      	nop
		}
		dirreg = 0X03;
 80018d2:	2303      	movs	r3, #3
 80018d4:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80018de:	89fa      	ldrh	r2, [r7, #14]
 80018e0:	89bb      	ldrh	r3, [r7, #12]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f9e7 	bl	8000cb8 <LCD_WriteReg>
	}
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000020c 	.word	0x2000020c
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001912:	4b75      	ldr	r3, [pc, #468]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001914:	889b      	ldrh	r3, [r3, #4]
 8001916:	f249 3241 	movw	r2, #37697	; 0x9341
 800191a:	4293      	cmp	r3, r2
 800191c:	d005      	beq.n	800192a <LCD_Fast_DrawPoint+0x2a>
 800191e:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	f245 3210 	movw	r2, #21264	; 0x5310
 8001926:	4293      	cmp	r3, r2
 8001928:	d164      	bne.n	80019f4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 800192a:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 800192c:	895b      	ldrh	r3, [r3, #10]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f936 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001934:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800193e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	4b65      	ldr	r3, [pc, #404]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	4b64      	ldr	r3, [pc, #400]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	4b60      	ldr	r3, [pc, #384]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001976:	b2db      	uxtb	r3, r3
 8001978:	60d3      	str	r3, [r2, #12]
 800197a:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001982:	2280      	movs	r2, #128	; 0x80
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	4b59      	ldr	r3, [pc, #356]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001990:	899b      	ldrh	r3, [r3, #12]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f904 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001998:	4b54      	ldr	r3, [pc, #336]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 800199a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	611a      	str	r2, [r3, #16]
 80019be:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	4a45      	ldr	r2, [pc, #276]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	60d3      	str	r3, [r2, #12]
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	4b41      	ldr	r3, [pc, #260]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	4b40      	ldr	r3, [pc, #256]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	e1e6      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	f245 5210 	movw	r2, #21776	; 0x5510
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d179      	bne.n	8001af4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a02:	895b      	ldrh	r3, [r3, #10]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f8cb 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	4b30      	ldr	r3, [pc, #192]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a36:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a3a:	895b      	ldrh	r3, [r3, #10]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f8ad 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	60d3      	str	r3, [r2, #12]
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	615a      	str	r2, [r3, #20]
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a70:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001a74:	899b      	ldrh	r3, [r3, #12]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f892 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <LCD_Fast_DrawPoint+0x1e8>)
 8001aac:	899b      	ldrh	r3, [r3, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f874 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	611a      	str	r2, [r3, #16]
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <LCD_Fast_DrawPoint+0x1f0>)
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	60d3      	str	r3, [r2, #12]
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <LCD_Fast_DrawPoint+0x1ec>)
 8001ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	e16d      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
 8001ae6:	bf00      	nop
 8001ae8:	2000020c 	.word	0x2000020c
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001af6:	889b      	ldrh	r3, [r3, #4]
 8001af8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001afc:	4293      	cmp	r3, r2
 8001afe:	f040 80d1 	bne.w	8001ca4 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001b04:	799b      	ldrb	r3, [r3, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001b1a:	895b      	ldrh	r3, [r3, #10]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f83f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001b22:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	60d3      	str	r3, [r2, #12]
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001baa:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4a38      	ldr	r2, [pc, #224]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	60d3      	str	r3, [r2, #12]
 8001bc2:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	4b33      	ldr	r3, [pc, #204]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <LCD_Fast_DrawPoint+0x398>)
 8001bd8:	899b      	ldrh	r3, [r3, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe ffe0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	88bb      	ldrh	r3, [r7, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	60d3      	str	r3, [r2, #12]
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	615a      	str	r2, [r3, #20]
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <LCD_Fast_DrawPoint+0x3a0>)
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	60d3      	str	r3, [r2, #12]
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c82:	2280      	movs	r2, #128	; 0x80
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <LCD_Fast_DrawPoint+0x39c>)
 8001c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	e095      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
 8001c96:	bf00      	nop
 8001c98:	2000020c 	.word	0x2000020c
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d16f      	bne.n	8001d90 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001cba:	881a      	ldrh	r2, [r3, #0]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001cc8:	895b      	ldrh	r3, [r3, #10]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff68 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	60d3      	str	r3, [r2, #12]
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	611a      	str	r2, [r3, #16]
 8001d22:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001d2c:	899b      	ldrh	r3, [r3, #12]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ff36 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	611a      	str	r2, [r3, #16]
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	88bb      	ldrh	r3, [r7, #4]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d70:	615a      	str	r2, [r3, #20]
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	60d3      	str	r3, [r2, #12]
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	615a      	str	r2, [r3, #20]
 8001d80:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	e018      	b.n	8001dc2 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001d92:	799b      	ldrb	r3, [r3, #6]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001da8:	895b      	ldrh	r3, [r3, #10]
 8001daa:	88fa      	ldrh	r2, [r7, #6]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001db6:	899b      	ldrh	r3, [r3, #12]
 8001db8:	88ba      	ldrh	r2, [r7, #4]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe ff7b 	bl	8000cb8 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <LCD_Fast_DrawPoint+0x520>)
 8001dd4:	891a      	ldrh	r2, [r3, #8]
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001dd8:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LCD_Fast_DrawPoint+0x528>)
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	60d3      	str	r3, [r2, #12]
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <LCD_Fast_DrawPoint+0x524>)
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	611a      	str	r2, [r3, #16]
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000020c 	.word	0x2000020c
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	00000000 	.word	0x00000000

08001e30 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e3a:	20be      	movs	r0, #190	; 0xbe
 8001e3c:	f7fe feb0 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001e52:	2205      	movs	r2, #5
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	615a      	str	r2, [r3, #20]
 8001e5c:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e5e:	2280      	movs	r2, #128	; 0x80
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e68:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb2d 	bl	80004dc <__aeabi_i2d>
 8001e82:	a339      	add	r3, pc, #228	; (adr r3, 8001f68 <LCD_SSD_BackLightSet+0x138>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb92 	bl	80005b0 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4c38      	ldr	r4, [pc, #224]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7fe fe63 	bl	8000b60 <__aeabi_d2uiz>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60e3      	str	r3, [r4, #12]
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eda:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f04:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	615a      	str	r2, [r3, #20]
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <LCD_SSD_BackLightSet+0x144>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <LCD_SSD_BackLightSet+0x140>)
 8001f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	66666666 	.word	0x66666666
 8001f6c:	40046666 	.word	0x40046666
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40010c00 	.word	0x40010c00

08001f78 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d177      	bne.n	8002078 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001f88:	4b80      	ldr	r3, [pc, #512]	; (800218c <LCD_Display_Dir+0x214>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	; (800218c <LCD_Display_Dir+0x214>)
 8001f90:	22f0      	movs	r2, #240	; 0xf0
 8001f92:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f94:	4b7d      	ldr	r3, [pc, #500]	; (800218c <LCD_Display_Dir+0x214>)
 8001f96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f9a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	; (800218c <LCD_Display_Dir+0x214>)
 8001f9e:	889b      	ldrh	r3, [r3, #4]
 8001fa0:	f249 3241 	movw	r2, #37697	; 0x9341
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00b      	beq.n	8001fc0 <LCD_Display_Dir+0x48>
 8001fa8:	4b78      	ldr	r3, [pc, #480]	; (800218c <LCD_Display_Dir+0x214>)
 8001faa:	889b      	ldrh	r3, [r3, #4]
 8001fac:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d005      	beq.n	8001fc0 <LCD_Display_Dir+0x48>
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <LCD_Display_Dir+0x214>)
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d11e      	bne.n	8001ffe <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001fc0:	4b72      	ldr	r3, [pc, #456]	; (800218c <LCD_Display_Dir+0x214>)
 8001fc2:	222c      	movs	r2, #44	; 0x2c
 8001fc4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001fc6:	4b71      	ldr	r3, [pc, #452]	; (800218c <LCD_Display_Dir+0x214>)
 8001fc8:	222a      	movs	r2, #42	; 0x2a
 8001fca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	; (800218c <LCD_Display_Dir+0x214>)
 8001fce:	222b      	movs	r2, #43	; 0x2b
 8001fd0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	; (800218c <LCD_Display_Dir+0x214>)
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d006      	beq.n	8001fec <LCD_Display_Dir+0x74>
 8001fde:	4b6b      	ldr	r3, [pc, #428]	; (800218c <LCD_Display_Dir+0x214>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f040 80c7 	bne.w	800217a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <LCD_Display_Dir+0x214>)
 8001fee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ff2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <LCD_Display_Dir+0x214>)
 8001ff6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ffa:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ffc:	e0bd      	b.n	800217a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <LCD_Display_Dir+0x214>)
 8002000:	889b      	ldrh	r3, [r3, #4]
 8002002:	f245 5210 	movw	r2, #21776	; 0x5510
 8002006:	4293      	cmp	r3, r2
 8002008:	d114      	bne.n	8002034 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 800200a:	4b60      	ldr	r3, [pc, #384]	; (800218c <LCD_Display_Dir+0x214>)
 800200c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002010:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002012:	4b5e      	ldr	r3, [pc, #376]	; (800218c <LCD_Display_Dir+0x214>)
 8002014:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002018:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <LCD_Display_Dir+0x214>)
 800201c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002020:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8002022:	4b5a      	ldr	r3, [pc, #360]	; (800218c <LCD_Display_Dir+0x214>)
 8002024:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002028:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <LCD_Display_Dir+0x214>)
 800202c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002030:	805a      	strh	r2, [r3, #2]
 8002032:	e0a3      	b.n	800217c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <LCD_Display_Dir+0x214>)
 8002036:	889b      	ldrh	r3, [r3, #4]
 8002038:	f641 1263 	movw	r2, #6499	; 0x1963
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <LCD_Display_Dir+0x214>)
 8002042:	222c      	movs	r2, #44	; 0x2c
 8002044:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8002046:	4b51      	ldr	r3, [pc, #324]	; (800218c <LCD_Display_Dir+0x214>)
 8002048:	222b      	movs	r2, #43	; 0x2b
 800204a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <LCD_Display_Dir+0x214>)
 800204e:	222a      	movs	r2, #42	; 0x2a
 8002050:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <LCD_Display_Dir+0x214>)
 8002054:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002058:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <LCD_Display_Dir+0x214>)
 800205c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002060:	805a      	strh	r2, [r3, #2]
 8002062:	e08b      	b.n	800217c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <LCD_Display_Dir+0x214>)
 8002066:	2222      	movs	r2, #34	; 0x22
 8002068:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800206a:	4b48      	ldr	r3, [pc, #288]	; (800218c <LCD_Display_Dir+0x214>)
 800206c:	2220      	movs	r2, #32
 800206e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <LCD_Display_Dir+0x214>)
 8002072:	2221      	movs	r2, #33	; 0x21
 8002074:	819a      	strh	r2, [r3, #12]
 8002076:	e081      	b.n	800217c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002078:	4b44      	ldr	r3, [pc, #272]	; (800218c <LCD_Display_Dir+0x214>)
 800207a:	2201      	movs	r2, #1
 800207c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <LCD_Display_Dir+0x214>)
 8002080:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002084:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <LCD_Display_Dir+0x214>)
 8002088:	22f0      	movs	r2, #240	; 0xf0
 800208a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800208c:	4b3f      	ldr	r3, [pc, #252]	; (800218c <LCD_Display_Dir+0x214>)
 800208e:	889b      	ldrh	r3, [r3, #4]
 8002090:	f249 3241 	movw	r2, #37697	; 0x9341
 8002094:	4293      	cmp	r3, r2
 8002096:	d005      	beq.n	80020a4 <LCD_Display_Dir+0x12c>
 8002098:	4b3c      	ldr	r3, [pc, #240]	; (800218c <LCD_Display_Dir+0x214>)
 800209a:	889b      	ldrh	r3, [r3, #4]
 800209c:	f245 3210 	movw	r2, #21264	; 0x5310
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d109      	bne.n	80020b8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <LCD_Display_Dir+0x214>)
 80020a6:	222c      	movs	r2, #44	; 0x2c
 80020a8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <LCD_Display_Dir+0x214>)
 80020ac:	222a      	movs	r2, #42	; 0x2a
 80020ae:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <LCD_Display_Dir+0x214>)
 80020b2:	222b      	movs	r2, #43	; 0x2b
 80020b4:	819a      	strh	r2, [r3, #12]
 80020b6:	e04b      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <LCD_Display_Dir+0x214>)
 80020ba:	889b      	ldrh	r3, [r3, #4]
 80020bc:	f646 0204 	movw	r2, #26628	; 0x6804
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d109      	bne.n	80020d8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <LCD_Display_Dir+0x214>)
 80020c6:	222c      	movs	r2, #44	; 0x2c
 80020c8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <LCD_Display_Dir+0x214>)
 80020cc:	222b      	movs	r2, #43	; 0x2b
 80020ce:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <LCD_Display_Dir+0x214>)
 80020d2:	222a      	movs	r2, #42	; 0x2a
 80020d4:	819a      	strh	r2, [r3, #12]
 80020d6:	e03b      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <LCD_Display_Dir+0x214>)
 80020da:	889b      	ldrh	r3, [r3, #4]
 80020dc:	f245 5210 	movw	r2, #21776	; 0x5510
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d114      	bne.n	800210e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <LCD_Display_Dir+0x214>)
 80020e6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80020ea:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <LCD_Display_Dir+0x214>)
 80020ee:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80020f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <LCD_Display_Dir+0x214>)
 80020f6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80020fa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <LCD_Display_Dir+0x214>)
 80020fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002102:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <LCD_Display_Dir+0x214>)
 8002106:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800210a:	805a      	strh	r2, [r3, #2]
 800210c:	e020      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <LCD_Display_Dir+0x214>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	f641 1263 	movw	r2, #6499	; 0x1963
 8002116:	4293      	cmp	r3, r2
 8002118:	d111      	bne.n	800213e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <LCD_Display_Dir+0x214>)
 800211c:	222c      	movs	r2, #44	; 0x2c
 800211e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <LCD_Display_Dir+0x214>)
 8002122:	222a      	movs	r2, #42	; 0x2a
 8002124:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <LCD_Display_Dir+0x214>)
 8002128:	222b      	movs	r2, #43	; 0x2b
 800212a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <LCD_Display_Dir+0x214>)
 800212e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002132:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <LCD_Display_Dir+0x214>)
 8002136:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800213a:	805a      	strh	r2, [r3, #2]
 800213c:	e008      	b.n	8002150 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <LCD_Display_Dir+0x214>)
 8002140:	2222      	movs	r2, #34	; 0x22
 8002142:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <LCD_Display_Dir+0x214>)
 8002146:	2221      	movs	r2, #33	; 0x21
 8002148:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <LCD_Display_Dir+0x214>)
 800214c:	2220      	movs	r2, #32
 800214e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <LCD_Display_Dir+0x214>)
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	f646 0204 	movw	r2, #26628	; 0x6804
 8002158:	4293      	cmp	r3, r2
 800215a:	d005      	beq.n	8002168 <LCD_Display_Dir+0x1f0>
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <LCD_Display_Dir+0x214>)
 800215e:	889b      	ldrh	r3, [r3, #4]
 8002160:	f245 3210 	movw	r2, #21264	; 0x5310
 8002164:	4293      	cmp	r3, r2
 8002166:	d109      	bne.n	800217c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <LCD_Display_Dir+0x214>)
 800216a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800216e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <LCD_Display_Dir+0x214>)
 8002172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002176:	805a      	strh	r2, [r3, #2]
 8002178:	e000      	b.n	800217c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800217a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff f8ad 	bl	80012dc <LCD_Scan_Dir>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000020c 	.word	0x2000020c

08002190 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002196:	4b90      	ldr	r3, [pc, #576]	; (80023d8 <LCD_Init+0x248>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	4a8f      	ldr	r2, [pc, #572]	; (80023d8 <LCD_Init+0x248>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6193      	str	r3, [r2, #24]
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <LCD_Init+0x248>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 80021ae:	4b8a      	ldr	r3, [pc, #552]	; (80023d8 <LCD_Init+0x248>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4a89      	ldr	r2, [pc, #548]	; (80023d8 <LCD_Init+0x248>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6193      	str	r3, [r2, #24]
 80021ba:	4b87      	ldr	r3, [pc, #540]	; (80023d8 <LCD_Init+0x248>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80021c6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80021ca:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80021cc:	2301      	movs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80021d4:	2303      	movs	r3, #3
 80021d6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	487f      	ldr	r0, [pc, #508]	; (80023dc <LCD_Init+0x24c>)
 80021e0:	f005 fae4 	bl	80077ac <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	487b      	ldr	r0, [pc, #492]	; (80023e0 <LCD_Init+0x250>)
 80021f2:	f005 fadb 	bl	80077ac <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80021f6:	2032      	movs	r0, #50	; 0x32
 80021f8:	f004 fc3e 	bl	8006a78 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fd5a 	bl	8000cb8 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002204:	2032      	movs	r0, #50	; 0x32
 8002206:	f004 fc37 	bl	8006a78 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fd7e 	bl	8000d0c <LCD_ReadReg>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <LCD_Init+0x254>)
 8002216:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002218:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <LCD_Init+0x254>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	2bfe      	cmp	r3, #254	; 0xfe
 800221e:	d90b      	bls.n	8002238 <LCD_Init+0xa8>
 8002220:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <LCD_Init+0x254>)
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	4293      	cmp	r3, r2
 800222a:	d005      	beq.n	8002238 <LCD_Init+0xa8>
 800222c:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <LCD_Init+0x254>)
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002234:	f040 80c8 	bne.w	80023c8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002238:	20d3      	movs	r0, #211	; 0xd3
 800223a:	f7fe fcb1 	bl	8000ba0 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800223e:	f7fe fcf7 	bl	8000c30 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002242:	f7fe fcf5 	bl	8000c30 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002246:	f7fe fcf3 	bl	8000c30 <LCD_RD_DATA>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <LCD_Init+0x254>)
 8002250:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <LCD_Init+0x254>)
 8002254:	889b      	ldrh	r3, [r3, #4]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <LCD_Init+0x254>)
 800225c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800225e:	f7fe fce7 	bl	8000c30 <LCD_RD_DATA>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <LCD_Init+0x254>)
 8002268:	889b      	ldrh	r3, [r3, #4]
 800226a:	4313      	orrs	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <LCD_Init+0x254>)
 8002270:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <LCD_Init+0x254>)
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	f249 3241 	movw	r2, #37697	; 0x9341
 800227a:	4293      	cmp	r3, r2
 800227c:	f000 80a4 	beq.w	80023c8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002280:	20bf      	movs	r0, #191	; 0xbf
 8002282:	f7fe fc8d 	bl	8000ba0 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002286:	f7fe fcd3 	bl	8000c30 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800228a:	f7fe fcd1 	bl	8000c30 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800228e:	f7fe fccf 	bl	8000c30 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002292:	f7fe fccd 	bl	8000c30 <LCD_RD_DATA>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <LCD_Init+0x254>)
 800229c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <LCD_Init+0x254>)
 80022a0:	889b      	ldrh	r3, [r3, #4]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <LCD_Init+0x254>)
 80022a8:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80022aa:	f7fe fcc1 	bl	8000c30 <LCD_RD_DATA>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <LCD_Init+0x254>)
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <LCD_Init+0x254>)
 80022bc:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <LCD_Init+0x254>)
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	f646 0204 	movw	r2, #26628	; 0x6804
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d07e      	beq.n	80023c8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80022ca:	20d4      	movs	r0, #212	; 0xd4
 80022cc:	f7fe fc68 	bl	8000ba0 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80022d0:	f7fe fcae 	bl	8000c30 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80022d4:	f7fe fcac 	bl	8000c30 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80022d8:	f7fe fcaa 	bl	8000c30 <LCD_RD_DATA>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <LCD_Init+0x254>)
 80022e2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <LCD_Init+0x254>)
 80022e6:	889b      	ldrh	r3, [r3, #4]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <LCD_Init+0x254>)
 80022ee:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80022f0:	f7fe fc9e 	bl	8000c30 <LCD_RD_DATA>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <LCD_Init+0x254>)
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <LCD_Init+0x254>)
 8002302:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002304:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <LCD_Init+0x254>)
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	f245 3210 	movw	r2, #21264	; 0x5310
 800230c:	4293      	cmp	r3, r2
 800230e:	d05b      	beq.n	80023c8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002310:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002314:	f7fe fc44 	bl	8000ba0 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002318:	f7fe fc8a 	bl	8000c30 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800231c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002320:	f7fe fc3e 	bl	8000ba0 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002324:	f7fe fc84 	bl	8000c30 <LCD_RD_DATA>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <LCD_Init+0x254>)
 800232e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002330:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <LCD_Init+0x254>)
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <LCD_Init+0x254>)
 800233a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800233c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002340:	f7fe fc2e 	bl	8000ba0 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002344:	f7fe fc74 	bl	8000c30 <LCD_RD_DATA>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <LCD_Init+0x254>)
 800234e:	889b      	ldrh	r3, [r3, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <LCD_Init+0x254>)
 8002356:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <LCD_Init+0x254>)
 800235a:	889b      	ldrh	r3, [r3, #4]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	d103      	bne.n	800236a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <LCD_Init+0x254>)
 8002364:	f245 5210 	movw	r2, #21776	; 0x5510
 8002368:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <LCD_Init+0x254>)
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002372:	4293      	cmp	r3, r2
 8002374:	d028      	beq.n	80023c8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002376:	20a1      	movs	r0, #161	; 0xa1
 8002378:	f7fe fc12 	bl	8000ba0 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800237c:	f7fe fc58 	bl	8000c30 <LCD_RD_DATA>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <LCD_Init+0x254>)
 8002386:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002388:	f7fe fc52 	bl	8000c30 <LCD_RD_DATA>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <LCD_Init+0x254>)
 8002392:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <LCD_Init+0x254>)
 8002396:	889b      	ldrh	r3, [r3, #4]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <LCD_Init+0x254>)
 800239e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80023a0:	f7fe fc46 	bl	8000c30 <LCD_RD_DATA>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <LCD_Init+0x254>)
 80023aa:	889b      	ldrh	r3, [r3, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <LCD_Init+0x254>)
 80023b2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <LCD_Init+0x254>)
 80023b6:	889b      	ldrh	r3, [r3, #4]
 80023b8:	f245 7261 	movw	r2, #22369	; 0x5761
 80023bc:	4293      	cmp	r3, r2
 80023be:	d103      	bne.n	80023c8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <LCD_Init+0x254>)
 80023c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80023c6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <LCD_Init+0x254>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	f249 3241 	movw	r2, #37697	; 0x9341
 80023d0:	4293      	cmp	r3, r2
 80023d2:	f040 811f 	bne.w	8002614 <LCD_Init+0x484>
 80023d6:	e007      	b.n	80023e8 <LCD_Init+0x258>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40011000 	.word	0x40011000
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	2000020c 	.word	0x2000020c
			{
		LCD_WR_REG(0xCF);
 80023e8:	20cf      	movs	r0, #207	; 0xcf
 80023ea:	f7fe fbd9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fbfa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80023f4:	20c1      	movs	r0, #193	; 0xc1
 80023f6:	f7fe fbf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80023fa:	2030      	movs	r0, #48	; 0x30
 80023fc:	f7fe fbf4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002400:	20ed      	movs	r0, #237	; 0xed
 8002402:	f7fe fbcd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f7fe fbee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800240c:	2003      	movs	r0, #3
 800240e:	f7fe fbeb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002412:	2012      	movs	r0, #18
 8002414:	f7fe fbe8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002418:	2081      	movs	r0, #129	; 0x81
 800241a:	f7fe fbe5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800241e:	20e8      	movs	r0, #232	; 0xe8
 8002420:	f7fe fbbe 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002424:	2085      	movs	r0, #133	; 0x85
 8002426:	f7fe fbdf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800242a:	2010      	movs	r0, #16
 800242c:	f7fe fbdc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002430:	207a      	movs	r0, #122	; 0x7a
 8002432:	f7fe fbd9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002436:	20cb      	movs	r0, #203	; 0xcb
 8002438:	f7fe fbb2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800243c:	2039      	movs	r0, #57	; 0x39
 800243e:	f7fe fbd3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	f7fe fbd0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fbcd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800244e:	2034      	movs	r0, #52	; 0x34
 8002450:	f7fe fbca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002454:	2002      	movs	r0, #2
 8002456:	f7fe fbc7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800245a:	20f7      	movs	r0, #247	; 0xf7
 800245c:	f7fe fba0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002460:	2020      	movs	r0, #32
 8002462:	f7fe fbc1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002466:	20ea      	movs	r0, #234	; 0xea
 8002468:	f7fe fb9a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fbbb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe fbb8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002478:	20c0      	movs	r0, #192	; 0xc0
 800247a:	f7fe fb91 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800247e:	201b      	movs	r0, #27
 8002480:	f7fe fbb2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002484:	20c1      	movs	r0, #193	; 0xc1
 8002486:	f7fe fb8b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe fbac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002490:	20c5      	movs	r0, #197	; 0xc5
 8002492:	f7fe fb85 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002496:	2030      	movs	r0, #48	; 0x30
 8002498:	f7fe fba6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800249c:	2030      	movs	r0, #48	; 0x30
 800249e:	f7fe fba3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80024a2:	20c7      	movs	r0, #199	; 0xc7
 80024a4:	f7fe fb7c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80024a8:	20b7      	movs	r0, #183	; 0xb7
 80024aa:	f7fe fb9d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80024ae:	2036      	movs	r0, #54	; 0x36
 80024b0:	f7fe fb76 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80024b4:	2048      	movs	r0, #72	; 0x48
 80024b6:	f7fe fb97 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80024ba:	203a      	movs	r0, #58	; 0x3a
 80024bc:	f7fe fb70 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80024c0:	2055      	movs	r0, #85	; 0x55
 80024c2:	f7fe fb91 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80024c6:	20b1      	movs	r0, #177	; 0xb1
 80024c8:	f7fe fb6a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fb8b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80024d2:	201a      	movs	r0, #26
 80024d4:	f7fe fb88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80024d8:	20b6      	movs	r0, #182	; 0xb6
 80024da:	f7fe fb61 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80024de:	200a      	movs	r0, #10
 80024e0:	f7fe fb82 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80024e4:	20a2      	movs	r0, #162	; 0xa2
 80024e6:	f7fe fb7f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80024ea:	20f2      	movs	r0, #242	; 0xf2
 80024ec:	f7fe fb58 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fb79 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80024f6:	2026      	movs	r0, #38	; 0x26
 80024f8:	f7fe fb52 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe fb73 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002502:	20e0      	movs	r0, #224	; 0xe0
 8002504:	f7fe fb4c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002508:	200f      	movs	r0, #15
 800250a:	f7fe fb6d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800250e:	202a      	movs	r0, #42	; 0x2a
 8002510:	f7fe fb6a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002514:	2028      	movs	r0, #40	; 0x28
 8002516:	f7fe fb67 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800251a:	2008      	movs	r0, #8
 800251c:	f7fe fb64 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002520:	200e      	movs	r0, #14
 8002522:	f7fe fb61 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002526:	2008      	movs	r0, #8
 8002528:	f7fe fb5e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800252c:	2054      	movs	r0, #84	; 0x54
 800252e:	f7fe fb5b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002532:	20a9      	movs	r0, #169	; 0xa9
 8002534:	f7fe fb58 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002538:	2043      	movs	r0, #67	; 0x43
 800253a:	f7fe fb55 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800253e:	200a      	movs	r0, #10
 8002540:	f7fe fb52 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002544:	200f      	movs	r0, #15
 8002546:	f7fe fb4f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe fb4c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fb49 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe fb46 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fb43 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002562:	20e1      	movs	r0, #225	; 0xe1
 8002564:	f7fe fb1c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe fb3d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800256e:	2015      	movs	r0, #21
 8002570:	f7fe fb3a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002574:	2017      	movs	r0, #23
 8002576:	f7fe fb37 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800257a:	2007      	movs	r0, #7
 800257c:	f7fe fb34 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002580:	2011      	movs	r0, #17
 8002582:	f7fe fb31 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002586:	2006      	movs	r0, #6
 8002588:	f7fe fb2e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800258c:	202b      	movs	r0, #43	; 0x2b
 800258e:	f7fe fb2b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002592:	2056      	movs	r0, #86	; 0x56
 8002594:	f7fe fb28 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002598:	203c      	movs	r0, #60	; 0x3c
 800259a:	f7fe fb25 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800259e:	2005      	movs	r0, #5
 80025a0:	f7fe fb22 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80025a4:	2010      	movs	r0, #16
 80025a6:	f7fe fb1f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80025aa:	200f      	movs	r0, #15
 80025ac:	f7fe fb1c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80025b0:	203f      	movs	r0, #63	; 0x3f
 80025b2:	f7fe fb19 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80025b6:	203f      	movs	r0, #63	; 0x3f
 80025b8:	f7fe fb16 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80025bc:	200f      	movs	r0, #15
 80025be:	f7fe fb13 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80025c2:	202b      	movs	r0, #43	; 0x2b
 80025c4:	f7fe faec 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe fb0d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fb0a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fe fb07 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80025da:	203f      	movs	r0, #63	; 0x3f
 80025dc:	f7fe fb04 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80025e0:	202a      	movs	r0, #42	; 0x2a
 80025e2:	f7fe fadd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe fafe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe fafb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe faf8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80025f8:	20ef      	movs	r0, #239	; 0xef
 80025fa:	f7fe faf5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80025fe:	2011      	movs	r0, #17
 8002600:	f7fe face 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(120);
 8002604:	2078      	movs	r0, #120	; 0x78
 8002606:	f004 fa37 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800260a:	2029      	movs	r0, #41	; 0x29
 800260c:	f7fe fac8 	bl	8000ba0 <LCD_WR_REG>
 8002610:	f003 bcd8 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002614:	4b58      	ldr	r3, [pc, #352]	; (8002778 <LCD_Init+0x5e8>)
 8002616:	889b      	ldrh	r3, [r3, #4]
 8002618:	f646 0204 	movw	r2, #26628	; 0x6804
 800261c:	4293      	cmp	r3, r2
 800261e:	f040 80ad 	bne.w	800277c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002622:	2011      	movs	r0, #17
 8002624:	f7fe fabc 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(20);
 8002628:	2014      	movs	r0, #20
 800262a:	f004 fa25 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800262e:	20d0      	movs	r0, #208	; 0xd0
 8002630:	f7fe fab6 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002634:	2007      	movs	r0, #7
 8002636:	f7fe fad7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800263a:	2042      	movs	r0, #66	; 0x42
 800263c:	f7fe fad4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002640:	201d      	movs	r0, #29
 8002642:	f7fe fad1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002646:	20d1      	movs	r0, #209	; 0xd1
 8002648:	f7fe faaa 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe facb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002652:	201a      	movs	r0, #26
 8002654:	f7fe fac8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002658:	2009      	movs	r0, #9
 800265a:	f7fe fac5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800265e:	20d2      	movs	r0, #210	; 0xd2
 8002660:	f7fe fa9e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002664:	2001      	movs	r0, #1
 8002666:	f7fe fabf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800266a:	2022      	movs	r0, #34	; 0x22
 800266c:	f7fe fabc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002670:	20c0      	movs	r0, #192	; 0xc0
 8002672:	f7fe fa95 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002676:	2010      	movs	r0, #16
 8002678:	f7fe fab6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800267c:	203b      	movs	r0, #59	; 0x3b
 800267e:	f7fe fab3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe fab0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002688:	2002      	movs	r0, #2
 800268a:	f7fe faad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800268e:	2011      	movs	r0, #17
 8002690:	f7fe faaa 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002694:	20c5      	movs	r0, #197	; 0xc5
 8002696:	f7fe fa83 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800269a:	2003      	movs	r0, #3
 800269c:	f7fe faa4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80026a0:	20c8      	movs	r0, #200	; 0xc8
 80026a2:	f7fe fa7d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe fa9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80026ac:	2025      	movs	r0, #37	; 0x25
 80026ae:	f7fe fa9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80026b2:	2021      	movs	r0, #33	; 0x21
 80026b4:	f7fe fa98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80026b8:	2005      	movs	r0, #5
 80026ba:	f7fe fa95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe fa92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80026c4:	200a      	movs	r0, #10
 80026c6:	f7fe fa8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80026ca:	2065      	movs	r0, #101	; 0x65
 80026cc:	f7fe fa8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80026d0:	2025      	movs	r0, #37	; 0x25
 80026d2:	f7fe fa89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80026d6:	2077      	movs	r0, #119	; 0x77
 80026d8:	f7fe fa86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80026dc:	2050      	movs	r0, #80	; 0x50
 80026de:	f7fe fa83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f7fe fa80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fa7d 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80026ee:	20f8      	movs	r0, #248	; 0xf8
 80026f0:	f7fe fa56 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7fe fa77 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80026fa:	20fe      	movs	r0, #254	; 0xfe
 80026fc:	f7fe fa50 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe fa71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002706:	2002      	movs	r0, #2
 8002708:	f7fe fa6e 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800270c:	2020      	movs	r0, #32
 800270e:	f7fe fa47 	bl	8000ba0 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002712:	2036      	movs	r0, #54	; 0x36
 8002714:	f7fe fa44 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002718:	2008      	movs	r0, #8
 800271a:	f7fe fa65 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800271e:	203a      	movs	r0, #58	; 0x3a
 8002720:	f7fe fa3e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002724:	2055      	movs	r0, #85	; 0x55
 8002726:	f7fe fa5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800272a:	202b      	movs	r0, #43	; 0x2b
 800272c:	f7fe fa38 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe fa59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fa56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800273c:	2001      	movs	r0, #1
 800273e:	f7fe fa53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002742:	203f      	movs	r0, #63	; 0x3f
 8002744:	f7fe fa50 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002748:	202a      	movs	r0, #42	; 0x2a
 800274a:	f7fe fa29 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe fa4a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe fa47 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800275a:	2001      	movs	r0, #1
 800275c:	f7fe fa44 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002760:	20df      	movs	r0, #223	; 0xdf
 8002762:	f7fe fa41 	bl	8000be8 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002766:	2078      	movs	r0, #120	; 0x78
 8002768:	f004 f986 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0X29);
 800276c:	2029      	movs	r0, #41	; 0x29
 800276e:	f7fe fa17 	bl	8000ba0 <LCD_WR_REG>
 8002772:	f003 bc27 	b.w	8005fc4 <LCD_Init+0x3e34>
 8002776:	bf00      	nop
 8002778:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x5310) {
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <LCD_Init+0x5fc>)
 800277e:	889b      	ldrh	r3, [r3, #4]
 8002780:	f245 3210 	movw	r2, #21264	; 0x5310
 8002784:	4293      	cmp	r3, r2
 8002786:	f040 877c 	bne.w	8003682 <LCD_Init+0x14f2>
 800278a:	e001      	b.n	8002790 <LCD_Init+0x600>
 800278c:	2000020c 	.word	0x2000020c
		LCD_WR_REG(0xED);
 8002790:	20ed      	movs	r0, #237	; 0xed
 8002792:	f7fe fa05 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002796:	2001      	movs	r0, #1
 8002798:	f7fe fa26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800279c:	20fe      	movs	r0, #254	; 0xfe
 800279e:	f7fe fa23 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80027a2:	20ee      	movs	r0, #238	; 0xee
 80027a4:	f7fe f9fc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80027a8:	20de      	movs	r0, #222	; 0xde
 80027aa:	f7fe fa1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80027ae:	2021      	movs	r0, #33	; 0x21
 80027b0:	f7fe fa1a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80027b4:	20f1      	movs	r0, #241	; 0xf1
 80027b6:	f7fe f9f3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7fe fa14 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80027c0:	20df      	movs	r0, #223	; 0xdf
 80027c2:	f7fe f9ed 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80027c6:	2010      	movs	r0, #16
 80027c8:	f7fe fa0e 	bl	8000be8 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80027cc:	20c4      	movs	r0, #196	; 0xc4
 80027ce:	f7fe f9e7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80027d2:	208f      	movs	r0, #143	; 0x8f
 80027d4:	f7fe fa08 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80027d8:	20c6      	movs	r0, #198	; 0xc6
 80027da:	f7fe f9e1 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe fa02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027e4:	20e2      	movs	r0, #226	; 0xe2
 80027e6:	f7fe f9ff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027ea:	20e2      	movs	r0, #226	; 0xe2
 80027ec:	f7fe f9fc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80027f0:	20e2      	movs	r0, #226	; 0xe2
 80027f2:	f7fe f9f9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80027f6:	20bf      	movs	r0, #191	; 0xbf
 80027f8:	f7fe f9d2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80027fc:	20aa      	movs	r0, #170	; 0xaa
 80027fe:	f7fe f9f3 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002802:	20b0      	movs	r0, #176	; 0xb0
 8002804:	f7fe f9cc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002808:	200d      	movs	r0, #13
 800280a:	f7fe f9ed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f9ea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002814:	200d      	movs	r0, #13
 8002816:	f7fe f9e7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f9e4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002820:	2011      	movs	r0, #17
 8002822:	f7fe f9e1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f9de 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800282c:	2019      	movs	r0, #25
 800282e:	f7fe f9db 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f9d8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002838:	2021      	movs	r0, #33	; 0x21
 800283a:	f7fe f9d5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f9d2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002844:	202d      	movs	r0, #45	; 0x2d
 8002846:	f7fe f9cf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f9cc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002850:	203d      	movs	r0, #61	; 0x3d
 8002852:	f7fe f9c9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f9c6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800285c:	205d      	movs	r0, #93	; 0x5d
 800285e:	f7fe f9c3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe f9c0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002868:	205d      	movs	r0, #93	; 0x5d
 800286a:	f7fe f9bd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f9ba 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002874:	20b1      	movs	r0, #177	; 0xb1
 8002876:	f7fe f993 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800287a:	2080      	movs	r0, #128	; 0x80
 800287c:	f7fe f9b4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f9b1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002886:	208b      	movs	r0, #139	; 0x8b
 8002888:	f7fe f9ae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f9ab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002892:	2096      	movs	r0, #150	; 0x96
 8002894:	f7fe f9a8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f9a5 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800289e:	20b2      	movs	r0, #178	; 0xb2
 80028a0:	f7fe f97e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f99f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe f99c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80028b0:	2002      	movs	r0, #2
 80028b2:	f7fe f999 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f996 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80028bc:	2003      	movs	r0, #3
 80028be:	f7fe f993 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f990 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80028c8:	20b3      	movs	r0, #179	; 0xb3
 80028ca:	f7fe f969 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f98a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f987 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f984 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f981 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f97e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f97b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f978 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f975 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe f972 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f96f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f96c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe f969 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f966 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe f963 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f960 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe f95d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f95a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fe f957 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f954 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f951 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f94e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fe f94b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f948 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe f945 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800295e:	20b4      	movs	r0, #180	; 0xb4
 8002960:	f7fe f91e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002964:	208b      	movs	r0, #139	; 0x8b
 8002966:	f7fe f93f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f93c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002970:	2096      	movs	r0, #150	; 0x96
 8002972:	f7fe f939 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f936 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800297c:	20a1      	movs	r0, #161	; 0xa1
 800297e:	f7fe f933 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f930 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002988:	20b5      	movs	r0, #181	; 0xb5
 800298a:	f7fe f909 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800298e:	2002      	movs	r0, #2
 8002990:	f7fe f92a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe f927 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800299a:	2003      	movs	r0, #3
 800299c:	f7fe f924 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f921 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80029a6:	2004      	movs	r0, #4
 80029a8:	f7fe f91e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f91b 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80029b2:	20b6      	movs	r0, #182	; 0xb6
 80029b4:	f7fe f8f4 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe f915 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe f912 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80029c4:	20b7      	movs	r0, #183	; 0xb7
 80029c6:	f7fe f8eb 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe f90c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe f909 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80029d6:	203f      	movs	r0, #63	; 0x3f
 80029d8:	f7fe f906 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe f903 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80029e2:	205e      	movs	r0, #94	; 0x5e
 80029e4:	f7fe f900 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fe f8fd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80029ee:	2064      	movs	r0, #100	; 0x64
 80029f0:	f7fe f8fa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe f8f7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80029fa:	208c      	movs	r0, #140	; 0x8c
 80029fc:	f7fe f8f4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe f8f1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002a06:	20ac      	movs	r0, #172	; 0xac
 8002a08:	f7fe f8ee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fe f8eb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a12:	20dc      	movs	r0, #220	; 0xdc
 8002a14:	f7fe f8e8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fe f8e5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002a1e:	2070      	movs	r0, #112	; 0x70
 8002a20:	f7fe f8e2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fe f8df 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002a2a:	2090      	movs	r0, #144	; 0x90
 8002a2c:	f7fe f8dc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe f8d9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002a36:	20eb      	movs	r0, #235	; 0xeb
 8002a38:	f7fe f8d6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe f8d3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a42:	20dc      	movs	r0, #220	; 0xdc
 8002a44:	f7fe f8d0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe f8cd 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002a4e:	20b8      	movs	r0, #184	; 0xb8
 8002a50:	f7fe f8a6 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fe f8c7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f8c4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fe f8c1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe f8be 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fe f8bb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe f8b8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fe f8b5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f8b2 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002a84:	20ba      	movs	r0, #186	; 0xba
 8002a86:	f7fe f88b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002a8a:	2024      	movs	r0, #36	; 0x24
 8002a8c:	f7fe f8ac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe f8a9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe f8a6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe f8a3 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002aa2:	20c1      	movs	r0, #193	; 0xc1
 8002aa4:	f7fe f87c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002aa8:	2020      	movs	r0, #32
 8002aaa:	f7fe f89d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe f89a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002ab4:	2054      	movs	r0, #84	; 0x54
 8002ab6:	f7fe f897 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fe f894 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002ac0:	20ff      	movs	r0, #255	; 0xff
 8002ac2:	f7fe f891 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fe f88e 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002acc:	20c2      	movs	r0, #194	; 0xc2
 8002ace:	f7fe f867 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7fe f888 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f885 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002ade:	2004      	movs	r0, #4
 8002ae0:	f7fe f882 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe f87f 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002aea:	20c3      	movs	r0, #195	; 0xc3
 8002aec:	f7fe f858 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002af0:	203c      	movs	r0, #60	; 0x3c
 8002af2:	f7fe f879 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fe f876 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002afc:	203a      	movs	r0, #58	; 0x3a
 8002afe:	f7fe f873 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe f870 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002b08:	2039      	movs	r0, #57	; 0x39
 8002b0a:	f7fe f86d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe f86a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002b14:	2037      	movs	r0, #55	; 0x37
 8002b16:	f7fe f867 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fe f864 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b20:	203c      	movs	r0, #60	; 0x3c
 8002b22:	f7fe f861 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe f85e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7fe f85b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe f858 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b38:	2032      	movs	r0, #50	; 0x32
 8002b3a:	f7fe f855 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe f852 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002b44:	202f      	movs	r0, #47	; 0x2f
 8002b46:	f7fe f84f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe f84c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	f7fe f849 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fe f846 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002b5c:	2029      	movs	r0, #41	; 0x29
 8002b5e:	f7fe f843 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f840 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002b68:	2026      	movs	r0, #38	; 0x26
 8002b6a:	f7fe f83d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe f83a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b74:	2024      	movs	r0, #36	; 0x24
 8002b76:	f7fe f837 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f834 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002b80:	2024      	movs	r0, #36	; 0x24
 8002b82:	f7fe f831 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fe f82e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002b8c:	2023      	movs	r0, #35	; 0x23
 8002b8e:	f7fe f82b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fe f828 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b98:	203c      	movs	r0, #60	; 0x3c
 8002b9a:	f7fe f825 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe f822 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ba4:	2036      	movs	r0, #54	; 0x36
 8002ba6:	f7fe f81f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe f81c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002bb0:	2032      	movs	r0, #50	; 0x32
 8002bb2:	f7fe f819 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fe f816 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002bbc:	202f      	movs	r0, #47	; 0x2f
 8002bbe:	f7fe f813 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe f810 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	f7fe f80d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe f80a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002bd4:	2029      	movs	r0, #41	; 0x29
 8002bd6:	f7fe f807 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fe f804 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002be0:	2026      	movs	r0, #38	; 0x26
 8002be2:	f7fe f801 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fffe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bec:	2024      	movs	r0, #36	; 0x24
 8002bee:	f7fd fffb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd fff8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bf8:	2024      	movs	r0, #36	; 0x24
 8002bfa:	f7fd fff5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd fff2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002c04:	2023      	movs	r0, #35	; 0x23
 8002c06:	f7fd ffef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd ffec 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002c10:	20c4      	movs	r0, #196	; 0xc4
 8002c12:	f7fd ffc5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002c16:	2062      	movs	r0, #98	; 0x62
 8002c18:	f7fd ffe6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd ffe3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002c22:	2005      	movs	r0, #5
 8002c24:	f7fd ffe0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd ffdd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002c2e:	2084      	movs	r0, #132	; 0x84
 8002c30:	f7fd ffda 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd ffd7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002c3a:	20f0      	movs	r0, #240	; 0xf0
 8002c3c:	f7fd ffd4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd ffd1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c46:	2018      	movs	r0, #24
 8002c48:	f7fd ffce 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd ffcb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002c52:	20a4      	movs	r0, #164	; 0xa4
 8002c54:	f7fd ffc8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd ffc5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002c5e:	2018      	movs	r0, #24
 8002c60:	f7fd ffc2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd ffbf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002c6a:	2050      	movs	r0, #80	; 0x50
 8002c6c:	f7fd ffbc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd ffb9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002c76:	200c      	movs	r0, #12
 8002c78:	f7fd ffb6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd ffb3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002c82:	2017      	movs	r0, #23
 8002c84:	f7fd ffb0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd ffad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002c8e:	2095      	movs	r0, #149	; 0x95
 8002c90:	f7fd ffaa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd ffa7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c9a:	20f3      	movs	r0, #243	; 0xf3
 8002c9c:	f7fd ffa4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd ffa1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002ca6:	20e6      	movs	r0, #230	; 0xe6
 8002ca8:	f7fd ff9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd ff9b 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002cb2:	20c5      	movs	r0, #197	; 0xc5
 8002cb4:	f7fd ff74 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002cb8:	2032      	movs	r0, #50	; 0x32
 8002cba:	f7fd ff95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd ff92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cc4:	2044      	movs	r0, #68	; 0x44
 8002cc6:	f7fd ff8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd ff8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002cd0:	2065      	movs	r0, #101	; 0x65
 8002cd2:	f7fd ff89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd ff86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002cdc:	2076      	movs	r0, #118	; 0x76
 8002cde:	f7fd ff83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd ff80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ce8:	2088      	movs	r0, #136	; 0x88
 8002cea:	f7fd ff7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd ff7a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002cf4:	20c6      	movs	r0, #198	; 0xc6
 8002cf6:	f7fd ff53 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002cfa:	2020      	movs	r0, #32
 8002cfc:	f7fd ff74 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd ff71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002d06:	2017      	movs	r0, #23
 8002d08:	f7fd ff6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd ff6b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f7fd ff68 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fd ff65 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002d1e:	20c7      	movs	r0, #199	; 0xc7
 8002d20:	f7fd ff3e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd ff5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd ff5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd ff59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd ff56 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002d3c:	20c8      	movs	r0, #200	; 0xc8
 8002d3e:	f7fd ff2f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd ff50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd ff4d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd ff4a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd ff47 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002d5a:	20c9      	movs	r0, #201	; 0xc9
 8002d5c:	f7fd ff20 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd ff41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd ff3e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd ff3b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd ff38 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd ff35 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd ff32 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd ff2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd ff2c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd ff29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd ff26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd ff23 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd ff20 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd ff1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd ff1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd ff17 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd ff14 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002dc0:	20e0      	movs	r0, #224	; 0xe0
 8002dc2:	f7fd feed 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002dc6:	2016      	movs	r0, #22
 8002dc8:	f7fd ff0e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd ff0b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002dd2:	201c      	movs	r0, #28
 8002dd4:	f7fd ff08 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd ff05 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002dde:	2021      	movs	r0, #33	; 0x21
 8002de0:	f7fd ff02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd feff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002dea:	2036      	movs	r0, #54	; 0x36
 8002dec:	f7fd fefc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fef9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002df6:	2046      	movs	r0, #70	; 0x46
 8002df8:	f7fd fef6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fef3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002e02:	2052      	movs	r0, #82	; 0x52
 8002e04:	f7fd fef0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd feed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002e0e:	2064      	movs	r0, #100	; 0x64
 8002e10:	f7fd feea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fee7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002e1a:	207a      	movs	r0, #122	; 0x7a
 8002e1c:	f7fd fee4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fee1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002e26:	208b      	movs	r0, #139	; 0x8b
 8002e28:	f7fd fede 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fedb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e32:	2099      	movs	r0, #153	; 0x99
 8002e34:	f7fd fed8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fed5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e3e:	20a8      	movs	r0, #168	; 0xa8
 8002e40:	f7fd fed2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fecf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002e4a:	20b9      	movs	r0, #185	; 0xb9
 8002e4c:	f7fd fecc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fec9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002e56:	20c4      	movs	r0, #196	; 0xc4
 8002e58:	f7fd fec6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fec3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002e62:	20ca      	movs	r0, #202	; 0xca
 8002e64:	f7fd fec0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd febd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002e6e:	20d2      	movs	r0, #210	; 0xd2
 8002e70:	f7fd feba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd feb7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002e7a:	20d9      	movs	r0, #217	; 0xd9
 8002e7c:	f7fd feb4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd feb1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002e86:	20e0      	movs	r0, #224	; 0xe0
 8002e88:	f7fd feae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd feab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e92:	20f3      	movs	r0, #243	; 0xf3
 8002e94:	f7fd fea8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fea5 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002e9e:	20e1      	movs	r0, #225	; 0xe1
 8002ea0:	f7fd fe7e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002ea4:	2016      	movs	r0, #22
 8002ea6:	f7fd fe9f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fe9c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002eb0:	201c      	movs	r0, #28
 8002eb2:	f7fd fe99 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fe96 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002ebc:	2022      	movs	r0, #34	; 0x22
 8002ebe:	f7fd fe93 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fe90 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ec8:	2036      	movs	r0, #54	; 0x36
 8002eca:	f7fd fe8d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fe8a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002ed4:	2045      	movs	r0, #69	; 0x45
 8002ed6:	f7fd fe87 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fe84 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002ee0:	2052      	movs	r0, #82	; 0x52
 8002ee2:	f7fd fe81 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fe7e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002eec:	2064      	movs	r0, #100	; 0x64
 8002eee:	f7fd fe7b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fe78 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002ef8:	207a      	movs	r0, #122	; 0x7a
 8002efa:	f7fd fe75 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe72 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002f04:	208b      	movs	r0, #139	; 0x8b
 8002f06:	f7fd fe6f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fe6c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f10:	2099      	movs	r0, #153	; 0x99
 8002f12:	f7fd fe69 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fe66 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002f1c:	20a8      	movs	r0, #168	; 0xa8
 8002f1e:	f7fd fe63 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fe60 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002f28:	20b9      	movs	r0, #185	; 0xb9
 8002f2a:	f7fd fe5d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fe5a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f34:	20c4      	movs	r0, #196	; 0xc4
 8002f36:	f7fd fe57 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fe54 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002f40:	20ca      	movs	r0, #202	; 0xca
 8002f42:	f7fd fe51 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fe4e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002f4c:	20d2      	movs	r0, #210	; 0xd2
 8002f4e:	f7fd fe4b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fe48 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002f58:	20d8      	movs	r0, #216	; 0xd8
 8002f5a:	f7fd fe45 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fe42 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002f64:	20e0      	movs	r0, #224	; 0xe0
 8002f66:	f7fd fe3f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fe3c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f70:	20f3      	movs	r0, #243	; 0xf3
 8002f72:	f7fd fe39 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fe36 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002f7c:	20e2      	movs	r0, #226	; 0xe2
 8002f7e:	f7fd fe0f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002f82:	2005      	movs	r0, #5
 8002f84:	f7fd fe30 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fe2d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002f8e:	200b      	movs	r0, #11
 8002f90:	f7fd fe2a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fe27 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002f9a:	201b      	movs	r0, #27
 8002f9c:	f7fd fe24 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fe21 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002fa6:	2034      	movs	r0, #52	; 0x34
 8002fa8:	f7fd fe1e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fe1b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002fb2:	2044      	movs	r0, #68	; 0x44
 8002fb4:	f7fd fe18 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fe15 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002fbe:	204f      	movs	r0, #79	; 0x4f
 8002fc0:	f7fd fe12 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fe0f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002fca:	2061      	movs	r0, #97	; 0x61
 8002fcc:	f7fd fe0c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fe09 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002fd6:	2079      	movs	r0, #121	; 0x79
 8002fd8:	f7fd fe06 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fe03 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002fe2:	2088      	movs	r0, #136	; 0x88
 8002fe4:	f7fd fe00 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fdfd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002fee:	2097      	movs	r0, #151	; 0x97
 8002ff0:	f7fd fdfa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fdf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002ffa:	20a6      	movs	r0, #166	; 0xa6
 8002ffc:	f7fd fdf4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fdf1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003006:	20b7      	movs	r0, #183	; 0xb7
 8003008:	f7fd fdee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fdeb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003012:	20c2      	movs	r0, #194	; 0xc2
 8003014:	f7fd fde8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fde5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800301e:	20c7      	movs	r0, #199	; 0xc7
 8003020:	f7fd fde2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fddf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 800302a:	20d1      	movs	r0, #209	; 0xd1
 800302c:	f7fd fddc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fdd9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8003036:	20d6      	movs	r0, #214	; 0xd6
 8003038:	f7fd fdd6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fdd3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003042:	20dd      	movs	r0, #221	; 0xdd
 8003044:	f7fd fdd0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fdcd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800304e:	20f3      	movs	r0, #243	; 0xf3
 8003050:	f7fd fdca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fd fdc7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800305a:	20e3      	movs	r0, #227	; 0xe3
 800305c:	f7fd fda0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003060:	2005      	movs	r0, #5
 8003062:	f7fd fdc1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fdbe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800306c:	200a      	movs	r0, #10
 800306e:	f7fd fdbb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fdb8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003078:	201c      	movs	r0, #28
 800307a:	f7fd fdb5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fdb2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003084:	2033      	movs	r0, #51	; 0x33
 8003086:	f7fd fdaf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fdac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003090:	2044      	movs	r0, #68	; 0x44
 8003092:	f7fd fda9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fda6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800309c:	2050      	movs	r0, #80	; 0x50
 800309e:	f7fd fda3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fda0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80030a8:	2062      	movs	r0, #98	; 0x62
 80030aa:	f7fd fd9d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fd9a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80030b4:	2078      	movs	r0, #120	; 0x78
 80030b6:	f7fd fd97 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fd94 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80030c0:	2088      	movs	r0, #136	; 0x88
 80030c2:	f7fd fd91 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fd8e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80030cc:	2097      	movs	r0, #151	; 0x97
 80030ce:	f7fd fd8b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fd88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80030d8:	20a6      	movs	r0, #166	; 0xa6
 80030da:	f7fd fd85 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fd82 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80030e4:	20b7      	movs	r0, #183	; 0xb7
 80030e6:	f7fd fd7f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fd7c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80030f0:	20c2      	movs	r0, #194	; 0xc2
 80030f2:	f7fd fd79 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fd76 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80030fc:	20c7      	movs	r0, #199	; 0xc7
 80030fe:	f7fd fd73 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fd70 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003108:	20d1      	movs	r0, #209	; 0xd1
 800310a:	f7fd fd6d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fd6a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003114:	20d5      	movs	r0, #213	; 0xd5
 8003116:	f7fd fd67 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fd64 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003120:	20dd      	movs	r0, #221	; 0xdd
 8003122:	f7fd fd61 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fd5e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800312c:	20f3      	movs	r0, #243	; 0xf3
 800312e:	f7fd fd5b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fd58 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003138:	20e4      	movs	r0, #228	; 0xe4
 800313a:	f7fd fd31 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800313e:	2001      	movs	r0, #1
 8003140:	f7fd fd52 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fd4f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800314a:	2001      	movs	r0, #1
 800314c:	f7fd fd4c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fd49 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003156:	2002      	movs	r0, #2
 8003158:	f7fd fd46 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fd43 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003162:	202a      	movs	r0, #42	; 0x2a
 8003164:	f7fd fd40 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fd3d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800316e:	203c      	movs	r0, #60	; 0x3c
 8003170:	f7fd fd3a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fd37 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800317a:	204b      	movs	r0, #75	; 0x4b
 800317c:	f7fd fd34 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fd31 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003186:	205d      	movs	r0, #93	; 0x5d
 8003188:	f7fd fd2e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fd2b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003192:	2074      	movs	r0, #116	; 0x74
 8003194:	f7fd fd28 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fd25 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800319e:	2084      	movs	r0, #132	; 0x84
 80031a0:	f7fd fd22 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fd1f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80031aa:	2093      	movs	r0, #147	; 0x93
 80031ac:	f7fd fd1c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fd19 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80031b6:	20a2      	movs	r0, #162	; 0xa2
 80031b8:	f7fd fd16 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fd13 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80031c2:	20b3      	movs	r0, #179	; 0xb3
 80031c4:	f7fd fd10 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fd0d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80031ce:	20be      	movs	r0, #190	; 0xbe
 80031d0:	f7fd fd0a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fd07 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80031da:	20c4      	movs	r0, #196	; 0xc4
 80031dc:	f7fd fd04 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fd01 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80031e6:	20cd      	movs	r0, #205	; 0xcd
 80031e8:	f7fd fcfe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fcfb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80031f2:	20d3      	movs	r0, #211	; 0xd3
 80031f4:	f7fd fcf8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fcf5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80031fe:	20dd      	movs	r0, #221	; 0xdd
 8003200:	f7fd fcf2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fcef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800320a:	20f3      	movs	r0, #243	; 0xf3
 800320c:	f7fd fcec 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fce9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003216:	20e5      	movs	r0, #229	; 0xe5
 8003218:	f7fd fcc2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fce3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fce0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7fd fcdd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fcda 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003234:	2002      	movs	r0, #2
 8003236:	f7fd fcd7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fcd4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003240:	2029      	movs	r0, #41	; 0x29
 8003242:	f7fd fcd1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fcce 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800324c:	203c      	movs	r0, #60	; 0x3c
 800324e:	f7fd fccb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fcc8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003258:	204b      	movs	r0, #75	; 0x4b
 800325a:	f7fd fcc5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fcc2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003264:	205d      	movs	r0, #93	; 0x5d
 8003266:	f7fd fcbf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fcbc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003270:	2074      	movs	r0, #116	; 0x74
 8003272:	f7fd fcb9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fcb6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800327c:	2084      	movs	r0, #132	; 0x84
 800327e:	f7fd fcb3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fcb0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003288:	2093      	movs	r0, #147	; 0x93
 800328a:	f7fd fcad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fcaa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003294:	20a2      	movs	r0, #162	; 0xa2
 8003296:	f7fd fca7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fca4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80032a0:	20b3      	movs	r0, #179	; 0xb3
 80032a2:	f7fd fca1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fc9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80032ac:	20be      	movs	r0, #190	; 0xbe
 80032ae:	f7fd fc9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd fc98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80032b8:	20c4      	movs	r0, #196	; 0xc4
 80032ba:	f7fd fc95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fc92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80032c4:	20cd      	movs	r0, #205	; 0xcd
 80032c6:	f7fd fc8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fc8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80032d0:	20d3      	movs	r0, #211	; 0xd3
 80032d2:	f7fd fc89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fc86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80032dc:	20dc      	movs	r0, #220	; 0xdc
 80032de:	f7fd fc83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fd fc80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80032e8:	20f3      	movs	r0, #243	; 0xf3
 80032ea:	f7fd fc7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7fd fc7a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80032f4:	20e6      	movs	r0, #230	; 0xe6
 80032f6:	f7fd fc53 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80032fa:	2011      	movs	r0, #17
 80032fc:	f7fd fc74 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fc71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003306:	2034      	movs	r0, #52	; 0x34
 8003308:	f7fd fc6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fc6b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003312:	2056      	movs	r0, #86	; 0x56
 8003314:	f7fd fc68 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fc65 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800331e:	2076      	movs	r0, #118	; 0x76
 8003320:	f7fd fc62 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fc5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800332a:	2077      	movs	r0, #119	; 0x77
 800332c:	f7fd fc5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fc59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003336:	2066      	movs	r0, #102	; 0x66
 8003338:	f7fd fc56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fc53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003342:	2088      	movs	r0, #136	; 0x88
 8003344:	f7fd fc50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fc4d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800334e:	2099      	movs	r0, #153	; 0x99
 8003350:	f7fd fc4a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fc47 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800335a:	20bb      	movs	r0, #187	; 0xbb
 800335c:	f7fd fc44 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fc41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003366:	2099      	movs	r0, #153	; 0x99
 8003368:	f7fd fc3e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fc3b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003372:	2066      	movs	r0, #102	; 0x66
 8003374:	f7fd fc38 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fc35 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800337e:	2055      	movs	r0, #85	; 0x55
 8003380:	f7fd fc32 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fc2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800338a:	2055      	movs	r0, #85	; 0x55
 800338c:	f7fd fc2c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fc29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003396:	2045      	movs	r0, #69	; 0x45
 8003398:	f7fd fc26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fc23 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80033a2:	2043      	movs	r0, #67	; 0x43
 80033a4:	f7fd fc20 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fc1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80033ae:	2044      	movs	r0, #68	; 0x44
 80033b0:	f7fd fc1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd fc17 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80033ba:	20e7      	movs	r0, #231	; 0xe7
 80033bc:	f7fd fbf0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80033c0:	2032      	movs	r0, #50	; 0x32
 80033c2:	f7fd fc11 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fd fc0e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033cc:	2055      	movs	r0, #85	; 0x55
 80033ce:	f7fd fc0b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fd fc08 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80033d8:	2076      	movs	r0, #118	; 0x76
 80033da:	f7fd fc05 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd fc02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80033e4:	2066      	movs	r0, #102	; 0x66
 80033e6:	f7fd fbff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd fbfc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033f0:	2067      	movs	r0, #103	; 0x67
 80033f2:	f7fd fbf9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd fbf6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80033fc:	2067      	movs	r0, #103	; 0x67
 80033fe:	f7fd fbf3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fbf0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003408:	2087      	movs	r0, #135	; 0x87
 800340a:	f7fd fbed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fbea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003414:	2099      	movs	r0, #153	; 0x99
 8003416:	f7fd fbe7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd fbe4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003420:	20bb      	movs	r0, #187	; 0xbb
 8003422:	f7fd fbe1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fbde 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800342c:	2099      	movs	r0, #153	; 0x99
 800342e:	f7fd fbdb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fbd8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003438:	2077      	movs	r0, #119	; 0x77
 800343a:	f7fd fbd5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fbd2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003444:	2044      	movs	r0, #68	; 0x44
 8003446:	f7fd fbcf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fbcc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003450:	2056      	movs	r0, #86	; 0x56
 8003452:	f7fd fbc9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fbc6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800345c:	2023      	movs	r0, #35	; 0x23
 800345e:	f7fd fbc3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fbc0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003468:	2033      	movs	r0, #51	; 0x33
 800346a:	f7fd fbbd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fbba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003474:	2045      	movs	r0, #69	; 0x45
 8003476:	f7fd fbb7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347a:	2000      	movs	r0, #0
 800347c:	f7fd fbb4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003480:	20e8      	movs	r0, #232	; 0xe8
 8003482:	f7fd fb8d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7fd fbae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fd fbab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003492:	2099      	movs	r0, #153	; 0x99
 8003494:	f7fd fba8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd fba5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800349e:	2087      	movs	r0, #135	; 0x87
 80034a0:	f7fd fba2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7fd fb9f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034aa:	2088      	movs	r0, #136	; 0x88
 80034ac:	f7fd fb9c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fd fb99 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80034b6:	2077      	movs	r0, #119	; 0x77
 80034b8:	f7fd fb96 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fd fb93 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034c2:	2066      	movs	r0, #102	; 0x66
 80034c4:	f7fd fb90 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd fb8d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034ce:	2088      	movs	r0, #136	; 0x88
 80034d0:	f7fd fb8a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fd fb87 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80034da:	20aa      	movs	r0, #170	; 0xaa
 80034dc:	f7fd fb84 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fd fb81 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80034e6:	20bb      	movs	r0, #187	; 0xbb
 80034e8:	f7fd fb7e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fd fb7b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80034f2:	2099      	movs	r0, #153	; 0x99
 80034f4:	f7fd fb78 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fb75 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034fe:	2066      	movs	r0, #102	; 0x66
 8003500:	f7fd fb72 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fb6f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800350a:	2055      	movs	r0, #85	; 0x55
 800350c:	f7fd fb6c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fb69 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003516:	2055      	movs	r0, #85	; 0x55
 8003518:	f7fd fb66 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fb63 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003522:	2044      	movs	r0, #68	; 0x44
 8003524:	f7fd fb60 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fb5d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800352e:	2044      	movs	r0, #68	; 0x44
 8003530:	f7fd fb5a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003534:	2000      	movs	r0, #0
 8003536:	f7fd fb57 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800353a:	2055      	movs	r0, #85	; 0x55
 800353c:	f7fd fb54 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fb51 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003546:	20e9      	movs	r0, #233	; 0xe9
 8003548:	f7fd fb2a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800354c:	20aa      	movs	r0, #170	; 0xaa
 800354e:	f7fd fb4b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003552:	2000      	movs	r0, #0
 8003554:	f7fd fb48 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fd fb45 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fb42 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd fb1b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800356a:	20aa      	movs	r0, #170	; 0xaa
 800356c:	f7fd fb3c 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003570:	20cf      	movs	r0, #207	; 0xcf
 8003572:	f7fd fb15 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fd fb36 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd fb33 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd fb30 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd fb2d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd fb2a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd fb27 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fd fb24 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fd fb21 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fd fb1e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7fd fb1b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fd fb18 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fd fb15 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd fb12 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fd fb0f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fd fb0c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fd fb09 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd fb06 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80035dc:	20f0      	movs	r0, #240	; 0xf0
 80035de:	f7fd fadf 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd fb00 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80035e8:	2050      	movs	r0, #80	; 0x50
 80035ea:	f7fd fafd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd fafa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fd faf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd faf4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003600:	20f3      	movs	r0, #243	; 0xf3
 8003602:	f7fd facd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fd faee 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800360c:	20f9      	movs	r0, #249	; 0xf9
 800360e:	f7fd fac7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003612:	2006      	movs	r0, #6
 8003614:	f7fd fae8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003618:	2010      	movs	r0, #16
 800361a:	f7fd fae5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800361e:	2029      	movs	r0, #41	; 0x29
 8003620:	f7fd fae2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fd fadf 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800362a:	203a      	movs	r0, #58	; 0x3a
 800362c:	f7fd fab8 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003630:	2055      	movs	r0, #85	; 0x55
 8003632:	f7fd fad9 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003636:	2011      	movs	r0, #17
 8003638:	f7fd fab2 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(100);
 800363c:	2064      	movs	r0, #100	; 0x64
 800363e:	f003 fa1b 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003642:	2029      	movs	r0, #41	; 0x29
 8003644:	f7fd faac 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003648:	2035      	movs	r0, #53	; 0x35
 800364a:	f7fd faa9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800364e:	2000      	movs	r0, #0
 8003650:	f7fd faca 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003654:	2051      	movs	r0, #81	; 0x51
 8003656:	f7fd faa3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800365a:	20ff      	movs	r0, #255	; 0xff
 800365c:	f7fd fac4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003660:	2053      	movs	r0, #83	; 0x53
 8003662:	f7fd fa9d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003666:	202c      	movs	r0, #44	; 0x2c
 8003668:	f7fd fabe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800366c:	2055      	movs	r0, #85	; 0x55
 800366e:	f7fd fa97 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003672:	2082      	movs	r0, #130	; 0x82
 8003674:	f7fd fab8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003678:	202c      	movs	r0, #44	; 0x2c
 800367a:	f7fd fa91 	bl	8000ba0 <LCD_WR_REG>
 800367e:	f002 bca1 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003682:	4b04      	ldr	r3, [pc, #16]	; (8003694 <LCD_Init+0x1504>)
 8003684:	889b      	ldrh	r3, [r3, #4]
 8003686:	f245 5210 	movw	r2, #21776	; 0x5510
 800368a:	4293      	cmp	r3, r2
 800368c:	f040 8782 	bne.w	8004594 <LCD_Init+0x2404>
 8003690:	e002      	b.n	8003698 <LCD_Init+0x1508>
 8003692:	bf00      	nop
 8003694:	2000020c 	.word	0x2000020c
		LCD_WriteReg(0xF000, 0x55);
 8003698:	2155      	movs	r1, #85	; 0x55
 800369a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800369e:	f7fd fb0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80036a2:	21aa      	movs	r1, #170	; 0xaa
 80036a4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80036a8:	f7fd fb06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80036ac:	2152      	movs	r1, #82	; 0x52
 80036ae:	f24f 0002 	movw	r0, #61442	; 0xf002
 80036b2:	f7fd fb01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80036b6:	2108      	movs	r1, #8
 80036b8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80036bc:	f7fd fafc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80036c0:	2101      	movs	r1, #1
 80036c2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80036c6:	f7fd faf7 	bl	8000cb8 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80036ca:	210d      	movs	r1, #13
 80036cc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80036d0:	f7fd faf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80036d4:	210d      	movs	r1, #13
 80036d6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80036da:	f7fd faed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80036de:	210d      	movs	r1, #13
 80036e0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80036e4:	f7fd fae8 	bl	8000cb8 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80036e8:	2134      	movs	r1, #52	; 0x34
 80036ea:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80036ee:	f7fd fae3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80036f2:	2134      	movs	r1, #52	; 0x34
 80036f4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80036f8:	f7fd fade 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80036fc:	2134      	movs	r1, #52	; 0x34
 80036fe:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003702:	f7fd fad9 	bl	8000cb8 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003706:	210d      	movs	r1, #13
 8003708:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800370c:	f7fd fad4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003710:	210d      	movs	r1, #13
 8003712:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003716:	f7fd facf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800371a:	210d      	movs	r1, #13
 800371c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003720:	f7fd faca 	bl	8000cb8 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003724:	2134      	movs	r1, #52	; 0x34
 8003726:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800372a:	f7fd fac5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800372e:	2134      	movs	r1, #52	; 0x34
 8003730:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003734:	f7fd fac0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003738:	2134      	movs	r1, #52	; 0x34
 800373a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800373e:	f7fd fabb 	bl	8000cb8 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003742:	2100      	movs	r1, #0
 8003744:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003748:	f7fd fab6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800374c:	2100      	movs	r1, #0
 800374e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003752:	f7fd fab1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003756:	2100      	movs	r1, #0
 8003758:	f24b 2002 	movw	r0, #45570	; 0xb202
 800375c:	f7fd faac 	bl	8000cb8 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003760:	2124      	movs	r1, #36	; 0x24
 8003762:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003766:	f7fd faa7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800376a:	2124      	movs	r1, #36	; 0x24
 800376c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003770:	f7fd faa2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003774:	2124      	movs	r1, #36	; 0x24
 8003776:	f64b 0002 	movw	r0, #47106	; 0xb802
 800377a:	f7fd fa9d 	bl	8000cb8 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800377e:	2101      	movs	r1, #1
 8003780:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003784:	f7fd fa98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003788:	210f      	movs	r1, #15
 800378a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800378e:	f7fd fa93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003792:	210f      	movs	r1, #15
 8003794:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003798:	f7fd fa8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800379c:	210f      	movs	r1, #15
 800379e:	f24b 3002 	movw	r0, #45826	; 0xb302
 80037a2:	f7fd fa89 	bl	8000cb8 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80037a6:	2134      	movs	r1, #52	; 0x34
 80037a8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80037ac:	f7fd fa84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80037b0:	2134      	movs	r1, #52	; 0x34
 80037b2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80037b6:	f7fd fa7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80037ba:	2134      	movs	r1, #52	; 0x34
 80037bc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80037c0:	f7fd fa7a 	bl	8000cb8 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80037c4:	2108      	movs	r1, #8
 80037c6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80037ca:	f7fd fa75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80037ce:	2108      	movs	r1, #8
 80037d0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80037d4:	f7fd fa70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80037d8:	2108      	movs	r1, #8
 80037da:	f24b 5002 	movw	r0, #46338	; 0xb502
 80037de:	f7fd fa6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80037e2:	2103      	movs	r1, #3
 80037e4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80037e8:	f7fd fa66 	bl	8000cb8 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80037ec:	2124      	movs	r1, #36	; 0x24
 80037ee:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80037f2:	f7fd fa61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80037f6:	2124      	movs	r1, #36	; 0x24
 80037f8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80037fc:	f7fd fa5c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003800:	2124      	movs	r1, #36	; 0x24
 8003802:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003806:	f7fd fa57 	bl	8000cb8 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800380a:	2100      	movs	r1, #0
 800380c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003810:	f7fd fa52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003814:	2178      	movs	r1, #120	; 0x78
 8003816:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800381a:	f7fd fa4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800381e:	2100      	movs	r1, #0
 8003820:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003824:	f7fd fa48 	bl	8000cb8 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003828:	2100      	movs	r1, #0
 800382a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800382e:	f7fd fa43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003832:	2178      	movs	r1, #120	; 0x78
 8003834:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003838:	f7fd fa3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800383c:	2100      	movs	r1, #0
 800383e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003842:	f7fd fa39 	bl	8000cb8 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003846:	2100      	movs	r1, #0
 8003848:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800384c:	f7fd fa34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003850:	2164      	movs	r1, #100	; 0x64
 8003852:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003856:	f7fd fa2f 	bl	8000cb8 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800385a:	2100      	movs	r1, #0
 800385c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003860:	f7fd fa2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003864:	2133      	movs	r1, #51	; 0x33
 8003866:	f24d 1001 	movw	r0, #53505	; 0xd101
 800386a:	f7fd fa25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800386e:	2100      	movs	r1, #0
 8003870:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003874:	f7fd fa20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003878:	2134      	movs	r1, #52	; 0x34
 800387a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800387e:	f7fd fa1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003882:	2100      	movs	r1, #0
 8003884:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003888:	f7fd fa16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800388c:	213a      	movs	r1, #58	; 0x3a
 800388e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003892:	f7fd fa11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003896:	2100      	movs	r1, #0
 8003898:	f24d 1006 	movw	r0, #53510	; 0xd106
 800389c:	f7fd fa0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80038a0:	214a      	movs	r1, #74	; 0x4a
 80038a2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80038a6:	f7fd fa07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80038aa:	2100      	movs	r1, #0
 80038ac:	f24d 1008 	movw	r0, #53512	; 0xd108
 80038b0:	f7fd fa02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80038b4:	215c      	movs	r1, #92	; 0x5c
 80038b6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80038ba:	f7fd f9fd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80038be:	2100      	movs	r1, #0
 80038c0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80038c4:	f7fd f9f8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80038c8:	2181      	movs	r1, #129	; 0x81
 80038ca:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80038ce:	f7fd f9f3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80038d2:	2100      	movs	r1, #0
 80038d4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80038d8:	f7fd f9ee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80038dc:	21a6      	movs	r1, #166	; 0xa6
 80038de:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80038e2:	f7fd f9e9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80038e6:	2100      	movs	r1, #0
 80038e8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80038ec:	f7fd f9e4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80038f0:	21e5      	movs	r1, #229	; 0xe5
 80038f2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80038f6:	f7fd f9df 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80038fa:	2101      	movs	r1, #1
 80038fc:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003900:	f7fd f9da 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003904:	2113      	movs	r1, #19
 8003906:	f24d 1011 	movw	r0, #53521	; 0xd111
 800390a:	f7fd f9d5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800390e:	2101      	movs	r1, #1
 8003910:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003914:	f7fd f9d0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003918:	2154      	movs	r1, #84	; 0x54
 800391a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800391e:	f7fd f9cb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003922:	2101      	movs	r1, #1
 8003924:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003928:	f7fd f9c6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800392c:	2182      	movs	r1, #130	; 0x82
 800392e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003932:	f7fd f9c1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003936:	2101      	movs	r1, #1
 8003938:	f24d 1016 	movw	r0, #53526	; 0xd116
 800393c:	f7fd f9bc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003940:	21ca      	movs	r1, #202	; 0xca
 8003942:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003946:	f7fd f9b7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800394a:	2102      	movs	r1, #2
 800394c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003950:	f7fd f9b2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003954:	2100      	movs	r1, #0
 8003956:	f24d 1019 	movw	r0, #53529	; 0xd119
 800395a:	f7fd f9ad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800395e:	2102      	movs	r1, #2
 8003960:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003964:	f7fd f9a8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003968:	2101      	movs	r1, #1
 800396a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800396e:	f7fd f9a3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003978:	f7fd f99e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800397c:	2134      	movs	r1, #52	; 0x34
 800397e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003982:	f7fd f999 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003986:	2102      	movs	r1, #2
 8003988:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800398c:	f7fd f994 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003990:	2167      	movs	r1, #103	; 0x67
 8003992:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003996:	f7fd f98f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800399a:	2102      	movs	r1, #2
 800399c:	f24d 1020 	movw	r0, #53536	; 0xd120
 80039a0:	f7fd f98a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80039a4:	2184      	movs	r1, #132	; 0x84
 80039a6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80039aa:	f7fd f985 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80039ae:	2102      	movs	r1, #2
 80039b0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80039b4:	f7fd f980 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80039b8:	21a4      	movs	r1, #164	; 0xa4
 80039ba:	f24d 1023 	movw	r0, #53539	; 0xd123
 80039be:	f7fd f97b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80039c2:	2102      	movs	r1, #2
 80039c4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80039c8:	f7fd f976 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80039cc:	21b7      	movs	r1, #183	; 0xb7
 80039ce:	f24d 1025 	movw	r0, #53541	; 0xd125
 80039d2:	f7fd f971 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80039d6:	2102      	movs	r1, #2
 80039d8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80039dc:	f7fd f96c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80039e0:	21cf      	movs	r1, #207	; 0xcf
 80039e2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80039e6:	f7fd f967 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80039ea:	2102      	movs	r1, #2
 80039ec:	f24d 1028 	movw	r0, #53544	; 0xd128
 80039f0:	f7fd f962 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80039f4:	21de      	movs	r1, #222	; 0xde
 80039f6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80039fa:	f7fd f95d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80039fe:	2102      	movs	r1, #2
 8003a00:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003a04:	f7fd f958 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003a08:	21f2      	movs	r1, #242	; 0xf2
 8003a0a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003a0e:	f7fd f953 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003a12:	2102      	movs	r1, #2
 8003a14:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003a18:	f7fd f94e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003a1c:	21fe      	movs	r1, #254	; 0xfe
 8003a1e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003a22:	f7fd f949 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003a26:	2103      	movs	r1, #3
 8003a28:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003a2c:	f7fd f944 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003a30:	2110      	movs	r1, #16
 8003a32:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003a36:	f7fd f93f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003a3a:	2103      	movs	r1, #3
 8003a3c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003a40:	f7fd f93a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003a44:	2133      	movs	r1, #51	; 0x33
 8003a46:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003a4a:	f7fd f935 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003a4e:	2103      	movs	r1, #3
 8003a50:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003a54:	f7fd f930 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003a58:	216d      	movs	r1, #109	; 0x6d
 8003a5a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003a5e:	f7fd f92b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003a62:	2100      	movs	r1, #0
 8003a64:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003a68:	f7fd f926 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003a6c:	2133      	movs	r1, #51	; 0x33
 8003a6e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003a72:	f7fd f921 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003a76:	2100      	movs	r1, #0
 8003a78:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003a7c:	f7fd f91c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003a80:	2134      	movs	r1, #52	; 0x34
 8003a82:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003a86:	f7fd f917 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003a90:	f7fd f912 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003a94:	213a      	movs	r1, #58	; 0x3a
 8003a96:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003a9a:	f7fd f90d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003aa4:	f7fd f908 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003aa8:	214a      	movs	r1, #74	; 0x4a
 8003aaa:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003aae:	f7fd f903 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003ab8:	f7fd f8fe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003abc:	215c      	movs	r1, #92	; 0x5c
 8003abe:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003ac2:	f7fd f8f9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003acc:	f7fd f8f4 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003ad0:	2181      	movs	r1, #129	; 0x81
 8003ad2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003ad6:	f7fd f8ef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003ada:	2100      	movs	r1, #0
 8003adc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003ae0:	f7fd f8ea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003ae4:	21a6      	movs	r1, #166	; 0xa6
 8003ae6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003aea:	f7fd f8e5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003aee:	2100      	movs	r1, #0
 8003af0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003af4:	f7fd f8e0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003af8:	21e5      	movs	r1, #229	; 0xe5
 8003afa:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003afe:	f7fd f8db 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003b02:	2101      	movs	r1, #1
 8003b04:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003b08:	f7fd f8d6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003b0c:	2113      	movs	r1, #19
 8003b0e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003b12:	f7fd f8d1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003b16:	2101      	movs	r1, #1
 8003b18:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003b1c:	f7fd f8cc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003b20:	2154      	movs	r1, #84	; 0x54
 8003b22:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003b26:	f7fd f8c7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003b30:	f7fd f8c2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003b34:	2182      	movs	r1, #130	; 0x82
 8003b36:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003b3a:	f7fd f8bd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003b44:	f7fd f8b8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003b48:	21ca      	movs	r1, #202	; 0xca
 8003b4a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003b4e:	f7fd f8b3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003b52:	2102      	movs	r1, #2
 8003b54:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003b58:	f7fd f8ae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003b62:	f7fd f8a9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003b66:	2102      	movs	r1, #2
 8003b68:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003b6c:	f7fd f8a4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003b70:	2101      	movs	r1, #1
 8003b72:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003b76:	f7fd f89f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003b80:	f7fd f89a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003b84:	2134      	movs	r1, #52	; 0x34
 8003b86:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003b8a:	f7fd f895 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003b8e:	2102      	movs	r1, #2
 8003b90:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003b94:	f7fd f890 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003b98:	2167      	movs	r1, #103	; 0x67
 8003b9a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003b9e:	f7fd f88b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003ba8:	f7fd f886 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003bac:	2184      	movs	r1, #132	; 0x84
 8003bae:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003bb2:	f7fd f881 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003bbc:	f7fd f87c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003bc0:	21a4      	movs	r1, #164	; 0xa4
 8003bc2:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003bc6:	f7fd f877 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003bca:	2102      	movs	r1, #2
 8003bcc:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003bd0:	f7fd f872 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003bd4:	21b7      	movs	r1, #183	; 0xb7
 8003bd6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003bda:	f7fd f86d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003bde:	2102      	movs	r1, #2
 8003be0:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003be4:	f7fd f868 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003be8:	21cf      	movs	r1, #207	; 0xcf
 8003bea:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003bee:	f7fd f863 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003bf8:	f7fd f85e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003bfc:	21de      	movs	r1, #222	; 0xde
 8003bfe:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003c02:	f7fd f859 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003c06:	2102      	movs	r1, #2
 8003c08:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003c0c:	f7fd f854 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003c10:	21f2      	movs	r1, #242	; 0xf2
 8003c12:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003c16:	f7fd f84f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003c20:	f7fd f84a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003c24:	21fe      	movs	r1, #254	; 0xfe
 8003c26:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003c2a:	f7fd f845 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003c2e:	2103      	movs	r1, #3
 8003c30:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003c34:	f7fd f840 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003c38:	2110      	movs	r1, #16
 8003c3a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003c3e:	f7fd f83b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003c42:	2103      	movs	r1, #3
 8003c44:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003c48:	f7fd f836 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003c4c:	2133      	movs	r1, #51	; 0x33
 8003c4e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003c52:	f7fd f831 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003c56:	2103      	movs	r1, #3
 8003c58:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003c5c:	f7fd f82c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003c60:	216d      	movs	r1, #109	; 0x6d
 8003c62:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003c66:	f7fd f827 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003c70:	f7fd f822 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003c74:	2133      	movs	r1, #51	; 0x33
 8003c76:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003c7a:	f7fd f81d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003c84:	f7fd f818 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003c88:	2134      	movs	r1, #52	; 0x34
 8003c8a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003c8e:	f7fd f813 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003c92:	2100      	movs	r1, #0
 8003c94:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003c98:	f7fd f80e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003c9c:	213a      	movs	r1, #58	; 0x3a
 8003c9e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003ca2:	f7fd f809 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003cac:	f7fd f804 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003cb0:	214a      	movs	r1, #74	; 0x4a
 8003cb2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003cb6:	f7fc ffff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003cc0:	f7fc fffa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003cc4:	215c      	movs	r1, #92	; 0x5c
 8003cc6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003cca:	f7fc fff5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003cd4:	f7fc fff0 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003cd8:	2181      	movs	r1, #129	; 0x81
 8003cda:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003cde:	f7fc ffeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003ce8:	f7fc ffe6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003cec:	21a6      	movs	r1, #166	; 0xa6
 8003cee:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003cf2:	f7fc ffe1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003cfc:	f7fc ffdc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003d00:	21e5      	movs	r1, #229	; 0xe5
 8003d02:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003d06:	f7fc ffd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003d10:	f7fc ffd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003d14:	2113      	movs	r1, #19
 8003d16:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003d1a:	f7fc ffcd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003d1e:	2101      	movs	r1, #1
 8003d20:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003d24:	f7fc ffc8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003d28:	2154      	movs	r1, #84	; 0x54
 8003d2a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003d2e:	f7fc ffc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003d32:	2101      	movs	r1, #1
 8003d34:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003d38:	f7fc ffbe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003d3c:	2182      	movs	r1, #130	; 0x82
 8003d3e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003d42:	f7fc ffb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003d46:	2101      	movs	r1, #1
 8003d48:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003d4c:	f7fc ffb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003d50:	21ca      	movs	r1, #202	; 0xca
 8003d52:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003d56:	f7fc ffaf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003d60:	f7fc ffaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003d64:	2100      	movs	r1, #0
 8003d66:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003d6a:	f7fc ffa5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003d6e:	2102      	movs	r1, #2
 8003d70:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003d74:	f7fc ffa0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003d78:	2101      	movs	r1, #1
 8003d7a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003d7e:	f7fc ff9b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003d88:	f7fc ff96 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003d8c:	2134      	movs	r1, #52	; 0x34
 8003d8e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003d92:	f7fc ff91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003d96:	2102      	movs	r1, #2
 8003d98:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003d9c:	f7fc ff8c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003da0:	2167      	movs	r1, #103	; 0x67
 8003da2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003da6:	f7fc ff87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003daa:	2102      	movs	r1, #2
 8003dac:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003db0:	f7fc ff82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003db4:	2184      	movs	r1, #132	; 0x84
 8003db6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003dba:	f7fc ff7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003dc4:	f7fc ff78 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003dc8:	21a4      	movs	r1, #164	; 0xa4
 8003dca:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003dce:	f7fc ff73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003dd8:	f7fc ff6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003ddc:	21b7      	movs	r1, #183	; 0xb7
 8003dde:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003de2:	f7fc ff69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003de6:	2102      	movs	r1, #2
 8003de8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003dec:	f7fc ff64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003df0:	21cf      	movs	r1, #207	; 0xcf
 8003df2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003df6:	f7fc ff5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003e00:	f7fc ff5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003e04:	21de      	movs	r1, #222	; 0xde
 8003e06:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003e0a:	f7fc ff55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003e14:	f7fc ff50 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003e18:	21f2      	movs	r1, #242	; 0xf2
 8003e1a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003e1e:	f7fc ff4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003e22:	2102      	movs	r1, #2
 8003e24:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003e28:	f7fc ff46 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003e2c:	21fe      	movs	r1, #254	; 0xfe
 8003e2e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003e32:	f7fc ff41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003e36:	2103      	movs	r1, #3
 8003e38:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003e3c:	f7fc ff3c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003e40:	2110      	movs	r1, #16
 8003e42:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003e46:	f7fc ff37 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003e50:	f7fc ff32 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003e54:	2133      	movs	r1, #51	; 0x33
 8003e56:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003e5a:	f7fc ff2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003e5e:	2103      	movs	r1, #3
 8003e60:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003e64:	f7fc ff28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003e68:	216d      	movs	r1, #109	; 0x6d
 8003e6a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003e6e:	f7fc ff23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003e72:	2100      	movs	r1, #0
 8003e74:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003e78:	f7fc ff1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003e7c:	2133      	movs	r1, #51	; 0x33
 8003e7e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003e82:	f7fc ff19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003e86:	2100      	movs	r1, #0
 8003e88:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003e8c:	f7fc ff14 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003e90:	2134      	movs	r1, #52	; 0x34
 8003e92:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003e96:	f7fc ff0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003ea0:	f7fc ff0a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003ea4:	213a      	movs	r1, #58	; 0x3a
 8003ea6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003eaa:	f7fc ff05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003eb4:	f7fc ff00 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003eb8:	214a      	movs	r1, #74	; 0x4a
 8003eba:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003ebe:	f7fc fefb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003ec8:	f7fc fef6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003ecc:	215c      	movs	r1, #92	; 0x5c
 8003ece:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003ed2:	f7fc fef1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003edc:	f7fc feec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003ee0:	2181      	movs	r1, #129	; 0x81
 8003ee2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003ee6:	f7fc fee7 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003eea:	2100      	movs	r1, #0
 8003eec:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003ef0:	f7fc fee2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003ef4:	21a6      	movs	r1, #166	; 0xa6
 8003ef6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003efa:	f7fc fedd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003efe:	2100      	movs	r1, #0
 8003f00:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003f04:	f7fc fed8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003f08:	21e5      	movs	r1, #229	; 0xe5
 8003f0a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003f0e:	f7fc fed3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003f12:	2101      	movs	r1, #1
 8003f14:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003f18:	f7fc fece 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003f1c:	2113      	movs	r1, #19
 8003f1e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003f22:	f7fc fec9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003f26:	2101      	movs	r1, #1
 8003f28:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003f2c:	f7fc fec4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003f30:	2154      	movs	r1, #84	; 0x54
 8003f32:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003f36:	f7fc febf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003f40:	f7fc feba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003f44:	2182      	movs	r1, #130	; 0x82
 8003f46:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003f4a:	f7fc feb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003f54:	f7fc feb0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003f58:	21ca      	movs	r1, #202	; 0xca
 8003f5a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003f5e:	f7fc feab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003f62:	2102      	movs	r1, #2
 8003f64:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003f68:	f7fc fea6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003f72:	f7fc fea1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003f76:	2102      	movs	r1, #2
 8003f78:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003f7c:	f7fc fe9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003f80:	2101      	movs	r1, #1
 8003f82:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003f86:	f7fc fe97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003f90:	f7fc fe92 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003f94:	2134      	movs	r1, #52	; 0x34
 8003f96:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003f9a:	f7fc fe8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003fa4:	f7fc fe88 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003fa8:	2167      	movs	r1, #103	; 0x67
 8003faa:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003fae:	f7fc fe83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003fb8:	f7fc fe7e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003fbc:	2184      	movs	r1, #132	; 0x84
 8003fbe:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003fc2:	f7fc fe79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003fcc:	f7fc fe74 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003fd0:	21a4      	movs	r1, #164	; 0xa4
 8003fd2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003fd6:	f7fc fe6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003fda:	2102      	movs	r1, #2
 8003fdc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003fe0:	f7fc fe6a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003fe4:	21b7      	movs	r1, #183	; 0xb7
 8003fe6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003fea:	f7fc fe65 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ff4:	f7fc fe60 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003ff8:	21cf      	movs	r1, #207	; 0xcf
 8003ffa:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003ffe:	f7fc fe5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8004002:	2102      	movs	r1, #2
 8004004:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004008:	f7fc fe56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 800400c:	21de      	movs	r1, #222	; 0xde
 800400e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004012:	f7fc fe51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8004016:	2102      	movs	r1, #2
 8004018:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800401c:	f7fc fe4c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004020:	21f2      	movs	r1, #242	; 0xf2
 8004022:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004026:	f7fc fe47 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 800402a:	2102      	movs	r1, #2
 800402c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004030:	f7fc fe42 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8004034:	21fe      	movs	r1, #254	; 0xfe
 8004036:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800403a:	f7fc fe3d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 800403e:	2103      	movs	r1, #3
 8004040:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004044:	f7fc fe38 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004048:	2110      	movs	r1, #16
 800404a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800404e:	f7fc fe33 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8004052:	2103      	movs	r1, #3
 8004054:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004058:	f7fc fe2e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800405c:	2133      	movs	r1, #51	; 0x33
 800405e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8004062:	f7fc fe29 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8004066:	2103      	movs	r1, #3
 8004068:	f24d 4032 	movw	r0, #54322	; 0xd432
 800406c:	f7fc fe24 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004070:	216d      	movs	r1, #109	; 0x6d
 8004072:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004076:	f7fc fe1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800407a:	2100      	movs	r1, #0
 800407c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004080:	f7fc fe1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8004084:	2133      	movs	r1, #51	; 0x33
 8004086:	f24d 5001 	movw	r0, #54529	; 0xd501
 800408a:	f7fc fe15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800408e:	2100      	movs	r1, #0
 8004090:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004094:	f7fc fe10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004098:	2134      	movs	r1, #52	; 0x34
 800409a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800409e:	f7fc fe0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80040a2:	2100      	movs	r1, #0
 80040a4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80040a8:	f7fc fe06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80040ac:	213a      	movs	r1, #58	; 0x3a
 80040ae:	f24d 5005 	movw	r0, #54533	; 0xd505
 80040b2:	f7fc fe01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80040b6:	2100      	movs	r1, #0
 80040b8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80040bc:	f7fc fdfc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80040c0:	214a      	movs	r1, #74	; 0x4a
 80040c2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80040c6:	f7fc fdf7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80040ca:	2100      	movs	r1, #0
 80040cc:	f24d 5008 	movw	r0, #54536	; 0xd508
 80040d0:	f7fc fdf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80040d4:	215c      	movs	r1, #92	; 0x5c
 80040d6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80040da:	f7fc fded 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80040de:	2100      	movs	r1, #0
 80040e0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80040e4:	f7fc fde8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80040e8:	2181      	movs	r1, #129	; 0x81
 80040ea:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80040ee:	f7fc fde3 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80040f2:	2100      	movs	r1, #0
 80040f4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80040f8:	f7fc fdde 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80040fc:	21a6      	movs	r1, #166	; 0xa6
 80040fe:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004102:	f7fc fdd9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004106:	2100      	movs	r1, #0
 8004108:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800410c:	f7fc fdd4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004110:	21e5      	movs	r1, #229	; 0xe5
 8004112:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004116:	f7fc fdcf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 800411a:	2101      	movs	r1, #1
 800411c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004120:	f7fc fdca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8004124:	2113      	movs	r1, #19
 8004126:	f24d 5011 	movw	r0, #54545	; 0xd511
 800412a:	f7fc fdc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 800412e:	2101      	movs	r1, #1
 8004130:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004134:	f7fc fdc0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004138:	2154      	movs	r1, #84	; 0x54
 800413a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800413e:	f7fc fdbb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8004142:	2101      	movs	r1, #1
 8004144:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004148:	f7fc fdb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800414c:	2182      	movs	r1, #130	; 0x82
 800414e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004152:	f7fc fdb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004156:	2101      	movs	r1, #1
 8004158:	f24d 5016 	movw	r0, #54550	; 0xd516
 800415c:	f7fc fdac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004160:	21ca      	movs	r1, #202	; 0xca
 8004162:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004166:	f7fc fda7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800416a:	2102      	movs	r1, #2
 800416c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004170:	f7fc fda2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8004174:	2100      	movs	r1, #0
 8004176:	f24d 5019 	movw	r0, #54553	; 0xd519
 800417a:	f7fc fd9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800417e:	2102      	movs	r1, #2
 8004180:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004184:	f7fc fd98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004188:	2101      	movs	r1, #1
 800418a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800418e:	f7fc fd93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004192:	2102      	movs	r1, #2
 8004194:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004198:	f7fc fd8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800419c:	2134      	movs	r1, #52	; 0x34
 800419e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80041a2:	f7fc fd89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 80041a6:	2102      	movs	r1, #2
 80041a8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80041ac:	f7fc fd84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 80041b0:	2167      	movs	r1, #103	; 0x67
 80041b2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80041b6:	f7fc fd7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80041ba:	2102      	movs	r1, #2
 80041bc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80041c0:	f7fc fd7a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80041c4:	2184      	movs	r1, #132	; 0x84
 80041c6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80041ca:	f7fc fd75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80041d4:	f7fc fd70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80041d8:	21a4      	movs	r1, #164	; 0xa4
 80041da:	f24d 5023 	movw	r0, #54563	; 0xd523
 80041de:	f7fc fd6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80041e2:	2102      	movs	r1, #2
 80041e4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80041e8:	f7fc fd66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80041ec:	21b7      	movs	r1, #183	; 0xb7
 80041ee:	f24d 5025 	movw	r0, #54565	; 0xd525
 80041f2:	f7fc fd61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80041f6:	2102      	movs	r1, #2
 80041f8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80041fc:	f7fc fd5c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004200:	21cf      	movs	r1, #207	; 0xcf
 8004202:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004206:	f7fc fd57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800420a:	2102      	movs	r1, #2
 800420c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004210:	f7fc fd52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004214:	21de      	movs	r1, #222	; 0xde
 8004216:	f24d 5029 	movw	r0, #54569	; 0xd529
 800421a:	f7fc fd4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800421e:	2102      	movs	r1, #2
 8004220:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004224:	f7fc fd48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004228:	21f2      	movs	r1, #242	; 0xf2
 800422a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800422e:	f7fc fd43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004232:	2102      	movs	r1, #2
 8004234:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004238:	f7fc fd3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800423c:	21fe      	movs	r1, #254	; 0xfe
 800423e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004242:	f7fc fd39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004246:	2103      	movs	r1, #3
 8004248:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800424c:	f7fc fd34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004250:	2110      	movs	r1, #16
 8004252:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004256:	f7fc fd2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800425a:	2103      	movs	r1, #3
 800425c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004260:	f7fc fd2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004264:	2133      	movs	r1, #51	; 0x33
 8004266:	f24d 5031 	movw	r0, #54577	; 0xd531
 800426a:	f7fc fd25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800426e:	2103      	movs	r1, #3
 8004270:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004274:	f7fc fd20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004278:	216d      	movs	r1, #109	; 0x6d
 800427a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800427e:	f7fc fd1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004282:	2100      	movs	r1, #0
 8004284:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004288:	f7fc fd16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800428c:	2133      	movs	r1, #51	; 0x33
 800428e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004292:	f7fc fd11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004296:	2100      	movs	r1, #0
 8004298:	f24d 6002 	movw	r0, #54786	; 0xd602
 800429c:	f7fc fd0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80042a0:	2134      	movs	r1, #52	; 0x34
 80042a2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80042a6:	f7fc fd07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80042aa:	2100      	movs	r1, #0
 80042ac:	f24d 6004 	movw	r0, #54788	; 0xd604
 80042b0:	f7fc fd02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80042b4:	213a      	movs	r1, #58	; 0x3a
 80042b6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80042ba:	f7fc fcfd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80042be:	2100      	movs	r1, #0
 80042c0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80042c4:	f7fc fcf8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80042c8:	214a      	movs	r1, #74	; 0x4a
 80042ca:	f24d 6007 	movw	r0, #54791	; 0xd607
 80042ce:	f7fc fcf3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80042d2:	2100      	movs	r1, #0
 80042d4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80042d8:	f7fc fcee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80042dc:	215c      	movs	r1, #92	; 0x5c
 80042de:	f24d 6009 	movw	r0, #54793	; 0xd609
 80042e2:	f7fc fce9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80042e6:	2100      	movs	r1, #0
 80042e8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80042ec:	f7fc fce4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80042f0:	2181      	movs	r1, #129	; 0x81
 80042f2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80042f6:	f7fc fcdf 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80042fa:	2100      	movs	r1, #0
 80042fc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004300:	f7fc fcda 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004304:	21a6      	movs	r1, #166	; 0xa6
 8004306:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800430a:	f7fc fcd5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800430e:	2100      	movs	r1, #0
 8004310:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004314:	f7fc fcd0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004318:	21e5      	movs	r1, #229	; 0xe5
 800431a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800431e:	f7fc fccb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004322:	2101      	movs	r1, #1
 8004324:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004328:	f7fc fcc6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800432c:	2113      	movs	r1, #19
 800432e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004332:	f7fc fcc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004336:	2101      	movs	r1, #1
 8004338:	f24d 6012 	movw	r0, #54802	; 0xd612
 800433c:	f7fc fcbc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004340:	2154      	movs	r1, #84	; 0x54
 8004342:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004346:	f7fc fcb7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800434a:	2101      	movs	r1, #1
 800434c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004350:	f7fc fcb2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004354:	2182      	movs	r1, #130	; 0x82
 8004356:	f24d 6015 	movw	r0, #54805	; 0xd615
 800435a:	f7fc fcad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800435e:	2101      	movs	r1, #1
 8004360:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004364:	f7fc fca8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004368:	21ca      	movs	r1, #202	; 0xca
 800436a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800436e:	f7fc fca3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004372:	2102      	movs	r1, #2
 8004374:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004378:	f7fc fc9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800437c:	2100      	movs	r1, #0
 800437e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004382:	f7fc fc99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004386:	2102      	movs	r1, #2
 8004388:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800438c:	f7fc fc94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004390:	2101      	movs	r1, #1
 8004392:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004396:	f7fc fc8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800439a:	2102      	movs	r1, #2
 800439c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80043a0:	f7fc fc8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80043a4:	2134      	movs	r1, #52	; 0x34
 80043a6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80043aa:	f7fc fc85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80043ae:	2102      	movs	r1, #2
 80043b0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80043b4:	f7fc fc80 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80043b8:	2167      	movs	r1, #103	; 0x67
 80043ba:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80043be:	f7fc fc7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80043c2:	2102      	movs	r1, #2
 80043c4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80043c8:	f7fc fc76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80043cc:	2184      	movs	r1, #132	; 0x84
 80043ce:	f24d 6021 	movw	r0, #54817	; 0xd621
 80043d2:	f7fc fc71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80043d6:	2102      	movs	r1, #2
 80043d8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80043dc:	f7fc fc6c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80043e0:	21a4      	movs	r1, #164	; 0xa4
 80043e2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80043e6:	f7fc fc67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80043ea:	2102      	movs	r1, #2
 80043ec:	f24d 6024 	movw	r0, #54820	; 0xd624
 80043f0:	f7fc fc62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80043f4:	21b7      	movs	r1, #183	; 0xb7
 80043f6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80043fa:	f7fc fc5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80043fe:	2102      	movs	r1, #2
 8004400:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004404:	f7fc fc58 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004408:	21cf      	movs	r1, #207	; 0xcf
 800440a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800440e:	f7fc fc53 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004412:	2102      	movs	r1, #2
 8004414:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004418:	f7fc fc4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800441c:	21de      	movs	r1, #222	; 0xde
 800441e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004422:	f7fc fc49 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004426:	2102      	movs	r1, #2
 8004428:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800442c:	f7fc fc44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004430:	21f2      	movs	r1, #242	; 0xf2
 8004432:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004436:	f7fc fc3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800443a:	2102      	movs	r1, #2
 800443c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004440:	f7fc fc3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004444:	21fe      	movs	r1, #254	; 0xfe
 8004446:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800444a:	f7fc fc35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800444e:	2103      	movs	r1, #3
 8004450:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004454:	f7fc fc30 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004458:	2110      	movs	r1, #16
 800445a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800445e:	f7fc fc2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004462:	2103      	movs	r1, #3
 8004464:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004468:	f7fc fc26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800446c:	2133      	movs	r1, #51	; 0x33
 800446e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004472:	f7fc fc21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004476:	2103      	movs	r1, #3
 8004478:	f24d 6032 	movw	r0, #54834	; 0xd632
 800447c:	f7fc fc1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004480:	216d      	movs	r1, #109	; 0x6d
 8004482:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004486:	f7fc fc17 	bl	8000cb8 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800448a:	2155      	movs	r1, #85	; 0x55
 800448c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004490:	f7fc fc12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004494:	21aa      	movs	r1, #170	; 0xaa
 8004496:	f24f 0001 	movw	r0, #61441	; 0xf001
 800449a:	f7fc fc0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800449e:	2152      	movs	r1, #82	; 0x52
 80044a0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80044a4:	f7fc fc08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80044a8:	2108      	movs	r1, #8
 80044aa:	f24f 0003 	movw	r0, #61443	; 0xf003
 80044ae:	f7fc fc03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80044b2:	2100      	movs	r1, #0
 80044b4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80044b8:	f7fc fbfe 	bl	8000cb8 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80044bc:	21cc      	movs	r1, #204	; 0xcc
 80044be:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80044c2:	f7fc fbf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80044c6:	2100      	movs	r1, #0
 80044c8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80044cc:	f7fc fbf4 	bl	8000cb8 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80044d0:	2105      	movs	r1, #5
 80044d2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80044d6:	f7fc fbef 	bl	8000cb8 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80044da:	2170      	movs	r1, #112	; 0x70
 80044dc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80044e0:	f7fc fbea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80044e4:	2170      	movs	r1, #112	; 0x70
 80044e6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80044ea:	f7fc fbe5 	bl	8000cb8 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80044ee:	2101      	movs	r1, #1
 80044f0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80044f4:	f7fc fbe0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80044f8:	2103      	movs	r1, #3
 80044fa:	f64b 0001 	movw	r0, #47105	; 0xb801
 80044fe:	f7fc fbdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004502:	2103      	movs	r1, #3
 8004504:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004508:	f7fc fbd6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800450c:	2103      	movs	r1, #3
 800450e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004512:	f7fc fbd1 	bl	8000cb8 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004516:	2102      	movs	r1, #2
 8004518:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800451c:	f7fc fbcc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004520:	2100      	movs	r1, #0
 8004522:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004526:	f7fc fbc7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800452a:	2100      	movs	r1, #0
 800452c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004530:	f7fc fbc2 	bl	8000cb8 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004534:	21d0      	movs	r1, #208	; 0xd0
 8004536:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800453a:	f7fc fbbd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800453e:	2102      	movs	r1, #2
 8004540:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004544:	f7fc fbb8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004548:	2150      	movs	r1, #80	; 0x50
 800454a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800454e:	f7fc fbb3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004552:	2150      	movs	r1, #80	; 0x50
 8004554:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004558:	f7fc fbae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800455c:	2150      	movs	r1, #80	; 0x50
 800455e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004562:	f7fc fba9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004566:	2100      	movs	r1, #0
 8004568:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800456c:	f7fc fba4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004570:	2155      	movs	r1, #85	; 0x55
 8004572:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004576:	f7fc fb9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800457a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800457e:	f7fc fb0f 	bl	8000ba0 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004582:	2001      	movs	r0, #1
 8004584:	f002 fa78 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004588:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800458c:	f7fc fb08 	bl	8000ba0 <LCD_WR_REG>
 8004590:	f001 bd18 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004594:	4bec      	ldr	r3, [pc, #944]	; (8004948 <LCD_Init+0x27b8>)
 8004596:	889b      	ldrh	r3, [r3, #4]
 8004598:	f249 3225 	movw	r2, #37669	; 0x9325
 800459c:	4293      	cmp	r3, r2
 800459e:	f040 80d7 	bne.w	8004750 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80045a2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80045a6:	20e5      	movs	r0, #229	; 0xe5
 80045a8:	f7fc fb86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80045ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fc fb81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80045b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045ba:	2002      	movs	r0, #2
 80045bc:	f7fc fb7c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80045c0:	f241 0130 	movw	r1, #4144	; 0x1030
 80045c4:	2003      	movs	r0, #3
 80045c6:	f7fc fb77 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80045ca:	2100      	movs	r1, #0
 80045cc:	2004      	movs	r0, #4
 80045ce:	f7fc fb73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80045d2:	f240 2102 	movw	r1, #514	; 0x202
 80045d6:	2008      	movs	r0, #8
 80045d8:	f7fc fb6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80045dc:	2100      	movs	r1, #0
 80045de:	2009      	movs	r0, #9
 80045e0:	f7fc fb6a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80045e4:	2100      	movs	r1, #0
 80045e6:	200a      	movs	r0, #10
 80045e8:	f7fc fb66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80045ec:	2100      	movs	r1, #0
 80045ee:	200c      	movs	r0, #12
 80045f0:	f7fc fb62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80045f4:	2100      	movs	r1, #0
 80045f6:	200d      	movs	r0, #13
 80045f8:	f7fc fb5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80045fc:	2100      	movs	r1, #0
 80045fe:	200f      	movs	r0, #15
 8004600:	f7fc fb5a 	bl	8000cb8 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004604:	2100      	movs	r1, #0
 8004606:	2010      	movs	r0, #16
 8004608:	f7fc fb56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800460c:	2107      	movs	r1, #7
 800460e:	2011      	movs	r0, #17
 8004610:	f7fc fb52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004614:	2100      	movs	r1, #0
 8004616:	2012      	movs	r0, #18
 8004618:	f7fc fb4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800461c:	2100      	movs	r1, #0
 800461e:	2013      	movs	r0, #19
 8004620:	f7fc fb4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004624:	2100      	movs	r1, #0
 8004626:	2007      	movs	r0, #7
 8004628:	f7fc fb46 	bl	8000cb8 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800462c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004630:	2010      	movs	r0, #16
 8004632:	f7fc fb41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004636:	f240 2127 	movw	r1, #551	; 0x227
 800463a:	2011      	movs	r0, #17
 800463c:	f7fc fb3c 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004640:	219d      	movs	r1, #157	; 0x9d
 8004642:	2012      	movs	r0, #18
 8004644:	f7fc fb38 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004648:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800464c:	2013      	movs	r0, #19
 800464e:	f7fc fb33 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004652:	2125      	movs	r1, #37	; 0x25
 8004654:	2029      	movs	r0, #41	; 0x29
 8004656:	f7fc fb2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800465a:	210d      	movs	r1, #13
 800465c:	202b      	movs	r0, #43	; 0x2b
 800465e:	f7fc fb2b 	bl	8000cb8 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004662:	2107      	movs	r1, #7
 8004664:	2030      	movs	r0, #48	; 0x30
 8004666:	f7fc fb27 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800466a:	f240 3103 	movw	r1, #771	; 0x303
 800466e:	2031      	movs	r0, #49	; 0x31
 8004670:	f7fc fb22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004674:	2103      	movs	r1, #3
 8004676:	2032      	movs	r0, #50	; 0x32
 8004678:	f7fc fb1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800467c:	f240 2106 	movw	r1, #518	; 0x206
 8004680:	2035      	movs	r0, #53	; 0x35
 8004682:	f7fc fb19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004686:	2108      	movs	r1, #8
 8004688:	2036      	movs	r0, #54	; 0x36
 800468a:	f7fc fb15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800468e:	f240 4106 	movw	r1, #1030	; 0x406
 8004692:	2037      	movs	r0, #55	; 0x37
 8004694:	f7fc fb10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004698:	f44f 7141 	mov.w	r1, #772	; 0x304
 800469c:	2038      	movs	r0, #56	; 0x38
 800469e:	f7fc fb0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80046a2:	2107      	movs	r1, #7
 80046a4:	2039      	movs	r0, #57	; 0x39
 80046a6:	f7fc fb07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80046aa:	f240 6102 	movw	r1, #1538	; 0x602
 80046ae:	203c      	movs	r0, #60	; 0x3c
 80046b0:	f7fc fb02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80046b4:	2108      	movs	r1, #8
 80046b6:	203d      	movs	r0, #61	; 0x3d
 80046b8:	f7fc fafe 	bl	8000cb8 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80046bc:	2100      	movs	r1, #0
 80046be:	2050      	movs	r0, #80	; 0x50
 80046c0:	f7fc fafa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80046c4:	21ef      	movs	r1, #239	; 0xef
 80046c6:	2051      	movs	r0, #81	; 0x51
 80046c8:	f7fc faf6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80046cc:	2100      	movs	r1, #0
 80046ce:	2052      	movs	r0, #82	; 0x52
 80046d0:	f7fc faf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80046d4:	f240 113f 	movw	r1, #319	; 0x13f
 80046d8:	2053      	movs	r0, #83	; 0x53
 80046da:	f7fc faed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80046de:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046e2:	2060      	movs	r0, #96	; 0x60
 80046e4:	f7fc fae8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046e8:	2101      	movs	r1, #1
 80046ea:	2061      	movs	r0, #97	; 0x61
 80046ec:	f7fc fae4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80046f0:	2100      	movs	r1, #0
 80046f2:	206a      	movs	r0, #106	; 0x6a
 80046f4:	f7fc fae0 	bl	8000cb8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2080      	movs	r0, #128	; 0x80
 80046fc:	f7fc fadc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004700:	2100      	movs	r1, #0
 8004702:	2081      	movs	r0, #129	; 0x81
 8004704:	f7fc fad8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004708:	2100      	movs	r1, #0
 800470a:	2082      	movs	r0, #130	; 0x82
 800470c:	f7fc fad4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004710:	2100      	movs	r1, #0
 8004712:	2083      	movs	r0, #131	; 0x83
 8004714:	f7fc fad0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004718:	2100      	movs	r1, #0
 800471a:	2084      	movs	r0, #132	; 0x84
 800471c:	f7fc facc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004720:	2100      	movs	r1, #0
 8004722:	2085      	movs	r0, #133	; 0x85
 8004724:	f7fc fac8 	bl	8000cb8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004728:	2110      	movs	r1, #16
 800472a:	2090      	movs	r0, #144	; 0x90
 800472c:	f7fc fac4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004730:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004734:	2092      	movs	r0, #146	; 0x92
 8004736:	f7fc fabf 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800473a:	f240 1133 	movw	r1, #307	; 0x133
 800473e:	2007      	movs	r0, #7
 8004740:	f7fc faba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004744:	2122      	movs	r1, #34	; 0x22
 8004746:	2000      	movs	r0, #0
 8004748:	f7fc fab6 	bl	8000cb8 <LCD_WriteReg>
 800474c:	f001 bc3a 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004750:	4b7d      	ldr	r3, [pc, #500]	; (8004948 <LCD_Init+0x27b8>)
 8004752:	889b      	ldrh	r3, [r3, #4]
 8004754:	f249 3228 	movw	r2, #37672	; 0x9328
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 80f7 	bne.w	800494c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800475e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004762:	20ec      	movs	r0, #236	; 0xec
 8004764:	f7fc faa8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004768:	f241 2134 	movw	r1, #4660	; 0x1234
 800476c:	20ef      	movs	r0, #239	; 0xef
 800476e:	f7fc faa3 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004776:	2001      	movs	r0, #1
 8004778:	f7fc fa9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800477c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004780:	2002      	movs	r0, #2
 8004782:	f7fc fa99 	bl	8000cb8 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004786:	f241 0130 	movw	r1, #4144	; 0x1030
 800478a:	2003      	movs	r0, #3
 800478c:	f7fc fa94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004790:	2100      	movs	r1, #0
 8004792:	2004      	movs	r0, #4
 8004794:	f7fc fa90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004798:	f240 2102 	movw	r1, #514	; 0x202
 800479c:	2008      	movs	r0, #8
 800479e:	f7fc fa8b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80047a2:	2100      	movs	r1, #0
 80047a4:	2009      	movs	r0, #9
 80047a6:	f7fc fa87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80047aa:	2100      	movs	r1, #0
 80047ac:	200a      	movs	r0, #10
 80047ae:	f7fc fa83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80047b2:	2101      	movs	r1, #1
 80047b4:	200c      	movs	r0, #12
 80047b6:	f7fc fa7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80047ba:	2100      	movs	r1, #0
 80047bc:	200d      	movs	r0, #13
 80047be:	f7fc fa7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80047c2:	2100      	movs	r1, #0
 80047c4:	200f      	movs	r0, #15
 80047c6:	f7fc fa77 	bl	8000cb8 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80047ca:	2100      	movs	r1, #0
 80047cc:	2010      	movs	r0, #16
 80047ce:	f7fc fa73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80047d2:	2107      	movs	r1, #7
 80047d4:	2011      	movs	r0, #17
 80047d6:	f7fc fa6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80047da:	2100      	movs	r1, #0
 80047dc:	2012      	movs	r0, #18
 80047de:	f7fc fa6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80047e2:	2100      	movs	r1, #0
 80047e4:	2013      	movs	r0, #19
 80047e6:	f7fc fa67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80047ea:	2101      	movs	r1, #1
 80047ec:	2007      	movs	r0, #7
 80047ee:	f7fc fa63 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80047f2:	2032      	movs	r0, #50	; 0x32
 80047f4:	f002 f940 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80047f8:	f241 4190 	movw	r1, #5264	; 0x1490
 80047fc:	2010      	movs	r0, #16
 80047fe:	f7fc fa5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004802:	f240 2127 	movw	r1, #551	; 0x227
 8004806:	2011      	movs	r0, #17
 8004808:	f7fc fa56 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800480c:	2032      	movs	r0, #50	; 0x32
 800480e:	f002 f933 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004812:	218a      	movs	r1, #138	; 0x8a
 8004814:	2012      	movs	r0, #18
 8004816:	f7fc fa4f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800481a:	2032      	movs	r0, #50	; 0x32
 800481c:	f002 f92c 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004820:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004824:	2013      	movs	r0, #19
 8004826:	f7fc fa47 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800482a:	2106      	movs	r1, #6
 800482c:	2029      	movs	r0, #41	; 0x29
 800482e:	f7fc fa43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004832:	210d      	movs	r1, #13
 8004834:	202b      	movs	r0, #43	; 0x2b
 8004836:	f7fc fa3f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800483a:	2032      	movs	r0, #50	; 0x32
 800483c:	f002 f91c 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004840:	2100      	movs	r1, #0
 8004842:	2020      	movs	r0, #32
 8004844:	f7fc fa38 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004848:	2100      	movs	r1, #0
 800484a:	2021      	movs	r0, #33	; 0x21
 800484c:	f7fc fa34 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004850:	2032      	movs	r0, #50	; 0x32
 8004852:	f002 f911 	bl	8006a78 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004856:	2100      	movs	r1, #0
 8004858:	2030      	movs	r0, #48	; 0x30
 800485a:	f7fc fa2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800485e:	f240 6104 	movw	r1, #1540	; 0x604
 8004862:	2031      	movs	r0, #49	; 0x31
 8004864:	f7fc fa28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004868:	f240 3105 	movw	r1, #773	; 0x305
 800486c:	2032      	movs	r0, #50	; 0x32
 800486e:	f7fc fa23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004872:	2100      	movs	r1, #0
 8004874:	2035      	movs	r0, #53	; 0x35
 8004876:	f7fc fa1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800487a:	f640 4109 	movw	r1, #3081	; 0xc09
 800487e:	2036      	movs	r0, #54	; 0x36
 8004880:	f7fc fa1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004884:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004888:	2037      	movs	r0, #55	; 0x37
 800488a:	f7fc fa15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800488e:	f240 3101 	movw	r1, #769	; 0x301
 8004892:	2038      	movs	r0, #56	; 0x38
 8004894:	f7fc fa10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004898:	f240 7107 	movw	r1, #1799	; 0x707
 800489c:	2039      	movs	r0, #57	; 0x39
 800489e:	f7fc fa0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80048a2:	2100      	movs	r1, #0
 80048a4:	203c      	movs	r0, #60	; 0x3c
 80048a6:	f7fc fa07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80048aa:	f640 210a 	movw	r1, #2570	; 0xa0a
 80048ae:	203d      	movs	r0, #61	; 0x3d
 80048b0:	f7fc fa02 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80048b4:	2032      	movs	r0, #50	; 0x32
 80048b6:	f002 f8df 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80048ba:	2100      	movs	r1, #0
 80048bc:	2050      	movs	r0, #80	; 0x50
 80048be:	f7fc f9fb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80048c2:	21ef      	movs	r1, #239	; 0xef
 80048c4:	2051      	movs	r0, #81	; 0x51
 80048c6:	f7fc f9f7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80048ca:	2100      	movs	r1, #0
 80048cc:	2052      	movs	r0, #82	; 0x52
 80048ce:	f7fc f9f3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80048d2:	f240 113f 	movw	r1, #319	; 0x13f
 80048d6:	2053      	movs	r0, #83	; 0x53
 80048d8:	f7fc f9ee 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80048dc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80048e0:	2060      	movs	r0, #96	; 0x60
 80048e2:	f7fc f9e9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80048e6:	2101      	movs	r1, #1
 80048e8:	2061      	movs	r0, #97	; 0x61
 80048ea:	f7fc f9e5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80048ee:	2100      	movs	r1, #0
 80048f0:	206a      	movs	r0, #106	; 0x6a
 80048f2:	f7fc f9e1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80048f6:	2100      	movs	r1, #0
 80048f8:	2080      	movs	r0, #128	; 0x80
 80048fa:	f7fc f9dd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048fe:	2100      	movs	r1, #0
 8004900:	2081      	movs	r0, #129	; 0x81
 8004902:	f7fc f9d9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004906:	2100      	movs	r1, #0
 8004908:	2082      	movs	r0, #130	; 0x82
 800490a:	f7fc f9d5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800490e:	2100      	movs	r1, #0
 8004910:	2083      	movs	r0, #131	; 0x83
 8004912:	f7fc f9d1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004916:	2100      	movs	r1, #0
 8004918:	2084      	movs	r0, #132	; 0x84
 800491a:	f7fc f9cd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800491e:	2100      	movs	r1, #0
 8004920:	2085      	movs	r0, #133	; 0x85
 8004922:	f7fc f9c9 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004926:	2110      	movs	r1, #16
 8004928:	2090      	movs	r0, #144	; 0x90
 800492a:	f7fc f9c5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800492e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004932:	2092      	movs	r0, #146	; 0x92
 8004934:	f7fc f9c0 	bl	8000cb8 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004938:	f240 1133 	movw	r1, #307	; 0x133
 800493c:	2007      	movs	r0, #7
 800493e:	f7fc f9bb 	bl	8000cb8 <LCD_WriteReg>
 8004942:	f001 bb3f 	b.w	8005fc4 <LCD_Init+0x3e34>
 8004946:	bf00      	nop
 8004948:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x9320) //测试OK.
 800494c:	4bce      	ldr	r3, [pc, #824]	; (8004c88 <LCD_Init+0x2af8>)
 800494e:	889b      	ldrh	r3, [r3, #4]
 8004950:	f249 3220 	movw	r2, #37664	; 0x9320
 8004954:	4293      	cmp	r3, r2
 8004956:	f040 80ad 	bne.w	8004ab4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800495a:	2100      	movs	r1, #0
 800495c:	2000      	movs	r0, #0
 800495e:	f7fc f9ab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004966:	2001      	movs	r0, #1
 8004968:	f7fc f9a6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800496c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004970:	2002      	movs	r0, #2
 8004972:	f7fc f9a1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004976:	f241 0130 	movw	r1, #4144	; 0x1030
 800497a:	2003      	movs	r0, #3
 800497c:	f7fc f99c 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004980:	2100      	movs	r1, #0
 8004982:	2004      	movs	r0, #4
 8004984:	f7fc f998 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004988:	f240 2102 	movw	r1, #514	; 0x202
 800498c:	2008      	movs	r0, #8
 800498e:	f7fc f993 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004992:	2100      	movs	r1, #0
 8004994:	2009      	movs	r0, #9
 8004996:	f7fc f98f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800499a:	2100      	movs	r1, #0
 800499c:	200a      	movs	r0, #10
 800499e:	f7fc f98b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80049a2:	2101      	movs	r1, #1
 80049a4:	200c      	movs	r0, #12
 80049a6:	f7fc f987 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80049aa:	2100      	movs	r1, #0
 80049ac:	200d      	movs	r0, #13
 80049ae:	f7fc f983 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80049b2:	2100      	movs	r1, #0
 80049b4:	200f      	movs	r0, #15
 80049b6:	f7fc f97f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80049ba:	2032      	movs	r0, #50	; 0x32
 80049bc:	f002 f85c 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80049c0:	f240 1101 	movw	r1, #257	; 0x101
 80049c4:	2007      	movs	r0, #7
 80049c6:	f7fc f977 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80049ca:	2032      	movs	r0, #50	; 0x32
 80049cc:	f002 f854 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80049d0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80049d4:	2010      	movs	r0, #16
 80049d6:	f7fc f96f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80049da:	2107      	movs	r1, #7
 80049dc:	2011      	movs	r0, #17
 80049de:	f7fc f96b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80049e2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049e6:	2012      	movs	r0, #18
 80049e8:	f7fc f966 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80049ec:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80049f0:	2013      	movs	r0, #19
 80049f2:	f7fc f961 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80049f6:	2100      	movs	r1, #0
 80049f8:	2029      	movs	r0, #41	; 0x29
 80049fa:	f7fc f95d 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80049fe:	f244 0110 	movw	r1, #16400	; 0x4010
 8004a02:	202b      	movs	r0, #43	; 0x2b
 8004a04:	f7fc f958 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2050      	movs	r0, #80	; 0x50
 8004a0c:	f7fc f954 	bl	8000cb8 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004a10:	21ef      	movs	r1, #239	; 0xef
 8004a12:	2051      	movs	r0, #81	; 0x51
 8004a14:	f7fc f950 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2052      	movs	r0, #82	; 0x52
 8004a1c:	f7fc f94c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004a20:	f240 113f 	movw	r1, #319	; 0x13f
 8004a24:	2053      	movs	r0, #83	; 0x53
 8004a26:	f7fc f947 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004a2a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a2e:	2060      	movs	r0, #96	; 0x60
 8004a30:	f7fc f942 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004a34:	2101      	movs	r1, #1
 8004a36:	2061      	movs	r0, #97	; 0x61
 8004a38:	f7fc f93e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	206a      	movs	r0, #106	; 0x6a
 8004a40:	f7fc f93a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004a44:	2100      	movs	r1, #0
 8004a46:	2080      	movs	r0, #128	; 0x80
 8004a48:	f7fc f936 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	2081      	movs	r0, #129	; 0x81
 8004a50:	f7fc f932 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004a54:	2100      	movs	r1, #0
 8004a56:	2082      	movs	r0, #130	; 0x82
 8004a58:	f7fc f92e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2083      	movs	r0, #131	; 0x83
 8004a60:	f7fc f92a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004a64:	2100      	movs	r1, #0
 8004a66:	2084      	movs	r0, #132	; 0x84
 8004a68:	f7fc f926 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2085      	movs	r0, #133	; 0x85
 8004a70:	f7fc f922 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004a74:	2110      	movs	r1, #16
 8004a76:	2090      	movs	r0, #144	; 0x90
 8004a78:	f7fc f91e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2092      	movs	r0, #146	; 0x92
 8004a80:	f7fc f91a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004a84:	2101      	movs	r1, #1
 8004a86:	2093      	movs	r0, #147	; 0x93
 8004a88:	f7fc f916 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004a8c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a90:	2095      	movs	r0, #149	; 0x95
 8004a92:	f7fc f911 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004a96:	2100      	movs	r1, #0
 8004a98:	2097      	movs	r0, #151	; 0x97
 8004a9a:	f7fc f90d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	2098      	movs	r0, #152	; 0x98
 8004aa2:	f7fc f909 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004aa6:	f240 1173 	movw	r1, #371	; 0x173
 8004aaa:	2007      	movs	r0, #7
 8004aac:	f7fc f904 	bl	8000cb8 <LCD_WriteReg>
 8004ab0:	f001 ba88 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004ab4:	4b74      	ldr	r3, [pc, #464]	; (8004c88 <LCD_Init+0x2af8>)
 8004ab6:	889b      	ldrh	r3, [r3, #4]
 8004ab8:	f249 3231 	movw	r2, #37681	; 0x9331
 8004abc:	4293      	cmp	r3, r2
 8004abe:	f040 80e5 	bne.w	8004c8c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004ac2:	f241 0114 	movw	r1, #4116	; 0x1014
 8004ac6:	20e7      	movs	r0, #231	; 0xe7
 8004ac8:	f7fc f8f6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f7fc f8f1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ada:	2002      	movs	r0, #2
 8004adc:	f7fc f8ec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004ae0:	f241 0138 	movw	r1, #4152	; 0x1038
 8004ae4:	2003      	movs	r0, #3
 8004ae6:	f7fc f8e7 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004aea:	f240 2102 	movw	r1, #514	; 0x202
 8004aee:	2008      	movs	r0, #8
 8004af0:	f7fc f8e2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004af4:	2100      	movs	r1, #0
 8004af6:	2009      	movs	r0, #9
 8004af8:	f7fc f8de 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004afc:	2100      	movs	r1, #0
 8004afe:	200a      	movs	r0, #10
 8004b00:	f7fc f8da 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004b04:	2100      	movs	r1, #0
 8004b06:	200c      	movs	r0, #12
 8004b08:	f7fc f8d6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	200d      	movs	r0, #13
 8004b10:	f7fc f8d2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004b14:	2100      	movs	r1, #0
 8004b16:	200f      	movs	r0, #15
 8004b18:	f7fc f8ce 	bl	8000cb8 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2010      	movs	r0, #16
 8004b20:	f7fc f8ca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b24:	2107      	movs	r1, #7
 8004b26:	2011      	movs	r0, #17
 8004b28:	f7fc f8c6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2012      	movs	r0, #18
 8004b30:	f7fc f8c2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004b34:	2100      	movs	r1, #0
 8004b36:	2013      	movs	r0, #19
 8004b38:	f7fc f8be 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004b3c:	20c8      	movs	r0, #200	; 0xc8
 8004b3e:	f001 ff9b 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b42:	f241 6190 	movw	r1, #5776	; 0x1690
 8004b46:	2010      	movs	r0, #16
 8004b48:	f7fc f8b6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b4c:	f240 2127 	movw	r1, #551	; 0x227
 8004b50:	2011      	movs	r0, #17
 8004b52:	f7fc f8b1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b56:	2032      	movs	r0, #50	; 0x32
 8004b58:	f001 ff8e 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004b5c:	210c      	movs	r1, #12
 8004b5e:	2012      	movs	r0, #18
 8004b60:	f7fc f8aa 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b64:	2032      	movs	r0, #50	; 0x32
 8004b66:	f001 ff87 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b6e:	2013      	movs	r0, #19
 8004b70:	f7fc f8a2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004b74:	2111      	movs	r1, #17
 8004b76:	2029      	movs	r0, #41	; 0x29
 8004b78:	f7fc f89e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004b7c:	210b      	movs	r1, #11
 8004b7e:	202b      	movs	r0, #43	; 0x2b
 8004b80:	f7fc f89a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b84:	2032      	movs	r0, #50	; 0x32
 8004b86:	f001 ff77 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2020      	movs	r0, #32
 8004b8e:	f7fc f893 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004b92:	f240 113f 	movw	r1, #319	; 0x13f
 8004b96:	2021      	movs	r0, #33	; 0x21
 8004b98:	f7fc f88e 	bl	8000cb8 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2030      	movs	r0, #48	; 0x30
 8004ba0:	f7fc f88a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004ba4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004ba8:	2031      	movs	r0, #49	; 0x31
 8004baa:	f7fc f885 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2032      	movs	r0, #50	; 0x32
 8004bb2:	f7fc f881 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004bb6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004bba:	2035      	movs	r0, #53	; 0x35
 8004bbc:	f7fc f87c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004bc0:	f241 610a 	movw	r1, #5642	; 0x160a
 8004bc4:	2036      	movs	r0, #54	; 0x36
 8004bc6:	f7fc f877 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004bca:	f240 7107 	movw	r1, #1799	; 0x707
 8004bce:	2037      	movs	r0, #55	; 0x37
 8004bd0:	f7fc f872 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004bd4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004bd8:	2038      	movs	r0, #56	; 0x38
 8004bda:	f7fc f86d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004bde:	f240 7107 	movw	r1, #1799	; 0x707
 8004be2:	2039      	movs	r0, #57	; 0x39
 8004be4:	f7fc f868 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004be8:	f240 4102 	movw	r1, #1026	; 0x402
 8004bec:	203c      	movs	r0, #60	; 0x3c
 8004bee:	f7fc f863 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004bf2:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004bf6:	203d      	movs	r0, #61	; 0x3d
 8004bf8:	f7fc f85e 	bl	8000cb8 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2050      	movs	r0, #80	; 0x50
 8004c00:	f7fc f85a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004c04:	21ef      	movs	r1, #239	; 0xef
 8004c06:	2051      	movs	r0, #81	; 0x51
 8004c08:	f7fc f856 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	2052      	movs	r0, #82	; 0x52
 8004c10:	f7fc f852 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004c14:	f240 113f 	movw	r1, #319	; 0x13f
 8004c18:	2053      	movs	r0, #83	; 0x53
 8004c1a:	f7fc f84d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004c1e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c22:	2060      	movs	r0, #96	; 0x60
 8004c24:	f7fc f848 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004c28:	2101      	movs	r1, #1
 8004c2a:	2061      	movs	r0, #97	; 0x61
 8004c2c:	f7fc f844 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004c30:	2100      	movs	r1, #0
 8004c32:	206a      	movs	r0, #106	; 0x6a
 8004c34:	f7fc f840 	bl	8000cb8 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2080      	movs	r0, #128	; 0x80
 8004c3c:	f7fc f83c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004c40:	2100      	movs	r1, #0
 8004c42:	2081      	movs	r0, #129	; 0x81
 8004c44:	f7fc f838 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2082      	movs	r0, #130	; 0x82
 8004c4c:	f7fc f834 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c50:	2100      	movs	r1, #0
 8004c52:	2083      	movs	r0, #131	; 0x83
 8004c54:	f7fc f830 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c58:	2100      	movs	r1, #0
 8004c5a:	2084      	movs	r0, #132	; 0x84
 8004c5c:	f7fc f82c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c60:	2100      	movs	r1, #0
 8004c62:	2085      	movs	r0, #133	; 0x85
 8004c64:	f7fc f828 	bl	8000cb8 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004c68:	2110      	movs	r1, #16
 8004c6a:	2090      	movs	r0, #144	; 0x90
 8004c6c:	f7fc f824 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004c70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c74:	2092      	movs	r0, #146	; 0x92
 8004c76:	f7fc f81f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004c7a:	f240 1133 	movw	r1, #307	; 0x133
 8004c7e:	2007      	movs	r0, #7
 8004c80:	f7fc f81a 	bl	8000cb8 <LCD_WriteReg>
 8004c84:	f001 b99e 	b.w	8005fc4 <LCD_Init+0x3e34>
 8004c88:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x5408) {
 8004c8c:	4be2      	ldr	r3, [pc, #904]	; (8005018 <LCD_Init+0x2e88>)
 8004c8e:	889b      	ldrh	r3, [r3, #4]
 8004c90:	f245 4208 	movw	r2, #21512	; 0x5408
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f040 80a3 	bne.w	8004de0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f7fc f80a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004ca4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ca8:	2002      	movs	r0, #2
 8004caa:	f7fc f805 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004cae:	f241 0130 	movw	r1, #4144	; 0x1030
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	f7fc f800 	bl	8000cb8 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2004      	movs	r0, #4
 8004cbc:	f7fb fffc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004cc0:	f240 2107 	movw	r1, #519	; 0x207
 8004cc4:	2008      	movs	r0, #8
 8004cc6:	f7fb fff7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004cca:	2100      	movs	r1, #0
 8004ccc:	2009      	movs	r0, #9
 8004cce:	f7fb fff3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	200a      	movs	r0, #10
 8004cd6:	f7fb ffef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004cda:	2100      	movs	r1, #0
 8004cdc:	200c      	movs	r0, #12
 8004cde:	f7fb ffeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	200d      	movs	r0, #13
 8004ce6:	f7fb ffe7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004cea:	2100      	movs	r1, #0
 8004cec:	200f      	movs	r0, #15
 8004cee:	f7fb ffe3 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004cf2:	2014      	movs	r0, #20
 8004cf4:	f001 fec0 	bl	8006a78 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004cf8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004cfc:	2010      	movs	r0, #16
 8004cfe:	f7fb ffdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004d02:	2101      	movs	r1, #1
 8004d04:	2011      	movs	r0, #17
 8004d06:	f7fb ffd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	2017      	movs	r0, #23
 8004d0e:	f7fb ffd3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004d12:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004d16:	2012      	movs	r0, #18
 8004d18:	f7fb ffce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d20:	2013      	movs	r0, #19
 8004d22:	f7fb ffc9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004d26:	2109      	movs	r1, #9
 8004d28:	2029      	movs	r0, #41	; 0x29
 8004d2a:	f7fb ffc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004d2e:	2109      	movs	r1, #9
 8004d30:	202a      	movs	r0, #42	; 0x2a
 8004d32:	f7fb ffc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	20a4      	movs	r0, #164	; 0xa4
 8004d3a:	f7fb ffbd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2050      	movs	r0, #80	; 0x50
 8004d42:	f7fb ffb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004d46:	21ef      	movs	r1, #239	; 0xef
 8004d48:	2051      	movs	r0, #81	; 0x51
 8004d4a:	f7fb ffb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2052      	movs	r0, #82	; 0x52
 8004d52:	f7fb ffb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004d56:	f240 113f 	movw	r1, #319	; 0x13f
 8004d5a:	2053      	movs	r0, #83	; 0x53
 8004d5c:	f7fb ffac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004d60:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d64:	2060      	movs	r0, #96	; 0x60
 8004d66:	f7fb ffa7 	bl	8000cb8 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	2061      	movs	r0, #97	; 0x61
 8004d6e:	f7fb ffa3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004d72:	2100      	movs	r1, #0
 8004d74:	206a      	movs	r0, #106	; 0x6a
 8004d76:	f7fb ff9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2080      	movs	r0, #128	; 0x80
 8004d7e:	f7fb ff9b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004d82:	2100      	movs	r1, #0
 8004d84:	2081      	movs	r0, #129	; 0x81
 8004d86:	f7fb ff97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2082      	movs	r0, #130	; 0x82
 8004d8e:	f7fb ff93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004d92:	2100      	movs	r1, #0
 8004d94:	2083      	movs	r0, #131	; 0x83
 8004d96:	f7fb ff8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2084      	movs	r0, #132	; 0x84
 8004d9e:	f7fb ff8b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004da2:	2100      	movs	r1, #0
 8004da4:	2085      	movs	r0, #133	; 0x85
 8004da6:	f7fb ff87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004daa:	2113      	movs	r1, #19
 8004dac:	2090      	movs	r0, #144	; 0x90
 8004dae:	f7fb ff83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004db2:	2100      	movs	r1, #0
 8004db4:	2092      	movs	r0, #146	; 0x92
 8004db6:	f7fb ff7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004dba:	2103      	movs	r1, #3
 8004dbc:	2093      	movs	r0, #147	; 0x93
 8004dbe:	f7fb ff7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004dc2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004dc6:	2095      	movs	r0, #149	; 0x95
 8004dc8:	f7fb ff76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004dcc:	f240 1173 	movw	r1, #371	; 0x173
 8004dd0:	2007      	movs	r0, #7
 8004dd2:	f7fb ff71 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004dd6:	2032      	movs	r0, #50	; 0x32
 8004dd8:	f001 fe4e 	bl	8006a78 <HAL_Delay>
 8004ddc:	f001 b8f2 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004de0:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <LCD_Init+0x2e88>)
 8004de2:	889b      	ldrh	r3, [r3, #4]
 8004de4:	f241 5205 	movw	r2, #5381	; 0x1505
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f040 8117 	bne.w	800501c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004dee:	2100      	movs	r1, #0
 8004df0:	2007      	movs	r0, #7
 8004df2:	f7fb ff61 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004df6:	2032      	movs	r0, #50	; 0x32
 8004df8:	f001 fe3e 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004dfc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004e00:	2012      	movs	r0, #18
 8004e02:	f7fb ff59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004e06:	2101      	movs	r1, #1
 8004e08:	20a4      	movs	r0, #164	; 0xa4
 8004e0a:	f7fb ff55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004e0e:	210f      	movs	r1, #15
 8004e10:	2008      	movs	r0, #8
 8004e12:	f7fb ff51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004e16:	2108      	movs	r1, #8
 8004e18:	200a      	movs	r0, #10
 8004e1a:	f7fb ff4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004e1e:	2108      	movs	r1, #8
 8004e20:	200d      	movs	r0, #13
 8004e22:	f7fb ff49 	bl	8000cb8 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004e26:	f240 7107 	movw	r1, #1799	; 0x707
 8004e2a:	2030      	movs	r0, #48	; 0x30
 8004e2c:	f7fb ff44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004e30:	2107      	movs	r1, #7
 8004e32:	2031      	movs	r0, #49	; 0x31
 8004e34:	f7fb ff40 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004e38:	f240 6103 	movw	r1, #1539	; 0x603
 8004e3c:	2032      	movs	r0, #50	; 0x32
 8004e3e:	f7fb ff3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004e42:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e46:	2033      	movs	r0, #51	; 0x33
 8004e48:	f7fb ff36 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004e4c:	f240 2102 	movw	r1, #514	; 0x202
 8004e50:	2034      	movs	r0, #52	; 0x34
 8004e52:	f7fb ff31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004e56:	2102      	movs	r1, #2
 8004e58:	2035      	movs	r0, #53	; 0x35
 8004e5a:	f7fb ff2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004e5e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004e62:	2036      	movs	r0, #54	; 0x36
 8004e64:	f7fb ff28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004e68:	f240 7107 	movw	r1, #1799	; 0x707
 8004e6c:	2037      	movs	r0, #55	; 0x37
 8004e6e:	f7fb ff23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004e72:	2100      	movs	r1, #0
 8004e74:	2038      	movs	r0, #56	; 0x38
 8004e76:	f7fb ff1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2039      	movs	r0, #57	; 0x39
 8004e7e:	f7fb ff1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004e82:	f240 7107 	movw	r1, #1799	; 0x707
 8004e86:	203a      	movs	r0, #58	; 0x3a
 8004e88:	f7fb ff16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	203b      	movs	r0, #59	; 0x3b
 8004e90:	f7fb ff12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004e94:	2107      	movs	r1, #7
 8004e96:	203c      	movs	r0, #60	; 0x3c
 8004e98:	f7fb ff0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	203d      	movs	r0, #61	; 0x3d
 8004ea0:	f7fb ff0a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004ea4:	2032      	movs	r0, #50	; 0x32
 8004ea6:	f001 fde7 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004eaa:	2101      	movs	r1, #1
 8004eac:	2007      	movs	r0, #7
 8004eae:	f7fb ff03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	2017      	movs	r0, #23
 8004eb6:	f7fb feff 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004eba:	2032      	movs	r0, #50	; 0x32
 8004ebc:	f001 fddc 	bl	8006a78 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004ec0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004ec4:	2010      	movs	r0, #16
 8004ec6:	f7fb fef7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004eca:	f240 2117 	movw	r1, #535	; 0x217
 8004ece:	2011      	movs	r0, #17
 8004ed0:	f7fb fef2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004ed4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004ed8:	2012      	movs	r0, #18
 8004eda:	f7fb feed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004ede:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004ee2:	2013      	movs	r0, #19
 8004ee4:	f7fb fee8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	202a      	movs	r0, #42	; 0x2a
 8004eec:	f7fb fee4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004ef0:	210a      	movs	r1, #10
 8004ef2:	2029      	movs	r0, #41	; 0x29
 8004ef4:	f7fb fee0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004ef8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004efc:	2012      	movs	r0, #18
 8004efe:	f7fb fedb 	bl	8000cb8 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004f02:	2100      	movs	r1, #0
 8004f04:	2050      	movs	r0, #80	; 0x50
 8004f06:	f7fb fed7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004f0a:	21ef      	movs	r1, #239	; 0xef
 8004f0c:	2051      	movs	r0, #81	; 0x51
 8004f0e:	f7fb fed3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f12:	2100      	movs	r1, #0
 8004f14:	2052      	movs	r0, #82	; 0x52
 8004f16:	f7fb fecf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004f1a:	f240 113f 	movw	r1, #319	; 0x13f
 8004f1e:	2053      	movs	r0, #83	; 0x53
 8004f20:	f7fb feca 	bl	8000cb8 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004f24:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f28:	2060      	movs	r0, #96	; 0x60
 8004f2a:	f7fb fec5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f2e:	2101      	movs	r1, #1
 8004f30:	2061      	movs	r0, #97	; 0x61
 8004f32:	f7fb fec1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	206a      	movs	r0, #106	; 0x6a
 8004f3a:	f7fb febd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2080      	movs	r0, #128	; 0x80
 8004f42:	f7fb feb9 	bl	8000cb8 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2081      	movs	r0, #129	; 0x81
 8004f4a:	f7fb feb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2082      	movs	r0, #130	; 0x82
 8004f52:	f7fb feb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	2083      	movs	r0, #131	; 0x83
 8004f5a:	f7fb fead 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2084      	movs	r0, #132	; 0x84
 8004f62:	f7fb fea9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2085      	movs	r0, #133	; 0x85
 8004f6a:	f7fb fea5 	bl	8000cb8 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004f6e:	2113      	movs	r1, #19
 8004f70:	2090      	movs	r0, #144	; 0x90
 8004f72:	f7fb fea1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004f76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f7a:	2092      	movs	r0, #146	; 0x92
 8004f7c:	f7fb fe9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004f80:	2105      	movs	r1, #5
 8004f82:	2093      	movs	r0, #147	; 0x93
 8004f84:	f7fb fe98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	2095      	movs	r0, #149	; 0x95
 8004f8c:	f7fb fe94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004f90:	2100      	movs	r1, #0
 8004f92:	2097      	movs	r0, #151	; 0x97
 8004f94:	f7fb fe90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2098      	movs	r0, #152	; 0x98
 8004f9c:	f7fb fe8c 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fb fe87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004faa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004fae:	2002      	movs	r0, #2
 8004fb0:	f7fb fe82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004fb4:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fb8:	2003      	movs	r0, #3
 8004fba:	f7fb fe7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2004      	movs	r0, #4
 8004fc2:	f7fb fe79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	200c      	movs	r0, #12
 8004fca:	f7fb fe75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	200f      	movs	r0, #15
 8004fd2:	f7fb fe71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	2020      	movs	r0, #32
 8004fda:	f7fb fe6d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	2021      	movs	r0, #33	; 0x21
 8004fe2:	f7fb fe69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004fe6:	2121      	movs	r1, #33	; 0x21
 8004fe8:	2007      	movs	r0, #7
 8004fea:	f7fb fe65 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004fee:	2014      	movs	r0, #20
 8004ff0:	f001 fd42 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004ff4:	2161      	movs	r1, #97	; 0x61
 8004ff6:	2007      	movs	r0, #7
 8004ff8:	f7fb fe5e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004ffc:	2014      	movs	r0, #20
 8004ffe:	f001 fd3b 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8005002:	f240 1173 	movw	r1, #371	; 0x173
 8005006:	2007      	movs	r0, #7
 8005008:	f7fb fe56 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800500c:	2014      	movs	r0, #20
 800500e:	f001 fd33 	bl	8006a78 <HAL_Delay>
 8005012:	f000 bfd7 	b.w	8005fc4 <LCD_Init+0x3e34>
 8005016:	bf00      	nop
 8005018:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0xB505) {
 800501c:	4bf0      	ldr	r3, [pc, #960]	; (80053e0 <LCD_Init+0x3250>)
 800501e:	889b      	ldrh	r3, [r3, #4]
 8005020:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005024:	4293      	cmp	r3, r2
 8005026:	f040 8103 	bne.w	8005230 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 800502a:	2100      	movs	r1, #0
 800502c:	2000      	movs	r0, #0
 800502e:	f7fb fe43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005032:	2100      	movs	r1, #0
 8005034:	2000      	movs	r0, #0
 8005036:	f7fb fe3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800503a:	2100      	movs	r1, #0
 800503c:	2000      	movs	r0, #0
 800503e:	f7fb fe3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005042:	2100      	movs	r1, #0
 8005044:	2000      	movs	r0, #0
 8005046:	f7fb fe37 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 800504a:	2101      	movs	r1, #1
 800504c:	20a4      	movs	r0, #164	; 0xa4
 800504e:	f7fb fe33 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005052:	2014      	movs	r0, #20
 8005054:	f001 fd10 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005058:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800505c:	2060      	movs	r0, #96	; 0x60
 800505e:	f7fb fe2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005062:	f240 2102 	movw	r1, #514	; 0x202
 8005066:	2008      	movs	r0, #8
 8005068:	f7fb fe26 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800506c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005070:	2030      	movs	r0, #48	; 0x30
 8005072:	f7fb fe21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8005076:	f243 7115 	movw	r1, #14101	; 0x3715
 800507a:	2031      	movs	r0, #49	; 0x31
 800507c:	f7fb fe1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005080:	f240 6104 	movw	r1, #1540	; 0x604
 8005084:	2032      	movs	r0, #50	; 0x32
 8005086:	f7fb fe17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800508a:	f640 6116 	movw	r1, #3606	; 0xe16
 800508e:	2033      	movs	r0, #51	; 0x33
 8005090:	f7fb fe12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8005094:	f242 2111 	movw	r1, #8721	; 0x2211
 8005098:	2034      	movs	r0, #52	; 0x34
 800509a:	f7fb fe0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800509e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80050a2:	2035      	movs	r0, #53	; 0x35
 80050a4:	f7fb fe08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80050a8:	f248 5107 	movw	r1, #34055	; 0x8507
 80050ac:	2036      	movs	r0, #54	; 0x36
 80050ae:	f7fb fe03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80050b2:	f241 4107 	movw	r1, #5127	; 0x1407
 80050b6:	2037      	movs	r0, #55	; 0x37
 80050b8:	f7fb fdfe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80050bc:	f241 4103 	movw	r1, #5123	; 0x1403
 80050c0:	2038      	movs	r0, #56	; 0x38
 80050c2:	f7fb fdf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80050c6:	2120      	movs	r1, #32
 80050c8:	2039      	movs	r0, #57	; 0x39
 80050ca:	f7fb fdf5 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80050ce:	211a      	movs	r1, #26
 80050d0:	2090      	movs	r0, #144	; 0x90
 80050d2:	f7fb fdf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	2010      	movs	r0, #16
 80050da:	f7fb fded 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80050de:	2107      	movs	r1, #7
 80050e0:	2011      	movs	r0, #17
 80050e2:	f7fb fde9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	2012      	movs	r0, #18
 80050ea:	f7fb fde5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80050ee:	2100      	movs	r1, #0
 80050f0:	2013      	movs	r0, #19
 80050f2:	f7fb fde1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80050f6:	2014      	movs	r0, #20
 80050f8:	f001 fcbe 	bl	8006a78 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80050fc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005100:	2010      	movs	r0, #16
 8005102:	f7fb fdd9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005106:	f240 1137 	movw	r1, #311	; 0x137
 800510a:	2011      	movs	r0, #17
 800510c:	f7fb fdd4 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005110:	2014      	movs	r0, #20
 8005112:	f001 fcb1 	bl	8006a78 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005116:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800511a:	2012      	movs	r0, #18
 800511c:	f7fb fdcc 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005120:	2014      	movs	r0, #20
 8005122:	f001 fca9 	bl	8006a78 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8005126:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800512a:	2013      	movs	r0, #19
 800512c:	f7fb fdc4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	202a      	movs	r0, #42	; 0x2a
 8005134:	f7fb fdc0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005138:	2148      	movs	r1, #72	; 0x48
 800513a:	2029      	movs	r0, #41	; 0x29
 800513c:	f7fb fdbc 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005140:	2014      	movs	r0, #20
 8005142:	f001 fc99 	bl	8006a78 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8005146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800514a:	2001      	movs	r0, #1
 800514c:	f7fb fdb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005150:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005154:	2002      	movs	r0, #2
 8005156:	f7fb fdaf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800515a:	f241 0138 	movw	r1, #4152	; 0x1038
 800515e:	2003      	movs	r0, #3
 8005160:	f7fb fdaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005164:	f240 2102 	movw	r1, #514	; 0x202
 8005168:	2008      	movs	r0, #8
 800516a:	f7fb fda5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800516e:	2100      	movs	r1, #0
 8005170:	200a      	movs	r0, #10
 8005172:	f7fb fda1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	200c      	movs	r0, #12
 800517a:	f7fb fd9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	200d      	movs	r0, #13
 8005182:	f7fb fd99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005186:	2130      	movs	r1, #48	; 0x30
 8005188:	200e      	movs	r0, #14
 800518a:	f7fb fd95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800518e:	2100      	movs	r1, #0
 8005190:	2050      	movs	r0, #80	; 0x50
 8005192:	f7fb fd91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005196:	21ef      	movs	r1, #239	; 0xef
 8005198:	2051      	movs	r0, #81	; 0x51
 800519a:	f7fb fd8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	2052      	movs	r0, #82	; 0x52
 80051a2:	f7fb fd89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 80051a6:	f240 113f 	movw	r1, #319	; 0x13f
 80051aa:	2053      	movs	r0, #83	; 0x53
 80051ac:	f7fb fd84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 80051b0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80051b4:	2060      	movs	r0, #96	; 0x60
 80051b6:	f7fb fd7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80051ba:	2101      	movs	r1, #1
 80051bc:	2061      	movs	r0, #97	; 0x61
 80051be:	f7fb fd7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80051c2:	2100      	movs	r1, #0
 80051c4:	206a      	movs	r0, #106	; 0x6a
 80051c6:	f7fb fd77 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80051ca:	2111      	movs	r1, #17
 80051cc:	2090      	movs	r0, #144	; 0x90
 80051ce:	f7fb fd73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80051d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051d6:	2092      	movs	r0, #146	; 0x92
 80051d8:	f7fb fd6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80051dc:	f240 4102 	movw	r1, #1026	; 0x402
 80051e0:	2093      	movs	r0, #147	; 0x93
 80051e2:	f7fb fd69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80051e6:	2102      	movs	r1, #2
 80051e8:	2094      	movs	r0, #148	; 0x94
 80051ea:	f7fb fd65 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80051ee:	2014      	movs	r0, #20
 80051f0:	f001 fc42 	bl	8006a78 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80051f4:	2101      	movs	r1, #1
 80051f6:	2007      	movs	r0, #7
 80051f8:	f7fb fd5e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80051fc:	2014      	movs	r0, #20
 80051fe:	f001 fc3b 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005202:	2161      	movs	r1, #97	; 0x61
 8005204:	2007      	movs	r0, #7
 8005206:	f7fb fd57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800520a:	f240 1173 	movw	r1, #371	; 0x173
 800520e:	2007      	movs	r0, #7
 8005210:	f7fb fd52 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005214:	2100      	movs	r1, #0
 8005216:	2020      	movs	r0, #32
 8005218:	f7fb fd4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800521c:	2100      	movs	r1, #0
 800521e:	2021      	movs	r0, #33	; 0x21
 8005220:	f7fb fd4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8005224:	2122      	movs	r1, #34	; 0x22
 8005226:	2000      	movs	r0, #0
 8005228:	f7fb fd46 	bl	8000cb8 <LCD_WriteReg>
 800522c:	f000 beca 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005230:	4b6b      	ldr	r3, [pc, #428]	; (80053e0 <LCD_Init+0x3250>)
 8005232:	889b      	ldrh	r3, [r3, #4]
 8005234:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005238:	4293      	cmp	r3, r2
 800523a:	f040 80d3 	bne.w	80053e4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800523e:	2100      	movs	r1, #0
 8005240:	2000      	movs	r0, #0
 8005242:	f7fb fd39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005246:	2100      	movs	r1, #0
 8005248:	2000      	movs	r0, #0
 800524a:	f7fb fd35 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800524e:	2014      	movs	r0, #20
 8005250:	f001 fc12 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005254:	2100      	movs	r1, #0
 8005256:	2000      	movs	r0, #0
 8005258:	f7fb fd2e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800525c:	2100      	movs	r1, #0
 800525e:	2000      	movs	r0, #0
 8005260:	f7fb fd2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005264:	2100      	movs	r1, #0
 8005266:	2000      	movs	r0, #0
 8005268:	f7fb fd26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800526c:	2100      	movs	r1, #0
 800526e:	2000      	movs	r0, #0
 8005270:	f7fb fd22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005274:	2101      	movs	r1, #1
 8005276:	20a4      	movs	r0, #164	; 0xa4
 8005278:	f7fb fd1e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800527c:	2014      	movs	r0, #20
 800527e:	f001 fbfb 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005282:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005286:	2060      	movs	r0, #96	; 0x60
 8005288:	f7fb fd16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800528c:	f640 0106 	movw	r1, #2054	; 0x806
 8005290:	2008      	movs	r0, #8
 8005292:	f7fb fd11 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005296:	f240 7103 	movw	r1, #1795	; 0x703
 800529a:	2030      	movs	r0, #48	; 0x30
 800529c:	f7fb fd0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80052a0:	2101      	movs	r1, #1
 80052a2:	2031      	movs	r0, #49	; 0x31
 80052a4:	f7fb fd08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80052a8:	2104      	movs	r1, #4
 80052aa:	2032      	movs	r0, #50	; 0x32
 80052ac:	f7fb fd04 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80052b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80052b4:	2033      	movs	r0, #51	; 0x33
 80052b6:	f7fb fcff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80052ba:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052be:	2034      	movs	r0, #52	; 0x34
 80052c0:	f7fb fcfa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80052c4:	f240 1103 	movw	r1, #259	; 0x103
 80052c8:	2035      	movs	r0, #53	; 0x35
 80052ca:	f7fb fcf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80052ce:	211f      	movs	r1, #31
 80052d0:	2036      	movs	r0, #54	; 0x36
 80052d2:	f7fb fcf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80052d6:	f240 7103 	movw	r1, #1795	; 0x703
 80052da:	2037      	movs	r0, #55	; 0x37
 80052dc:	f7fb fcec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80052e0:	2101      	movs	r1, #1
 80052e2:	2038      	movs	r0, #56	; 0x38
 80052e4:	f7fb fce8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80052e8:	2104      	movs	r1, #4
 80052ea:	2039      	movs	r0, #57	; 0x39
 80052ec:	f7fb fce4 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80052f0:	2115      	movs	r1, #21
 80052f2:	2090      	movs	r0, #144	; 0x90
 80052f4:	f7fb fce0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80052f8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80052fc:	2010      	movs	r0, #16
 80052fe:	f7fb fcdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005302:	f240 2147 	movw	r1, #583	; 0x247
 8005306:	2011      	movs	r0, #17
 8005308:	f7fb fcd6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800530c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005310:	2012      	movs	r0, #18
 8005312:	f7fb fcd1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005316:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800531a:	2013      	movs	r0, #19
 800531c:	f7fb fccc 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(120);
 8005320:	2078      	movs	r0, #120	; 0x78
 8005322:	f001 fba9 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800532a:	2001      	movs	r0, #1
 800532c:	f7fb fcc4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005334:	2002      	movs	r0, #2
 8005336:	f7fb fcbf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800533a:	f241 0130 	movw	r1, #4144	; 0x1030
 800533e:	2003      	movs	r0, #3
 8005340:	f7fb fcba 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005344:	2108      	movs	r1, #8
 8005346:	200a      	movs	r0, #10
 8005348:	f7fb fcb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800534c:	2100      	movs	r1, #0
 800534e:	200c      	movs	r0, #12
 8005350:	f7fb fcb2 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005354:	2120      	movs	r1, #32
 8005356:	200e      	movs	r0, #14
 8005358:	f7fb fcae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800535c:	2100      	movs	r1, #0
 800535e:	200f      	movs	r0, #15
 8005360:	f7fb fcaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005364:	2100      	movs	r1, #0
 8005366:	2020      	movs	r0, #32
 8005368:	f7fb fca6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800536c:	2100      	movs	r1, #0
 800536e:	2021      	movs	r0, #33	; 0x21
 8005370:	f7fb fca2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005374:	213d      	movs	r1, #61	; 0x3d
 8005376:	202a      	movs	r0, #42	; 0x2a
 8005378:	f7fb fc9e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800537c:	2014      	movs	r0, #20
 800537e:	f001 fb7b 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005382:	212d      	movs	r1, #45	; 0x2d
 8005384:	2029      	movs	r0, #41	; 0x29
 8005386:	f7fb fc97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800538a:	2100      	movs	r1, #0
 800538c:	2050      	movs	r0, #80	; 0x50
 800538e:	f7fb fc93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005392:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005396:	2051      	movs	r0, #81	; 0x51
 8005398:	f7fb fc8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800539c:	2100      	movs	r1, #0
 800539e:	2052      	movs	r0, #82	; 0x52
 80053a0:	f7fb fc8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80053a4:	f240 113f 	movw	r1, #319	; 0x13f
 80053a8:	2053      	movs	r0, #83	; 0x53
 80053aa:	f7fb fc85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80053ae:	2100      	movs	r1, #0
 80053b0:	2061      	movs	r0, #97	; 0x61
 80053b2:	f7fb fc81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80053b6:	2100      	movs	r1, #0
 80053b8:	206a      	movs	r0, #106	; 0x6a
 80053ba:	f7fb fc7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80053be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053c2:	2092      	movs	r0, #146	; 0x92
 80053c4:	f7fb fc78 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80053c8:	2105      	movs	r1, #5
 80053ca:	2093      	movs	r0, #147	; 0x93
 80053cc:	f7fb fc74 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80053d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053d4:	2007      	movs	r0, #7
 80053d6:	f7fb fc6f 	bl	8000cb8 <LCD_WriteReg>
 80053da:	f000 bdf3 	b.w	8005fc4 <LCD_Init+0x3e34>
 80053de:	bf00      	nop
 80053e0:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80053e4:	4bc2      	ldr	r3, [pc, #776]	; (80056f0 <LCD_Init+0x3560>)
 80053e6:	889b      	ldrh	r3, [r3, #4]
 80053e8:	f648 1289 	movw	r2, #35209	; 0x8989
 80053ec:	4293      	cmp	r3, r2
 80053ee:	f040 80bc 	bne.w	800556a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80053f2:	2101      	movs	r1, #1
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7fb fc5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80053fa:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80053fe:	2003      	movs	r0, #3
 8005400:	f7fb fc5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005404:	2100      	movs	r1, #0
 8005406:	200c      	movs	r0, #12
 8005408:	f7fb fc56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800540c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005410:	200d      	movs	r0, #13
 8005412:	f7fb fc51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005416:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800541a:	200e      	movs	r0, #14
 800541c:	f7fb fc4c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005420:	21b0      	movs	r1, #176	; 0xb0
 8005422:	201e      	movs	r0, #30
 8005424:	f7fb fc48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005428:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800542c:	2001      	movs	r0, #1
 800542e:	f7fb fc43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005432:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005436:	2002      	movs	r0, #2
 8005438:	f7fb fc3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800543c:	2100      	movs	r1, #0
 800543e:	2010      	movs	r0, #16
 8005440:	f7fb fc3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005444:	f246 0178 	movw	r1, #24696	; 0x6078
 8005448:	2011      	movs	r0, #17
 800544a:	f7fb fc35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800544e:	2100      	movs	r1, #0
 8005450:	2005      	movs	r0, #5
 8005452:	f7fb fc31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005456:	2100      	movs	r1, #0
 8005458:	2006      	movs	r0, #6
 800545a:	f7fb fc2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800545e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005462:	2016      	movs	r0, #22
 8005464:	f7fb fc28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005468:	2103      	movs	r1, #3
 800546a:	2017      	movs	r0, #23
 800546c:	f7fb fc24 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005470:	f240 2133 	movw	r1, #563	; 0x233
 8005474:	2007      	movs	r0, #7
 8005476:	f7fb fc1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800547a:	2100      	movs	r1, #0
 800547c:	200b      	movs	r0, #11
 800547e:	f7fb fc1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005482:	2100      	movs	r1, #0
 8005484:	200f      	movs	r0, #15
 8005486:	f7fb fc17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800548a:	2100      	movs	r1, #0
 800548c:	2041      	movs	r0, #65	; 0x41
 800548e:	f7fb fc13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005492:	2100      	movs	r1, #0
 8005494:	2042      	movs	r0, #66	; 0x42
 8005496:	f7fb fc0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800549a:	2100      	movs	r1, #0
 800549c:	2048      	movs	r0, #72	; 0x48
 800549e:	f7fb fc0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80054a2:	f240 113f 	movw	r1, #319	; 0x13f
 80054a6:	2049      	movs	r0, #73	; 0x49
 80054a8:	f7fb fc06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80054ac:	2100      	movs	r1, #0
 80054ae:	204a      	movs	r0, #74	; 0x4a
 80054b0:	f7fb fc02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80054b4:	2100      	movs	r1, #0
 80054b6:	204b      	movs	r0, #75	; 0x4b
 80054b8:	f7fb fbfe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80054bc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80054c0:	2044      	movs	r0, #68	; 0x44
 80054c2:	f7fb fbf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80054c6:	2100      	movs	r1, #0
 80054c8:	2045      	movs	r0, #69	; 0x45
 80054ca:	f7fb fbf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80054ce:	f240 113f 	movw	r1, #319	; 0x13f
 80054d2:	2046      	movs	r0, #70	; 0x46
 80054d4:	f7fb fbf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80054d8:	f240 7107 	movw	r1, #1799	; 0x707
 80054dc:	2030      	movs	r0, #48	; 0x30
 80054de:	f7fb fbeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80054e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054e6:	2031      	movs	r0, #49	; 0x31
 80054e8:	f7fb fbe6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80054ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80054f0:	2032      	movs	r0, #50	; 0x32
 80054f2:	f7fb fbe1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80054f6:	f240 5102 	movw	r1, #1282	; 0x502
 80054fa:	2033      	movs	r0, #51	; 0x33
 80054fc:	f7fb fbdc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005500:	f240 5107 	movw	r1, #1287	; 0x507
 8005504:	2034      	movs	r0, #52	; 0x34
 8005506:	f7fb fbd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800550a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800550e:	2035      	movs	r0, #53	; 0x35
 8005510:	f7fb fbd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005514:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005518:	2036      	movs	r0, #54	; 0x36
 800551a:	f7fb fbcd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800551e:	f240 5102 	movw	r1, #1282	; 0x502
 8005522:	2037      	movs	r0, #55	; 0x37
 8005524:	f7fb fbc8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005528:	f240 3102 	movw	r1, #770	; 0x302
 800552c:	203a      	movs	r0, #58	; 0x3a
 800552e:	f7fb fbc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005532:	f240 3102 	movw	r1, #770	; 0x302
 8005536:	203b      	movs	r0, #59	; 0x3b
 8005538:	f7fb fbbe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800553c:	2100      	movs	r1, #0
 800553e:	2023      	movs	r0, #35	; 0x23
 8005540:	f7fb fbba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005544:	2100      	movs	r1, #0
 8005546:	2024      	movs	r0, #36	; 0x24
 8005548:	f7fb fbb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800554c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005550:	2025      	movs	r0, #37	; 0x25
 8005552:	f7fb fbb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005556:	2100      	movs	r1, #0
 8005558:	204f      	movs	r0, #79	; 0x4f
 800555a:	f7fb fbad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800555e:	2100      	movs	r1, #0
 8005560:	204e      	movs	r0, #78	; 0x4e
 8005562:	f7fb fba9 	bl	8000cb8 <LCD_WriteReg>
 8005566:	f000 bd2d 	b.w	8005fc4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800556a:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <LCD_Init+0x3560>)
 800556c:	889b      	ldrh	r3, [r3, #4]
 800556e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005572:	4293      	cmp	r3, r2
 8005574:	f040 80be 	bne.w	80056f4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005578:	2101      	movs	r1, #1
 800557a:	2000      	movs	r0, #0
 800557c:	f7fb fb9c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 8005580:	200a      	movs	r0, #10
 8005582:	f001 fa79 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005586:	f241 6128 	movw	r1, #5672	; 0x1628
 800558a:	2010      	movs	r0, #16
 800558c:	f7fb fb94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005590:	210e      	movs	r1, #14
 8005592:	2012      	movs	r0, #18
 8005594:	f7fb fb90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005598:	f640 2139 	movw	r1, #2617	; 0xa39
 800559c:	2013      	movs	r0, #19
 800559e:	f7fb fb8b 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055a2:	200a      	movs	r0, #10
 80055a4:	f001 fa68 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	2011      	movs	r0, #17
 80055ac:	f7fb fb84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80055b0:	2150      	movs	r1, #80	; 0x50
 80055b2:	2015      	movs	r0, #21
 80055b4:	f7fb fb80 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f001 fa5d 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80055be:	211e      	movs	r1, #30
 80055c0:	2012      	movs	r0, #18
 80055c2:	f7fb fb79 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055c6:	200a      	movs	r0, #10
 80055c8:	f001 fa56 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80055cc:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80055d0:	2010      	movs	r0, #16
 80055d2:	f7fb fb71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80055d6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80055da:	2013      	movs	r0, #19
 80055dc:	f7fb fb6c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055e0:	200a      	movs	r0, #10
 80055e2:	f001 fa49 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80055e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ea:	2001      	movs	r0, #1
 80055ec:	f7fb fb64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055f4:	2002      	movs	r0, #2
 80055f6:	f7fb fb5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80055fa:	f241 0138 	movw	r1, #4152	; 0x1038
 80055fe:	2003      	movs	r0, #3
 8005600:	f7fb fb5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005604:	f240 2102 	movw	r1, #514	; 0x202
 8005608:	2008      	movs	r0, #8
 800560a:	f7fb fb55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800560e:	2108      	movs	r1, #8
 8005610:	200a      	movs	r0, #10
 8005612:	f7fb fb51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005616:	2100      	movs	r1, #0
 8005618:	2030      	movs	r0, #48	; 0x30
 800561a:	f7fb fb4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800561e:	f240 4102 	movw	r1, #1026	; 0x402
 8005622:	2031      	movs	r0, #49	; 0x31
 8005624:	f7fb fb48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005628:	f44f 7183 	mov.w	r1, #262	; 0x106
 800562c:	2032      	movs	r0, #50	; 0x32
 800562e:	f7fb fb43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005632:	f240 5103 	movw	r1, #1283	; 0x503
 8005636:	2033      	movs	r0, #51	; 0x33
 8005638:	f7fb fb3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800563c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005640:	2034      	movs	r0, #52	; 0x34
 8005642:	f7fb fb39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005646:	f240 3101 	movw	r1, #769	; 0x301
 800564a:	2035      	movs	r0, #53	; 0x35
 800564c:	f7fb fb34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005650:	f240 7107 	movw	r1, #1799	; 0x707
 8005654:	2036      	movs	r0, #54	; 0x36
 8005656:	f7fb fb2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800565a:	f240 3105 	movw	r1, #773	; 0x305
 800565e:	2037      	movs	r0, #55	; 0x37
 8005660:	f7fb fb2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005664:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005668:	2038      	movs	r0, #56	; 0x38
 800566a:	f7fb fb25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800566e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005672:	2039      	movs	r0, #57	; 0x39
 8005674:	f7fb fb20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005678:	2102      	movs	r1, #2
 800567a:	2041      	movs	r0, #65	; 0x41
 800567c:	f7fb fb1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005680:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005684:	2060      	movs	r0, #96	; 0x60
 8005686:	f7fb fb17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800568a:	2101      	movs	r1, #1
 800568c:	2061      	movs	r0, #97	; 0x61
 800568e:	f7fb fb13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005692:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005696:	2090      	movs	r0, #144	; 0x90
 8005698:	f7fb fb0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800569c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80056a0:	2092      	movs	r0, #146	; 0x92
 80056a2:	f7fb fb09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80056a6:	2104      	movs	r1, #4
 80056a8:	2093      	movs	r0, #147	; 0x93
 80056aa:	f7fb fb05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80056ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056b2:	20a0      	movs	r0, #160	; 0xa0
 80056b4:	f7fb fb00 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80056b8:	2101      	movs	r1, #1
 80056ba:	2007      	movs	r0, #7
 80056bc:	f7fb fafc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80056c0:	2121      	movs	r1, #33	; 0x21
 80056c2:	2007      	movs	r0, #7
 80056c4:	f7fb faf8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80056c8:	2123      	movs	r1, #35	; 0x23
 80056ca:	2007      	movs	r0, #7
 80056cc:	f7fb faf4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80056d0:	2133      	movs	r1, #51	; 0x33
 80056d2:	2007      	movs	r0, #7
 80056d4:	f7fb faf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80056d8:	f240 1133 	movw	r1, #307	; 0x133
 80056dc:	2007      	movs	r0, #7
 80056de:	f7fb faeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80056e2:	2100      	movs	r1, #0
 80056e4:	20a0      	movs	r0, #160	; 0xa0
 80056e6:	f7fb fae7 	bl	8000cb8 <LCD_WriteReg>
 80056ea:	f000 bc6b 	b.w	8005fc4 <LCD_Init+0x3e34>
 80056ee:	bf00      	nop
 80056f0:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0x4535) {
 80056f4:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <LCD_Init+0x36d4>)
 80056f6:	889b      	ldrh	r3, [r3, #4]
 80056f8:	f244 5235 	movw	r2, #17717	; 0x4535
 80056fc:	4293      	cmp	r3, r2
 80056fe:	f040 80b3 	bne.w	8005868 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005702:	2130      	movs	r1, #48	; 0x30
 8005704:	2015      	movs	r0, #21
 8005706:	f7fb fad7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800570a:	2110      	movs	r1, #16
 800570c:	209a      	movs	r0, #154	; 0x9a
 800570e:	f7fb fad3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005712:	2120      	movs	r1, #32
 8005714:	2011      	movs	r0, #17
 8005716:	f7fb facf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800571a:	f243 4128 	movw	r1, #13352	; 0x3428
 800571e:	2010      	movs	r0, #16
 8005720:	f7fb faca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005724:	2102      	movs	r1, #2
 8005726:	2012      	movs	r0, #18
 8005728:	f7fb fac6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800572c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005730:	2013      	movs	r0, #19
 8005732:	f7fb fac1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(40);
 8005736:	2028      	movs	r0, #40	; 0x28
 8005738:	f001 f99e 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800573c:	2112      	movs	r1, #18
 800573e:	2012      	movs	r0, #18
 8005740:	f7fb faba 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(40);
 8005744:	2028      	movs	r0, #40	; 0x28
 8005746:	f001 f997 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800574a:	f243 4120 	movw	r1, #13344	; 0x3420
 800574e:	2010      	movs	r0, #16
 8005750:	f7fb fab2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005754:	f243 0138 	movw	r1, #12344	; 0x3038
 8005758:	2013      	movs	r0, #19
 800575a:	f7fb faad 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(70);
 800575e:	2046      	movs	r0, #70	; 0x46
 8005760:	f001 f98a 	bl	8006a78 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005764:	2100      	movs	r1, #0
 8005766:	2030      	movs	r0, #48	; 0x30
 8005768:	f7fb faa6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800576c:	f240 4102 	movw	r1, #1026	; 0x402
 8005770:	2031      	movs	r0, #49	; 0x31
 8005772:	f7fb faa1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005776:	f240 3107 	movw	r1, #775	; 0x307
 800577a:	2032      	movs	r0, #50	; 0x32
 800577c:	f7fb fa9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005780:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005784:	2033      	movs	r0, #51	; 0x33
 8005786:	f7fb fa97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800578a:	2104      	movs	r1, #4
 800578c:	2034      	movs	r0, #52	; 0x34
 800578e:	f7fb fa93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005792:	f240 4101 	movw	r1, #1025	; 0x401
 8005796:	2035      	movs	r0, #53	; 0x35
 8005798:	f7fb fa8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800579c:	f240 7107 	movw	r1, #1799	; 0x707
 80057a0:	2036      	movs	r0, #54	; 0x36
 80057a2:	f7fb fa89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80057a6:	f240 3105 	movw	r1, #773	; 0x305
 80057aa:	2037      	movs	r0, #55	; 0x37
 80057ac:	f7fb fa84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80057b0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80057b4:	2038      	movs	r0, #56	; 0x38
 80057b6:	f7fb fa7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80057ba:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80057be:	2039      	movs	r0, #57	; 0x39
 80057c0:	f7fb fa7a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80057c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fb fa75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80057ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80057d2:	2002      	movs	r0, #2
 80057d4:	f7fb fa70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80057d8:	f241 0130 	movw	r1, #4144	; 0x1030
 80057dc:	2003      	movs	r0, #3
 80057de:	f7fb fa6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80057e2:	f640 0108 	movw	r1, #2056	; 0x808
 80057e6:	2008      	movs	r0, #8
 80057e8:	f7fb fa66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80057ec:	2108      	movs	r1, #8
 80057ee:	200a      	movs	r0, #10
 80057f0:	f7fb fa62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80057f4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80057f8:	2060      	movs	r0, #96	; 0x60
 80057fa:	f7fb fa5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80057fe:	2101      	movs	r1, #1
 8005800:	2061      	movs	r0, #97	; 0x61
 8005802:	f7fb fa59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005806:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800580a:	2090      	movs	r0, #144	; 0x90
 800580c:	f7fb fa54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005814:	2092      	movs	r0, #146	; 0x92
 8005816:	f7fb fa4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800581a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800581e:	2093      	movs	r0, #147	; 0x93
 8005820:	f7fb fa4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005824:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005828:	20a0      	movs	r0, #160	; 0xa0
 800582a:	f7fb fa45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800582e:	2110      	movs	r1, #16
 8005830:	20a3      	movs	r0, #163	; 0xa3
 8005832:	f7fb fa41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005836:	2101      	movs	r1, #1
 8005838:	2007      	movs	r0, #7
 800583a:	f7fb fa3d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800583e:	2121      	movs	r1, #33	; 0x21
 8005840:	2007      	movs	r0, #7
 8005842:	f7fb fa39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005846:	2123      	movs	r1, #35	; 0x23
 8005848:	2007      	movs	r0, #7
 800584a:	f7fb fa35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800584e:	2133      	movs	r1, #51	; 0x33
 8005850:	2007      	movs	r0, #7
 8005852:	f7fb fa31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005856:	f240 1133 	movw	r1, #307	; 0x133
 800585a:	2007      	movs	r0, #7
 800585c:	f7fb fa2c 	bl	8000cb8 <LCD_WriteReg>
 8005860:	e3b0      	b.n	8005fc4 <LCD_Init+0x3e34>
 8005862:	bf00      	nop
 8005864:	2000020c 	.word	0x2000020c
	} else if (lcddev.id == 0X1963) {
 8005868:	4ba8      	ldr	r3, [pc, #672]	; (8005b0c <LCD_Init+0x397c>)
 800586a:	889b      	ldrh	r3, [r3, #4]
 800586c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005870:	4293      	cmp	r3, r2
 8005872:	f040 83a7 	bne.w	8005fc4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005876:	20e2      	movs	r0, #226	; 0xe2
 8005878:	f7fb f992 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800587c:	4ba4      	ldr	r3, [pc, #656]	; (8005b10 <LCD_Init+0x3980>)
 800587e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005882:	611a      	str	r2, [r3, #16]
 8005884:	4ba2      	ldr	r3, [pc, #648]	; (8005b10 <LCD_Init+0x3980>)
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	615a      	str	r2, [r3, #20]
 800588c:	4ba1      	ldr	r3, [pc, #644]	; (8005b14 <LCD_Init+0x3984>)
 800588e:	221d      	movs	r2, #29
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	4b9f      	ldr	r3, [pc, #636]	; (8005b10 <LCD_Init+0x3980>)
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	615a      	str	r2, [r3, #20]
 8005898:	4b9d      	ldr	r3, [pc, #628]	; (8005b10 <LCD_Init+0x3980>)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	611a      	str	r2, [r3, #16]
 800589e:	4b9c      	ldr	r3, [pc, #624]	; (8005b10 <LCD_Init+0x3980>)
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80058a6:	4b9a      	ldr	r3, [pc, #616]	; (8005b10 <LCD_Init+0x3980>)
 80058a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	4b98      	ldr	r3, [pc, #608]	; (8005b10 <LCD_Init+0x3980>)
 80058b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	4b97      	ldr	r3, [pc, #604]	; (8005b14 <LCD_Init+0x3984>)
 80058b8:	2202      	movs	r2, #2
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	4b94      	ldr	r3, [pc, #592]	; (8005b10 <LCD_Init+0x3980>)
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	4b93      	ldr	r3, [pc, #588]	; (8005b10 <LCD_Init+0x3980>)
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	4b91      	ldr	r3, [pc, #580]	; (8005b10 <LCD_Init+0x3980>)
 80058ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80058d0:	4b8f      	ldr	r3, [pc, #572]	; (8005b10 <LCD_Init+0x3980>)
 80058d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d6:	611a      	str	r2, [r3, #16]
 80058d8:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <LCD_Init+0x3980>)
 80058da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058de:	615a      	str	r2, [r3, #20]
 80058e0:	4b8c      	ldr	r3, [pc, #560]	; (8005b14 <LCD_Init+0x3984>)
 80058e2:	2204      	movs	r2, #4
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	4b8a      	ldr	r3, [pc, #552]	; (8005b10 <LCD_Init+0x3980>)
 80058e8:	2280      	movs	r2, #128	; 0x80
 80058ea:	615a      	str	r2, [r3, #20]
 80058ec:	4b88      	ldr	r3, [pc, #544]	; (8005b10 <LCD_Init+0x3980>)
 80058ee:	2280      	movs	r2, #128	; 0x80
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	4b87      	ldr	r3, [pc, #540]	; (8005b10 <LCD_Init+0x3980>)
 80058f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80058fa:	2001      	movs	r0, #1
 80058fc:	f001 f8bc 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005900:	20e0      	movs	r0, #224	; 0xe0
 8005902:	f7fb f94d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005906:	4b82      	ldr	r3, [pc, #520]	; (8005b10 <LCD_Init+0x3980>)
 8005908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590c:	611a      	str	r2, [r3, #16]
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <LCD_Init+0x3980>)
 8005910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <LCD_Init+0x3984>)
 8005918:	2201      	movs	r2, #1
 800591a:	60da      	str	r2, [r3, #12]
 800591c:	4b7c      	ldr	r3, [pc, #496]	; (8005b10 <LCD_Init+0x3980>)
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	615a      	str	r2, [r3, #20]
 8005922:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <LCD_Init+0x3980>)
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	611a      	str	r2, [r3, #16]
 8005928:	4b79      	ldr	r3, [pc, #484]	; (8005b10 <LCD_Init+0x3980>)
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005930:	200a      	movs	r0, #10
 8005932:	f001 f8a1 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005936:	20e0      	movs	r0, #224	; 0xe0
 8005938:	f7fb f932 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800593c:	4b74      	ldr	r3, [pc, #464]	; (8005b10 <LCD_Init+0x3980>)
 800593e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005942:	611a      	str	r2, [r3, #16]
 8005944:	4b72      	ldr	r3, [pc, #456]	; (8005b10 <LCD_Init+0x3980>)
 8005946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594a:	615a      	str	r2, [r3, #20]
 800594c:	4b71      	ldr	r3, [pc, #452]	; (8005b14 <LCD_Init+0x3984>)
 800594e:	2203      	movs	r2, #3
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	4b6f      	ldr	r3, [pc, #444]	; (8005b10 <LCD_Init+0x3980>)
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	615a      	str	r2, [r3, #20]
 8005958:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <LCD_Init+0x3980>)
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	611a      	str	r2, [r3, #16]
 800595e:	4b6c      	ldr	r3, [pc, #432]	; (8005b10 <LCD_Init+0x3980>)
 8005960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005964:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005966:	200c      	movs	r0, #12
 8005968:	f001 f886 	bl	8006a78 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800596c:	2001      	movs	r0, #1
 800596e:	f7fb f917 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(10);
 8005972:	200a      	movs	r0, #10
 8005974:	f001 f880 	bl	8006a78 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005978:	20e6      	movs	r0, #230	; 0xe6
 800597a:	f7fb f911 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800597e:	4b64      	ldr	r3, [pc, #400]	; (8005b10 <LCD_Init+0x3980>)
 8005980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005984:	611a      	str	r2, [r3, #16]
 8005986:	4b62      	ldr	r3, [pc, #392]	; (8005b10 <LCD_Init+0x3980>)
 8005988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598c:	615a      	str	r2, [r3, #20]
 800598e:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <LCD_Init+0x3984>)
 8005990:	222f      	movs	r2, #47	; 0x2f
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	4b5e      	ldr	r3, [pc, #376]	; (8005b10 <LCD_Init+0x3980>)
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]
 800599a:	4b5d      	ldr	r3, [pc, #372]	; (8005b10 <LCD_Init+0x3980>)
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	611a      	str	r2, [r3, #16]
 80059a0:	4b5b      	ldr	r3, [pc, #364]	; (8005b10 <LCD_Init+0x3980>)
 80059a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80059a8:	4b59      	ldr	r3, [pc, #356]	; (8005b10 <LCD_Init+0x3980>)
 80059aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ae:	611a      	str	r2, [r3, #16]
 80059b0:	4b57      	ldr	r3, [pc, #348]	; (8005b10 <LCD_Init+0x3980>)
 80059b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b6:	615a      	str	r2, [r3, #20]
 80059b8:	4b56      	ldr	r3, [pc, #344]	; (8005b14 <LCD_Init+0x3984>)
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	4b54      	ldr	r3, [pc, #336]	; (8005b10 <LCD_Init+0x3980>)
 80059c0:	2280      	movs	r2, #128	; 0x80
 80059c2:	615a      	str	r2, [r3, #20]
 80059c4:	4b52      	ldr	r3, [pc, #328]	; (8005b10 <LCD_Init+0x3980>)
 80059c6:	2280      	movs	r2, #128	; 0x80
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	4b51      	ldr	r3, [pc, #324]	; (8005b10 <LCD_Init+0x3980>)
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80059d2:	4b4f      	ldr	r3, [pc, #316]	; (8005b10 <LCD_Init+0x3980>)
 80059d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	4b4d      	ldr	r3, [pc, #308]	; (8005b10 <LCD_Init+0x3980>)
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	615a      	str	r2, [r3, #20]
 80059e2:	4b4c      	ldr	r3, [pc, #304]	; (8005b14 <LCD_Init+0x3984>)
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	4b49      	ldr	r3, [pc, #292]	; (8005b10 <LCD_Init+0x3980>)
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <LCD_Init+0x3980>)
 80059f0:	2280      	movs	r2, #128	; 0x80
 80059f2:	611a      	str	r2, [r3, #16]
 80059f4:	4b46      	ldr	r3, [pc, #280]	; (8005b10 <LCD_Init+0x3980>)
 80059f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80059fc:	20b0      	movs	r0, #176	; 0xb0
 80059fe:	f7fb f8cf 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005a02:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <LCD_Init+0x3980>)
 8005a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	4b41      	ldr	r3, [pc, #260]	; (8005b10 <LCD_Init+0x3980>)
 8005a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a10:	615a      	str	r2, [r3, #20]
 8005a12:	4b40      	ldr	r3, [pc, #256]	; (8005b14 <LCD_Init+0x3984>)
 8005a14:	2220      	movs	r2, #32
 8005a16:	60da      	str	r2, [r3, #12]
 8005a18:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <LCD_Init+0x3980>)
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	615a      	str	r2, [r3, #20]
 8005a1e:	4b3c      	ldr	r3, [pc, #240]	; (8005b10 <LCD_Init+0x3980>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <LCD_Init+0x3980>)
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005a2c:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <LCD_Init+0x3980>)
 8005a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	4b36      	ldr	r3, [pc, #216]	; (8005b10 <LCD_Init+0x3980>)
 8005a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a3a:	615a      	str	r2, [r3, #20]
 8005a3c:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <LCD_Init+0x3984>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	4b33      	ldr	r3, [pc, #204]	; (8005b10 <LCD_Init+0x3980>)
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	615a      	str	r2, [r3, #20]
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <LCD_Init+0x3980>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	4b30      	ldr	r3, [pc, #192]	; (8005b10 <LCD_Init+0x3980>)
 8005a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a54:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005a56:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <LCD_Init+0x3980>)
 8005a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	4b2c      	ldr	r3, [pc, #176]	; (8005b10 <LCD_Init+0x3980>)
 8005a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a64:	615a      	str	r2, [r3, #20]
 8005a66:	4b2b      	ldr	r3, [pc, #172]	; (8005b14 <LCD_Init+0x3984>)
 8005a68:	2203      	movs	r2, #3
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	4b28      	ldr	r3, [pc, #160]	; (8005b10 <LCD_Init+0x3980>)
 8005a6e:	2280      	movs	r2, #128	; 0x80
 8005a70:	615a      	str	r2, [r3, #20]
 8005a72:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <LCD_Init+0x3980>)
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	611a      	str	r2, [r3, #16]
 8005a78:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <LCD_Init+0x3980>)
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <LCD_Init+0x3980>)
 8005a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a86:	611a      	str	r2, [r3, #16]
 8005a88:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <LCD_Init+0x3980>)
 8005a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8e:	615a      	str	r2, [r3, #20]
 8005a90:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <LCD_Init+0x3984>)
 8005a92:	f240 321f 	movw	r2, #799	; 0x31f
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <LCD_Init+0x3980>)
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	4b1c      	ldr	r3, [pc, #112]	; (8005b10 <LCD_Init+0x3980>)
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <LCD_Init+0x3980>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aaa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005aac:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <LCD_Init+0x3980>)
 8005aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab2:	611a      	str	r2, [r3, #16]
 8005ab4:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <LCD_Init+0x3980>)
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	615a      	str	r2, [r3, #20]
 8005abc:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <LCD_Init+0x3984>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <LCD_Init+0x3980>)
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	615a      	str	r2, [r3, #20]
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <LCD_Init+0x3980>)
 8005aca:	2280      	movs	r2, #128	; 0x80
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <LCD_Init+0x3980>)
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <LCD_Init+0x3980>)
 8005ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <LCD_Init+0x3980>)
 8005ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae4:	615a      	str	r2, [r3, #20]
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <LCD_Init+0x3984>)
 8005ae8:	f240 12df 	movw	r2, #479	; 0x1df
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <LCD_Init+0x3980>)
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	615a      	str	r2, [r3, #20]
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <LCD_Init+0x3980>)
 8005af6:	2280      	movs	r2, #128	; 0x80
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <LCD_Init+0x3980>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005b02:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <LCD_Init+0x3980>)
 8005b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b08:	e006      	b.n	8005b18 <LCD_Init+0x3988>
 8005b0a:	bf00      	nop
 8005b0c:	2000020c 	.word	0x2000020c
 8005b10:	40011000 	.word	0x40011000
 8005b14:	40010c00 	.word	0x40010c00
 8005b18:	611a      	str	r2, [r3, #16]
 8005b1a:	4ba3      	ldr	r3, [pc, #652]	; (8005da8 <LCD_Init+0x3c18>)
 8005b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b20:	615a      	str	r2, [r3, #20]
 8005b22:	4ba2      	ldr	r3, [pc, #648]	; (8005dac <LCD_Init+0x3c1c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	4b9f      	ldr	r3, [pc, #636]	; (8005da8 <LCD_Init+0x3c18>)
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	615a      	str	r2, [r3, #20]
 8005b2e:	4b9e      	ldr	r3, [pc, #632]	; (8005da8 <LCD_Init+0x3c18>)
 8005b30:	2280      	movs	r2, #128	; 0x80
 8005b32:	611a      	str	r2, [r3, #16]
 8005b34:	4b9c      	ldr	r3, [pc, #624]	; (8005da8 <LCD_Init+0x3c18>)
 8005b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005b3c:	20b4      	movs	r0, #180	; 0xb4
 8005b3e:	f7fb f82f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005b42:	4b99      	ldr	r3, [pc, #612]	; (8005da8 <LCD_Init+0x3c18>)
 8005b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b48:	611a      	str	r2, [r3, #16]
 8005b4a:	4b97      	ldr	r3, [pc, #604]	; (8005da8 <LCD_Init+0x3c18>)
 8005b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	4b96      	ldr	r3, [pc, #600]	; (8005dac <LCD_Init+0x3c1c>)
 8005b54:	2204      	movs	r2, #4
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	4b93      	ldr	r3, [pc, #588]	; (8005da8 <LCD_Init+0x3c18>)
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	615a      	str	r2, [r3, #20]
 8005b5e:	4b92      	ldr	r3, [pc, #584]	; (8005da8 <LCD_Init+0x3c18>)
 8005b60:	2280      	movs	r2, #128	; 0x80
 8005b62:	611a      	str	r2, [r3, #16]
 8005b64:	4b90      	ldr	r3, [pc, #576]	; (8005da8 <LCD_Init+0x3c18>)
 8005b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005b6c:	4b8e      	ldr	r3, [pc, #568]	; (8005da8 <LCD_Init+0x3c18>)
 8005b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b72:	611a      	str	r2, [r3, #16]
 8005b74:	4b8c      	ldr	r3, [pc, #560]	; (8005da8 <LCD_Init+0x3c18>)
 8005b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7a:	615a      	str	r2, [r3, #20]
 8005b7c:	4b8b      	ldr	r3, [pc, #556]	; (8005dac <LCD_Init+0x3c1c>)
 8005b7e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005b82:	60da      	str	r2, [r3, #12]
 8005b84:	4b88      	ldr	r3, [pc, #544]	; (8005da8 <LCD_Init+0x3c18>)
 8005b86:	2280      	movs	r2, #128	; 0x80
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	4b87      	ldr	r3, [pc, #540]	; (8005da8 <LCD_Init+0x3c18>)
 8005b8c:	2280      	movs	r2, #128	; 0x80
 8005b8e:	611a      	str	r2, [r3, #16]
 8005b90:	4b85      	ldr	r3, [pc, #532]	; (8005da8 <LCD_Init+0x3c18>)
 8005b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005b98:	4b83      	ldr	r3, [pc, #524]	; (8005da8 <LCD_Init+0x3c18>)
 8005b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9e:	611a      	str	r2, [r3, #16]
 8005ba0:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <LCD_Init+0x3c18>)
 8005ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba6:	615a      	str	r2, [r3, #20]
 8005ba8:	4b80      	ldr	r3, [pc, #512]	; (8005dac <LCD_Init+0x3c1c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	4b7e      	ldr	r3, [pc, #504]	; (8005da8 <LCD_Init+0x3c18>)
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	615a      	str	r2, [r3, #20]
 8005bb4:	4b7c      	ldr	r3, [pc, #496]	; (8005da8 <LCD_Init+0x3c18>)
 8005bb6:	2280      	movs	r2, #128	; 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	4b7b      	ldr	r3, [pc, #492]	; (8005da8 <LCD_Init+0x3c18>)
 8005bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005bc2:	4b79      	ldr	r3, [pc, #484]	; (8005da8 <LCD_Init+0x3c18>)
 8005bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc8:	611a      	str	r2, [r3, #16]
 8005bca:	4b77      	ldr	r3, [pc, #476]	; (8005da8 <LCD_Init+0x3c18>)
 8005bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd0:	615a      	str	r2, [r3, #20]
 8005bd2:	4b76      	ldr	r3, [pc, #472]	; (8005dac <LCD_Init+0x3c1c>)
 8005bd4:	222e      	movs	r2, #46	; 0x2e
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	4b73      	ldr	r3, [pc, #460]	; (8005da8 <LCD_Init+0x3c18>)
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
 8005bde:	4b72      	ldr	r3, [pc, #456]	; (8005da8 <LCD_Init+0x3c18>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	611a      	str	r2, [r3, #16]
 8005be4:	4b70      	ldr	r3, [pc, #448]	; (8005da8 <LCD_Init+0x3c18>)
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005bec:	4b6e      	ldr	r3, [pc, #440]	; (8005da8 <LCD_Init+0x3c18>)
 8005bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf2:	611a      	str	r2, [r3, #16]
 8005bf4:	4b6c      	ldr	r3, [pc, #432]	; (8005da8 <LCD_Init+0x3c18>)
 8005bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bfa:	615a      	str	r2, [r3, #20]
 8005bfc:	4b6b      	ldr	r3, [pc, #428]	; (8005dac <LCD_Init+0x3c1c>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	4b69      	ldr	r3, [pc, #420]	; (8005da8 <LCD_Init+0x3c18>)
 8005c04:	2280      	movs	r2, #128	; 0x80
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <LCD_Init+0x3c18>)
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <LCD_Init+0x3c18>)
 8005c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c16:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <LCD_Init+0x3c18>)
 8005c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <LCD_Init+0x3c18>)
 8005c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c24:	615a      	str	r2, [r3, #20]
 8005c26:	4b61      	ldr	r3, [pc, #388]	; (8005dac <LCD_Init+0x3c1c>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	4b5e      	ldr	r3, [pc, #376]	; (8005da8 <LCD_Init+0x3c18>)
 8005c2e:	2280      	movs	r2, #128	; 0x80
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	4b5d      	ldr	r3, [pc, #372]	; (8005da8 <LCD_Init+0x3c18>)
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	611a      	str	r2, [r3, #16]
 8005c38:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <LCD_Init+0x3c18>)
 8005c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c40:	4b59      	ldr	r3, [pc, #356]	; (8005da8 <LCD_Init+0x3c18>)
 8005c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c46:	611a      	str	r2, [r3, #16]
 8005c48:	4b57      	ldr	r3, [pc, #348]	; (8005da8 <LCD_Init+0x3c18>)
 8005c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4e:	615a      	str	r2, [r3, #20]
 8005c50:	4b56      	ldr	r3, [pc, #344]	; (8005dac <LCD_Init+0x3c1c>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	4b54      	ldr	r3, [pc, #336]	; (8005da8 <LCD_Init+0x3c18>)
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	4b52      	ldr	r3, [pc, #328]	; (8005da8 <LCD_Init+0x3c18>)
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	611a      	str	r2, [r3, #16]
 8005c62:	4b51      	ldr	r3, [pc, #324]	; (8005da8 <LCD_Init+0x3c18>)
 8005c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c6a:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <LCD_Init+0x3c18>)
 8005c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c70:	611a      	str	r2, [r3, #16]
 8005c72:	4b4d      	ldr	r3, [pc, #308]	; (8005da8 <LCD_Init+0x3c18>)
 8005c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c78:	615a      	str	r2, [r3, #20]
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <LCD_Init+0x3c1c>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	4b49      	ldr	r3, [pc, #292]	; (8005da8 <LCD_Init+0x3c18>)
 8005c82:	2280      	movs	r2, #128	; 0x80
 8005c84:	615a      	str	r2, [r3, #20]
 8005c86:	4b48      	ldr	r3, [pc, #288]	; (8005da8 <LCD_Init+0x3c18>)
 8005c88:	2280      	movs	r2, #128	; 0x80
 8005c8a:	611a      	str	r2, [r3, #16]
 8005c8c:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <LCD_Init+0x3c18>)
 8005c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c92:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005c94:	20b6      	movs	r0, #182	; 0xb6
 8005c96:	f7fa ff83 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005c9a:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <LCD_Init+0x3c18>)
 8005c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	4b41      	ldr	r3, [pc, #260]	; (8005da8 <LCD_Init+0x3c18>)
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	615a      	str	r2, [r3, #20]
 8005caa:	4b40      	ldr	r3, [pc, #256]	; (8005dac <LCD_Init+0x3c1c>)
 8005cac:	2202      	movs	r2, #2
 8005cae:	60da      	str	r2, [r3, #12]
 8005cb0:	4b3d      	ldr	r3, [pc, #244]	; (8005da8 <LCD_Init+0x3c18>)
 8005cb2:	2280      	movs	r2, #128	; 0x80
 8005cb4:	615a      	str	r2, [r3, #20]
 8005cb6:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <LCD_Init+0x3c18>)
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	611a      	str	r2, [r3, #16]
 8005cbc:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <LCD_Init+0x3c18>)
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005cc4:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <LCD_Init+0x3c18>)
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	611a      	str	r2, [r3, #16]
 8005ccc:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <LCD_Init+0x3c18>)
 8005cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd2:	615a      	str	r2, [r3, #20]
 8005cd4:	4b35      	ldr	r3, [pc, #212]	; (8005dac <LCD_Init+0x3c1c>)
 8005cd6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <LCD_Init+0x3c18>)
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	615a      	str	r2, [r3, #20]
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <LCD_Init+0x3c18>)
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	611a      	str	r2, [r3, #16]
 8005ce8:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <LCD_Init+0x3c18>)
 8005cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005cf0:	4b2d      	ldr	r3, [pc, #180]	; (8005da8 <LCD_Init+0x3c18>)
 8005cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cf6:	611a      	str	r2, [r3, #16]
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <LCD_Init+0x3c18>)
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	615a      	str	r2, [r3, #20]
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <LCD_Init+0x3c1c>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	60da      	str	r2, [r3, #12]
 8005d06:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <LCD_Init+0x3c18>)
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	615a      	str	r2, [r3, #20]
 8005d0c:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <LCD_Init+0x3c18>)
 8005d0e:	2280      	movs	r2, #128	; 0x80
 8005d10:	611a      	str	r2, [r3, #16]
 8005d12:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <LCD_Init+0x3c18>)
 8005d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d18:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <LCD_Init+0x3c18>)
 8005d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d20:	611a      	str	r2, [r3, #16]
 8005d22:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <LCD_Init+0x3c18>)
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	615a      	str	r2, [r3, #20]
 8005d2a:	4b20      	ldr	r3, [pc, #128]	; (8005dac <LCD_Init+0x3c1c>)
 8005d2c:	2217      	movs	r2, #23
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <LCD_Init+0x3c18>)
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	615a      	str	r2, [r3, #20]
 8005d36:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <LCD_Init+0x3c18>)
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	611a      	str	r2, [r3, #16]
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <LCD_Init+0x3c18>)
 8005d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005d44:	4b18      	ldr	r3, [pc, #96]	; (8005da8 <LCD_Init+0x3c18>)
 8005d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4a:	611a      	str	r2, [r3, #16]
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <LCD_Init+0x3c18>)
 8005d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d52:	615a      	str	r2, [r3, #20]
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <LCD_Init+0x3c1c>)
 8005d56:	2215      	movs	r2, #21
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <LCD_Init+0x3c18>)
 8005d5c:	2280      	movs	r2, #128	; 0x80
 8005d5e:	615a      	str	r2, [r3, #20]
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <LCD_Init+0x3c18>)
 8005d62:	2280      	movs	r2, #128	; 0x80
 8005d64:	611a      	str	r2, [r3, #16]
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <LCD_Init+0x3c18>)
 8005d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d6e:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <LCD_Init+0x3c18>)
 8005d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d74:	611a      	str	r2, [r3, #16]
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <LCD_Init+0x3c18>)
 8005d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7c:	615a      	str	r2, [r3, #20]
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <LCD_Init+0x3c1c>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <LCD_Init+0x3c18>)
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <LCD_Init+0x3c18>)
 8005d8c:	2280      	movs	r2, #128	; 0x80
 8005d8e:	611a      	str	r2, [r3, #16]
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <LCD_Init+0x3c18>)
 8005d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d96:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <LCD_Init+0x3c18>)
 8005d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d9e:	611a      	str	r2, [r3, #16]
 8005da0:	4b01      	ldr	r3, [pc, #4]	; (8005da8 <LCD_Init+0x3c18>)
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	e003      	b.n	8005db0 <LCD_Init+0x3c20>
 8005da8:	40011000 	.word	0x40011000
 8005dac:	40010c00 	.word	0x40010c00
 8005db0:	615a      	str	r2, [r3, #20]
 8005db2:	4b8b      	ldr	r3, [pc, #556]	; (8005fe0 <LCD_Init+0x3e50>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	60da      	str	r2, [r3, #12]
 8005db8:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	615a      	str	r2, [r3, #20]
 8005dbe:	4b89      	ldr	r3, [pc, #548]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	611a      	str	r2, [r3, #16]
 8005dc4:	4b87      	ldr	r3, [pc, #540]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005dcc:	20f0      	movs	r0, #240	; 0xf0
 8005dce:	f7fa fee7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005dd2:	4b84      	ldr	r3, [pc, #528]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	4b82      	ldr	r3, [pc, #520]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de0:	615a      	str	r2, [r3, #20]
 8005de2:	4b7f      	ldr	r3, [pc, #508]	; (8005fe0 <LCD_Init+0x3e50>)
 8005de4:	2203      	movs	r2, #3
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	4b7e      	ldr	r3, [pc, #504]	; (8005fe4 <LCD_Init+0x3e54>)
 8005dea:	2280      	movs	r2, #128	; 0x80
 8005dec:	615a      	str	r2, [r3, #20]
 8005dee:	4b7d      	ldr	r3, [pc, #500]	; (8005fe4 <LCD_Init+0x3e54>)
 8005df0:	2280      	movs	r2, #128	; 0x80
 8005df2:	611a      	str	r2, [r3, #16]
 8005df4:	4b7b      	ldr	r3, [pc, #492]	; (8005fe4 <LCD_Init+0x3e54>)
 8005df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dfa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005dfc:	2029      	movs	r0, #41	; 0x29
 8005dfe:	f7fa fecf 	bl	8000ba0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005e02:	20d0      	movs	r0, #208	; 0xd0
 8005e04:	f7fa fecc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005e08:	4b76      	ldr	r3, [pc, #472]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e0e:	611a      	str	r2, [r3, #16]
 8005e10:	4b74      	ldr	r3, [pc, #464]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e16:	615a      	str	r2, [r3, #20]
 8005e18:	4b71      	ldr	r3, [pc, #452]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	4b71      	ldr	r3, [pc, #452]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	615a      	str	r2, [r3, #20]
 8005e24:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	611a      	str	r2, [r3, #16]
 8005e2a:	4b6e      	ldr	r3, [pc, #440]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e30:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005e32:	20be      	movs	r0, #190	; 0xbe
 8005e34:	f7fa feb4 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005e38:	4b6a      	ldr	r3, [pc, #424]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e3e:	611a      	str	r2, [r3, #16]
 8005e40:	4b68      	ldr	r3, [pc, #416]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e46:	615a      	str	r2, [r3, #20]
 8005e48:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e4a:	2205      	movs	r2, #5
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	4b65      	ldr	r3, [pc, #404]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e50:	2280      	movs	r2, #128	; 0x80
 8005e52:	615a      	str	r2, [r3, #20]
 8005e54:	4b63      	ldr	r3, [pc, #396]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	4b62      	ldr	r3, [pc, #392]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005e62:	4b60      	ldr	r3, [pc, #384]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e68:	611a      	str	r2, [r3, #16]
 8005e6a:	4b5e      	ldr	r3, [pc, #376]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e70:	615a      	str	r2, [r3, #20]
 8005e72:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e74:	22fe      	movs	r2, #254	; 0xfe
 8005e76:	60da      	str	r2, [r3, #12]
 8005e78:	4b5a      	ldr	r3, [pc, #360]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	615a      	str	r2, [r3, #20]
 8005e7e:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	611a      	str	r2, [r3, #16]
 8005e84:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005e8c:	4b55      	ldr	r3, [pc, #340]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e92:	611a      	str	r2, [r3, #16]
 8005e94:	4b53      	ldr	r3, [pc, #332]	; (8005fe4 <LCD_Init+0x3e54>)
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	615a      	str	r2, [r3, #20]
 8005e9c:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <LCD_Init+0x3e50>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	4b50      	ldr	r3, [pc, #320]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ea4:	2280      	movs	r2, #128	; 0x80
 8005ea6:	615a      	str	r2, [r3, #20]
 8005ea8:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eaa:	2280      	movs	r2, #128	; 0x80
 8005eac:	611a      	str	r2, [r3, #16]
 8005eae:	4b4d      	ldr	r3, [pc, #308]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005eb6:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ebc:	611a      	str	r2, [r3, #16]
 8005ebe:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec4:	615a      	str	r2, [r3, #20]
 8005ec6:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <LCD_Init+0x3e50>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
 8005ecc:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ece:	2280      	movs	r2, #128	; 0x80
 8005ed0:	615a      	str	r2, [r3, #20]
 8005ed2:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ed4:	2280      	movs	r2, #128	; 0x80
 8005ed6:	611a      	str	r2, [r3, #16]
 8005ed8:	4b42      	ldr	r3, [pc, #264]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ede:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	611a      	str	r2, [r3, #16]
 8005ee8:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <LCD_Init+0x3e54>)
 8005eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eee:	615a      	str	r2, [r3, #20]
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <LCD_Init+0x3e50>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <LCD_Init+0x3e54>)
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	615a      	str	r2, [r3, #20]
 8005efc:	4b39      	ldr	r3, [pc, #228]	; (8005fe4 <LCD_Init+0x3e54>)
 8005efe:	2280      	movs	r2, #128	; 0x80
 8005f00:	611a      	str	r2, [r3, #16]
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f08:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f18:	615a      	str	r2, [r3, #20]
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <LCD_Init+0x3e50>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	4b30      	ldr	r3, [pc, #192]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f22:	2280      	movs	r2, #128	; 0x80
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	611a      	str	r2, [r3, #16]
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f32:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005f34:	20b8      	movs	r0, #184	; 0xb8
 8005f36:	f7fa fe33 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005f3a:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f40:	611a      	str	r2, [r3, #16]
 8005f42:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f48:	615a      	str	r2, [r3, #20]
 8005f4a:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <LCD_Init+0x3e50>)
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f52:	2280      	movs	r2, #128	; 0x80
 8005f54:	615a      	str	r2, [r3, #20]
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	611a      	str	r2, [r3, #16]
 8005f5c:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6a:	611a      	str	r2, [r3, #16]
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f72:	615a      	str	r2, [r3, #20]
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <LCD_Init+0x3e50>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	615a      	str	r2, [r3, #20]
 8005f80:	4b18      	ldr	r3, [pc, #96]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005f8e:	20ba      	movs	r0, #186	; 0xba
 8005f90:	f7fa fe06 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005f94:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f9a:	611a      	str	r2, [r3, #16]
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <LCD_Init+0x3e54>)
 8005f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa2:	615a      	str	r2, [r3, #20]
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <LCD_Init+0x3e50>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <LCD_Init+0x3e54>)
 8005fac:	2280      	movs	r2, #128	; 0x80
 8005fae:	615a      	str	r2, [r3, #20]
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <LCD_Init+0x3e54>)
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	611a      	str	r2, [r3, #16]
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <LCD_Init+0x3e54>)
 8005fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbc:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005fbe:	2064      	movs	r0, #100	; 0x64
 8005fc0:	f7fb ff36 	bl	8001e30 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f7fb ffd7 	bl	8001f78 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <LCD_Init+0x3e58>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005fd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005fd4:	f000 f80a 	bl	8005fec <LCD_Clear>
}
 8005fd8:	bf00      	nop
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40010c00 	.word	0x40010c00
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	422201a8 	.word	0x422201a8

08005fec <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <LCD_Clear+0xb8>)
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <LCD_Clear+0xb8>)
 8006002:	885b      	ldrh	r3, [r3, #2]
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 800600e:	4b25      	ldr	r3, [pc, #148]	; (80060a4 <LCD_Clear+0xb8>)
 8006010:	889b      	ldrh	r3, [r3, #4]
 8006012:	f646 0204 	movw	r2, #26628	; 0x6804
 8006016:	4293      	cmp	r3, r2
 8006018:	d11a      	bne.n	8006050 <LCD_Clear+0x64>
 800601a:	4b22      	ldr	r3, [pc, #136]	; (80060a4 <LCD_Clear+0xb8>)
 800601c:	799b      	ldrb	r3, [r3, #6]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d116      	bne.n	8006050 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8006022:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <LCD_Clear+0xb8>)
 8006024:	2200      	movs	r2, #0
 8006026:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <LCD_Clear+0xb8>)
 800602a:	222a      	movs	r2, #42	; 0x2a
 800602c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <LCD_Clear+0xb8>)
 8006030:	222b      	movs	r2, #43	; 0x2b
 8006032:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8006034:	2100      	movs	r1, #0
 8006036:	2000      	movs	r0, #0
 8006038:	f7fa fe84 	bl	8000d44 <LCD_SetCursor>
		lcddev.dir = 1;
 800603c:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <LCD_Clear+0xb8>)
 800603e:	2201      	movs	r2, #1
 8006040:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006042:	4b18      	ldr	r3, [pc, #96]	; (80060a4 <LCD_Clear+0xb8>)
 8006044:	222b      	movs	r2, #43	; 0x2b
 8006046:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <LCD_Clear+0xb8>)
 800604a:	222a      	movs	r2, #42	; 0x2a
 800604c:	819a      	strh	r2, [r3, #12]
 800604e:	e003      	b.n	8006058 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006050:	2100      	movs	r1, #0
 8006052:	2000      	movs	r0, #0
 8006054:	f7fa fe76 	bl	8000d44 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006058:	f7fa fe68 	bl	8000d2c <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e017      	b.n	8006092 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <LCD_Clear+0xbc>)
 8006064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006068:	611a      	str	r2, [r3, #16]
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <LCD_Clear+0xbc>)
 800606c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006070:	615a      	str	r2, [r3, #20]
 8006072:	4a0e      	ldr	r2, [pc, #56]	; (80060ac <LCD_Clear+0xc0>)
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	60d3      	str	r3, [r2, #12]
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <LCD_Clear+0xbc>)
 800607a:	2280      	movs	r2, #128	; 0x80
 800607c:	615a      	str	r2, [r3, #20]
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <LCD_Clear+0xbc>)
 8006080:	2280      	movs	r2, #128	; 0x80
 8006082:	611a      	str	r2, [r3, #16]
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <LCD_Clear+0xbc>)
 8006086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d3e3      	bcc.n	8006062 <LCD_Clear+0x76>
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	2000020c 	.word	0x2000020c
 80060a8:	40011000 	.word	0x40011000
 80060ac:	40010c00 	.word	0x40010c00

080060b0 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	80fb      	strh	r3, [r7, #6]
 80060c2:	4603      	mov	r3, r0
 80060c4:	80bb      	strh	r3, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
 80060ca:	4613      	mov	r3, r2
 80060cc:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 80060ce:	88bb      	ldrh	r3, [r7, #4]
 80060d0:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 80060d2:	78bb      	ldrb	r3, [r7, #2]
 80060d4:	08db      	lsrs	r3, r3, #3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	78bb      	ldrb	r3, [r7, #2]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bf14      	ite	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	2300      	moveq	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	78ba      	ldrb	r2, [r7, #2]
 80060f2:	0852      	lsrs	r2, r2, #1
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	3b20      	subs	r3, #32
 8006100:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8006102:	2300      	movs	r3, #0
 8006104:	737b      	strb	r3, [r7, #13]
 8006106:	e069      	b.n	80061dc <LCD_ShowChar+0x12c>
		if (size == 12)
 8006108:	78bb      	ldrb	r3, [r7, #2]
 800610a:	2b0c      	cmp	r3, #12
 800610c:	d10b      	bne.n	8006126 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	7b79      	ldrb	r1, [r7, #13]
 8006112:	4838      	ldr	r0, [pc, #224]	; (80061f4 <LCD_ShowChar+0x144>)
 8006114:	4613      	mov	r3, r2
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4403      	add	r3, r0
 800611e:	440b      	add	r3, r1
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e019      	b.n	800615a <LCD_ShowChar+0xaa>
		else if (size == 16)
 8006126:	78bb      	ldrb	r3, [r7, #2]
 8006128:	2b10      	cmp	r3, #16
 800612a:	d108      	bne.n	800613e <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	7b7b      	ldrb	r3, [r7, #13]
 8006130:	4931      	ldr	r1, [pc, #196]	; (80061f8 <LCD_ShowChar+0x148>)
 8006132:	0112      	lsls	r2, r2, #4
 8006134:	440a      	add	r2, r1
 8006136:	4413      	add	r3, r2
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	e00d      	b.n	800615a <LCD_ShowChar+0xaa>
		else if (size == 24)
 800613e:	78bb      	ldrb	r3, [r7, #2]
 8006140:	2b18      	cmp	r3, #24
 8006142:	d150      	bne.n	80061e6 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	7b79      	ldrb	r1, [r7, #13]
 8006148:	482c      	ldr	r0, [pc, #176]	; (80061fc <LCD_ShowChar+0x14c>)
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4403      	add	r3, r0
 8006154:	440b      	add	r3, r1
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800615a:	2300      	movs	r3, #0
 800615c:	73bb      	strb	r3, [r7, #14]
 800615e:	e035      	b.n	80061cc <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006164:	2b00      	cmp	r3, #0
 8006166:	da07      	bge.n	8006178 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <LCD_ShowChar+0x150>)
 800616a:	881a      	ldrh	r2, [r3, #0]
 800616c:	88b9      	ldrh	r1, [r7, #4]
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fb fbc5 	bl	8001900 <LCD_Fast_DrawPoint>
 8006176:	e00a      	b.n	800618e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006178:	f897 3020 	ldrb.w	r3, [r7, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006180:	4b20      	ldr	r3, [pc, #128]	; (8006204 <LCD_ShowChar+0x154>)
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	88b9      	ldrh	r1, [r7, #4]
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	4618      	mov	r0, r3
 800618a:	f7fb fbb9 	bl	8001900 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
			y++;
 8006194:	88bb      	ldrh	r3, [r7, #4]
 8006196:	3301      	adds	r3, #1
 8006198:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <LCD_ShowChar+0x158>)
 800619c:	885b      	ldrh	r3, [r3, #2]
 800619e:	88ba      	ldrh	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d222      	bcs.n	80061ea <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 80061a4:	88ba      	ldrh	r2, [r7, #4]
 80061a6:	897b      	ldrh	r3, [r7, #10]
 80061a8:	1ad2      	subs	r2, r2, r3
 80061aa:	78bb      	ldrb	r3, [r7, #2]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d10a      	bne.n	80061c6 <LCD_ShowChar+0x116>
				y = y0;
 80061b0:	897b      	ldrh	r3, [r7, #10]
 80061b2:	80bb      	strh	r3, [r7, #4]
				x++;
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	3301      	adds	r3, #1
 80061b8:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 80061ba:	4b13      	ldr	r3, [pc, #76]	; (8006208 <LCD_ShowChar+0x158>)
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d307      	bcc.n	80061d4 <LCD_ShowChar+0x124>
					return;	//超区域了
 80061c4:	e012      	b.n	80061ec <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	3301      	adds	r3, #1
 80061ca:	73bb      	strb	r3, [r7, #14]
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	d9c6      	bls.n	8006160 <LCD_ShowChar+0xb0>
 80061d2:	e000      	b.n	80061d6 <LCD_ShowChar+0x126>
				break;
 80061d4:	bf00      	nop
	for (t = 0; t < csize; t++) {
 80061d6:	7b7b      	ldrb	r3, [r7, #13]
 80061d8:	3301      	adds	r3, #1
 80061da:	737b      	strb	r3, [r7, #13]
 80061dc:	7b7a      	ldrb	r2, [r7, #13]
 80061de:	7a7b      	ldrb	r3, [r7, #9]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d391      	bcc.n	8006108 <LCD_ShowChar+0x58>
 80061e4:	e002      	b.n	80061ec <LCD_ShowChar+0x13c>
			return;								//没有的字库
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <LCD_ShowChar+0x13c>
				return;		//超区域了
 80061ea:	bf00      	nop
			}
		}
	}
}
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd90      	pop	{r4, r7, pc}
 80061f2:	bf00      	nop
 80061f4:	0800bc80 	.word	0x0800bc80
 80061f8:	0800c0f4 	.word	0x0800c0f4
 80061fc:	0800c6e4 	.word	0x0800c6e4
 8006200:	200001fc 	.word	0x200001fc
 8006204:	20000000 	.word	0x20000000
 8006208:	2000020c 	.word	0x2000020c

0800620c <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b087      	sub	sp, #28
 8006210:	af02      	add	r7, sp, #8
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	4623      	mov	r3, r4
 800621c:	80fb      	strh	r3, [r7, #6]
 800621e:	4603      	mov	r3, r0
 8006220:	80bb      	strh	r3, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	807b      	strh	r3, [r7, #2]
 8006226:	4613      	mov	r3, r2
 8006228:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	73fb      	strb	r3, [r7, #15]
	width += x;
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	4413      	add	r3, r2
 8006234:	807b      	strh	r3, [r7, #2]
	height += y;
 8006236:	883a      	ldrh	r2, [r7, #0]
 8006238:	88bb      	ldrh	r3, [r7, #4]
 800623a:	4413      	add	r3, r2
 800623c:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800623e:	e024      	b.n	800628a <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	429a      	cmp	r2, r3
 8006246:	d307      	bcc.n	8006258 <LCD_ShowString+0x4c>
			x = x0;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	80fb      	strh	r3, [r7, #6]
			y += size;
 800624c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006250:	b29a      	uxth	r2, r3
 8006252:	88bb      	ldrh	r3, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006258:	88ba      	ldrh	r2, [r7, #4]
 800625a:	883b      	ldrh	r3, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d21d      	bcs.n	800629c <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006268:	88b9      	ldrh	r1, [r7, #4]
 800626a:	88f8      	ldrh	r0, [r7, #6]
 800626c:	2400      	movs	r4, #0
 800626e:	9400      	str	r4, [sp, #0]
 8006270:	f7ff ff1e 	bl	80060b0 <LCD_ShowChar>
		x += size / 2;
 8006274:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	b29a      	uxth	r2, r3
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	4413      	add	r3, r2
 8006282:	80fb      	strh	r3, [r7, #6]
		p++;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	3301      	adds	r3, #1
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b7e      	cmp	r3, #126	; 0x7e
 8006290:	d805      	bhi.n	800629e <LCD_ShowString+0x92>
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b1f      	cmp	r3, #31
 8006298:	d8d2      	bhi.n	8006240 <LCD_ShowString+0x34>
	}
}
 800629a:	e000      	b.n	800629e <LCD_ShowString+0x92>
			break;	//退出
 800629c:	bf00      	nop
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd90      	pop	{r4, r7, pc}
	...

080062a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80062ac:	f000 fb82 	bl	80069b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80062b0:	f000 f80e 	bl	80062d0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	LCD_Init();
 80062b4:	f7fb ff6c 	bl	8002190 <LCD_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80062b8:	f000 f916 	bl	80064e8 <MX_GPIO_Init>
	MX_ADC1_Init();
 80062bc:	f000 f866 	bl	800638c <MX_ADC1_Init>
	MX_TIM3_Init();
 80062c0:	f000 f8c4 	bl	800644c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <main+0x24>)
 80062c6:	f002 f9f7 	bl	80086b8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80062ca:	e7fe      	b.n	80062ca <main+0x22>
 80062cc:	2000021c 	.word	0x2000021c

080062d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b096      	sub	sp, #88	; 0x58
 80062d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80062d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062da:	2228      	movs	r2, #40	; 0x28
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f002 fdf2 	bl	8008ec8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80062e4:	f107 031c 	add.w	r3, r7, #28
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	60da      	str	r2, [r3, #12]
 80062f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	60da      	str	r2, [r3, #12]
 8006300:	611a      	str	r2, [r3, #16]
 8006302:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006304:	2301      	movs	r3, #1
 8006306:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800630e:	2300      	movs	r3, #0
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006312:	2301      	movs	r3, #1
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006316:	2302      	movs	r3, #2
 8006318:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800631a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800631e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006320:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006324:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fbd2 	bl	8007ad4 <HAL_RCC_OscConfig>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <SystemClock_Config+0x6a>
		Error_Handler();
 8006336:	f000 f8f9 	bl	800652c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800633a:	230f      	movs	r3, #15
 800633c:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800633e:	2302      	movs	r3, #2
 8006340:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006342:	2300      	movs	r3, #0
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800634c:	2300      	movs	r3, #0
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006350:	f107 031c 	add.w	r3, r7, #28
 8006354:	2102      	movs	r1, #2
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fe3c 	bl	8007fd4 <HAL_RCC_ClockConfig>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <SystemClock_Config+0x96>
		Error_Handler();
 8006362:	f000 f8e3 	bl	800652c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006366:	2302      	movs	r3, #2
 8006368:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800636a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f001 ffb4 	bl	80082e0 <HAL_RCCEx_PeriphCLKConfig>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <SystemClock_Config+0xb2>
		Error_Handler();
 800637e:	f000 f8d5 	bl	800652c <Error_Handler>
	}
}
 8006382:	bf00      	nop
 8006384:	3758      	adds	r7, #88	; 0x58
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = { 0 };
 8006392:	f107 0310 	add.w	r3, r7, #16
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	605a      	str	r2, [r3, #4]
 800639c:	609a      	str	r2, [r3, #8]
 800639e:	60da      	str	r2, [r3, #12]
 80063a0:	611a      	str	r2, [r3, #16]
 80063a2:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80063ae:	4b24      	ldr	r3, [pc, #144]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063b0:	4a24      	ldr	r2, [pc, #144]	; (8006444 <MX_ADC1_Init+0xb8>)
 80063b2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80063b4:	4b22      	ldr	r3, [pc, #136]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80063ba:	4b21      	ldr	r3, [pc, #132]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063bc:	2200      	movs	r2, #0
 80063be:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80063c0:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063c6:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80063cc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063ce:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80063d4:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80063da:	4819      	ldr	r0, [pc, #100]	; (8006440 <MX_ADC1_Init+0xb4>)
 80063dc:	f000 fb70 	bl	8006ac0 <HAL_ADC_Init>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <MX_ADC1_Init+0x5e>
		Error_Handler();
 80063e6:	f000 f8a1 	bl	800652c <Error_Handler>
	}
	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <MX_ADC1_Init+0xbc>)
 80063ec:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 1900;
 80063ee:	f240 736c 	movw	r3, #1900	; 0x76c
 80063f2:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.LowThreshold = 1828;
 80063f4:	f240 7324 	movw	r3, #1828	; 0x724
 80063f8:	623b      	str	r3, [r7, #32]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80063fa:	2310      	movs	r3, #16
 80063fc:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.ITMode = ENABLE;
 80063fe:	2301      	movs	r3, #1
 8006400:	763b      	strb	r3, [r7, #24]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK) {
 8006402:	f107 0310 	add.w	r3, r7, #16
 8006406:	4619      	mov	r1, r3
 8006408:	480d      	ldr	r0, [pc, #52]	; (8006440 <MX_ADC1_Init+0xb4>)
 800640a:	f000 ffc7 	bl	800739c <HAL_ADC_AnalogWDGConfig>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <MX_ADC1_Init+0x8c>
		Error_Handler();
 8006414:	f000 f88a 	bl	800652c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006418:	2310      	movs	r3, #16
 800641a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800641c:	2301      	movs	r3, #1
 800641e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	4619      	mov	r1, r3
 8006428:	4805      	ldr	r0, [pc, #20]	; (8006440 <MX_ADC1_Init+0xb4>)
 800642a:	f000 febf 	bl	80071ac <HAL_ADC_ConfigChannel>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <MX_ADC1_Init+0xac>
		Error_Handler();
 8006434:	f000 f87a 	bl	800652c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8006438:	bf00      	nop
 800643a:	3728      	adds	r7, #40	; 0x28
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20000264 	.word	0x20000264
 8006444:	40012400 	.word	0x40012400
 8006448:	00800200 	.word	0x00800200

0800644c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
 800645c:	609a      	str	r2, [r3, #8]
 800645e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006460:	463b      	mov	r3, r7
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8006468:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <MX_TIM3_Init+0x94>)
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <MX_TIM3_Init+0x98>)
 800646c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7199;
 800646e:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <MX_TIM3_Init+0x94>)
 8006470:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006474:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <MX_TIM3_Init+0x94>)
 8006478:	2200      	movs	r2, #0
 800647a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 49999;
 800647c:	4b18      	ldr	r3, [pc, #96]	; (80064e0 <MX_TIM3_Init+0x94>)
 800647e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8006482:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006484:	4b16      	ldr	r3, [pc, #88]	; (80064e0 <MX_TIM3_Init+0x94>)
 8006486:	2200      	movs	r2, #0
 8006488:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <MX_TIM3_Init+0x94>)
 800648c:	2200      	movs	r2, #0
 800648e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8006490:	4813      	ldr	r0, [pc, #76]	; (80064e0 <MX_TIM3_Init+0x94>)
 8006492:	f002 f8c1 	bl	8008618 <HAL_TIM_Base_Init>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_TIM3_Init+0x54>
		Error_Handler();
 800649c:	f000 f846 	bl	800652c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4619      	mov	r1, r3
 80064ac:	480c      	ldr	r0, [pc, #48]	; (80064e0 <MX_TIM3_Init+0x94>)
 80064ae:	f002 fa6b 	bl	8008988 <HAL_TIM_ConfigClockSource>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_TIM3_Init+0x70>
		Error_Handler();
 80064b8:	f000 f838 	bl	800652c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064bc:	2300      	movs	r3, #0
 80064be:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80064c4:	463b      	mov	r3, r7
 80064c6:	4619      	mov	r1, r3
 80064c8:	4805      	ldr	r0, [pc, #20]	; (80064e0 <MX_TIM3_Init+0x94>)
 80064ca:	f002 fc55 	bl	8008d78 <HAL_TIMEx_MasterConfigSynchronization>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80064d4:	f000 f82a 	bl	800652c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	2000021c 	.word	0x2000021c
 80064e4:	40000400 	.word	0x40000400

080064e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <MX_GPIO_Init+0x40>)
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	4a0d      	ldr	r2, [pc, #52]	; (8006528 <MX_GPIO_Init+0x40>)
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	6193      	str	r3, [r2, #24]
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <MX_GPIO_Init+0x40>)
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	607b      	str	r3, [r7, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <MX_GPIO_Init+0x40>)
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	4a07      	ldr	r2, [pc, #28]	; (8006528 <MX_GPIO_Init+0x40>)
 800650c:	f043 0304 	orr.w	r3, r3, #4
 8006510:	6193      	str	r3, [r2, #24]
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <MX_GPIO_Init+0x40>)
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	683b      	ldr	r3, [r7, #0]

}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	40021000 	.word	0x40021000

0800652c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006530:	b672      	cpsid	i
}
 8006532:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006534:	e7fe      	b.n	8006534 <Error_Handler+0x8>
	...

08006538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <HAL_MspInit+0x5c>)
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	4a14      	ldr	r2, [pc, #80]	; (8006594 <HAL_MspInit+0x5c>)
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	6193      	str	r3, [r2, #24]
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <HAL_MspInit+0x5c>)
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <HAL_MspInit+0x5c>)
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <HAL_MspInit+0x5c>)
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006560:	61d3      	str	r3, [r2, #28]
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <HAL_MspInit+0x5c>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <HAL_MspInit+0x60>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <HAL_MspInit+0x60>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	40021000 	.word	0x40021000
 8006598:	40010000 	.word	0x40010000

0800659c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <HAL_ADC_MspInit+0x44>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d113      	bne.n	80065d6 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <HAL_ADC_MspInit+0x48>)
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <HAL_ADC_MspInit+0x48>)
 80065b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065b8:	6193      	str	r3, [r2, #24]
 80065ba:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <HAL_ADC_MspInit+0x48>)
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	2012      	movs	r0, #18
 80065cc:	f001 f8b7 	bl	800773e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80065d0:	2012      	movs	r0, #18
 80065d2:	f001 f8d0 	bl	8007776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40012400 	.word	0x40012400
 80065e4:	40021000 	.word	0x40021000

080065e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0d      	ldr	r2, [pc, #52]	; (800662c <HAL_TIM_Base_MspInit+0x44>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d113      	bne.n	8006622 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <HAL_TIM_Base_MspInit+0x48>)
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <HAL_TIM_Base_MspInit+0x48>)
 8006600:	f043 0302 	orr.w	r3, r3, #2
 8006604:	61d3      	str	r3, [r2, #28]
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_TIM_Base_MspInit+0x48>)
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	201d      	movs	r0, #29
 8006618:	f001 f891 	bl	800773e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800661c:	201d      	movs	r0, #29
 800661e:	f001 f8aa 	bl	8007776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40000400 	.word	0x40000400
 8006630:	40021000 	.word	0x40021000

08006634 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8006638:	e7fe      	b.n	8006638 <NMI_Handler+0x4>

0800663a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800663a:	b480      	push	{r7}
 800663c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800663e:	e7fe      	b.n	800663e <HardFault_Handler+0x4>

08006640 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8006644:	e7fe      	b.n	8006644 <MemManage_Handler+0x4>

08006646 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8006646:	b480      	push	{r7}
 8006648:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800664a:	e7fe      	b.n	800664a <BusFault_Handler+0x4>

0800664c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8006650:	e7fe      	b.n	8006650 <UsageFault_Handler+0x4>

08006652 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr

0800665e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800665e:	b480      	push	{r7}
 8006660:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800666a:	b480      	push	{r7}
 800666c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800666e:	bf00      	nop
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr

08006676 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8006676:	b580      	push	{r7, lr}
 8006678:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800667a:	f000 f9e1 	bl	8006a40 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800667e:	bf00      	nop
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <ADC1_2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1 and ADC2 global interrupts.
 */
void ADC1_2_IRQHandler(void) {
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_2_IRQn 0 */

	/* USER CODE END ADC1_2_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8006688:	4802      	ldr	r0, [pc, #8]	; (8006694 <ADC1_2_IRQHandler+0x10>)
 800668a:	f000 fcc3 	bl	8007014 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_2_IRQn 1 */

	/* USER CODE END ADC1_2_IRQn 1 */
}
 800668e:	bf00      	nop
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000264 	.word	0x20000264

08006698 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 800669c:	4802      	ldr	r0, [pc, #8]	; (80066a8 <TIM3_IRQHandler+0x10>)
 800669e:	f002 f86b 	bl	8008778 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	2000021c 	.word	0x2000021c
 80066ac:	00000000 	.word	0x00000000

080066b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b090      	sub	sp, #64	; 0x40
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
	uint16_t raw;
	char msg[20];
	double vol;
	double tmp;
	HAL_ADC_Start(&hadc1);
 80066b8:	4833      	ldr	r0, [pc, #204]	; (8006788 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80066ba:	f000 faeb 	bl	8006c94 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80066be:	f04f 31ff 	mov.w	r1, #4294967295
 80066c2:	4831      	ldr	r0, [pc, #196]	; (8006788 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80066c4:	f000 fb94 	bl	8006df0 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80066c8:	482f      	ldr	r0, [pc, #188]	; (8006788 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80066ca:	f000 fc97 	bl	8006ffc <HAL_ADC_GetValue>
 80066ce:	4603      	mov	r3, r0
 80066d0:	86fb      	strh	r3, [r7, #54]	; 0x36
	vol = (double) raw * (3.3 / 4096);
 80066d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7f9 fef1 	bl	80004bc <__aeabi_ui2d>
 80066da:	a325      	add	r3, pc, #148	; (adr r3, 8006770 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 ff66 	bl	80005b0 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
//	tmp = (double) (((1.43 - vol) / 0.0043) + 25);
	tmp = (double)(((1.43 - vol) / (0.0043)) + 25);
 80066ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066f0:	a121      	add	r1, pc, #132	; (adr r1, 8006778 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80066f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f6:	f7f9 fda3 	bl	8000240 <__aeabi_dsub>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	a31f      	add	r3, pc, #124	; (adr r3, 8006780 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7fa f87c 	bl	8000804 <__aeabi_ddiv>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4610      	mov	r0, r2
 8006712:	4619      	mov	r1, r3
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	4b1c      	ldr	r3, [pc, #112]	; (800678c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800671a:	f7f9 fd93 	bl	8000244 <__adddf3>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	e9c7 2308 	strd	r2, r3, [r7, #32]
	sprintf(msg, "%f", tmp);
 8006726:	f107 000c 	add.w	r0, r7, #12
 800672a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800672e:	4918      	ldr	r1, [pc, #96]	; (8006790 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8006730:	f003 f832 	bl	8009798 <siprintf>
	POINT_COLOR = BLACK;
 8006734:	4b17      	ldr	r3, [pc, #92]	; (8006794 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8006736:	2200      	movs	r2, #0
 8006738:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "Temperature:");
 800673a:	4b17      	ldr	r3, [pc, #92]	; (8006798 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	2318      	movs	r3, #24
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2318      	movs	r3, #24
 8006744:	22c8      	movs	r2, #200	; 0xc8
 8006746:	2128      	movs	r1, #40	; 0x28
 8006748:	201e      	movs	r0, #30
 800674a:	f7ff fd5f 	bl	800620c <LCD_ShowString>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) msg);
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	2318      	movs	r3, #24
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2318      	movs	r3, #24
 800675a:	22c8      	movs	r2, #200	; 0xc8
 800675c:	2146      	movs	r1, #70	; 0x46
 800675e:	201e      	movs	r0, #30
 8006760:	f7ff fd54 	bl	800620c <LCD_ShowString>
}
 8006764:	bf00      	nop
 8006766:	3738      	adds	r7, #56	; 0x38
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	f3af 8000 	nop.w
 8006770:	66666666 	.word	0x66666666
 8006774:	3f4a6666 	.word	0x3f4a6666
 8006778:	ae147ae1 	.word	0xae147ae1
 800677c:	3ff6e147 	.word	0x3ff6e147
 8006780:	75f6fd22 	.word	0x75f6fd22
 8006784:	3f719ce0 	.word	0x3f719ce0
 8006788:	20000264 	.word	0x20000264
 800678c:	40390000 	.word	0x40390000
 8006790:	0800bc28 	.word	0x0800bc28
 8006794:	200001fc 	.word	0x200001fc
 8006798:	0800bc2c 	.word	0x0800bc2c

0800679c <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
	LCD_ShowString(30, 100, 200, 24, 24, (uint8_t*) "Warning:");
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	2318      	movs	r3, #24
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2318      	movs	r3, #24
 80067ae:	22c8      	movs	r2, #200	; 0xc8
 80067b0:	2164      	movs	r1, #100	; 0x64
 80067b2:	201e      	movs	r0, #30
 80067b4:	f7ff fd2a 	bl	800620c <LCD_ShowString>
	LCD_ShowString(30, 130, 200, 16, 16, (uint8_t*) "Temperature Too High!");
 80067b8:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <HAL_ADC_LevelOutOfWindowCallback+0x3c>)
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	2310      	movs	r3, #16
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	2310      	movs	r3, #16
 80067c2:	22c8      	movs	r2, #200	; 0xc8
 80067c4:	2182      	movs	r1, #130	; 0x82
 80067c6:	201e      	movs	r0, #30
 80067c8:	f7ff fd20 	bl	800620c <LCD_ShowString>
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	0800bc3c 	.word	0x0800bc3c
 80067d8:	0800bc48 	.word	0x0800bc48

080067dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
	return 1;
 80067e0:	2301      	movs	r3, #1
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <_kill>:

int _kill(int pid, int sig)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80067f4:	f002 fb3e 	bl	8008e74 <__errno>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2216      	movs	r2, #22
 80067fc:	601a      	str	r2, [r3, #0]
	return -1;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <_exit>:

void _exit (int status)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006812:	f04f 31ff 	mov.w	r1, #4294967295
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ffe7 	bl	80067ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800681c:	e7fe      	b.n	800681c <_exit+0x12>

0800681e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e00a      	b.n	8006846 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006830:	f3af 8000 	nop.w
 8006834:	4601      	mov	r1, r0
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	60ba      	str	r2, [r7, #8]
 800683c:	b2ca      	uxtb	r2, r1
 800683e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3301      	adds	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	dbf0      	blt.n	8006830 <_read+0x12>
	}

return len;
 800684e:	687b      	ldr	r3, [r7, #4]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e009      	b.n	800687e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	60ba      	str	r2, [r7, #8]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3301      	adds	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	dbf1      	blt.n	800686a <_write+0x12>
	}
	return len;
 8006886:	687b      	ldr	r3, [r7, #4]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <_close>:

int _close(int file)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	return -1;
 8006898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068b6:	605a      	str	r2, [r3, #4]
	return 0;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr

080068c4 <_isatty>:

int _isatty(int file)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	return 1;
 80068cc:	2301      	movs	r3, #1
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr

080068d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	return 0;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <_sbrk+0x5c>)
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <_sbrk+0x60>)
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006904:	4b13      	ldr	r3, [pc, #76]	; (8006954 <_sbrk+0x64>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800690c:	4b11      	ldr	r3, [pc, #68]	; (8006954 <_sbrk+0x64>)
 800690e:	4a12      	ldr	r2, [pc, #72]	; (8006958 <_sbrk+0x68>)
 8006910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <_sbrk+0x64>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4413      	add	r3, r2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	d207      	bcs.n	8006930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006920:	f002 faa8 	bl	8008e74 <__errno>
 8006924:	4603      	mov	r3, r0
 8006926:	220c      	movs	r2, #12
 8006928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	e009      	b.n	8006944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006930:	4b08      	ldr	r3, [pc, #32]	; (8006954 <_sbrk+0x64>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <_sbrk+0x64>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <_sbrk+0x64>)
 8006940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000c000 	.word	0x2000c000
 8006950:	00000400 	.word	0x00000400
 8006954:	20000200 	.word	0x20000200
 8006958:	200002a8 	.word	0x200002a8

0800695c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006960:	bf00      	nop
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006968:	480c      	ldr	r0, [pc, #48]	; (800699c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800696a:	490d      	ldr	r1, [pc, #52]	; (80069a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800696c:	4a0d      	ldr	r2, [pc, #52]	; (80069a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800696e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006970:	e002      	b.n	8006978 <LoopCopyDataInit>

08006972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006976:	3304      	adds	r3, #4

08006978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800697a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800697c:	d3f9      	bcc.n	8006972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006980:	4c0a      	ldr	r4, [pc, #40]	; (80069ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8006982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006984:	e001      	b.n	800698a <LoopFillZerobss>

08006986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006988:	3204      	adds	r2, #4

0800698a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800698a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800698c:	d3fb      	bcc.n	8006986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800698e:	f7ff ffe5 	bl	800695c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006992:	f002 fa75 	bl	8008e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006996:	f7ff fc87 	bl	80062a8 <main>
  bx lr
 800699a:	4770      	bx	lr
  ldr r0, =_sdata
 800699c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069a0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80069a4:	0800d844 	.word	0x0800d844
  ldr r2, =_sbss
 80069a8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80069ac:	200002a8 	.word	0x200002a8

080069b0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069b0:	e7fe      	b.n	80069b0 <ADC3_IRQHandler>
	...

080069b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <HAL_Init+0x28>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a07      	ldr	r2, [pc, #28]	; (80069dc <HAL_Init+0x28>)
 80069be:	f043 0310 	orr.w	r3, r3, #16
 80069c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069c4:	2003      	movs	r0, #3
 80069c6:	f000 feaf 	bl	8007728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069ca:	200f      	movs	r0, #15
 80069cc:	f000 f808 	bl	80069e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069d0:	f7ff fdb2 	bl	8006538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40022000 	.word	0x40022000

080069e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <HAL_InitTick+0x54>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <HAL_InitTick+0x58>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fec7 	bl	8007792 <HAL_SYSTICK_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e00e      	b.n	8006a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d80a      	bhi.n	8006a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a14:	2200      	movs	r2, #0
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	f000 fe8f 	bl	800773e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a20:	4a06      	ldr	r2, [pc, #24]	; (8006a3c <HAL_InitTick+0x5c>)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000004 	.word	0x20000004
 8006a38:	2000000c 	.word	0x2000000c
 8006a3c:	20000008 	.word	0x20000008

08006a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_IncTick+0x1c>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <HAL_IncTick+0x20>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4413      	add	r3, r2
 8006a50:	4a03      	ldr	r2, [pc, #12]	; (8006a60 <HAL_IncTick+0x20>)
 8006a52:	6013      	str	r3, [r2, #0]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	2000000c 	.word	0x2000000c
 8006a60:	20000294 	.word	0x20000294

08006a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return uwTick;
 8006a68:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <HAL_GetTick+0x10>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr
 8006a74:	20000294 	.word	0x20000294

08006a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a80:	f7ff fff0 	bl	8006a64 <HAL_GetTick>
 8006a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d005      	beq.n	8006a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <HAL_Delay+0x44>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a9e:	bf00      	nop
 8006aa0:	f7ff ffe0 	bl	8006a64 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d8f7      	bhi.n	8006aa0 <HAL_Delay+0x28>
  {
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	2000000c 	.word	0x2000000c

08006ac0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e0ce      	b.n	8006c80 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d109      	bne.n	8006b04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff fd4c 	bl	800659c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fcf9 	bl	80074fc <ADC_ConversionStop_Disable>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 80a9 	bne.w	8006c6e <HAL_ADC_Init+0x1ae>
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 80a5 	bne.w	8006c6e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b2c:	f023 0302 	bic.w	r3, r3, #2
 8006b30:	f043 0202 	orr.w	r2, r3, #2
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4951      	ldr	r1, [pc, #324]	; (8006c88 <HAL_ADC_Init+0x1c8>)
 8006b42:	428b      	cmp	r3, r1
 8006b44:	d10a      	bne.n	8006b5c <HAL_ADC_Init+0x9c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b4e:	d002      	beq.n	8006b56 <HAL_ADC_Init+0x96>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	e004      	b.n	8006b60 <HAL_ADC_Init+0xa0>
 8006b56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b5a:	e001      	b.n	8006b60 <HAL_ADC_Init+0xa0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006b60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	7b1b      	ldrb	r3, [r3, #12]
 8006b66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006b68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b78:	d003      	beq.n	8006b82 <HAL_ADC_Init+0xc2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d102      	bne.n	8006b88 <HAL_ADC_Init+0xc8>
 8006b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b86:	e000      	b.n	8006b8a <HAL_ADC_Init+0xca>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7d1b      	ldrb	r3, [r3, #20]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d119      	bne.n	8006bcc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	7b1b      	ldrb	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	035a      	lsls	r2, r3, #13
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	e00b      	b.n	8006bcc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	f043 0220 	orr.w	r2, r3, #32
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	f043 0201 	orr.w	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <HAL_ADC_Init+0x1cc>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfc:	d003      	beq.n	8006c06 <HAL_ADC_Init+0x146>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d104      	bne.n	8006c10 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	051b      	lsls	r3, r3, #20
 8006c0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <HAL_ADC_Init+0x1d0>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d10b      	bne.n	8006c4c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	f043 0201 	orr.w	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006c4a:	e018      	b.n	8006c7e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f023 0312 	bic.w	r3, r3, #18
 8006c54:	f043 0210 	orr.w	r2, r3, #16
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006c6c:	e007      	b.n	8006c7e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	f043 0210 	orr.w	r2, r3, #16
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40013c00 	.word	0x40013c00
 8006c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8006c90:	ff1f0efe 	.word	0xff1f0efe

08006c94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_ADC_Start+0x1a>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e098      	b.n	8006de0 <HAL_ADC_Start+0x14c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fbc6 	bl	8007448 <ADC_Enable>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 8087 	bne.w	8006dd6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a41      	ldr	r2, [pc, #260]	; (8006de8 <HAL_ADC_Start+0x154>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d105      	bne.n	8006cf2 <HAL_ADC_Start+0x5e>
 8006ce6:	4b41      	ldr	r3, [pc, #260]	; (8006dec <HAL_ADC_Start+0x158>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d115      	bne.n	8006d1e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d026      	beq.n	8006d5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006d1c:	e01d      	b.n	8006d5a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2f      	ldr	r2, [pc, #188]	; (8006dec <HAL_ADC_Start+0x158>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_ADC_Start+0xaa>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2b      	ldr	r2, [pc, #172]	; (8006de8 <HAL_ADC_Start+0x154>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d10d      	bne.n	8006d5a <HAL_ADC_Start+0xc6>
 8006d3e:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <HAL_ADC_Start+0x158>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f023 0206 	bic.w	r2, r3, #6
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d72:	e002      	b.n	8006d7a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f06f 0202 	mvn.w	r2, #2
 8006d8a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006d96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006d9a:	d113      	bne.n	8006dc4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006da0:	4a11      	ldr	r2, [pc, #68]	; (8006de8 <HAL_ADC_Start+0x154>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d105      	bne.n	8006db2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <HAL_ADC_Start+0x158>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006dc0:	609a      	str	r2, [r3, #8]
 8006dc2:	e00c      	b.n	8006dde <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006dd2:	609a      	str	r2, [r3, #8]
 8006dd4:	e003      	b.n	8006dde <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40012800 	.word	0x40012800
 8006dec:	40012400 	.word	0x40012400

08006df0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006df0:	b590      	push	{r4, r7, lr}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006e06:	f7ff fe2d 	bl	8006a64 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e0d3      	b.n	8006fda <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d131      	bne.n	8006ea4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d12a      	bne.n	8006ea4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006e4e:	e021      	b.n	8006e94 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d01d      	beq.n	8006e94 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <HAL_ADC_PollForConversion+0x7e>
 8006e5e:	f7ff fe01 	bl	8006a64 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d212      	bcs.n	8006e94 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f043 0204 	orr.w	r2, r3, #4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e0a2      	b.n	8006fda <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0d6      	beq.n	8006e50 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006ea2:	e070      	b.n	8006f86 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	; (8006fe4 <HAL_ADC_PollForConversion+0x1f4>)
 8006ea6:	681c      	ldr	r4, [r3, #0]
 8006ea8:	2002      	movs	r0, #2
 8006eaa:	f001 facf 	bl	800844c <HAL_RCCEx_GetPeriphCLKFreq>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6919      	ldr	r1, [r3, #16]
 8006eba:	4b4b      	ldr	r3, [pc, #300]	; (8006fe8 <HAL_ADC_PollForConversion+0x1f8>)
 8006ebc:	400b      	ands	r3, r1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d118      	bne.n	8006ef4 <HAL_ADC_PollForConversion+0x104>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68d9      	ldr	r1, [r3, #12]
 8006ec8:	4b48      	ldr	r3, [pc, #288]	; (8006fec <HAL_ADC_PollForConversion+0x1fc>)
 8006eca:	400b      	ands	r3, r1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d111      	bne.n	8006ef4 <HAL_ADC_PollForConversion+0x104>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6919      	ldr	r1, [r3, #16]
 8006ed6:	4b46      	ldr	r3, [pc, #280]	; (8006ff0 <HAL_ADC_PollForConversion+0x200>)
 8006ed8:	400b      	ands	r3, r1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d108      	bne.n	8006ef0 <HAL_ADC_PollForConversion+0x100>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68d9      	ldr	r1, [r3, #12]
 8006ee4:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <HAL_ADC_PollForConversion+0x204>)
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_ADC_PollForConversion+0x100>
 8006eec:	2314      	movs	r3, #20
 8006eee:	e020      	b.n	8006f32 <HAL_ADC_PollForConversion+0x142>
 8006ef0:	2329      	movs	r3, #41	; 0x29
 8006ef2:	e01e      	b.n	8006f32 <HAL_ADC_PollForConversion+0x142>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6919      	ldr	r1, [r3, #16]
 8006efa:	4b3d      	ldr	r3, [pc, #244]	; (8006ff0 <HAL_ADC_PollForConversion+0x200>)
 8006efc:	400b      	ands	r3, r1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_ADC_PollForConversion+0x120>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68d9      	ldr	r1, [r3, #12]
 8006f08:	4b3a      	ldr	r3, [pc, #232]	; (8006ff4 <HAL_ADC_PollForConversion+0x204>)
 8006f0a:	400b      	ands	r3, r1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_ADC_PollForConversion+0x13c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6919      	ldr	r1, [r3, #16]
 8006f16:	4b38      	ldr	r3, [pc, #224]	; (8006ff8 <HAL_ADC_PollForConversion+0x208>)
 8006f18:	400b      	ands	r3, r1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d108      	bne.n	8006f30 <HAL_ADC_PollForConversion+0x140>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68d9      	ldr	r1, [r3, #12]
 8006f24:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <HAL_ADC_PollForConversion+0x208>)
 8006f26:	400b      	ands	r3, r1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_ADC_PollForConversion+0x140>
 8006f2c:	2354      	movs	r3, #84	; 0x54
 8006f2e:	e000      	b.n	8006f32 <HAL_ADC_PollForConversion+0x142>
 8006f30:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006f38:	e021      	b.n	8006f7e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d01a      	beq.n	8006f78 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d007      	beq.n	8006f58 <HAL_ADC_PollForConversion+0x168>
 8006f48:	f7ff fd8c 	bl	8006a64 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d20f      	bcs.n	8006f78 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d90b      	bls.n	8006f78 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f043 0204 	orr.w	r2, r3, #4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e030      	b.n	8006fda <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d8d9      	bhi.n	8006f3a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f06f 0212 	mvn.w	r2, #18
 8006f8e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006fa6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006faa:	d115      	bne.n	8006fd8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d111      	bne.n	8006fd8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	f043 0201 	orr.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd90      	pop	{r4, r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000004 	.word	0x20000004
 8006fe8:	24924924 	.word	0x24924924
 8006fec:	00924924 	.word	0x00924924
 8006ff0:	12492492 	.word	0x12492492
 8006ff4:	00492492 	.word	0x00492492
 8006ff8:	00249249 	.word	0x00249249

08006ffc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b20      	cmp	r3, #32
 8007028:	d140      	bne.n	80070ac <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d139      	bne.n	80070ac <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800705a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800705e:	d11d      	bne.n	800709c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007064:	2b00      	cmp	r3, #0
 8007066:	d119      	bne.n	800709c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0220 	bic.w	r2, r2, #32
 8007076:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d105      	bne.n	800709c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	f043 0201 	orr.w	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f87c 	bl	800719a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f06f 0212 	mvn.w	r2, #18
 80070aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d14f      	bne.n	800715a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d148      	bne.n	800715a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070ea:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80070ee:	d012      	beq.n	8007116 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d125      	bne.n	800714a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8007108:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800710c:	d11d      	bne.n	800714a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8007112:	2b00      	cmp	r3, #0
 8007114:	d119      	bne.n	800714a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007124:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d105      	bne.n	800714a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f043 0201 	orr.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa17 	bl	800757e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 020c 	mvn.w	r2, #12
 8007158:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	d114      	bne.n	8007192 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10d      	bne.n	8007192 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fb0a 	bl	800679c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0201 	mvn.w	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_ADC_ConfigChannel+0x20>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e0dc      	b.n	8007386 <HAL_ADC_ConfigChannel+0x1da>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b06      	cmp	r3, #6
 80071da:	d81c      	bhi.n	8007216 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	3b05      	subs	r3, #5
 80071ee:	221f      	movs	r2, #31
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	43db      	mvns	r3, r3
 80071f6:	4019      	ands	r1, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	3b05      	subs	r3, #5
 8007208:	fa00 f203 	lsl.w	r2, r0, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	635a      	str	r2, [r3, #52]	; 0x34
 8007214:	e03c      	b.n	8007290 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d81c      	bhi.n	8007258 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	3b23      	subs	r3, #35	; 0x23
 8007230:	221f      	movs	r2, #31
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	43db      	mvns	r3, r3
 8007238:	4019      	ands	r1, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	3b23      	subs	r3, #35	; 0x23
 800724a:	fa00 f203 	lsl.w	r2, r0, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
 8007256:	e01b      	b.n	8007290 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	3b41      	subs	r3, #65	; 0x41
 800726a:	221f      	movs	r2, #31
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	4019      	ands	r1, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	3b41      	subs	r3, #65	; 0x41
 8007284:	fa00 f203 	lsl.w	r2, r0, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b09      	cmp	r3, #9
 8007296:	d91c      	bls.n	80072d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68d9      	ldr	r1, [r3, #12]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	3b1e      	subs	r3, #30
 80072aa:	2207      	movs	r2, #7
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43db      	mvns	r3, r3
 80072b2:	4019      	ands	r1, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	6898      	ldr	r0, [r3, #8]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	4613      	mov	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	4413      	add	r3, r2
 80072c2:	3b1e      	subs	r3, #30
 80072c4:	fa00 f203 	lsl.w	r2, r0, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	60da      	str	r2, [r3, #12]
 80072d0:	e019      	b.n	8007306 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6919      	ldr	r1, [r3, #16]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	2207      	movs	r2, #7
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	43db      	mvns	r3, r3
 80072ea:	4019      	ands	r1, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	6898      	ldr	r0, [r3, #8]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	fa00 f203 	lsl.w	r2, r0, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b10      	cmp	r3, #16
 800730c:	d003      	beq.n	8007316 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007312:	2b11      	cmp	r3, #17
 8007314:	d132      	bne.n	800737c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <HAL_ADC_ConfigChannel+0x1e4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d125      	bne.n	800736c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d126      	bne.n	800737c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800733c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b10      	cmp	r3, #16
 8007344:	d11a      	bne.n	800737c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007346:	4b13      	ldr	r3, [pc, #76]	; (8007394 <HAL_ADC_ConfigChannel+0x1e8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a13      	ldr	r2, [pc, #76]	; (8007398 <HAL_ADC_ConfigChannel+0x1ec>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	0c9a      	lsrs	r2, r3, #18
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800735c:	e002      	b.n	8007364 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3b01      	subs	r3, #1
 8007362:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f9      	bne.n	800735e <HAL_ADC_ConfigChannel+0x1b2>
 800736a:	e007      	b.n	800737c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr
 8007390:	40012400 	.word	0x40012400
 8007394:	20000004 	.word	0x20000004
 8007398:	431bde83 	.word	0x431bde83

0800739c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a24      	ldr	r2, [pc, #144]	; (800743c <HAL_ADC_AnalogWDGConfig+0xa0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80073b4:	4a22      	ldr	r2, [pc, #136]	; (8007440 <HAL_ADC_AnalogWDGConfig+0xa4>)
 80073b6:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_ADC_AnalogWDGConfig+0x2a>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e035      	b.n	8007432 <HAL_ADC_AnalogWDGConfig+0x96>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	7a1b      	ldrb	r3, [r3, #8]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d108      	bne.n	80073e8 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	e007      	b.n	80073f8 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f6:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4b11      	ldr	r3, [pc, #68]	; (8007444 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8007400:	4013      	ands	r3, r2
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	6811      	ldr	r1, [r2, #0]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	6852      	ldr	r2, [r2, #4]
 800740a:	4311      	orrs	r1, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	430b      	orrs	r3, r1
 8007412:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	68d2      	ldr	r2, [r2, #12]
 800741c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	6912      	ldr	r2, [r2, #16]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	00800200 	.word	0x00800200
 8007440:	00400200 	.word	0x00400200
 8007444:	ff3ffde0 	.word	0xff3ffde0

08007448 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b01      	cmp	r3, #1
 8007464:	d040      	beq.n	80074e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0201 	orr.w	r2, r2, #1
 8007474:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007476:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <ADC_Enable+0xac>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <ADC_Enable+0xb0>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	0c9b      	lsrs	r3, r3, #18
 8007482:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007484:	e002      	b.n	800748c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f9      	bne.n	8007486 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007492:	f7ff fae7 	bl	8006a64 <HAL_GetTick>
 8007496:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007498:	e01f      	b.n	80074da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800749a:	f7ff fae3 	bl	8006a64 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d918      	bls.n	80074da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d011      	beq.n	80074da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	f043 0210 	orr.w	r2, r3, #16
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c6:	f043 0201 	orr.w	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e007      	b.n	80074ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d1d8      	bne.n	800749a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000004 	.word	0x20000004
 80074f8:	431bde83 	.word	0x431bde83

080074fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	d12e      	bne.n	8007574 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007526:	f7ff fa9d 	bl	8006a64 <HAL_GetTick>
 800752a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800752c:	e01b      	b.n	8007566 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800752e:	f7ff fa99 	bl	8006a64 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d914      	bls.n	8007566 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10d      	bne.n	8007566 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	f043 0210 	orr.w	r2, r3, #16
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	f043 0201 	orr.w	r2, r3, #1
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e007      	b.n	8007576 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b01      	cmp	r3, #1
 8007572:	d0dc      	beq.n	800752e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <__NVIC_SetPriorityGrouping+0x44>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075ac:	4013      	ands	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075c2:	4a04      	ldr	r2, [pc, #16]	; (80075d4 <__NVIC_SetPriorityGrouping+0x44>)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	60d3      	str	r3, [r2, #12]
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	e000ed00 	.word	0xe000ed00

080075d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <__NVIC_GetPriorityGrouping+0x18>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	f003 0307 	and.w	r3, r3, #7
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	e000ed00 	.word	0xe000ed00

080075f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db0b      	blt.n	800761e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f003 021f 	and.w	r2, r3, #31
 800760c:	4906      	ldr	r1, [pc, #24]	; (8007628 <__NVIC_EnableIRQ+0x34>)
 800760e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	2001      	movs	r0, #1
 8007616:	fa00 f202 	lsl.w	r2, r0, r2
 800761a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr
 8007628:	e000e100 	.word	0xe000e100

0800762c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	6039      	str	r1, [r7, #0]
 8007636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800763c:	2b00      	cmp	r3, #0
 800763e:	db0a      	blt.n	8007656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	490c      	ldr	r1, [pc, #48]	; (8007678 <__NVIC_SetPriority+0x4c>)
 8007646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764a:	0112      	lsls	r2, r2, #4
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	440b      	add	r3, r1
 8007650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007654:	e00a      	b.n	800766c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	b2da      	uxtb	r2, r3
 800765a:	4908      	ldr	r1, [pc, #32]	; (800767c <__NVIC_SetPriority+0x50>)
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	3b04      	subs	r3, #4
 8007664:	0112      	lsls	r2, r2, #4
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	440b      	add	r3, r1
 800766a:	761a      	strb	r2, [r3, #24]
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	e000e100 	.word	0xe000e100
 800767c:	e000ed00 	.word	0xe000ed00

08007680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007680:	b480      	push	{r7}
 8007682:	b089      	sub	sp, #36	; 0x24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f1c3 0307 	rsb	r3, r3, #7
 800769a:	2b04      	cmp	r3, #4
 800769c:	bf28      	it	cs
 800769e:	2304      	movcs	r3, #4
 80076a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	3304      	adds	r3, #4
 80076a6:	2b06      	cmp	r3, #6
 80076a8:	d902      	bls.n	80076b0 <NVIC_EncodePriority+0x30>
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3b03      	subs	r3, #3
 80076ae:	e000      	b.n	80076b2 <NVIC_EncodePriority+0x32>
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43da      	mvns	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	401a      	ands	r2, r3
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076c8:	f04f 31ff 	mov.w	r1, #4294967295
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	fa01 f303 	lsl.w	r3, r1, r3
 80076d2:	43d9      	mvns	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076d8:	4313      	orrs	r3, r2
         );
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3724      	adds	r7, #36	; 0x24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr

080076e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076f4:	d301      	bcc.n	80076fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076f6:	2301      	movs	r3, #1
 80076f8:	e00f      	b.n	800771a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076fa:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <SysTick_Config+0x40>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3b01      	subs	r3, #1
 8007700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007702:	210f      	movs	r1, #15
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	f7ff ff90 	bl	800762c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800770c:	4b05      	ldr	r3, [pc, #20]	; (8007724 <SysTick_Config+0x40>)
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007712:	4b04      	ldr	r3, [pc, #16]	; (8007724 <SysTick_Config+0x40>)
 8007714:	2207      	movs	r2, #7
 8007716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	e000e010 	.word	0xe000e010

08007728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff ff2d 	bl	8007590 <__NVIC_SetPriorityGrouping>
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	4603      	mov	r3, r0
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007750:	f7ff ff42 	bl	80075d8 <__NVIC_GetPriorityGrouping>
 8007754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	6978      	ldr	r0, [r7, #20]
 800775c:	f7ff ff90 	bl	8007680 <NVIC_EncodePriority>
 8007760:	4602      	mov	r2, r0
 8007762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff ff5f 	bl	800762c <__NVIC_SetPriority>
}
 800776e:	bf00      	nop
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	4603      	mov	r3, r0
 800777e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ff35 	bl	80075f4 <__NVIC_EnableIRQ>
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff ffa2 	bl	80076e4 <SysTick_Config>
 80077a0:	4603      	mov	r3, r0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b08b      	sub	sp, #44	; 0x2c
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80077ba:	2300      	movs	r3, #0
 80077bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077be:	e179      	b.n	8007ab4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80077c0:	2201      	movs	r2, #1
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	4013      	ands	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	429a      	cmp	r2, r3
 80077da:	f040 8168 	bne.w	8007aae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4aa0      	ldr	r2, [pc, #640]	; (8007a64 <HAL_GPIO_Init+0x2b8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d05e      	beq.n	80078a6 <HAL_GPIO_Init+0xfa>
 80077e8:	4a9e      	ldr	r2, [pc, #632]	; (8007a64 <HAL_GPIO_Init+0x2b8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d875      	bhi.n	80078da <HAL_GPIO_Init+0x12e>
 80077ee:	4a9e      	ldr	r2, [pc, #632]	; (8007a68 <HAL_GPIO_Init+0x2bc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d058      	beq.n	80078a6 <HAL_GPIO_Init+0xfa>
 80077f4:	4a9c      	ldr	r2, [pc, #624]	; (8007a68 <HAL_GPIO_Init+0x2bc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d86f      	bhi.n	80078da <HAL_GPIO_Init+0x12e>
 80077fa:	4a9c      	ldr	r2, [pc, #624]	; (8007a6c <HAL_GPIO_Init+0x2c0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d052      	beq.n	80078a6 <HAL_GPIO_Init+0xfa>
 8007800:	4a9a      	ldr	r2, [pc, #616]	; (8007a6c <HAL_GPIO_Init+0x2c0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d869      	bhi.n	80078da <HAL_GPIO_Init+0x12e>
 8007806:	4a9a      	ldr	r2, [pc, #616]	; (8007a70 <HAL_GPIO_Init+0x2c4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d04c      	beq.n	80078a6 <HAL_GPIO_Init+0xfa>
 800780c:	4a98      	ldr	r2, [pc, #608]	; (8007a70 <HAL_GPIO_Init+0x2c4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d863      	bhi.n	80078da <HAL_GPIO_Init+0x12e>
 8007812:	4a98      	ldr	r2, [pc, #608]	; (8007a74 <HAL_GPIO_Init+0x2c8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d046      	beq.n	80078a6 <HAL_GPIO_Init+0xfa>
 8007818:	4a96      	ldr	r2, [pc, #600]	; (8007a74 <HAL_GPIO_Init+0x2c8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d85d      	bhi.n	80078da <HAL_GPIO_Init+0x12e>
 800781e:	2b12      	cmp	r3, #18
 8007820:	d82a      	bhi.n	8007878 <HAL_GPIO_Init+0xcc>
 8007822:	2b12      	cmp	r3, #18
 8007824:	d859      	bhi.n	80078da <HAL_GPIO_Init+0x12e>
 8007826:	a201      	add	r2, pc, #4	; (adr r2, 800782c <HAL_GPIO_Init+0x80>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	080078a7 	.word	0x080078a7
 8007830:	08007881 	.word	0x08007881
 8007834:	08007893 	.word	0x08007893
 8007838:	080078d5 	.word	0x080078d5
 800783c:	080078db 	.word	0x080078db
 8007840:	080078db 	.word	0x080078db
 8007844:	080078db 	.word	0x080078db
 8007848:	080078db 	.word	0x080078db
 800784c:	080078db 	.word	0x080078db
 8007850:	080078db 	.word	0x080078db
 8007854:	080078db 	.word	0x080078db
 8007858:	080078db 	.word	0x080078db
 800785c:	080078db 	.word	0x080078db
 8007860:	080078db 	.word	0x080078db
 8007864:	080078db 	.word	0x080078db
 8007868:	080078db 	.word	0x080078db
 800786c:	080078db 	.word	0x080078db
 8007870:	08007889 	.word	0x08007889
 8007874:	0800789d 	.word	0x0800789d
 8007878:	4a7f      	ldr	r2, [pc, #508]	; (8007a78 <HAL_GPIO_Init+0x2cc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800787e:	e02c      	b.n	80078da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	623b      	str	r3, [r7, #32]
          break;
 8007886:	e029      	b.n	80078dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	3304      	adds	r3, #4
 800788e:	623b      	str	r3, [r7, #32]
          break;
 8007890:	e024      	b.n	80078dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	3308      	adds	r3, #8
 8007898:	623b      	str	r3, [r7, #32]
          break;
 800789a:	e01f      	b.n	80078dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	330c      	adds	r3, #12
 80078a2:	623b      	str	r3, [r7, #32]
          break;
 80078a4:	e01a      	b.n	80078dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80078ae:	2304      	movs	r3, #4
 80078b0:	623b      	str	r3, [r7, #32]
          break;
 80078b2:	e013      	b.n	80078dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d105      	bne.n	80078c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80078bc:	2308      	movs	r3, #8
 80078be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	611a      	str	r2, [r3, #16]
          break;
 80078c6:	e009      	b.n	80078dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80078c8:	2308      	movs	r3, #8
 80078ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	615a      	str	r2, [r3, #20]
          break;
 80078d2:	e003      	b.n	80078dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80078d4:	2300      	movs	r3, #0
 80078d6:	623b      	str	r3, [r7, #32]
          break;
 80078d8:	e000      	b.n	80078dc <HAL_GPIO_Init+0x130>
          break;
 80078da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2bff      	cmp	r3, #255	; 0xff
 80078e0:	d801      	bhi.n	80078e6 <HAL_GPIO_Init+0x13a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	e001      	b.n	80078ea <HAL_GPIO_Init+0x13e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3304      	adds	r3, #4
 80078ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d802      	bhi.n	80078f8 <HAL_GPIO_Init+0x14c>
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	e002      	b.n	80078fe <HAL_GPIO_Init+0x152>
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	3b08      	subs	r3, #8
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	210f      	movs	r1, #15
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	43db      	mvns	r3, r3
 800790e:	401a      	ands	r2, r3
 8007910:	6a39      	ldr	r1, [r7, #32]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	431a      	orrs	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80c1 	beq.w	8007aae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800792c:	4b53      	ldr	r3, [pc, #332]	; (8007a7c <HAL_GPIO_Init+0x2d0>)
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	4a52      	ldr	r2, [pc, #328]	; (8007a7c <HAL_GPIO_Init+0x2d0>)
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	6193      	str	r3, [r2, #24]
 8007938:	4b50      	ldr	r3, [pc, #320]	; (8007a7c <HAL_GPIO_Init+0x2d0>)
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	60bb      	str	r3, [r7, #8]
 8007942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007944:	4a4e      	ldr	r2, [pc, #312]	; (8007a80 <HAL_GPIO_Init+0x2d4>)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	089b      	lsrs	r3, r3, #2
 800794a:	3302      	adds	r3, #2
 800794c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	220f      	movs	r2, #15
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	43db      	mvns	r3, r3
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a46      	ldr	r2, [pc, #280]	; (8007a84 <HAL_GPIO_Init+0x2d8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d01f      	beq.n	80079b0 <HAL_GPIO_Init+0x204>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a45      	ldr	r2, [pc, #276]	; (8007a88 <HAL_GPIO_Init+0x2dc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d019      	beq.n	80079ac <HAL_GPIO_Init+0x200>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a44      	ldr	r2, [pc, #272]	; (8007a8c <HAL_GPIO_Init+0x2e0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <HAL_GPIO_Init+0x1fc>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a43      	ldr	r2, [pc, #268]	; (8007a90 <HAL_GPIO_Init+0x2e4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00d      	beq.n	80079a4 <HAL_GPIO_Init+0x1f8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a42      	ldr	r2, [pc, #264]	; (8007a94 <HAL_GPIO_Init+0x2e8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <HAL_GPIO_Init+0x1f4>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a41      	ldr	r2, [pc, #260]	; (8007a98 <HAL_GPIO_Init+0x2ec>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d101      	bne.n	800799c <HAL_GPIO_Init+0x1f0>
 8007998:	2305      	movs	r3, #5
 800799a:	e00a      	b.n	80079b2 <HAL_GPIO_Init+0x206>
 800799c:	2306      	movs	r3, #6
 800799e:	e008      	b.n	80079b2 <HAL_GPIO_Init+0x206>
 80079a0:	2304      	movs	r3, #4
 80079a2:	e006      	b.n	80079b2 <HAL_GPIO_Init+0x206>
 80079a4:	2303      	movs	r3, #3
 80079a6:	e004      	b.n	80079b2 <HAL_GPIO_Init+0x206>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e002      	b.n	80079b2 <HAL_GPIO_Init+0x206>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <HAL_GPIO_Init+0x206>
 80079b0:	2300      	movs	r3, #0
 80079b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b4:	f002 0203 	and.w	r2, r2, #3
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	4093      	lsls	r3, r2
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80079c2:	492f      	ldr	r1, [pc, #188]	; (8007a80 <HAL_GPIO_Init+0x2d4>)
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	089b      	lsrs	r3, r3, #2
 80079c8:	3302      	adds	r3, #2
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d006      	beq.n	80079ea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80079dc:	4b2f      	ldr	r3, [pc, #188]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	492e      	ldr	r1, [pc, #184]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	600b      	str	r3, [r1, #0]
 80079e8:	e006      	b.n	80079f8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80079ea:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	492a      	ldr	r1, [pc, #168]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007a04:	4b25      	ldr	r3, [pc, #148]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	4924      	ldr	r1, [pc, #144]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	604b      	str	r3, [r1, #4]
 8007a10:	e006      	b.n	8007a20 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007a12:	4b22      	ldr	r3, [pc, #136]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	4920      	ldr	r1, [pc, #128]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	491a      	ldr	r1, [pc, #104]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	608b      	str	r3, [r1, #8]
 8007a38:	e006      	b.n	8007a48 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	43db      	mvns	r3, r3
 8007a42:	4916      	ldr	r1, [pc, #88]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d025      	beq.n	8007aa0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007a54:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	4910      	ldr	r1, [pc, #64]	; (8007a9c <HAL_GPIO_Init+0x2f0>)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60cb      	str	r3, [r1, #12]
 8007a60:	e025      	b.n	8007aae <HAL_GPIO_Init+0x302>
 8007a62:	bf00      	nop
 8007a64:	10320000 	.word	0x10320000
 8007a68:	10310000 	.word	0x10310000
 8007a6c:	10220000 	.word	0x10220000
 8007a70:	10210000 	.word	0x10210000
 8007a74:	10120000 	.word	0x10120000
 8007a78:	10110000 	.word	0x10110000
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	40010000 	.word	0x40010000
 8007a84:	40010800 	.word	0x40010800
 8007a88:	40010c00 	.word	0x40010c00
 8007a8c:	40011000 	.word	0x40011000
 8007a90:	40011400 	.word	0x40011400
 8007a94:	40011800 	.word	0x40011800
 8007a98:	40011c00 	.word	0x40011c00
 8007a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <HAL_GPIO_Init+0x324>)
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	4909      	ldr	r1, [pc, #36]	; (8007ad0 <HAL_GPIO_Init+0x324>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	fa22 f303 	lsr.w	r3, r2, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f47f ae7e 	bne.w	80077c0 <HAL_GPIO_Init+0x14>
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	372c      	adds	r7, #44	; 0x2c
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr
 8007ad0:	40010400 	.word	0x40010400

08007ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e26c      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 8087 	beq.w	8007c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007af4:	4b92      	ldr	r3, [pc, #584]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f003 030c 	and.w	r3, r3, #12
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d00c      	beq.n	8007b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007b00:	4b8f      	ldr	r3, [pc, #572]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f003 030c 	and.w	r3, r3, #12
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d112      	bne.n	8007b32 <HAL_RCC_OscConfig+0x5e>
 8007b0c:	4b8c      	ldr	r3, [pc, #560]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b18:	d10b      	bne.n	8007b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b1a:	4b89      	ldr	r3, [pc, #548]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d06c      	beq.n	8007c00 <HAL_RCC_OscConfig+0x12c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d168      	bne.n	8007c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e246      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3a:	d106      	bne.n	8007b4a <HAL_RCC_OscConfig+0x76>
 8007b3c:	4b80      	ldr	r3, [pc, #512]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a7f      	ldr	r2, [pc, #508]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	e02e      	b.n	8007ba8 <HAL_RCC_OscConfig+0xd4>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10c      	bne.n	8007b6c <HAL_RCC_OscConfig+0x98>
 8007b52:	4b7b      	ldr	r3, [pc, #492]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a7a      	ldr	r2, [pc, #488]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	4b78      	ldr	r3, [pc, #480]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a77      	ldr	r2, [pc, #476]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e01d      	b.n	8007ba8 <HAL_RCC_OscConfig+0xd4>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b74:	d10c      	bne.n	8007b90 <HAL_RCC_OscConfig+0xbc>
 8007b76:	4b72      	ldr	r3, [pc, #456]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a71      	ldr	r2, [pc, #452]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4b6f      	ldr	r3, [pc, #444]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a6e      	ldr	r2, [pc, #440]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	e00b      	b.n	8007ba8 <HAL_RCC_OscConfig+0xd4>
 8007b90:	4b6b      	ldr	r3, [pc, #428]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a6a      	ldr	r2, [pc, #424]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b68      	ldr	r3, [pc, #416]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a67      	ldr	r2, [pc, #412]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb0:	f7fe ff58 	bl	8006a64 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb8:	f7fe ff54 	bl	8006a64 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b64      	cmp	r3, #100	; 0x64
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e1fa      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bca:	4b5d      	ldr	r3, [pc, #372]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0xe4>
 8007bd6:	e014      	b.n	8007c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fe ff44 	bl	8006a64 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007be0:	f7fe ff40 	bl	8006a64 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b64      	cmp	r3, #100	; 0x64
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e1e6      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bf2:	4b53      	ldr	r3, [pc, #332]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0x10c>
 8007bfe:	e000      	b.n	8007c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d063      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c0e:	4b4c      	ldr	r3, [pc, #304]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f003 030c 	and.w	r3, r3, #12
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007c1a:	4b49      	ldr	r3, [pc, #292]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d11c      	bne.n	8007c60 <HAL_RCC_OscConfig+0x18c>
 8007c26:	4b46      	ldr	r3, [pc, #280]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d116      	bne.n	8007c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c32:	4b43      	ldr	r3, [pc, #268]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_RCC_OscConfig+0x176>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d001      	beq.n	8007c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e1ba      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c4a:	4b3d      	ldr	r3, [pc, #244]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4939      	ldr	r1, [pc, #228]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c5e:	e03a      	b.n	8007cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c68:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <HAL_RCC_OscConfig+0x270>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6e:	f7fe fef9 	bl	8006a64 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c76:	f7fe fef5 	bl	8006a64 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e19b      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c88:	4b2d      	ldr	r3, [pc, #180]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c94:	4b2a      	ldr	r3, [pc, #168]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4927      	ldr	r1, [pc, #156]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	600b      	str	r3, [r1, #0]
 8007ca8:	e015      	b.n	8007cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007caa:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <HAL_RCC_OscConfig+0x270>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb0:	f7fe fed8 	bl	8006a64 <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cb8:	f7fe fed4 	bl	8006a64 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e17a      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d03a      	beq.n	8007d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d019      	beq.n	8007d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cea:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <HAL_RCC_OscConfig+0x274>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cf0:	f7fe feb8 	bl	8006a64 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cf8:	f7fe feb4 	bl	8006a64 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e15a      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <HAL_RCC_OscConfig+0x26c>)
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007d16:	2001      	movs	r0, #1
 8007d18:	f000 fac4 	bl	80082a4 <RCC_Delay>
 8007d1c:	e01c      	b.n	8007d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <HAL_RCC_OscConfig+0x274>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d24:	f7fe fe9e 	bl	8006a64 <HAL_GetTick>
 8007d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d2a:	e00f      	b.n	8007d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d2c:	f7fe fe9a 	bl	8006a64 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d908      	bls.n	8007d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e140      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000
 8007d44:	42420000 	.word	0x42420000
 8007d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d4c:	4b9e      	ldr	r3, [pc, #632]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e9      	bne.n	8007d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 80a6 	beq.w	8007eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d6a:	4b97      	ldr	r3, [pc, #604]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d76:	4b94      	ldr	r3, [pc, #592]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4a93      	ldr	r2, [pc, #588]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d80:	61d3      	str	r3, [r2, #28]
 8007d82:	4b91      	ldr	r3, [pc, #580]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d8a:	60bb      	str	r3, [r7, #8]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d92:	4b8e      	ldr	r3, [pc, #568]	; (8007fcc <HAL_RCC_OscConfig+0x4f8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d118      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d9e:	4b8b      	ldr	r3, [pc, #556]	; (8007fcc <HAL_RCC_OscConfig+0x4f8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a8a      	ldr	r2, [pc, #552]	; (8007fcc <HAL_RCC_OscConfig+0x4f8>)
 8007da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007daa:	f7fe fe5b 	bl	8006a64 <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007db2:	f7fe fe57 	bl	8006a64 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b64      	cmp	r3, #100	; 0x64
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e0fd      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc4:	4b81      	ldr	r3, [pc, #516]	; (8007fcc <HAL_RCC_OscConfig+0x4f8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0f0      	beq.n	8007db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d106      	bne.n	8007de6 <HAL_RCC_OscConfig+0x312>
 8007dd8:	4b7b      	ldr	r3, [pc, #492]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	4a7a      	ldr	r2, [pc, #488]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	6213      	str	r3, [r2, #32]
 8007de4:	e02d      	b.n	8007e42 <HAL_RCC_OscConfig+0x36e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10c      	bne.n	8007e08 <HAL_RCC_OscConfig+0x334>
 8007dee:	4b76      	ldr	r3, [pc, #472]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	4a75      	ldr	r2, [pc, #468]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	6213      	str	r3, [r2, #32]
 8007dfa:	4b73      	ldr	r3, [pc, #460]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	4a72      	ldr	r2, [pc, #456]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e00:	f023 0304 	bic.w	r3, r3, #4
 8007e04:	6213      	str	r3, [r2, #32]
 8007e06:	e01c      	b.n	8007e42 <HAL_RCC_OscConfig+0x36e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d10c      	bne.n	8007e2a <HAL_RCC_OscConfig+0x356>
 8007e10:	4b6d      	ldr	r3, [pc, #436]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	4a6c      	ldr	r2, [pc, #432]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e16:	f043 0304 	orr.w	r3, r3, #4
 8007e1a:	6213      	str	r3, [r2, #32]
 8007e1c:	4b6a      	ldr	r3, [pc, #424]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	4a69      	ldr	r2, [pc, #420]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e22:	f043 0301 	orr.w	r3, r3, #1
 8007e26:	6213      	str	r3, [r2, #32]
 8007e28:	e00b      	b.n	8007e42 <HAL_RCC_OscConfig+0x36e>
 8007e2a:	4b67      	ldr	r3, [pc, #412]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	4a66      	ldr	r2, [pc, #408]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	6213      	str	r3, [r2, #32]
 8007e36:	4b64      	ldr	r3, [pc, #400]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	4a63      	ldr	r2, [pc, #396]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e3c:	f023 0304 	bic.w	r3, r3, #4
 8007e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d015      	beq.n	8007e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e4a:	f7fe fe0b 	bl	8006a64 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e50:	e00a      	b.n	8007e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e52:	f7fe fe07 	bl	8006a64 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e0ab      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e68:	4b57      	ldr	r3, [pc, #348]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0ee      	beq.n	8007e52 <HAL_RCC_OscConfig+0x37e>
 8007e74:	e014      	b.n	8007ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e76:	f7fe fdf5 	bl	8006a64 <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e7c:	e00a      	b.n	8007e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e7e:	f7fe fdf1 	bl	8006a64 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d901      	bls.n	8007e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e095      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e94:	4b4c      	ldr	r3, [pc, #304]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1ee      	bne.n	8007e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d105      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ea6:	4b48      	ldr	r3, [pc, #288]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	4a47      	ldr	r2, [pc, #284]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8081 	beq.w	8007fbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ebc:	4b42      	ldr	r3, [pc, #264]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f003 030c 	and.w	r3, r3, #12
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d061      	beq.n	8007f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d146      	bne.n	8007f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed0:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <HAL_RCC_OscConfig+0x4fc>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed6:	f7fe fdc5 	bl	8006a64 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ede:	f7fe fdc1 	bl	8006a64 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e067      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ef0:	4b35      	ldr	r3, [pc, #212]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1f0      	bne.n	8007ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d108      	bne.n	8007f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007f06:	4b30      	ldr	r3, [pc, #192]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	492d      	ldr	r1, [pc, #180]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f18:	4b2b      	ldr	r3, [pc, #172]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a19      	ldr	r1, [r3, #32]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	4927      	ldr	r1, [pc, #156]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <HAL_RCC_OscConfig+0x4fc>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f36:	f7fe fd95 	bl	8006a64 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f3c:	e008      	b.n	8007f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f3e:	f7fe fd91 	bl	8006a64 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e037      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f50:	4b1d      	ldr	r3, [pc, #116]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0f0      	beq.n	8007f3e <HAL_RCC_OscConfig+0x46a>
 8007f5c:	e02f      	b.n	8007fbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f5e:	4b1c      	ldr	r3, [pc, #112]	; (8007fd0 <HAL_RCC_OscConfig+0x4fc>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f64:	f7fe fd7e 	bl	8006a64 <HAL_GetTick>
 8007f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f6c:	f7fe fd7a 	bl	8006a64 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e020      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f0      	bne.n	8007f6c <HAL_RCC_OscConfig+0x498>
 8007f8a:	e018      	b.n	8007fbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e013      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <HAL_RCC_OscConfig+0x4f4>)
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d106      	bne.n	8007fba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d001      	beq.n	8007fbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	40007000 	.word	0x40007000
 8007fd0:	42420060 	.word	0x42420060

08007fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0d0      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b6a      	ldr	r3, [pc, #424]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d910      	bls.n	8008018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b67      	ldr	r3, [pc, #412]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 0207 	bic.w	r2, r3, #7
 8007ffe:	4965      	ldr	r1, [pc, #404]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b63      	ldr	r3, [pc, #396]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0b8      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008030:	4b59      	ldr	r3, [pc, #356]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4a58      	ldr	r2, [pc, #352]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800803a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008048:	4b53      	ldr	r3, [pc, #332]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4a52      	ldr	r2, [pc, #328]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 800804e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008054:	4b50      	ldr	r3, [pc, #320]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	494d      	ldr	r1, [pc, #308]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008062:	4313      	orrs	r3, r2
 8008064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d040      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800807a:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d115      	bne.n	80080b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e07f      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d107      	bne.n	80080a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008092:	4b41      	ldr	r3, [pc, #260]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d109      	bne.n	80080b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e073      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a2:	4b3d      	ldr	r3, [pc, #244]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e06b      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080b2:	4b39      	ldr	r3, [pc, #228]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f023 0203 	bic.w	r2, r3, #3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	4936      	ldr	r1, [pc, #216]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080c4:	f7fe fcce 	bl	8006a64 <HAL_GetTick>
 80080c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ca:	e00a      	b.n	80080e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080cc:	f7fe fcca 	bl	8006a64 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080da:	4293      	cmp	r3, r2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e053      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f003 020c 	and.w	r2, r3, #12
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d1eb      	bne.n	80080cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080f4:	4b27      	ldr	r3, [pc, #156]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d210      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008102:	4b24      	ldr	r3, [pc, #144]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f023 0207 	bic.w	r2, r3, #7
 800810a:	4922      	ldr	r1, [pc, #136]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	4313      	orrs	r3, r2
 8008110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008112:	4b20      	ldr	r3, [pc, #128]	; (8008194 <HAL_RCC_ClockConfig+0x1c0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e032      	b.n	800818a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b19      	ldr	r3, [pc, #100]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4916      	ldr	r1, [pc, #88]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 800813e:	4313      	orrs	r3, r2
 8008140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	490e      	ldr	r1, [pc, #56]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 800815e:	4313      	orrs	r3, r2
 8008160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008162:	f000 f821 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 8008166:	4602      	mov	r2, r0
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <HAL_RCC_ClockConfig+0x1c4>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	490a      	ldr	r1, [pc, #40]	; (800819c <HAL_RCC_ClockConfig+0x1c8>)
 8008174:	5ccb      	ldrb	r3, [r1, r3]
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	4a09      	ldr	r2, [pc, #36]	; (80081a0 <HAL_RCC_ClockConfig+0x1cc>)
 800817c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800817e:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_RCC_ClockConfig+0x1d0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fc2c 	bl	80069e0 <HAL_InitTick>

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40022000 	.word	0x40022000
 8008198:	40021000 	.word	0x40021000
 800819c:	0800d440 	.word	0x0800d440
 80081a0:	20000004 	.word	0x20000004
 80081a4:	20000008 	.word	0x20000008

080081a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a8:	b490      	push	{r4, r7}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80081ae:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <HAL_RCC_GetSysClockFreq+0xb0>)
 80081b0:	1d3c      	adds	r4, r7, #4
 80081b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80081b8:	f240 2301 	movw	r3, #513	; 0x201
 80081bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	2300      	movs	r3, #0
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80081d2:	4b22      	ldr	r3, [pc, #136]	; (800825c <HAL_RCC_GetSysClockFreq+0xb4>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f003 030c 	and.w	r3, r3, #12
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d002      	beq.n	80081e8 <HAL_RCC_GetSysClockFreq+0x40>
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	d003      	beq.n	80081ee <HAL_RCC_GetSysClockFreq+0x46>
 80081e6:	e02d      	b.n	8008244 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081e8:	4b1d      	ldr	r3, [pc, #116]	; (8008260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081ea:	623b      	str	r3, [r7, #32]
      break;
 80081ec:	e02d      	b.n	800824a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	0c9b      	lsrs	r3, r3, #18
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081fa:	4413      	add	r3, r2
 80081fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008200:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d013      	beq.n	8008234 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800820c:	4b13      	ldr	r3, [pc, #76]	; (800825c <HAL_RCC_GetSysClockFreq+0xb4>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	0c5b      	lsrs	r3, r3, #17
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800821a:	4413      	add	r3, r2
 800821c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008220:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008226:	fb02 f203 	mul.w	r2, r2, r3
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	e004      	b.n	800823e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	4a0b      	ldr	r2, [pc, #44]	; (8008264 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008238:	fb02 f303 	mul.w	r3, r2, r3
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	623b      	str	r3, [r7, #32]
      break;
 8008242:	e002      	b.n	800824a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008244:	4b06      	ldr	r3, [pc, #24]	; (8008260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008246:	623b      	str	r3, [r7, #32]
      break;
 8008248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800824a:	6a3b      	ldr	r3, [r7, #32]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3728      	adds	r7, #40	; 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	bc90      	pop	{r4, r7}
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	0800bc60 	.word	0x0800bc60
 800825c:	40021000 	.word	0x40021000
 8008260:	007a1200 	.word	0x007a1200
 8008264:	003d0900 	.word	0x003d0900

08008268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <HAL_RCC_GetHCLKFreq+0x10>)
 800826e:	681b      	ldr	r3, [r3, #0]
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr
 8008278:	20000004 	.word	0x20000004

0800827c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008280:	f7ff fff2 	bl	8008268 <HAL_RCC_GetHCLKFreq>
 8008284:	4602      	mov	r2, r0
 8008286:	4b05      	ldr	r3, [pc, #20]	; (800829c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	0adb      	lsrs	r3, r3, #11
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	4903      	ldr	r1, [pc, #12]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008292:	5ccb      	ldrb	r3, [r1, r3]
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008298:	4618      	mov	r0, r3
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40021000 	.word	0x40021000
 80082a0:	0800d450 	.word	0x0800d450

080082a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <RCC_Delay+0x34>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <RCC_Delay+0x38>)
 80082b2:	fba2 2303 	umull	r2, r3, r2, r3
 80082b6:	0a5b      	lsrs	r3, r3, #9
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	fb02 f303 	mul.w	r3, r2, r3
 80082be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80082c0:	bf00      	nop
  }
  while (Delay --);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1e5a      	subs	r2, r3, #1
 80082c6:	60fa      	str	r2, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1f9      	bne.n	80082c0 <RCC_Delay+0x1c>
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr
 80082d8:	20000004 	.word	0x20000004
 80082dc:	10624dd3 	.word	0x10624dd3

080082e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d07d      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008300:	4b4f      	ldr	r3, [pc, #316]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10d      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800830c:	4b4c      	ldr	r3, [pc, #304]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	4a4b      	ldr	r2, [pc, #300]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008316:	61d3      	str	r3, [r2, #28]
 8008318:	4b49      	ldr	r3, [pc, #292]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008324:	2301      	movs	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008328:	4b46      	ldr	r3, [pc, #280]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	2b00      	cmp	r3, #0
 8008332:	d118      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008334:	4b43      	ldr	r3, [pc, #268]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a42      	ldr	r2, [pc, #264]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800833a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800833e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008340:	f7fe fb90 	bl	8006a64 <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008346:	e008      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008348:	f7fe fb8c 	bl	8006a64 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b64      	cmp	r3, #100	; 0x64
 8008354:	d901      	bls.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e06d      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800835a:	4b3a      	ldr	r3, [pc, #232]	; (8008444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0f0      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008366:	4b36      	ldr	r3, [pc, #216]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800836e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d02e      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	429a      	cmp	r2, r3
 8008382:	d027      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008384:	4b2e      	ldr	r3, [pc, #184]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800838e:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800839a:	4a29      	ldr	r2, [pc, #164]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d014      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083aa:	f7fe fb5b 	bl	8006a64 <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b0:	e00a      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b2:	f7fe fb57 	bl	8006a64 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e036      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083c8:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0ee      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083d4:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4917      	ldr	r1, [pc, #92]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d105      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ec:	4b14      	ldr	r3, [pc, #80]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	4a13      	ldr	r2, [pc, #76]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	490b      	ldr	r1, [pc, #44]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008412:	4313      	orrs	r3, r2
 8008414:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b00      	cmp	r3, #0
 8008420:	d008      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	4904      	ldr	r1, [pc, #16]	; (8008440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008430:	4313      	orrs	r3, r2
 8008432:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40021000 	.word	0x40021000
 8008444:	40007000 	.word	0x40007000
 8008448:	42420440 	.word	0x42420440

0800844c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b08d      	sub	sp, #52	; 0x34
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008454:	4b6b      	ldr	r3, [pc, #428]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8008456:	f107 040c 	add.w	r4, r7, #12
 800845a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800845c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008460:	f240 2301 	movw	r3, #513	; 0x201
 8008464:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
 800846a:	2300      	movs	r3, #0
 800846c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800846e:	2300      	movs	r3, #0
 8008470:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	2300      	movs	r3, #0
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3b01      	subs	r3, #1
 800847e:	2b0f      	cmp	r3, #15
 8008480:	f200 80b6 	bhi.w	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	0800856f 	.word	0x0800856f
 8008490:	080085d5 	.word	0x080085d5
 8008494:	080085f1 	.word	0x080085f1
 8008498:	0800855f 	.word	0x0800855f
 800849c:	080085f1 	.word	0x080085f1
 80084a0:	080085f1 	.word	0x080085f1
 80084a4:	080085f1 	.word	0x080085f1
 80084a8:	08008567 	.word	0x08008567
 80084ac:	080085f1 	.word	0x080085f1
 80084b0:	080085f1 	.word	0x080085f1
 80084b4:	080085f1 	.word	0x080085f1
 80084b8:	080085f1 	.word	0x080085f1
 80084bc:	080085f1 	.word	0x080085f1
 80084c0:	080085f1 	.word	0x080085f1
 80084c4:	080085f1 	.word	0x080085f1
 80084c8:	080084cd 	.word	0x080084cd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80084cc:	4b4e      	ldr	r3, [pc, #312]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80084d2:	4b4d      	ldr	r3, [pc, #308]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 808a 	beq.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	0c9b      	lsrs	r3, r3, #18
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80084ec:	4413      	add	r3, r2
 80084ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80084f2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d018      	beq.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80084fe:	4b42      	ldr	r3, [pc, #264]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	0c5b      	lsrs	r3, r3, #17
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800850c:	4413      	add	r3, r2
 800850e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00d      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800851e:	4a3b      	ldr	r2, [pc, #236]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	fbb2 f2f3 	udiv	r2, r2, r3
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800852e:	e004      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	4a37      	ldr	r2, [pc, #220]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8008534:	fb02 f303 	mul.w	r3, r2, r3
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800853a:	4b33      	ldr	r3, [pc, #204]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008546:	d102      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800854c:	e052      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	4a30      	ldr	r2, [pc, #192]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800855c:	e04a      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800855e:	f7ff fe23 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 8008562:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008564:	e049      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008566:	f7ff fe1f 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 800856a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800856c:	e045      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800856e:	4b26      	ldr	r3, [pc, #152]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800857a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857e:	d108      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800858a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008590:	e01f      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800859c:	d109      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800859e:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80085aa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b0:	e00f      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085bc:	d11c      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80085ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80085d0:	e012      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80085d2:	e011      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80085d4:	f7ff fe52 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	0b9b      	lsrs	r3, r3, #14
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	3301      	adds	r3, #1
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80085ee:	e004      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80085f0:	bf00      	nop
 80085f2:	e002      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80085f8:	bf00      	nop
    }
  }
  return (frequency);
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3734      	adds	r7, #52	; 0x34
 8008600:	46bd      	mov	sp, r7
 8008602:	bd90      	pop	{r4, r7, pc}
 8008604:	0800bc70 	.word	0x0800bc70
 8008608:	40021000 	.word	0x40021000
 800860c:	007a1200 	.word	0x007a1200
 8008610:	003d0900 	.word	0x003d0900
 8008614:	aaaaaaab 	.word	0xaaaaaaab

08008618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e041      	b.n	80086ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fd ffd2 	bl	80065e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	4619      	mov	r1, r3
 8008656:	4610      	mov	r0, r2
 8008658:	f000 fa7e 	bl	8008b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d001      	beq.n	80086d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e044      	b.n	800875a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1d      	ldr	r2, [pc, #116]	; (8008764 <HAL_TIM_Base_Start_IT+0xac>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d018      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0x6c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1c      	ldr	r2, [pc, #112]	; (8008768 <HAL_TIM_Base_Start_IT+0xb0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0x6c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008704:	d00e      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0x6c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a18      	ldr	r2, [pc, #96]	; (800876c <HAL_TIM_Base_Start_IT+0xb4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d009      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0x6c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a16      	ldr	r2, [pc, #88]	; (8008770 <HAL_TIM_Base_Start_IT+0xb8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <HAL_TIM_Base_Start_IT+0x6c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a15      	ldr	r2, [pc, #84]	; (8008774 <HAL_TIM_Base_Start_IT+0xbc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d111      	bne.n	8008748 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b06      	cmp	r3, #6
 8008734:	d010      	beq.n	8008758 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008746:	e007      	b.n	8008758 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0201 	orr.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr
 8008764:	40012c00 	.word	0x40012c00
 8008768:	40013400 	.word	0x40013400
 800876c:	40000400 	.word	0x40000400
 8008770:	40000800 	.word	0x40000800
 8008774:	40000c00 	.word	0x40000c00

08008778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b02      	cmp	r3, #2
 800878c:	d122      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b02      	cmp	r3, #2
 800879a:	d11b      	bne.n	80087d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0202 	mvn.w	r2, #2
 80087a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9b1 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9a4 	bl	8008b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9b3 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d122      	bne.n	8008828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d11b      	bne.n	8008828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0204 	mvn.w	r2, #4
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f987 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f97a 	bl	8008b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f989 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0308 	and.w	r3, r3, #8
 8008832:	2b08      	cmp	r3, #8
 8008834:	d122      	bne.n	800887c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b08      	cmp	r3, #8
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0208 	mvn.w	r2, #8
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2204      	movs	r2, #4
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f95d 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f950 	bl	8008b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f95f 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0310 	and.w	r3, r3, #16
 8008886:	2b10      	cmp	r3, #16
 8008888:	d122      	bne.n	80088d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b10      	cmp	r3, #16
 8008896:	d11b      	bne.n	80088d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0210 	mvn.w	r2, #16
 80088a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2208      	movs	r2, #8
 80088a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f933 	bl	8008b22 <HAL_TIM_IC_CaptureCallback>
 80088bc:	e005      	b.n	80088ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f926 	bl	8008b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f935 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d10e      	bne.n	80088fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d107      	bne.n	80088fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f06f 0201 	mvn.w	r2, #1
 80088f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fd feda 	bl	80066b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008906:	2b80      	cmp	r3, #128	; 0x80
 8008908:	d10e      	bne.n	8008928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008914:	2b80      	cmp	r3, #128	; 0x80
 8008916:	d107      	bne.n	8008928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa9d 	bl	8008e62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	d10e      	bne.n	8008954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b40      	cmp	r3, #64	; 0x40
 8008942:	d107      	bne.n	8008954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800894c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f8f9 	bl	8008b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f003 0320 	and.w	r3, r3, #32
 800895e:	2b20      	cmp	r3, #32
 8008960:	d10e      	bne.n	8008980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b20      	cmp	r3, #32
 800896e:	d107      	bne.n	8008980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f06f 0220 	mvn.w	r2, #32
 8008978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa68 	bl	8008e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_TIM_ConfigClockSource+0x18>
 800899c:	2302      	movs	r3, #2
 800899e:	e0b3      	b.n	8008b08 <HAL_TIM_ConfigClockSource+0x180>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089d8:	d03e      	beq.n	8008a58 <HAL_TIM_ConfigClockSource+0xd0>
 80089da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089de:	f200 8087 	bhi.w	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 80089e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e6:	f000 8085 	beq.w	8008af4 <HAL_TIM_ConfigClockSource+0x16c>
 80089ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ee:	d87f      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 80089f0:	2b70      	cmp	r3, #112	; 0x70
 80089f2:	d01a      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0xa2>
 80089f4:	2b70      	cmp	r3, #112	; 0x70
 80089f6:	d87b      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 80089f8:	2b60      	cmp	r3, #96	; 0x60
 80089fa:	d050      	beq.n	8008a9e <HAL_TIM_ConfigClockSource+0x116>
 80089fc:	2b60      	cmp	r3, #96	; 0x60
 80089fe:	d877      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 8008a00:	2b50      	cmp	r3, #80	; 0x50
 8008a02:	d03c      	beq.n	8008a7e <HAL_TIM_ConfigClockSource+0xf6>
 8008a04:	2b50      	cmp	r3, #80	; 0x50
 8008a06:	d873      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 8008a08:	2b40      	cmp	r3, #64	; 0x40
 8008a0a:	d058      	beq.n	8008abe <HAL_TIM_ConfigClockSource+0x136>
 8008a0c:	2b40      	cmp	r3, #64	; 0x40
 8008a0e:	d86f      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 8008a10:	2b30      	cmp	r3, #48	; 0x30
 8008a12:	d064      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x156>
 8008a14:	2b30      	cmp	r3, #48	; 0x30
 8008a16:	d86b      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	d060      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x156>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d867      	bhi.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d05c      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x156>
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d05a      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008a28:	e062      	b.n	8008af0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6899      	ldr	r1, [r3, #8]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f000 f97e 	bl	8008d3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	609a      	str	r2, [r3, #8]
      break;
 8008a56:	e04e      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6818      	ldr	r0, [r3, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	6899      	ldr	r1, [r3, #8]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f000 f967 	bl	8008d3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a7a:	609a      	str	r2, [r3, #8]
      break;
 8008a7c:	e03b      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	6859      	ldr	r1, [r3, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f000 f8de 	bl	8008c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2150      	movs	r1, #80	; 0x50
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f935 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 8008a9c:	e02b      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	6859      	ldr	r1, [r3, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f000 f8fc 	bl	8008ca8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2160      	movs	r1, #96	; 0x60
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f925 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 8008abc:	e01b      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6859      	ldr	r1, [r3, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f000 f8be 	bl	8008c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2140      	movs	r1, #64	; 0x40
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f915 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 8008adc:	e00b      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f000 f90c 	bl	8008d06 <TIM_ITRx_SetConfig>
        break;
 8008aee:	e002      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008af0:	bf00      	nop
 8008af2:	e000      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr

08008b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b083      	sub	sp, #12
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr

08008b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr

08008b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a33      	ldr	r2, [pc, #204]	; (8008c38 <TIM_Base_SetConfig+0xe0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d013      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a32      	ldr	r2, [pc, #200]	; (8008c3c <TIM_Base_SetConfig+0xe4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00f      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d00b      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a2f      	ldr	r2, [pc, #188]	; (8008c40 <TIM_Base_SetConfig+0xe8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d007      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a2e      	ldr	r2, [pc, #184]	; (8008c44 <TIM_Base_SetConfig+0xec>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d003      	beq.n	8008b98 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a2d      	ldr	r2, [pc, #180]	; (8008c48 <TIM_Base_SetConfig+0xf0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d108      	bne.n	8008baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a22      	ldr	r2, [pc, #136]	; (8008c38 <TIM_Base_SetConfig+0xe0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <TIM_Base_SetConfig+0x82>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a21      	ldr	r2, [pc, #132]	; (8008c3c <TIM_Base_SetConfig+0xe4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00f      	beq.n	8008bda <TIM_Base_SetConfig+0x82>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc0:	d00b      	beq.n	8008bda <TIM_Base_SetConfig+0x82>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <TIM_Base_SetConfig+0xe8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d007      	beq.n	8008bda <TIM_Base_SetConfig+0x82>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <TIM_Base_SetConfig+0xec>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d003      	beq.n	8008bda <TIM_Base_SetConfig+0x82>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <TIM_Base_SetConfig+0xf0>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d108      	bne.n	8008bec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a09      	ldr	r2, [pc, #36]	; (8008c38 <TIM_Base_SetConfig+0xe0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0xc8>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a08      	ldr	r2, [pc, #32]	; (8008c3c <TIM_Base_SetConfig+0xe4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d103      	bne.n	8008c28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	615a      	str	r2, [r3, #20]
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr
 8008c38:	40012c00 	.word	0x40012c00
 8008c3c:	40013400 	.word	0x40013400
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00

08008c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b087      	sub	sp, #28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0201 	bic.w	r2, r3, #1
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 030a 	bic.w	r3, r3, #10
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	f023 0210 	bic.w	r2, r3, #16
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	031b      	lsls	r3, r3, #12
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	621a      	str	r2, [r3, #32]
}
 8008cfc:	bf00      	nop
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr

08008d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f043 0307 	orr.w	r3, r3, #7
 8008d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	609a      	str	r2, [r3, #8]
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b087      	sub	sp, #28
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
 8008d46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	021a      	lsls	r2, r3, #8
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	609a      	str	r2, [r3, #8]
}
 8008d6e:	bf00      	nop
 8008d70:	371c      	adds	r7, #28
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d101      	bne.n	8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e050      	b.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a1b      	ldr	r2, [pc, #108]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d018      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a19      	ldr	r2, [pc, #100]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de6:	d00e      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d009      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a14      	ldr	r2, [pc, #80]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d004      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a12      	ldr	r2, [pc, #72]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d10c      	bne.n	8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr
 8008e3c:	40012c00 	.word	0x40012c00
 8008e40:	40013400 	.word	0x40013400
 8008e44:	40000400 	.word	0x40000400
 8008e48:	40000800 	.word	0x40000800
 8008e4c:	40000c00 	.word	0x40000c00

08008e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bc80      	pop	{r7}
 8008e72:	4770      	bx	lr

08008e74 <__errno>:
 8008e74:	4b01      	ldr	r3, [pc, #4]	; (8008e7c <__errno+0x8>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000010 	.word	0x20000010

08008e80 <__libc_init_array>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	2600      	movs	r6, #0
 8008e84:	4d0c      	ldr	r5, [pc, #48]	; (8008eb8 <__libc_init_array+0x38>)
 8008e86:	4c0d      	ldr	r4, [pc, #52]	; (8008ebc <__libc_init_array+0x3c>)
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	d109      	bne.n	8008ea4 <__libc_init_array+0x24>
 8008e90:	f002 febc 	bl	800bc0c <_init>
 8008e94:	2600      	movs	r6, #0
 8008e96:	4d0a      	ldr	r5, [pc, #40]	; (8008ec0 <__libc_init_array+0x40>)
 8008e98:	4c0a      	ldr	r4, [pc, #40]	; (8008ec4 <__libc_init_array+0x44>)
 8008e9a:	1b64      	subs	r4, r4, r5
 8008e9c:	10a4      	asrs	r4, r4, #2
 8008e9e:	42a6      	cmp	r6, r4
 8008ea0:	d105      	bne.n	8008eae <__libc_init_array+0x2e>
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea8:	4798      	blx	r3
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7ee      	b.n	8008e8c <__libc_init_array+0xc>
 8008eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb2:	4798      	blx	r3
 8008eb4:	3601      	adds	r6, #1
 8008eb6:	e7f2      	b.n	8008e9e <__libc_init_array+0x1e>
 8008eb8:	0800d83c 	.word	0x0800d83c
 8008ebc:	0800d83c 	.word	0x0800d83c
 8008ec0:	0800d83c 	.word	0x0800d83c
 8008ec4:	0800d840 	.word	0x0800d840

08008ec8 <memset>:
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4402      	add	r2, r0
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d100      	bne.n	8008ed2 <memset+0xa>
 8008ed0:	4770      	bx	lr
 8008ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed6:	e7f9      	b.n	8008ecc <memset+0x4>

08008ed8 <__cvt>:
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ede:	461f      	mov	r7, r3
 8008ee0:	bfbb      	ittet	lt
 8008ee2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008ee6:	461f      	movlt	r7, r3
 8008ee8:	2300      	movge	r3, #0
 8008eea:	232d      	movlt	r3, #45	; 0x2d
 8008eec:	b088      	sub	sp, #32
 8008eee:	4614      	mov	r4, r2
 8008ef0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ef2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ef4:	7013      	strb	r3, [r2, #0]
 8008ef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ef8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008efc:	f023 0820 	bic.w	r8, r3, #32
 8008f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f04:	d005      	beq.n	8008f12 <__cvt+0x3a>
 8008f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f0a:	d100      	bne.n	8008f0e <__cvt+0x36>
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e000      	b.n	8008f14 <__cvt+0x3c>
 8008f12:	2303      	movs	r3, #3
 8008f14:	aa07      	add	r2, sp, #28
 8008f16:	9204      	str	r2, [sp, #16]
 8008f18:	aa06      	add	r2, sp, #24
 8008f1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f1e:	e9cd 3500 	strd	r3, r5, [sp]
 8008f22:	4622      	mov	r2, r4
 8008f24:	463b      	mov	r3, r7
 8008f26:	f000 fce7 	bl	80098f8 <_dtoa_r>
 8008f2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f2e:	4606      	mov	r6, r0
 8008f30:	d102      	bne.n	8008f38 <__cvt+0x60>
 8008f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f34:	07db      	lsls	r3, r3, #31
 8008f36:	d522      	bpl.n	8008f7e <__cvt+0xa6>
 8008f38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f3c:	eb06 0905 	add.w	r9, r6, r5
 8008f40:	d110      	bne.n	8008f64 <__cvt+0x8c>
 8008f42:	7833      	ldrb	r3, [r6, #0]
 8008f44:	2b30      	cmp	r3, #48	; 0x30
 8008f46:	d10a      	bne.n	8008f5e <__cvt+0x86>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fd96 	bl	8000a80 <__aeabi_dcmpeq>
 8008f54:	b918      	cbnz	r0, 8008f5e <__cvt+0x86>
 8008f56:	f1c5 0501 	rsb	r5, r5, #1
 8008f5a:	f8ca 5000 	str.w	r5, [sl]
 8008f5e:	f8da 3000 	ldr.w	r3, [sl]
 8008f62:	4499      	add	r9, r3
 8008f64:	2200      	movs	r2, #0
 8008f66:	2300      	movs	r3, #0
 8008f68:	4620      	mov	r0, r4
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fd88 	bl	8000a80 <__aeabi_dcmpeq>
 8008f70:	b108      	cbz	r0, 8008f76 <__cvt+0x9e>
 8008f72:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f76:	2230      	movs	r2, #48	; 0x30
 8008f78:	9b07      	ldr	r3, [sp, #28]
 8008f7a:	454b      	cmp	r3, r9
 8008f7c:	d307      	bcc.n	8008f8e <__cvt+0xb6>
 8008f7e:	4630      	mov	r0, r6
 8008f80:	9b07      	ldr	r3, [sp, #28]
 8008f82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f84:	1b9b      	subs	r3, r3, r6
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	b008      	add	sp, #32
 8008f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8e:	1c59      	adds	r1, r3, #1
 8008f90:	9107      	str	r1, [sp, #28]
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	e7f0      	b.n	8008f78 <__cvt+0xa0>

08008f96 <__exponent>:
 8008f96:	4603      	mov	r3, r0
 8008f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f9a:	2900      	cmp	r1, #0
 8008f9c:	f803 2b02 	strb.w	r2, [r3], #2
 8008fa0:	bfb6      	itet	lt
 8008fa2:	222d      	movlt	r2, #45	; 0x2d
 8008fa4:	222b      	movge	r2, #43	; 0x2b
 8008fa6:	4249      	neglt	r1, r1
 8008fa8:	2909      	cmp	r1, #9
 8008faa:	7042      	strb	r2, [r0, #1]
 8008fac:	dd2b      	ble.n	8009006 <__exponent+0x70>
 8008fae:	f10d 0407 	add.w	r4, sp, #7
 8008fb2:	46a4      	mov	ip, r4
 8008fb4:	270a      	movs	r7, #10
 8008fb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fba:	460a      	mov	r2, r1
 8008fbc:	46a6      	mov	lr, r4
 8008fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8008fc2:	2a63      	cmp	r2, #99	; 0x63
 8008fc4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008fc8:	4631      	mov	r1, r6
 8008fca:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fd2:	dcf0      	bgt.n	8008fb6 <__exponent+0x20>
 8008fd4:	3130      	adds	r1, #48	; 0x30
 8008fd6:	f1ae 0502 	sub.w	r5, lr, #2
 8008fda:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fde:	4629      	mov	r1, r5
 8008fe0:	1c44      	adds	r4, r0, #1
 8008fe2:	4561      	cmp	r1, ip
 8008fe4:	d30a      	bcc.n	8008ffc <__exponent+0x66>
 8008fe6:	f10d 0209 	add.w	r2, sp, #9
 8008fea:	eba2 020e 	sub.w	r2, r2, lr
 8008fee:	4565      	cmp	r5, ip
 8008ff0:	bf88      	it	hi
 8008ff2:	2200      	movhi	r2, #0
 8008ff4:	4413      	add	r3, r2
 8008ff6:	1a18      	subs	r0, r3, r0
 8008ff8:	b003      	add	sp, #12
 8008ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009000:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009004:	e7ed      	b.n	8008fe2 <__exponent+0x4c>
 8009006:	2330      	movs	r3, #48	; 0x30
 8009008:	3130      	adds	r1, #48	; 0x30
 800900a:	7083      	strb	r3, [r0, #2]
 800900c:	70c1      	strb	r1, [r0, #3]
 800900e:	1d03      	adds	r3, r0, #4
 8009010:	e7f1      	b.n	8008ff6 <__exponent+0x60>
	...

08009014 <_printf_float>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	b091      	sub	sp, #68	; 0x44
 800901a:	460c      	mov	r4, r1
 800901c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009020:	4616      	mov	r6, r2
 8009022:	461f      	mov	r7, r3
 8009024:	4605      	mov	r5, r0
 8009026:	f001 fa55 	bl	800a4d4 <_localeconv_r>
 800902a:	6803      	ldr	r3, [r0, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	f7f7 f8fa 	bl	8000228 <strlen>
 8009034:	2300      	movs	r3, #0
 8009036:	930e      	str	r3, [sp, #56]	; 0x38
 8009038:	f8d8 3000 	ldr.w	r3, [r8]
 800903c:	900a      	str	r0, [sp, #40]	; 0x28
 800903e:	3307      	adds	r3, #7
 8009040:	f023 0307 	bic.w	r3, r3, #7
 8009044:	f103 0208 	add.w	r2, r3, #8
 8009048:	f894 9018 	ldrb.w	r9, [r4, #24]
 800904c:	f8d4 b000 	ldr.w	fp, [r4]
 8009050:	f8c8 2000 	str.w	r2, [r8]
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800905c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009060:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009064:	930b      	str	r3, [sp, #44]	; 0x2c
 8009066:	f04f 32ff 	mov.w	r2, #4294967295
 800906a:	4640      	mov	r0, r8
 800906c:	4b9c      	ldr	r3, [pc, #624]	; (80092e0 <_printf_float+0x2cc>)
 800906e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009070:	f7f7 fd38 	bl	8000ae4 <__aeabi_dcmpun>
 8009074:	bb70      	cbnz	r0, 80090d4 <_printf_float+0xc0>
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	4640      	mov	r0, r8
 800907c:	4b98      	ldr	r3, [pc, #608]	; (80092e0 <_printf_float+0x2cc>)
 800907e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009080:	f7f7 fd12 	bl	8000aa8 <__aeabi_dcmple>
 8009084:	bb30      	cbnz	r0, 80090d4 <_printf_float+0xc0>
 8009086:	2200      	movs	r2, #0
 8009088:	2300      	movs	r3, #0
 800908a:	4640      	mov	r0, r8
 800908c:	4651      	mov	r1, sl
 800908e:	f7f7 fd01 	bl	8000a94 <__aeabi_dcmplt>
 8009092:	b110      	cbz	r0, 800909a <_printf_float+0x86>
 8009094:	232d      	movs	r3, #45	; 0x2d
 8009096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800909a:	4b92      	ldr	r3, [pc, #584]	; (80092e4 <_printf_float+0x2d0>)
 800909c:	4892      	ldr	r0, [pc, #584]	; (80092e8 <_printf_float+0x2d4>)
 800909e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090a2:	bf94      	ite	ls
 80090a4:	4698      	movls	r8, r3
 80090a6:	4680      	movhi	r8, r0
 80090a8:	2303      	movs	r3, #3
 80090aa:	f04f 0a00 	mov.w	sl, #0
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	f02b 0304 	bic.w	r3, fp, #4
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	4633      	mov	r3, r6
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	9700      	str	r7, [sp, #0]
 80090be:	aa0f      	add	r2, sp, #60	; 0x3c
 80090c0:	f000 f9d4 	bl	800946c <_printf_common>
 80090c4:	3001      	adds	r0, #1
 80090c6:	f040 8090 	bne.w	80091ea <_printf_float+0x1d6>
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	b011      	add	sp, #68	; 0x44
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	4642      	mov	r2, r8
 80090d6:	4653      	mov	r3, sl
 80090d8:	4640      	mov	r0, r8
 80090da:	4651      	mov	r1, sl
 80090dc:	f7f7 fd02 	bl	8000ae4 <__aeabi_dcmpun>
 80090e0:	b148      	cbz	r0, 80090f6 <_printf_float+0xe2>
 80090e2:	f1ba 0f00 	cmp.w	sl, #0
 80090e6:	bfb8      	it	lt
 80090e8:	232d      	movlt	r3, #45	; 0x2d
 80090ea:	4880      	ldr	r0, [pc, #512]	; (80092ec <_printf_float+0x2d8>)
 80090ec:	bfb8      	it	lt
 80090ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090f2:	4b7f      	ldr	r3, [pc, #508]	; (80092f0 <_printf_float+0x2dc>)
 80090f4:	e7d3      	b.n	800909e <_printf_float+0x8a>
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	d142      	bne.n	8009186 <_printf_float+0x172>
 8009100:	2306      	movs	r3, #6
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	9206      	str	r2, [sp, #24]
 8009108:	aa0e      	add	r2, sp, #56	; 0x38
 800910a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800910e:	aa0d      	add	r2, sp, #52	; 0x34
 8009110:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800911a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800911e:	6023      	str	r3, [r4, #0]
 8009120:	6863      	ldr	r3, [r4, #4]
 8009122:	4642      	mov	r2, r8
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	4628      	mov	r0, r5
 8009128:	4653      	mov	r3, sl
 800912a:	910b      	str	r1, [sp, #44]	; 0x2c
 800912c:	f7ff fed4 	bl	8008ed8 <__cvt>
 8009130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009132:	4680      	mov	r8, r0
 8009134:	2947      	cmp	r1, #71	; 0x47
 8009136:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009138:	d108      	bne.n	800914c <_printf_float+0x138>
 800913a:	1cc8      	adds	r0, r1, #3
 800913c:	db02      	blt.n	8009144 <_printf_float+0x130>
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	4299      	cmp	r1, r3
 8009142:	dd40      	ble.n	80091c6 <_printf_float+0x1b2>
 8009144:	f1a9 0902 	sub.w	r9, r9, #2
 8009148:	fa5f f989 	uxtb.w	r9, r9
 800914c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009150:	d81f      	bhi.n	8009192 <_printf_float+0x17e>
 8009152:	464a      	mov	r2, r9
 8009154:	3901      	subs	r1, #1
 8009156:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800915a:	910d      	str	r1, [sp, #52]	; 0x34
 800915c:	f7ff ff1b 	bl	8008f96 <__exponent>
 8009160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009162:	4682      	mov	sl, r0
 8009164:	1813      	adds	r3, r2, r0
 8009166:	2a01      	cmp	r2, #1
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	dc02      	bgt.n	8009172 <_printf_float+0x15e>
 800916c:	6822      	ldr	r2, [r4, #0]
 800916e:	07d2      	lsls	r2, r2, #31
 8009170:	d501      	bpl.n	8009176 <_printf_float+0x162>
 8009172:	3301      	adds	r3, #1
 8009174:	6123      	str	r3, [r4, #16]
 8009176:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800917a:	2b00      	cmp	r3, #0
 800917c:	d09b      	beq.n	80090b6 <_printf_float+0xa2>
 800917e:	232d      	movs	r3, #45	; 0x2d
 8009180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009184:	e797      	b.n	80090b6 <_printf_float+0xa2>
 8009186:	2947      	cmp	r1, #71	; 0x47
 8009188:	d1bc      	bne.n	8009104 <_printf_float+0xf0>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1ba      	bne.n	8009104 <_printf_float+0xf0>
 800918e:	2301      	movs	r3, #1
 8009190:	e7b7      	b.n	8009102 <_printf_float+0xee>
 8009192:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009196:	d118      	bne.n	80091ca <_printf_float+0x1b6>
 8009198:	2900      	cmp	r1, #0
 800919a:	6863      	ldr	r3, [r4, #4]
 800919c:	dd0b      	ble.n	80091b6 <_printf_float+0x1a2>
 800919e:	6121      	str	r1, [r4, #16]
 80091a0:	b913      	cbnz	r3, 80091a8 <_printf_float+0x194>
 80091a2:	6822      	ldr	r2, [r4, #0]
 80091a4:	07d0      	lsls	r0, r2, #31
 80091a6:	d502      	bpl.n	80091ae <_printf_float+0x19a>
 80091a8:	3301      	adds	r3, #1
 80091aa:	440b      	add	r3, r1
 80091ac:	6123      	str	r3, [r4, #16]
 80091ae:	f04f 0a00 	mov.w	sl, #0
 80091b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80091b4:	e7df      	b.n	8009176 <_printf_float+0x162>
 80091b6:	b913      	cbnz	r3, 80091be <_printf_float+0x1aa>
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	07d2      	lsls	r2, r2, #31
 80091bc:	d501      	bpl.n	80091c2 <_printf_float+0x1ae>
 80091be:	3302      	adds	r3, #2
 80091c0:	e7f4      	b.n	80091ac <_printf_float+0x198>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e7f2      	b.n	80091ac <_printf_float+0x198>
 80091c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80091ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091cc:	4299      	cmp	r1, r3
 80091ce:	db05      	blt.n	80091dc <_printf_float+0x1c8>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	6121      	str	r1, [r4, #16]
 80091d4:	07d8      	lsls	r0, r3, #31
 80091d6:	d5ea      	bpl.n	80091ae <_printf_float+0x19a>
 80091d8:	1c4b      	adds	r3, r1, #1
 80091da:	e7e7      	b.n	80091ac <_printf_float+0x198>
 80091dc:	2900      	cmp	r1, #0
 80091de:	bfcc      	ite	gt
 80091e0:	2201      	movgt	r2, #1
 80091e2:	f1c1 0202 	rsble	r2, r1, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	e7e0      	b.n	80091ac <_printf_float+0x198>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	055a      	lsls	r2, r3, #21
 80091ee:	d407      	bmi.n	8009200 <_printf_float+0x1ec>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	4642      	mov	r2, r8
 80091f4:	4631      	mov	r1, r6
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	d12b      	bne.n	8009256 <_printf_float+0x242>
 80091fe:	e764      	b.n	80090ca <_printf_float+0xb6>
 8009200:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009204:	f240 80dd 	bls.w	80093c2 <_printf_float+0x3ae>
 8009208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800920c:	2200      	movs	r2, #0
 800920e:	2300      	movs	r3, #0
 8009210:	f7f7 fc36 	bl	8000a80 <__aeabi_dcmpeq>
 8009214:	2800      	cmp	r0, #0
 8009216:	d033      	beq.n	8009280 <_printf_float+0x26c>
 8009218:	2301      	movs	r3, #1
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	4a35      	ldr	r2, [pc, #212]	; (80092f4 <_printf_float+0x2e0>)
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	f43f af51 	beq.w	80090ca <_printf_float+0xb6>
 8009228:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800922c:	429a      	cmp	r2, r3
 800922e:	db02      	blt.n	8009236 <_printf_float+0x222>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	07d8      	lsls	r0, r3, #31
 8009234:	d50f      	bpl.n	8009256 <_printf_float+0x242>
 8009236:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	47b8      	blx	r7
 8009240:	3001      	adds	r0, #1
 8009242:	f43f af42 	beq.w	80090ca <_printf_float+0xb6>
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	f104 091a 	add.w	r9, r4, #26
 800924e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009250:	3b01      	subs	r3, #1
 8009252:	4543      	cmp	r3, r8
 8009254:	dc09      	bgt.n	800926a <_printf_float+0x256>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	079b      	lsls	r3, r3, #30
 800925a:	f100 8102 	bmi.w	8009462 <_printf_float+0x44e>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009262:	4298      	cmp	r0, r3
 8009264:	bfb8      	it	lt
 8009266:	4618      	movlt	r0, r3
 8009268:	e731      	b.n	80090ce <_printf_float+0xba>
 800926a:	2301      	movs	r3, #1
 800926c:	464a      	mov	r2, r9
 800926e:	4631      	mov	r1, r6
 8009270:	4628      	mov	r0, r5
 8009272:	47b8      	blx	r7
 8009274:	3001      	adds	r0, #1
 8009276:	f43f af28 	beq.w	80090ca <_printf_float+0xb6>
 800927a:	f108 0801 	add.w	r8, r8, #1
 800927e:	e7e6      	b.n	800924e <_printf_float+0x23a>
 8009280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009282:	2b00      	cmp	r3, #0
 8009284:	dc38      	bgt.n	80092f8 <_printf_float+0x2e4>
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <_printf_float+0x2e0>)
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f af1a 	beq.w	80090ca <_printf_float+0xb6>
 8009296:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800929a:	4313      	orrs	r3, r2
 800929c:	d102      	bne.n	80092a4 <_printf_float+0x290>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	07d9      	lsls	r1, r3, #31
 80092a2:	d5d8      	bpl.n	8009256 <_printf_float+0x242>
 80092a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b8      	blx	r7
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f af0b 	beq.w	80090ca <_printf_float+0xb6>
 80092b4:	f04f 0900 	mov.w	r9, #0
 80092b8:	f104 0a1a 	add.w	sl, r4, #26
 80092bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092be:	425b      	negs	r3, r3
 80092c0:	454b      	cmp	r3, r9
 80092c2:	dc01      	bgt.n	80092c8 <_printf_float+0x2b4>
 80092c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c6:	e794      	b.n	80091f2 <_printf_float+0x1de>
 80092c8:	2301      	movs	r3, #1
 80092ca:	4652      	mov	r2, sl
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f aef9 	beq.w	80090ca <_printf_float+0xb6>
 80092d8:	f109 0901 	add.w	r9, r9, #1
 80092dc:	e7ee      	b.n	80092bc <_printf_float+0x2a8>
 80092de:	bf00      	nop
 80092e0:	7fefffff 	.word	0x7fefffff
 80092e4:	0800d45c 	.word	0x0800d45c
 80092e8:	0800d460 	.word	0x0800d460
 80092ec:	0800d468 	.word	0x0800d468
 80092f0:	0800d464 	.word	0x0800d464
 80092f4:	0800d46c 	.word	0x0800d46c
 80092f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092fc:	429a      	cmp	r2, r3
 80092fe:	bfa8      	it	ge
 8009300:	461a      	movge	r2, r3
 8009302:	2a00      	cmp	r2, #0
 8009304:	4691      	mov	r9, r2
 8009306:	dc37      	bgt.n	8009378 <_printf_float+0x364>
 8009308:	f04f 0b00 	mov.w	fp, #0
 800930c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009310:	f104 021a 	add.w	r2, r4, #26
 8009314:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009318:	ebaa 0309 	sub.w	r3, sl, r9
 800931c:	455b      	cmp	r3, fp
 800931e:	dc33      	bgt.n	8009388 <_printf_float+0x374>
 8009320:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009324:	429a      	cmp	r2, r3
 8009326:	db3b      	blt.n	80093a0 <_printf_float+0x38c>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07da      	lsls	r2, r3, #31
 800932c:	d438      	bmi.n	80093a0 <_printf_float+0x38c>
 800932e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009330:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009332:	eba2 030a 	sub.w	r3, r2, sl
 8009336:	eba2 0901 	sub.w	r9, r2, r1
 800933a:	4599      	cmp	r9, r3
 800933c:	bfa8      	it	ge
 800933e:	4699      	movge	r9, r3
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	dc34      	bgt.n	80093b0 <_printf_float+0x39c>
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800934e:	f104 0a1a 	add.w	sl, r4, #26
 8009352:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	eba3 0309 	sub.w	r3, r3, r9
 800935c:	4543      	cmp	r3, r8
 800935e:	f77f af7a 	ble.w	8009256 <_printf_float+0x242>
 8009362:	2301      	movs	r3, #1
 8009364:	4652      	mov	r2, sl
 8009366:	4631      	mov	r1, r6
 8009368:	4628      	mov	r0, r5
 800936a:	47b8      	blx	r7
 800936c:	3001      	adds	r0, #1
 800936e:	f43f aeac 	beq.w	80090ca <_printf_float+0xb6>
 8009372:	f108 0801 	add.w	r8, r8, #1
 8009376:	e7ec      	b.n	8009352 <_printf_float+0x33e>
 8009378:	4613      	mov	r3, r2
 800937a:	4631      	mov	r1, r6
 800937c:	4642      	mov	r2, r8
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	d1c0      	bne.n	8009308 <_printf_float+0x2f4>
 8009386:	e6a0      	b.n	80090ca <_printf_float+0xb6>
 8009388:	2301      	movs	r3, #1
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	f43f ae99 	beq.w	80090ca <_printf_float+0xb6>
 8009398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800939a:	f10b 0b01 	add.w	fp, fp, #1
 800939e:	e7b9      	b.n	8009314 <_printf_float+0x300>
 80093a0:	4631      	mov	r1, r6
 80093a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	d1bf      	bne.n	800932e <_printf_float+0x31a>
 80093ae:	e68c      	b.n	80090ca <_printf_float+0xb6>
 80093b0:	464b      	mov	r3, r9
 80093b2:	4631      	mov	r1, r6
 80093b4:	4628      	mov	r0, r5
 80093b6:	eb08 020a 	add.w	r2, r8, sl
 80093ba:	47b8      	blx	r7
 80093bc:	3001      	adds	r0, #1
 80093be:	d1c2      	bne.n	8009346 <_printf_float+0x332>
 80093c0:	e683      	b.n	80090ca <_printf_float+0xb6>
 80093c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093c4:	2a01      	cmp	r2, #1
 80093c6:	dc01      	bgt.n	80093cc <_printf_float+0x3b8>
 80093c8:	07db      	lsls	r3, r3, #31
 80093ca:	d537      	bpl.n	800943c <_printf_float+0x428>
 80093cc:	2301      	movs	r3, #1
 80093ce:	4642      	mov	r2, r8
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f ae77 	beq.w	80090ca <_printf_float+0xb6>
 80093dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	f43f ae6f 	beq.w	80090ca <_printf_float+0xb6>
 80093ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093f0:	2200      	movs	r2, #0
 80093f2:	2300      	movs	r3, #0
 80093f4:	f7f7 fb44 	bl	8000a80 <__aeabi_dcmpeq>
 80093f8:	b9d8      	cbnz	r0, 8009432 <_printf_float+0x41e>
 80093fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093fc:	f108 0201 	add.w	r2, r8, #1
 8009400:	3b01      	subs	r3, #1
 8009402:	4631      	mov	r1, r6
 8009404:	4628      	mov	r0, r5
 8009406:	47b8      	blx	r7
 8009408:	3001      	adds	r0, #1
 800940a:	d10e      	bne.n	800942a <_printf_float+0x416>
 800940c:	e65d      	b.n	80090ca <_printf_float+0xb6>
 800940e:	2301      	movs	r3, #1
 8009410:	464a      	mov	r2, r9
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	f43f ae56 	beq.w	80090ca <_printf_float+0xb6>
 800941e:	f108 0801 	add.w	r8, r8, #1
 8009422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009424:	3b01      	subs	r3, #1
 8009426:	4543      	cmp	r3, r8
 8009428:	dcf1      	bgt.n	800940e <_printf_float+0x3fa>
 800942a:	4653      	mov	r3, sl
 800942c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009430:	e6e0      	b.n	80091f4 <_printf_float+0x1e0>
 8009432:	f04f 0800 	mov.w	r8, #0
 8009436:	f104 091a 	add.w	r9, r4, #26
 800943a:	e7f2      	b.n	8009422 <_printf_float+0x40e>
 800943c:	2301      	movs	r3, #1
 800943e:	4642      	mov	r2, r8
 8009440:	e7df      	b.n	8009402 <_printf_float+0x3ee>
 8009442:	2301      	movs	r3, #1
 8009444:	464a      	mov	r2, r9
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae3c 	beq.w	80090ca <_printf_float+0xb6>
 8009452:	f108 0801 	add.w	r8, r8, #1
 8009456:	68e3      	ldr	r3, [r4, #12]
 8009458:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800945a:	1a5b      	subs	r3, r3, r1
 800945c:	4543      	cmp	r3, r8
 800945e:	dcf0      	bgt.n	8009442 <_printf_float+0x42e>
 8009460:	e6fd      	b.n	800925e <_printf_float+0x24a>
 8009462:	f04f 0800 	mov.w	r8, #0
 8009466:	f104 0919 	add.w	r9, r4, #25
 800946a:	e7f4      	b.n	8009456 <_printf_float+0x442>

0800946c <_printf_common>:
 800946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	4616      	mov	r6, r2
 8009472:	4699      	mov	r9, r3
 8009474:	688a      	ldr	r2, [r1, #8]
 8009476:	690b      	ldr	r3, [r1, #16]
 8009478:	4607      	mov	r7, r0
 800947a:	4293      	cmp	r3, r2
 800947c:	bfb8      	it	lt
 800947e:	4613      	movlt	r3, r2
 8009480:	6033      	str	r3, [r6, #0]
 8009482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009486:	460c      	mov	r4, r1
 8009488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800948c:	b10a      	cbz	r2, 8009492 <_printf_common+0x26>
 800948e:	3301      	adds	r3, #1
 8009490:	6033      	str	r3, [r6, #0]
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	0699      	lsls	r1, r3, #26
 8009496:	bf42      	ittt	mi
 8009498:	6833      	ldrmi	r3, [r6, #0]
 800949a:	3302      	addmi	r3, #2
 800949c:	6033      	strmi	r3, [r6, #0]
 800949e:	6825      	ldr	r5, [r4, #0]
 80094a0:	f015 0506 	ands.w	r5, r5, #6
 80094a4:	d106      	bne.n	80094b4 <_printf_common+0x48>
 80094a6:	f104 0a19 	add.w	sl, r4, #25
 80094aa:	68e3      	ldr	r3, [r4, #12]
 80094ac:	6832      	ldr	r2, [r6, #0]
 80094ae:	1a9b      	subs	r3, r3, r2
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	dc28      	bgt.n	8009506 <_printf_common+0x9a>
 80094b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094b8:	1e13      	subs	r3, r2, #0
 80094ba:	6822      	ldr	r2, [r4, #0]
 80094bc:	bf18      	it	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	0692      	lsls	r2, r2, #26
 80094c2:	d42d      	bmi.n	8009520 <_printf_common+0xb4>
 80094c4:	4649      	mov	r1, r9
 80094c6:	4638      	mov	r0, r7
 80094c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094cc:	47c0      	blx	r8
 80094ce:	3001      	adds	r0, #1
 80094d0:	d020      	beq.n	8009514 <_printf_common+0xa8>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	68e5      	ldr	r5, [r4, #12]
 80094d6:	f003 0306 	and.w	r3, r3, #6
 80094da:	2b04      	cmp	r3, #4
 80094dc:	bf18      	it	ne
 80094de:	2500      	movne	r5, #0
 80094e0:	6832      	ldr	r2, [r6, #0]
 80094e2:	f04f 0600 	mov.w	r6, #0
 80094e6:	68a3      	ldr	r3, [r4, #8]
 80094e8:	bf08      	it	eq
 80094ea:	1aad      	subeq	r5, r5, r2
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	bf08      	it	eq
 80094f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f4:	4293      	cmp	r3, r2
 80094f6:	bfc4      	itt	gt
 80094f8:	1a9b      	subgt	r3, r3, r2
 80094fa:	18ed      	addgt	r5, r5, r3
 80094fc:	341a      	adds	r4, #26
 80094fe:	42b5      	cmp	r5, r6
 8009500:	d11a      	bne.n	8009538 <_printf_common+0xcc>
 8009502:	2000      	movs	r0, #0
 8009504:	e008      	b.n	8009518 <_printf_common+0xac>
 8009506:	2301      	movs	r3, #1
 8009508:	4652      	mov	r2, sl
 800950a:	4649      	mov	r1, r9
 800950c:	4638      	mov	r0, r7
 800950e:	47c0      	blx	r8
 8009510:	3001      	adds	r0, #1
 8009512:	d103      	bne.n	800951c <_printf_common+0xb0>
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951c:	3501      	adds	r5, #1
 800951e:	e7c4      	b.n	80094aa <_printf_common+0x3e>
 8009520:	2030      	movs	r0, #48	; 0x30
 8009522:	18e1      	adds	r1, r4, r3
 8009524:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800952e:	4422      	add	r2, r4
 8009530:	3302      	adds	r3, #2
 8009532:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009536:	e7c5      	b.n	80094c4 <_printf_common+0x58>
 8009538:	2301      	movs	r3, #1
 800953a:	4622      	mov	r2, r4
 800953c:	4649      	mov	r1, r9
 800953e:	4638      	mov	r0, r7
 8009540:	47c0      	blx	r8
 8009542:	3001      	adds	r0, #1
 8009544:	d0e6      	beq.n	8009514 <_printf_common+0xa8>
 8009546:	3601      	adds	r6, #1
 8009548:	e7d9      	b.n	80094fe <_printf_common+0x92>
	...

0800954c <_printf_i>:
 800954c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	7e27      	ldrb	r7, [r4, #24]
 8009554:	4691      	mov	r9, r2
 8009556:	2f78      	cmp	r7, #120	; 0x78
 8009558:	4680      	mov	r8, r0
 800955a:	469a      	mov	sl, r3
 800955c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800955e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009562:	d807      	bhi.n	8009574 <_printf_i+0x28>
 8009564:	2f62      	cmp	r7, #98	; 0x62
 8009566:	d80a      	bhi.n	800957e <_printf_i+0x32>
 8009568:	2f00      	cmp	r7, #0
 800956a:	f000 80d9 	beq.w	8009720 <_printf_i+0x1d4>
 800956e:	2f58      	cmp	r7, #88	; 0x58
 8009570:	f000 80a4 	beq.w	80096bc <_printf_i+0x170>
 8009574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800957c:	e03a      	b.n	80095f4 <_printf_i+0xa8>
 800957e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009582:	2b15      	cmp	r3, #21
 8009584:	d8f6      	bhi.n	8009574 <_printf_i+0x28>
 8009586:	a001      	add	r0, pc, #4	; (adr r0, 800958c <_printf_i+0x40>)
 8009588:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800958c:	080095e5 	.word	0x080095e5
 8009590:	080095f9 	.word	0x080095f9
 8009594:	08009575 	.word	0x08009575
 8009598:	08009575 	.word	0x08009575
 800959c:	08009575 	.word	0x08009575
 80095a0:	08009575 	.word	0x08009575
 80095a4:	080095f9 	.word	0x080095f9
 80095a8:	08009575 	.word	0x08009575
 80095ac:	08009575 	.word	0x08009575
 80095b0:	08009575 	.word	0x08009575
 80095b4:	08009575 	.word	0x08009575
 80095b8:	08009707 	.word	0x08009707
 80095bc:	08009629 	.word	0x08009629
 80095c0:	080096e9 	.word	0x080096e9
 80095c4:	08009575 	.word	0x08009575
 80095c8:	08009575 	.word	0x08009575
 80095cc:	08009729 	.word	0x08009729
 80095d0:	08009575 	.word	0x08009575
 80095d4:	08009629 	.word	0x08009629
 80095d8:	08009575 	.word	0x08009575
 80095dc:	08009575 	.word	0x08009575
 80095e0:	080096f1 	.word	0x080096f1
 80095e4:	680b      	ldr	r3, [r1, #0]
 80095e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	600a      	str	r2, [r1, #0]
 80095f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0a4      	b.n	8009742 <_printf_i+0x1f6>
 80095f8:	6825      	ldr	r5, [r4, #0]
 80095fa:	6808      	ldr	r0, [r1, #0]
 80095fc:	062e      	lsls	r6, r5, #24
 80095fe:	f100 0304 	add.w	r3, r0, #4
 8009602:	d50a      	bpl.n	800961a <_printf_i+0xce>
 8009604:	6805      	ldr	r5, [r0, #0]
 8009606:	600b      	str	r3, [r1, #0]
 8009608:	2d00      	cmp	r5, #0
 800960a:	da03      	bge.n	8009614 <_printf_i+0xc8>
 800960c:	232d      	movs	r3, #45	; 0x2d
 800960e:	426d      	negs	r5, r5
 8009610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009614:	230a      	movs	r3, #10
 8009616:	485e      	ldr	r0, [pc, #376]	; (8009790 <_printf_i+0x244>)
 8009618:	e019      	b.n	800964e <_printf_i+0x102>
 800961a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800961e:	6805      	ldr	r5, [r0, #0]
 8009620:	600b      	str	r3, [r1, #0]
 8009622:	bf18      	it	ne
 8009624:	b22d      	sxthne	r5, r5
 8009626:	e7ef      	b.n	8009608 <_printf_i+0xbc>
 8009628:	680b      	ldr	r3, [r1, #0]
 800962a:	6825      	ldr	r5, [r4, #0]
 800962c:	1d18      	adds	r0, r3, #4
 800962e:	6008      	str	r0, [r1, #0]
 8009630:	0628      	lsls	r0, r5, #24
 8009632:	d501      	bpl.n	8009638 <_printf_i+0xec>
 8009634:	681d      	ldr	r5, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0xf2>
 8009638:	0669      	lsls	r1, r5, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0xe8>
 800963c:	881d      	ldrh	r5, [r3, #0]
 800963e:	2f6f      	cmp	r7, #111	; 0x6f
 8009640:	bf0c      	ite	eq
 8009642:	2308      	moveq	r3, #8
 8009644:	230a      	movne	r3, #10
 8009646:	4852      	ldr	r0, [pc, #328]	; (8009790 <_printf_i+0x244>)
 8009648:	2100      	movs	r1, #0
 800964a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800964e:	6866      	ldr	r6, [r4, #4]
 8009650:	2e00      	cmp	r6, #0
 8009652:	bfa8      	it	ge
 8009654:	6821      	ldrge	r1, [r4, #0]
 8009656:	60a6      	str	r6, [r4, #8]
 8009658:	bfa4      	itt	ge
 800965a:	f021 0104 	bicge.w	r1, r1, #4
 800965e:	6021      	strge	r1, [r4, #0]
 8009660:	b90d      	cbnz	r5, 8009666 <_printf_i+0x11a>
 8009662:	2e00      	cmp	r6, #0
 8009664:	d04d      	beq.n	8009702 <_printf_i+0x1b6>
 8009666:	4616      	mov	r6, r2
 8009668:	fbb5 f1f3 	udiv	r1, r5, r3
 800966c:	fb03 5711 	mls	r7, r3, r1, r5
 8009670:	5dc7      	ldrb	r7, [r0, r7]
 8009672:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009676:	462f      	mov	r7, r5
 8009678:	42bb      	cmp	r3, r7
 800967a:	460d      	mov	r5, r1
 800967c:	d9f4      	bls.n	8009668 <_printf_i+0x11c>
 800967e:	2b08      	cmp	r3, #8
 8009680:	d10b      	bne.n	800969a <_printf_i+0x14e>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	07df      	lsls	r7, r3, #31
 8009686:	d508      	bpl.n	800969a <_printf_i+0x14e>
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	6861      	ldr	r1, [r4, #4]
 800968c:	4299      	cmp	r1, r3
 800968e:	bfde      	ittt	le
 8009690:	2330      	movle	r3, #48	; 0x30
 8009692:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009696:	f106 36ff 	addle.w	r6, r6, #4294967295
 800969a:	1b92      	subs	r2, r2, r6
 800969c:	6122      	str	r2, [r4, #16]
 800969e:	464b      	mov	r3, r9
 80096a0:	4621      	mov	r1, r4
 80096a2:	4640      	mov	r0, r8
 80096a4:	f8cd a000 	str.w	sl, [sp]
 80096a8:	aa03      	add	r2, sp, #12
 80096aa:	f7ff fedf 	bl	800946c <_printf_common>
 80096ae:	3001      	adds	r0, #1
 80096b0:	d14c      	bne.n	800974c <_printf_i+0x200>
 80096b2:	f04f 30ff 	mov.w	r0, #4294967295
 80096b6:	b004      	add	sp, #16
 80096b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096bc:	4834      	ldr	r0, [pc, #208]	; (8009790 <_printf_i+0x244>)
 80096be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096c2:	680e      	ldr	r6, [r1, #0]
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80096ca:	061f      	lsls	r7, r3, #24
 80096cc:	600e      	str	r6, [r1, #0]
 80096ce:	d514      	bpl.n	80096fa <_printf_i+0x1ae>
 80096d0:	07d9      	lsls	r1, r3, #31
 80096d2:	bf44      	itt	mi
 80096d4:	f043 0320 	orrmi.w	r3, r3, #32
 80096d8:	6023      	strmi	r3, [r4, #0]
 80096da:	b91d      	cbnz	r5, 80096e4 <_printf_i+0x198>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	f023 0320 	bic.w	r3, r3, #32
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	2310      	movs	r3, #16
 80096e6:	e7af      	b.n	8009648 <_printf_i+0xfc>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	f043 0320 	orr.w	r3, r3, #32
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	2378      	movs	r3, #120	; 0x78
 80096f2:	4828      	ldr	r0, [pc, #160]	; (8009794 <_printf_i+0x248>)
 80096f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096f8:	e7e3      	b.n	80096c2 <_printf_i+0x176>
 80096fa:	065e      	lsls	r6, r3, #25
 80096fc:	bf48      	it	mi
 80096fe:	b2ad      	uxthmi	r5, r5
 8009700:	e7e6      	b.n	80096d0 <_printf_i+0x184>
 8009702:	4616      	mov	r6, r2
 8009704:	e7bb      	b.n	800967e <_printf_i+0x132>
 8009706:	680b      	ldr	r3, [r1, #0]
 8009708:	6826      	ldr	r6, [r4, #0]
 800970a:	1d1d      	adds	r5, r3, #4
 800970c:	6960      	ldr	r0, [r4, #20]
 800970e:	600d      	str	r5, [r1, #0]
 8009710:	0635      	lsls	r5, r6, #24
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	d501      	bpl.n	800971a <_printf_i+0x1ce>
 8009716:	6018      	str	r0, [r3, #0]
 8009718:	e002      	b.n	8009720 <_printf_i+0x1d4>
 800971a:	0671      	lsls	r1, r6, #25
 800971c:	d5fb      	bpl.n	8009716 <_printf_i+0x1ca>
 800971e:	8018      	strh	r0, [r3, #0]
 8009720:	2300      	movs	r3, #0
 8009722:	4616      	mov	r6, r2
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	e7ba      	b.n	800969e <_printf_i+0x152>
 8009728:	680b      	ldr	r3, [r1, #0]
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	600a      	str	r2, [r1, #0]
 800972e:	681e      	ldr	r6, [r3, #0]
 8009730:	2100      	movs	r1, #0
 8009732:	4630      	mov	r0, r6
 8009734:	6862      	ldr	r2, [r4, #4]
 8009736:	f000 fed9 	bl	800a4ec <memchr>
 800973a:	b108      	cbz	r0, 8009740 <_printf_i+0x1f4>
 800973c:	1b80      	subs	r0, r0, r6
 800973e:	6060      	str	r0, [r4, #4]
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	6123      	str	r3, [r4, #16]
 8009744:	2300      	movs	r3, #0
 8009746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800974a:	e7a8      	b.n	800969e <_printf_i+0x152>
 800974c:	4632      	mov	r2, r6
 800974e:	4649      	mov	r1, r9
 8009750:	4640      	mov	r0, r8
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	47d0      	blx	sl
 8009756:	3001      	adds	r0, #1
 8009758:	d0ab      	beq.n	80096b2 <_printf_i+0x166>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	079b      	lsls	r3, r3, #30
 800975e:	d413      	bmi.n	8009788 <_printf_i+0x23c>
 8009760:	68e0      	ldr	r0, [r4, #12]
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	4298      	cmp	r0, r3
 8009766:	bfb8      	it	lt
 8009768:	4618      	movlt	r0, r3
 800976a:	e7a4      	b.n	80096b6 <_printf_i+0x16a>
 800976c:	2301      	movs	r3, #1
 800976e:	4632      	mov	r2, r6
 8009770:	4649      	mov	r1, r9
 8009772:	4640      	mov	r0, r8
 8009774:	47d0      	blx	sl
 8009776:	3001      	adds	r0, #1
 8009778:	d09b      	beq.n	80096b2 <_printf_i+0x166>
 800977a:	3501      	adds	r5, #1
 800977c:	68e3      	ldr	r3, [r4, #12]
 800977e:	9903      	ldr	r1, [sp, #12]
 8009780:	1a5b      	subs	r3, r3, r1
 8009782:	42ab      	cmp	r3, r5
 8009784:	dcf2      	bgt.n	800976c <_printf_i+0x220>
 8009786:	e7eb      	b.n	8009760 <_printf_i+0x214>
 8009788:	2500      	movs	r5, #0
 800978a:	f104 0619 	add.w	r6, r4, #25
 800978e:	e7f5      	b.n	800977c <_printf_i+0x230>
 8009790:	0800d46e 	.word	0x0800d46e
 8009794:	0800d47f 	.word	0x0800d47f

08009798 <siprintf>:
 8009798:	b40e      	push	{r1, r2, r3}
 800979a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800979e:	b500      	push	{lr}
 80097a0:	b09c      	sub	sp, #112	; 0x70
 80097a2:	ab1d      	add	r3, sp, #116	; 0x74
 80097a4:	9002      	str	r0, [sp, #8]
 80097a6:	9006      	str	r0, [sp, #24]
 80097a8:	9107      	str	r1, [sp, #28]
 80097aa:	9104      	str	r1, [sp, #16]
 80097ac:	4808      	ldr	r0, [pc, #32]	; (80097d0 <siprintf+0x38>)
 80097ae:	4909      	ldr	r1, [pc, #36]	; (80097d4 <siprintf+0x3c>)
 80097b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b4:	9105      	str	r1, [sp, #20]
 80097b6:	6800      	ldr	r0, [r0, #0]
 80097b8:	a902      	add	r1, sp, #8
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	f001 fb44 	bl	800ae48 <_svfiprintf_r>
 80097c0:	2200      	movs	r2, #0
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	b01c      	add	sp, #112	; 0x70
 80097c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097cc:	b003      	add	sp, #12
 80097ce:	4770      	bx	lr
 80097d0:	20000010 	.word	0x20000010
 80097d4:	ffff0208 	.word	0xffff0208

080097d8 <quorem>:
 80097d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	6903      	ldr	r3, [r0, #16]
 80097de:	690c      	ldr	r4, [r1, #16]
 80097e0:	4607      	mov	r7, r0
 80097e2:	42a3      	cmp	r3, r4
 80097e4:	f2c0 8083 	blt.w	80098ee <quorem+0x116>
 80097e8:	3c01      	subs	r4, #1
 80097ea:	f100 0514 	add.w	r5, r0, #20
 80097ee:	f101 0814 	add.w	r8, r1, #20
 80097f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009800:	3301      	adds	r3, #1
 8009802:	429a      	cmp	r2, r3
 8009804:	fbb2 f6f3 	udiv	r6, r2, r3
 8009808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800980c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009810:	d332      	bcc.n	8009878 <quorem+0xa0>
 8009812:	f04f 0e00 	mov.w	lr, #0
 8009816:	4640      	mov	r0, r8
 8009818:	46ac      	mov	ip, r5
 800981a:	46f2      	mov	sl, lr
 800981c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009820:	b293      	uxth	r3, r2
 8009822:	fb06 e303 	mla	r3, r6, r3, lr
 8009826:	0c12      	lsrs	r2, r2, #16
 8009828:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800982c:	fb06 e202 	mla	r2, r6, r2, lr
 8009830:	b29b      	uxth	r3, r3
 8009832:	ebaa 0303 	sub.w	r3, sl, r3
 8009836:	f8dc a000 	ldr.w	sl, [ip]
 800983a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800983e:	fa1f fa8a 	uxth.w	sl, sl
 8009842:	4453      	add	r3, sl
 8009844:	fa1f fa82 	uxth.w	sl, r2
 8009848:	f8dc 2000 	ldr.w	r2, [ip]
 800984c:	4581      	cmp	r9, r0
 800984e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009852:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009856:	b29b      	uxth	r3, r3
 8009858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800985c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009860:	f84c 3b04 	str.w	r3, [ip], #4
 8009864:	d2da      	bcs.n	800981c <quorem+0x44>
 8009866:	f855 300b 	ldr.w	r3, [r5, fp]
 800986a:	b92b      	cbnz	r3, 8009878 <quorem+0xa0>
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	3b04      	subs	r3, #4
 8009870:	429d      	cmp	r5, r3
 8009872:	461a      	mov	r2, r3
 8009874:	d32f      	bcc.n	80098d6 <quorem+0xfe>
 8009876:	613c      	str	r4, [r7, #16]
 8009878:	4638      	mov	r0, r7
 800987a:	f001 f8cd 	bl	800aa18 <__mcmp>
 800987e:	2800      	cmp	r0, #0
 8009880:	db25      	blt.n	80098ce <quorem+0xf6>
 8009882:	4628      	mov	r0, r5
 8009884:	f04f 0c00 	mov.w	ip, #0
 8009888:	3601      	adds	r6, #1
 800988a:	f858 1b04 	ldr.w	r1, [r8], #4
 800988e:	f8d0 e000 	ldr.w	lr, [r0]
 8009892:	b28b      	uxth	r3, r1
 8009894:	ebac 0303 	sub.w	r3, ip, r3
 8009898:	fa1f f28e 	uxth.w	r2, lr
 800989c:	4413      	add	r3, r2
 800989e:	0c0a      	lsrs	r2, r1, #16
 80098a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ae:	45c1      	cmp	r9, r8
 80098b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098b4:	f840 3b04 	str.w	r3, [r0], #4
 80098b8:	d2e7      	bcs.n	800988a <quorem+0xb2>
 80098ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098c2:	b922      	cbnz	r2, 80098ce <quorem+0xf6>
 80098c4:	3b04      	subs	r3, #4
 80098c6:	429d      	cmp	r5, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	d30a      	bcc.n	80098e2 <quorem+0x10a>
 80098cc:	613c      	str	r4, [r7, #16]
 80098ce:	4630      	mov	r0, r6
 80098d0:	b003      	add	sp, #12
 80098d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d6:	6812      	ldr	r2, [r2, #0]
 80098d8:	3b04      	subs	r3, #4
 80098da:	2a00      	cmp	r2, #0
 80098dc:	d1cb      	bne.n	8009876 <quorem+0x9e>
 80098de:	3c01      	subs	r4, #1
 80098e0:	e7c6      	b.n	8009870 <quorem+0x98>
 80098e2:	6812      	ldr	r2, [r2, #0]
 80098e4:	3b04      	subs	r3, #4
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d1f0      	bne.n	80098cc <quorem+0xf4>
 80098ea:	3c01      	subs	r4, #1
 80098ec:	e7eb      	b.n	80098c6 <quorem+0xee>
 80098ee:	2000      	movs	r0, #0
 80098f0:	e7ee      	b.n	80098d0 <quorem+0xf8>
 80098f2:	0000      	movs	r0, r0
 80098f4:	0000      	movs	r0, r0
	...

080098f8 <_dtoa_r>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4616      	mov	r6, r2
 80098fe:	461f      	mov	r7, r3
 8009900:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009902:	b099      	sub	sp, #100	; 0x64
 8009904:	4605      	mov	r5, r0
 8009906:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800990a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800990e:	b974      	cbnz	r4, 800992e <_dtoa_r+0x36>
 8009910:	2010      	movs	r0, #16
 8009912:	f000 fde3 	bl	800a4dc <malloc>
 8009916:	4602      	mov	r2, r0
 8009918:	6268      	str	r0, [r5, #36]	; 0x24
 800991a:	b920      	cbnz	r0, 8009926 <_dtoa_r+0x2e>
 800991c:	21ea      	movs	r1, #234	; 0xea
 800991e:	4bae      	ldr	r3, [pc, #696]	; (8009bd8 <_dtoa_r+0x2e0>)
 8009920:	48ae      	ldr	r0, [pc, #696]	; (8009bdc <_dtoa_r+0x2e4>)
 8009922:	f001 fba1 	bl	800b068 <__assert_func>
 8009926:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800992a:	6004      	str	r4, [r0, #0]
 800992c:	60c4      	str	r4, [r0, #12]
 800992e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009930:	6819      	ldr	r1, [r3, #0]
 8009932:	b151      	cbz	r1, 800994a <_dtoa_r+0x52>
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	2301      	movs	r3, #1
 8009938:	4093      	lsls	r3, r2
 800993a:	604a      	str	r2, [r1, #4]
 800993c:	608b      	str	r3, [r1, #8]
 800993e:	4628      	mov	r0, r5
 8009940:	f000 fe30 	bl	800a5a4 <_Bfree>
 8009944:	2200      	movs	r2, #0
 8009946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	1e3b      	subs	r3, r7, #0
 800994c:	bfaf      	iteee	ge
 800994e:	2300      	movge	r3, #0
 8009950:	2201      	movlt	r2, #1
 8009952:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009956:	9305      	strlt	r3, [sp, #20]
 8009958:	bfa8      	it	ge
 800995a:	f8c8 3000 	strge.w	r3, [r8]
 800995e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009962:	4b9f      	ldr	r3, [pc, #636]	; (8009be0 <_dtoa_r+0x2e8>)
 8009964:	bfb8      	it	lt
 8009966:	f8c8 2000 	strlt.w	r2, [r8]
 800996a:	ea33 0309 	bics.w	r3, r3, r9
 800996e:	d119      	bne.n	80099a4 <_dtoa_r+0xac>
 8009970:	f242 730f 	movw	r3, #9999	; 0x270f
 8009974:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800997c:	4333      	orrs	r3, r6
 800997e:	f000 8580 	beq.w	800a482 <_dtoa_r+0xb8a>
 8009982:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009984:	b953      	cbnz	r3, 800999c <_dtoa_r+0xa4>
 8009986:	4b97      	ldr	r3, [pc, #604]	; (8009be4 <_dtoa_r+0x2ec>)
 8009988:	e022      	b.n	80099d0 <_dtoa_r+0xd8>
 800998a:	4b97      	ldr	r3, [pc, #604]	; (8009be8 <_dtoa_r+0x2f0>)
 800998c:	9308      	str	r3, [sp, #32]
 800998e:	3308      	adds	r3, #8
 8009990:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	9808      	ldr	r0, [sp, #32]
 8009996:	b019      	add	sp, #100	; 0x64
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	4b91      	ldr	r3, [pc, #580]	; (8009be4 <_dtoa_r+0x2ec>)
 800999e:	9308      	str	r3, [sp, #32]
 80099a0:	3303      	adds	r3, #3
 80099a2:	e7f5      	b.n	8009990 <_dtoa_r+0x98>
 80099a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80099a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80099ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099b0:	2200      	movs	r2, #0
 80099b2:	2300      	movs	r3, #0
 80099b4:	f7f7 f864 	bl	8000a80 <__aeabi_dcmpeq>
 80099b8:	4680      	mov	r8, r0
 80099ba:	b158      	cbz	r0, 80099d4 <_dtoa_r+0xdc>
 80099bc:	2301      	movs	r3, #1
 80099be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 8559 	beq.w	800a47c <_dtoa_r+0xb84>
 80099ca:	4888      	ldr	r0, [pc, #544]	; (8009bec <_dtoa_r+0x2f4>)
 80099cc:	6018      	str	r0, [r3, #0]
 80099ce:	1e43      	subs	r3, r0, #1
 80099d0:	9308      	str	r3, [sp, #32]
 80099d2:	e7df      	b.n	8009994 <_dtoa_r+0x9c>
 80099d4:	ab16      	add	r3, sp, #88	; 0x58
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	ab17      	add	r3, sp, #92	; 0x5c
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	4628      	mov	r0, r5
 80099de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099e2:	f001 f8c5 	bl	800ab70 <__d2b>
 80099e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80099ea:	4682      	mov	sl, r0
 80099ec:	2c00      	cmp	r4, #0
 80099ee:	d07e      	beq.n	8009aee <_dtoa_r+0x1f6>
 80099f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80099fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009a02:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009a06:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4b78      	ldr	r3, [pc, #480]	; (8009bf0 <_dtoa_r+0x2f8>)
 8009a0e:	f7f6 fc17 	bl	8000240 <__aeabi_dsub>
 8009a12:	a36b      	add	r3, pc, #428	; (adr r3, 8009bc0 <_dtoa_r+0x2c8>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f7f6 fdca 	bl	80005b0 <__aeabi_dmul>
 8009a1c:	a36a      	add	r3, pc, #424	; (adr r3, 8009bc8 <_dtoa_r+0x2d0>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc0f 	bl	8000244 <__adddf3>
 8009a26:	4606      	mov	r6, r0
 8009a28:	4620      	mov	r0, r4
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	f7f6 fd56 	bl	80004dc <__aeabi_i2d>
 8009a30:	a367      	add	r3, pc, #412	; (adr r3, 8009bd0 <_dtoa_r+0x2d8>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 fdbb 	bl	80005b0 <__aeabi_dmul>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f6 fbff 	bl	8000244 <__adddf3>
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	f7f7 f861 	bl	8000b10 <__aeabi_d2iz>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4681      	mov	r9, r0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f7 f81c 	bl	8000a94 <__aeabi_dcmplt>
 8009a5c:	b148      	cbz	r0, 8009a72 <_dtoa_r+0x17a>
 8009a5e:	4648      	mov	r0, r9
 8009a60:	f7f6 fd3c 	bl	80004dc <__aeabi_i2d>
 8009a64:	4632      	mov	r2, r6
 8009a66:	463b      	mov	r3, r7
 8009a68:	f7f7 f80a 	bl	8000a80 <__aeabi_dcmpeq>
 8009a6c:	b908      	cbnz	r0, 8009a72 <_dtoa_r+0x17a>
 8009a6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a72:	f1b9 0f16 	cmp.w	r9, #22
 8009a76:	d857      	bhi.n	8009b28 <_dtoa_r+0x230>
 8009a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a7c:	4b5d      	ldr	r3, [pc, #372]	; (8009bf4 <_dtoa_r+0x2fc>)
 8009a7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f7 f805 	bl	8000a94 <__aeabi_dcmplt>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d04e      	beq.n	8009b2c <_dtoa_r+0x234>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a98:	1b1c      	subs	r4, r3, r4
 8009a9a:	1e63      	subs	r3, r4, #1
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	bf49      	itett	mi
 8009aa0:	f1c4 0301 	rsbmi	r3, r4, #1
 8009aa4:	2300      	movpl	r3, #0
 8009aa6:	9306      	strmi	r3, [sp, #24]
 8009aa8:	2300      	movmi	r3, #0
 8009aaa:	bf54      	ite	pl
 8009aac:	9306      	strpl	r3, [sp, #24]
 8009aae:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009ab0:	f1b9 0f00 	cmp.w	r9, #0
 8009ab4:	db3c      	blt.n	8009b30 <_dtoa_r+0x238>
 8009ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009abc:	444b      	add	r3, r9
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d86c      	bhi.n	8009ba4 <_dtoa_r+0x2ac>
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	bfc4      	itt	gt
 8009ace:	3b04      	subgt	r3, #4
 8009ad0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ad4:	bfc8      	it	gt
 8009ad6:	2400      	movgt	r4, #0
 8009ad8:	f1a3 0302 	sub.w	r3, r3, #2
 8009adc:	bfd8      	it	le
 8009ade:	2401      	movle	r4, #1
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	f200 808b 	bhi.w	8009bfc <_dtoa_r+0x304>
 8009ae6:	e8df f003 	tbb	[pc, r3]
 8009aea:	4f2d      	.short	0x4f2d
 8009aec:	5b4d      	.short	0x5b4d
 8009aee:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009af2:	441c      	add	r4, r3
 8009af4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	bfc3      	ittte	gt
 8009afc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b00:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009b04:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b08:	f1c3 0320 	rsble	r3, r3, #32
 8009b0c:	bfc6      	itte	gt
 8009b0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b12:	4318      	orrgt	r0, r3
 8009b14:	fa06 f003 	lslle.w	r0, r6, r3
 8009b18:	f7f6 fcd0 	bl	80004bc <__aeabi_ui2d>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009b22:	3c01      	subs	r4, #1
 8009b24:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b26:	e770      	b.n	8009a0a <_dtoa_r+0x112>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e7b3      	b.n	8009a94 <_dtoa_r+0x19c>
 8009b2c:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b2e:	e7b2      	b.n	8009a96 <_dtoa_r+0x19e>
 8009b30:	9b06      	ldr	r3, [sp, #24]
 8009b32:	eba3 0309 	sub.w	r3, r3, r9
 8009b36:	9306      	str	r3, [sp, #24]
 8009b38:	f1c9 0300 	rsb	r3, r9, #0
 8009b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b3e:	2300      	movs	r3, #0
 8009b40:	930e      	str	r3, [sp, #56]	; 0x38
 8009b42:	e7bf      	b.n	8009ac4 <_dtoa_r+0x1cc>
 8009b44:	2300      	movs	r3, #0
 8009b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dc59      	bgt.n	8009c02 <_dtoa_r+0x30a>
 8009b4e:	f04f 0b01 	mov.w	fp, #1
 8009b52:	465b      	mov	r3, fp
 8009b54:	f8cd b008 	str.w	fp, [sp, #8]
 8009b58:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009b60:	6042      	str	r2, [r0, #4]
 8009b62:	2204      	movs	r2, #4
 8009b64:	f102 0614 	add.w	r6, r2, #20
 8009b68:	429e      	cmp	r6, r3
 8009b6a:	6841      	ldr	r1, [r0, #4]
 8009b6c:	d94f      	bls.n	8009c0e <_dtoa_r+0x316>
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fcd8 	bl	800a524 <_Balloc>
 8009b74:	9008      	str	r0, [sp, #32]
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d14d      	bne.n	8009c16 <_dtoa_r+0x31e>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b80:	4b1d      	ldr	r3, [pc, #116]	; (8009bf8 <_dtoa_r+0x300>)
 8009b82:	e6cd      	b.n	8009920 <_dtoa_r+0x28>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e7de      	b.n	8009b46 <_dtoa_r+0x24e>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b8e:	eb09 0b03 	add.w	fp, r9, r3
 8009b92:	f10b 0301 	add.w	r3, fp, #1
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	9302      	str	r3, [sp, #8]
 8009b9a:	bfb8      	it	lt
 8009b9c:	2301      	movlt	r3, #1
 8009b9e:	e7dd      	b.n	8009b5c <_dtoa_r+0x264>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7f2      	b.n	8009b8a <_dtoa_r+0x292>
 8009ba4:	2401      	movs	r4, #1
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009baa:	9322      	str	r3, [sp, #136]	; 0x88
 8009bac:	f04f 3bff 	mov.w	fp, #4294967295
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2312      	movs	r3, #18
 8009bb4:	f8cd b008 	str.w	fp, [sp, #8]
 8009bb8:	9223      	str	r2, [sp, #140]	; 0x8c
 8009bba:	e7cf      	b.n	8009b5c <_dtoa_r+0x264>
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	636f4361 	.word	0x636f4361
 8009bc4:	3fd287a7 	.word	0x3fd287a7
 8009bc8:	8b60c8b3 	.word	0x8b60c8b3
 8009bcc:	3fc68a28 	.word	0x3fc68a28
 8009bd0:	509f79fb 	.word	0x509f79fb
 8009bd4:	3fd34413 	.word	0x3fd34413
 8009bd8:	0800d49d 	.word	0x0800d49d
 8009bdc:	0800d4b4 	.word	0x0800d4b4
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	0800d499 	.word	0x0800d499
 8009be8:	0800d490 	.word	0x0800d490
 8009bec:	0800d46d 	.word	0x0800d46d
 8009bf0:	3ff80000 	.word	0x3ff80000
 8009bf4:	0800d5b0 	.word	0x0800d5b0
 8009bf8:	0800d513 	.word	0x0800d513
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c00:	e7d4      	b.n	8009bac <_dtoa_r+0x2b4>
 8009c02:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009c06:	465b      	mov	r3, fp
 8009c08:	f8cd b008 	str.w	fp, [sp, #8]
 8009c0c:	e7a6      	b.n	8009b5c <_dtoa_r+0x264>
 8009c0e:	3101      	adds	r1, #1
 8009c10:	6041      	str	r1, [r0, #4]
 8009c12:	0052      	lsls	r2, r2, #1
 8009c14:	e7a6      	b.n	8009b64 <_dtoa_r+0x26c>
 8009c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c18:	9a08      	ldr	r2, [sp, #32]
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	9b02      	ldr	r3, [sp, #8]
 8009c1e:	2b0e      	cmp	r3, #14
 8009c20:	f200 80a8 	bhi.w	8009d74 <_dtoa_r+0x47c>
 8009c24:	2c00      	cmp	r4, #0
 8009c26:	f000 80a5 	beq.w	8009d74 <_dtoa_r+0x47c>
 8009c2a:	f1b9 0f00 	cmp.w	r9, #0
 8009c2e:	dd34      	ble.n	8009c9a <_dtoa_r+0x3a2>
 8009c30:	4a9a      	ldr	r2, [pc, #616]	; (8009e9c <_dtoa_r+0x5a4>)
 8009c32:	f009 030f 	and.w	r3, r9, #15
 8009c36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c3a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c46:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009c4a:	d016      	beq.n	8009c7a <_dtoa_r+0x382>
 8009c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c50:	4b93      	ldr	r3, [pc, #588]	; (8009ea0 <_dtoa_r+0x5a8>)
 8009c52:	2703      	movs	r7, #3
 8009c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c58:	f7f6 fdd4 	bl	8000804 <__aeabi_ddiv>
 8009c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c60:	f004 040f 	and.w	r4, r4, #15
 8009c64:	4e8e      	ldr	r6, [pc, #568]	; (8009ea0 <_dtoa_r+0x5a8>)
 8009c66:	b954      	cbnz	r4, 8009c7e <_dtoa_r+0x386>
 8009c68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c70:	f7f6 fdc8 	bl	8000804 <__aeabi_ddiv>
 8009c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c78:	e029      	b.n	8009cce <_dtoa_r+0x3d6>
 8009c7a:	2702      	movs	r7, #2
 8009c7c:	e7f2      	b.n	8009c64 <_dtoa_r+0x36c>
 8009c7e:	07e1      	lsls	r1, r4, #31
 8009c80:	d508      	bpl.n	8009c94 <_dtoa_r+0x39c>
 8009c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c8a:	f7f6 fc91 	bl	80005b0 <__aeabi_dmul>
 8009c8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c92:	3701      	adds	r7, #1
 8009c94:	1064      	asrs	r4, r4, #1
 8009c96:	3608      	adds	r6, #8
 8009c98:	e7e5      	b.n	8009c66 <_dtoa_r+0x36e>
 8009c9a:	f000 80a5 	beq.w	8009de8 <_dtoa_r+0x4f0>
 8009c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ca2:	f1c9 0400 	rsb	r4, r9, #0
 8009ca6:	4b7d      	ldr	r3, [pc, #500]	; (8009e9c <_dtoa_r+0x5a4>)
 8009ca8:	f004 020f 	and.w	r2, r4, #15
 8009cac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 fc7c 	bl	80005b0 <__aeabi_dmul>
 8009cb8:	2702      	movs	r7, #2
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cc0:	4e77      	ldr	r6, [pc, #476]	; (8009ea0 <_dtoa_r+0x5a8>)
 8009cc2:	1124      	asrs	r4, r4, #4
 8009cc4:	2c00      	cmp	r4, #0
 8009cc6:	f040 8084 	bne.w	8009dd2 <_dtoa_r+0x4da>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1d2      	bne.n	8009c74 <_dtoa_r+0x37c>
 8009cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 808b 	beq.w	8009dec <_dtoa_r+0x4f4>
 8009cd6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009cda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009cde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	4b6f      	ldr	r3, [pc, #444]	; (8009ea4 <_dtoa_r+0x5ac>)
 8009ce6:	f7f6 fed5 	bl	8000a94 <__aeabi_dcmplt>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d07e      	beq.n	8009dec <_dtoa_r+0x4f4>
 8009cee:	9b02      	ldr	r3, [sp, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d07b      	beq.n	8009dec <_dtoa_r+0x4f4>
 8009cf4:	f1bb 0f00 	cmp.w	fp, #0
 8009cf8:	dd38      	ble.n	8009d6c <_dtoa_r+0x474>
 8009cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4b69      	ldr	r3, [pc, #420]	; (8009ea8 <_dtoa_r+0x5b0>)
 8009d02:	f7f6 fc55 	bl	80005b0 <__aeabi_dmul>
 8009d06:	465c      	mov	r4, fp
 8009d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d0c:	f109 38ff 	add.w	r8, r9, #4294967295
 8009d10:	3701      	adds	r7, #1
 8009d12:	4638      	mov	r0, r7
 8009d14:	f7f6 fbe2 	bl	80004dc <__aeabi_i2d>
 8009d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d1c:	f7f6 fc48 	bl	80005b0 <__aeabi_dmul>
 8009d20:	2200      	movs	r2, #0
 8009d22:	4b62      	ldr	r3, [pc, #392]	; (8009eac <_dtoa_r+0x5b4>)
 8009d24:	f7f6 fa8e 	bl	8000244 <__adddf3>
 8009d28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009d2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d30:	9611      	str	r6, [sp, #68]	; 0x44
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d15d      	bne.n	8009df2 <_dtoa_r+0x4fa>
 8009d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	4b5c      	ldr	r3, [pc, #368]	; (8009eb0 <_dtoa_r+0x5b8>)
 8009d3e:	f7f6 fa7f 	bl	8000240 <__aeabi_dsub>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d4a:	4633      	mov	r3, r6
 8009d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d4e:	f7f6 febf 	bl	8000ad0 <__aeabi_dcmpgt>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	f040 829e 	bne.w	800a294 <_dtoa_r+0x99c>
 8009d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d62:	f7f6 fe97 	bl	8000a94 <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f040 8292 	bne.w	800a290 <_dtoa_r+0x998>
 8009d6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009d70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f2c0 8153 	blt.w	800a022 <_dtoa_r+0x72a>
 8009d7c:	f1b9 0f0e 	cmp.w	r9, #14
 8009d80:	f300 814f 	bgt.w	800a022 <_dtoa_r+0x72a>
 8009d84:	4b45      	ldr	r3, [pc, #276]	; (8009e9c <_dtoa_r+0x5a4>)
 8009d86:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009d8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009d92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f280 80db 	bge.w	8009f50 <_dtoa_r+0x658>
 8009d9a:	9b02      	ldr	r3, [sp, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f300 80d7 	bgt.w	8009f50 <_dtoa_r+0x658>
 8009da2:	f040 8274 	bne.w	800a28e <_dtoa_r+0x996>
 8009da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009daa:	2200      	movs	r2, #0
 8009dac:	4b40      	ldr	r3, [pc, #256]	; (8009eb0 <_dtoa_r+0x5b8>)
 8009dae:	f7f6 fbff 	bl	80005b0 <__aeabi_dmul>
 8009db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009db6:	f7f6 fe81 	bl	8000abc <__aeabi_dcmpge>
 8009dba:	9c02      	ldr	r4, [sp, #8]
 8009dbc:	4626      	mov	r6, r4
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f040 824a 	bne.w	800a258 <_dtoa_r+0x960>
 8009dc4:	2331      	movs	r3, #49	; 0x31
 8009dc6:	9f08      	ldr	r7, [sp, #32]
 8009dc8:	f109 0901 	add.w	r9, r9, #1
 8009dcc:	f807 3b01 	strb.w	r3, [r7], #1
 8009dd0:	e246      	b.n	800a260 <_dtoa_r+0x968>
 8009dd2:	07e2      	lsls	r2, r4, #31
 8009dd4:	d505      	bpl.n	8009de2 <_dtoa_r+0x4ea>
 8009dd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009dda:	f7f6 fbe9 	bl	80005b0 <__aeabi_dmul>
 8009dde:	2301      	movs	r3, #1
 8009de0:	3701      	adds	r7, #1
 8009de2:	1064      	asrs	r4, r4, #1
 8009de4:	3608      	adds	r6, #8
 8009de6:	e76d      	b.n	8009cc4 <_dtoa_r+0x3cc>
 8009de8:	2702      	movs	r7, #2
 8009dea:	e770      	b.n	8009cce <_dtoa_r+0x3d6>
 8009dec:	46c8      	mov	r8, r9
 8009dee:	9c02      	ldr	r4, [sp, #8]
 8009df0:	e78f      	b.n	8009d12 <_dtoa_r+0x41a>
 8009df2:	9908      	ldr	r1, [sp, #32]
 8009df4:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <_dtoa_r+0x5a4>)
 8009df6:	4421      	add	r1, r4
 8009df8:	9112      	str	r1, [sp, #72]	; 0x48
 8009dfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009e04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e08:	2900      	cmp	r1, #0
 8009e0a:	d055      	beq.n	8009eb8 <_dtoa_r+0x5c0>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	4929      	ldr	r1, [pc, #164]	; (8009eb4 <_dtoa_r+0x5bc>)
 8009e10:	f7f6 fcf8 	bl	8000804 <__aeabi_ddiv>
 8009e14:	463b      	mov	r3, r7
 8009e16:	4632      	mov	r2, r6
 8009e18:	f7f6 fa12 	bl	8000240 <__aeabi_dsub>
 8009e1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e20:	9f08      	ldr	r7, [sp, #32]
 8009e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e26:	f7f6 fe73 	bl	8000b10 <__aeabi_d2iz>
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	f7f6 fb56 	bl	80004dc <__aeabi_i2d>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e38:	f7f6 fa02 	bl	8000240 <__aeabi_dsub>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	3430      	adds	r4, #48	; 0x30
 8009e42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e4a:	f807 4b01 	strb.w	r4, [r7], #1
 8009e4e:	f7f6 fe21 	bl	8000a94 <__aeabi_dcmplt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d174      	bne.n	8009f40 <_dtoa_r+0x648>
 8009e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	4911      	ldr	r1, [pc, #68]	; (8009ea4 <_dtoa_r+0x5ac>)
 8009e5e:	f7f6 f9ef 	bl	8000240 <__aeabi_dsub>
 8009e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e66:	f7f6 fe15 	bl	8000a94 <__aeabi_dcmplt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	f040 80b6 	bne.w	8009fdc <_dtoa_r+0x6e4>
 8009e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e72:	429f      	cmp	r7, r3
 8009e74:	f43f af7a 	beq.w	8009d6c <_dtoa_r+0x474>
 8009e78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <_dtoa_r+0x5b0>)
 8009e80:	f7f6 fb96 	bl	80005b0 <__aeabi_dmul>
 8009e84:	2200      	movs	r2, #0
 8009e86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e8e:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <_dtoa_r+0x5b0>)
 8009e90:	f7f6 fb8e 	bl	80005b0 <__aeabi_dmul>
 8009e94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e98:	e7c3      	b.n	8009e22 <_dtoa_r+0x52a>
 8009e9a:	bf00      	nop
 8009e9c:	0800d5b0 	.word	0x0800d5b0
 8009ea0:	0800d588 	.word	0x0800d588
 8009ea4:	3ff00000 	.word	0x3ff00000
 8009ea8:	40240000 	.word	0x40240000
 8009eac:	401c0000 	.word	0x401c0000
 8009eb0:	40140000 	.word	0x40140000
 8009eb4:	3fe00000 	.word	0x3fe00000
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7f6 fb78 	bl	80005b0 <__aeabi_dmul>
 8009ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ec2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ec6:	9c08      	ldr	r4, [sp, #32]
 8009ec8:	9314      	str	r3, [sp, #80]	; 0x50
 8009eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ece:	f7f6 fe1f 	bl	8000b10 <__aeabi_d2iz>
 8009ed2:	9015      	str	r0, [sp, #84]	; 0x54
 8009ed4:	f7f6 fb02 	bl	80004dc <__aeabi_i2d>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ee0:	f7f6 f9ae 	bl	8000240 <__aeabi_dsub>
 8009ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	3330      	adds	r3, #48	; 0x30
 8009eea:	f804 3b01 	strb.w	r3, [r4], #1
 8009eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	429c      	cmp	r4, r3
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	d124      	bne.n	8009f44 <_dtoa_r+0x64c>
 8009efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009efe:	4bb3      	ldr	r3, [pc, #716]	; (800a1cc <_dtoa_r+0x8d4>)
 8009f00:	f7f6 f9a0 	bl	8000244 <__adddf3>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 fde0 	bl	8000ad0 <__aeabi_dcmpgt>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d162      	bne.n	8009fda <_dtoa_r+0x6e2>
 8009f14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f18:	2000      	movs	r0, #0
 8009f1a:	49ac      	ldr	r1, [pc, #688]	; (800a1cc <_dtoa_r+0x8d4>)
 8009f1c:	f7f6 f990 	bl	8000240 <__aeabi_dsub>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fdb4 	bl	8000a94 <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f43f af1d 	beq.w	8009d6c <_dtoa_r+0x474>
 8009f32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009f34:	1e7b      	subs	r3, r7, #1
 8009f36:	9314      	str	r3, [sp, #80]	; 0x50
 8009f38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009f3c:	2b30      	cmp	r3, #48	; 0x30
 8009f3e:	d0f8      	beq.n	8009f32 <_dtoa_r+0x63a>
 8009f40:	46c1      	mov	r9, r8
 8009f42:	e03a      	b.n	8009fba <_dtoa_r+0x6c2>
 8009f44:	4ba2      	ldr	r3, [pc, #648]	; (800a1d0 <_dtoa_r+0x8d8>)
 8009f46:	f7f6 fb33 	bl	80005b0 <__aeabi_dmul>
 8009f4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f4e:	e7bc      	b.n	8009eca <_dtoa_r+0x5d2>
 8009f50:	9f08      	ldr	r7, [sp, #32]
 8009f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f5a:	f7f6 fc53 	bl	8000804 <__aeabi_ddiv>
 8009f5e:	f7f6 fdd7 	bl	8000b10 <__aeabi_d2iz>
 8009f62:	4604      	mov	r4, r0
 8009f64:	f7f6 faba 	bl	80004dc <__aeabi_i2d>
 8009f68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f6c:	f7f6 fb20 	bl	80005b0 <__aeabi_dmul>
 8009f70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009f74:	460b      	mov	r3, r1
 8009f76:	4602      	mov	r2, r0
 8009f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f7c:	f7f6 f960 	bl	8000240 <__aeabi_dsub>
 8009f80:	f807 6b01 	strb.w	r6, [r7], #1
 8009f84:	9e08      	ldr	r6, [sp, #32]
 8009f86:	9b02      	ldr	r3, [sp, #8]
 8009f88:	1bbe      	subs	r6, r7, r6
 8009f8a:	42b3      	cmp	r3, r6
 8009f8c:	d13a      	bne.n	800a004 <_dtoa_r+0x70c>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	f7f6 f957 	bl	8000244 <__adddf3>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa2:	f7f6 fd95 	bl	8000ad0 <__aeabi_dcmpgt>
 8009fa6:	bb58      	cbnz	r0, 800a000 <_dtoa_r+0x708>
 8009fa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb0:	f7f6 fd66 	bl	8000a80 <__aeabi_dcmpeq>
 8009fb4:	b108      	cbz	r0, 8009fba <_dtoa_r+0x6c2>
 8009fb6:	07e1      	lsls	r1, r4, #31
 8009fb8:	d422      	bmi.n	800a000 <_dtoa_r+0x708>
 8009fba:	4628      	mov	r0, r5
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	f000 faf1 	bl	800a5a4 <_Bfree>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	703b      	strb	r3, [r7, #0]
 8009fc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fc8:	f109 0001 	add.w	r0, r9, #1
 8009fcc:	6018      	str	r0, [r3, #0]
 8009fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f43f acdf 	beq.w	8009994 <_dtoa_r+0x9c>
 8009fd6:	601f      	str	r7, [r3, #0]
 8009fd8:	e4dc      	b.n	8009994 <_dtoa_r+0x9c>
 8009fda:	4627      	mov	r7, r4
 8009fdc:	463b      	mov	r3, r7
 8009fde:	461f      	mov	r7, r3
 8009fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fe4:	2a39      	cmp	r2, #57	; 0x39
 8009fe6:	d107      	bne.n	8009ff8 <_dtoa_r+0x700>
 8009fe8:	9a08      	ldr	r2, [sp, #32]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d1f7      	bne.n	8009fde <_dtoa_r+0x6e6>
 8009fee:	2230      	movs	r2, #48	; 0x30
 8009ff0:	9908      	ldr	r1, [sp, #32]
 8009ff2:	f108 0801 	add.w	r8, r8, #1
 8009ff6:	700a      	strb	r2, [r1, #0]
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	e79f      	b.n	8009f40 <_dtoa_r+0x648>
 800a000:	46c8      	mov	r8, r9
 800a002:	e7eb      	b.n	8009fdc <_dtoa_r+0x6e4>
 800a004:	2200      	movs	r2, #0
 800a006:	4b72      	ldr	r3, [pc, #456]	; (800a1d0 <_dtoa_r+0x8d8>)
 800a008:	f7f6 fad2 	bl	80005b0 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a014:	2200      	movs	r2, #0
 800a016:	2300      	movs	r3, #0
 800a018:	f7f6 fd32 	bl	8000a80 <__aeabi_dcmpeq>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d098      	beq.n	8009f52 <_dtoa_r+0x65a>
 800a020:	e7cb      	b.n	8009fba <_dtoa_r+0x6c2>
 800a022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a024:	2a00      	cmp	r2, #0
 800a026:	f000 80cd 	beq.w	800a1c4 <_dtoa_r+0x8cc>
 800a02a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a02c:	2a01      	cmp	r2, #1
 800a02e:	f300 80af 	bgt.w	800a190 <_dtoa_r+0x898>
 800a032:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a034:	2a00      	cmp	r2, #0
 800a036:	f000 80a7 	beq.w	800a188 <_dtoa_r+0x890>
 800a03a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a03e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a040:	9f06      	ldr	r7, [sp, #24]
 800a042:	9a06      	ldr	r2, [sp, #24]
 800a044:	2101      	movs	r1, #1
 800a046:	441a      	add	r2, r3
 800a048:	9206      	str	r2, [sp, #24]
 800a04a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a04c:	4628      	mov	r0, r5
 800a04e:	441a      	add	r2, r3
 800a050:	9209      	str	r2, [sp, #36]	; 0x24
 800a052:	f000 fb61 	bl	800a718 <__i2b>
 800a056:	4606      	mov	r6, r0
 800a058:	2f00      	cmp	r7, #0
 800a05a:	dd0c      	ble.n	800a076 <_dtoa_r+0x77e>
 800a05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	dd09      	ble.n	800a076 <_dtoa_r+0x77e>
 800a062:	42bb      	cmp	r3, r7
 800a064:	bfa8      	it	ge
 800a066:	463b      	movge	r3, r7
 800a068:	9a06      	ldr	r2, [sp, #24]
 800a06a:	1aff      	subs	r7, r7, r3
 800a06c:	1ad2      	subs	r2, r2, r3
 800a06e:	9206      	str	r2, [sp, #24]
 800a070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	9309      	str	r3, [sp, #36]	; 0x24
 800a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a078:	b1f3      	cbz	r3, 800a0b8 <_dtoa_r+0x7c0>
 800a07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80a9 	beq.w	800a1d4 <_dtoa_r+0x8dc>
 800a082:	2c00      	cmp	r4, #0
 800a084:	dd10      	ble.n	800a0a8 <_dtoa_r+0x7b0>
 800a086:	4631      	mov	r1, r6
 800a088:	4622      	mov	r2, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	f000 fbfe 	bl	800a88c <__pow5mult>
 800a090:	4652      	mov	r2, sl
 800a092:	4601      	mov	r1, r0
 800a094:	4606      	mov	r6, r0
 800a096:	4628      	mov	r0, r5
 800a098:	f000 fb54 	bl	800a744 <__multiply>
 800a09c:	4680      	mov	r8, r0
 800a09e:	4651      	mov	r1, sl
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f000 fa7f 	bl	800a5a4 <_Bfree>
 800a0a6:	46c2      	mov	sl, r8
 800a0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0aa:	1b1a      	subs	r2, r3, r4
 800a0ac:	d004      	beq.n	800a0b8 <_dtoa_r+0x7c0>
 800a0ae:	4651      	mov	r1, sl
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f000 fbeb 	bl	800a88c <__pow5mult>
 800a0b6:	4682      	mov	sl, r0
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 fb2c 	bl	800a718 <__i2b>
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f340 8087 	ble.w	800a1d8 <_dtoa_r+0x8e0>
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f000 fbdc 	bl	800a88c <__pow5mult>
 800a0d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	f340 8080 	ble.w	800a1de <_dtoa_r+0x8e6>
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0e8:	6918      	ldr	r0, [r3, #16]
 800a0ea:	f000 fac7 	bl	800a67c <__hi0bits>
 800a0ee:	f1c0 0020 	rsb	r0, r0, #32
 800a0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f4:	4418      	add	r0, r3
 800a0f6:	f010 001f 	ands.w	r0, r0, #31
 800a0fa:	f000 8092 	beq.w	800a222 <_dtoa_r+0x92a>
 800a0fe:	f1c0 0320 	rsb	r3, r0, #32
 800a102:	2b04      	cmp	r3, #4
 800a104:	f340 808a 	ble.w	800a21c <_dtoa_r+0x924>
 800a108:	f1c0 001c 	rsb	r0, r0, #28
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	4407      	add	r7, r0
 800a110:	4403      	add	r3, r0
 800a112:	9306      	str	r3, [sp, #24]
 800a114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a116:	4403      	add	r3, r0
 800a118:	9309      	str	r3, [sp, #36]	; 0x24
 800a11a:	9b06      	ldr	r3, [sp, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd05      	ble.n	800a12c <_dtoa_r+0x834>
 800a120:	4651      	mov	r1, sl
 800a122:	461a      	mov	r2, r3
 800a124:	4628      	mov	r0, r5
 800a126:	f000 fc0b 	bl	800a940 <__lshift>
 800a12a:	4682      	mov	sl, r0
 800a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dd05      	ble.n	800a13e <_dtoa_r+0x846>
 800a132:	4621      	mov	r1, r4
 800a134:	461a      	mov	r2, r3
 800a136:	4628      	mov	r0, r5
 800a138:	f000 fc02 	bl	800a940 <__lshift>
 800a13c:	4604      	mov	r4, r0
 800a13e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d070      	beq.n	800a226 <_dtoa_r+0x92e>
 800a144:	4621      	mov	r1, r4
 800a146:	4650      	mov	r0, sl
 800a148:	f000 fc66 	bl	800aa18 <__mcmp>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	da6a      	bge.n	800a226 <_dtoa_r+0x92e>
 800a150:	2300      	movs	r3, #0
 800a152:	4651      	mov	r1, sl
 800a154:	220a      	movs	r2, #10
 800a156:	4628      	mov	r0, r5
 800a158:	f000 fa46 	bl	800a5e8 <__multadd>
 800a15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a15e:	4682      	mov	sl, r0
 800a160:	f109 39ff 	add.w	r9, r9, #4294967295
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8193 	beq.w	800a490 <_dtoa_r+0xb98>
 800a16a:	4631      	mov	r1, r6
 800a16c:	2300      	movs	r3, #0
 800a16e:	220a      	movs	r2, #10
 800a170:	4628      	mov	r0, r5
 800a172:	f000 fa39 	bl	800a5e8 <__multadd>
 800a176:	f1bb 0f00 	cmp.w	fp, #0
 800a17a:	4606      	mov	r6, r0
 800a17c:	f300 8093 	bgt.w	800a2a6 <_dtoa_r+0x9ae>
 800a180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a182:	2b02      	cmp	r3, #2
 800a184:	dc57      	bgt.n	800a236 <_dtoa_r+0x93e>
 800a186:	e08e      	b.n	800a2a6 <_dtoa_r+0x9ae>
 800a188:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a18a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a18e:	e756      	b.n	800a03e <_dtoa_r+0x746>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	1e5c      	subs	r4, r3, #1
 800a194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a196:	42a3      	cmp	r3, r4
 800a198:	bfb7      	itett	lt
 800a19a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a19c:	1b1c      	subge	r4, r3, r4
 800a19e:	1ae2      	sublt	r2, r4, r3
 800a1a0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a1a2:	bfbe      	ittt	lt
 800a1a4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a1a6:	189b      	addlt	r3, r3, r2
 800a1a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a1aa:	9b02      	ldr	r3, [sp, #8]
 800a1ac:	bfb8      	it	lt
 800a1ae:	2400      	movlt	r4, #0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bfbb      	ittet	lt
 800a1b4:	9b06      	ldrlt	r3, [sp, #24]
 800a1b6:	9a02      	ldrlt	r2, [sp, #8]
 800a1b8:	9f06      	ldrge	r7, [sp, #24]
 800a1ba:	1a9f      	sublt	r7, r3, r2
 800a1bc:	bfac      	ite	ge
 800a1be:	9b02      	ldrge	r3, [sp, #8]
 800a1c0:	2300      	movlt	r3, #0
 800a1c2:	e73e      	b.n	800a042 <_dtoa_r+0x74a>
 800a1c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1c6:	9f06      	ldr	r7, [sp, #24]
 800a1c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a1ca:	e745      	b.n	800a058 <_dtoa_r+0x760>
 800a1cc:	3fe00000 	.word	0x3fe00000
 800a1d0:	40240000 	.word	0x40240000
 800a1d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1d6:	e76a      	b.n	800a0ae <_dtoa_r+0x7b6>
 800a1d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	dc19      	bgt.n	800a212 <_dtoa_r+0x91a>
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	b9bb      	cbnz	r3, 800a212 <_dtoa_r+0x91a>
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1e8:	b99b      	cbnz	r3, 800a212 <_dtoa_r+0x91a>
 800a1ea:	9b05      	ldr	r3, [sp, #20]
 800a1ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1f0:	0d1b      	lsrs	r3, r3, #20
 800a1f2:	051b      	lsls	r3, r3, #20
 800a1f4:	b183      	cbz	r3, 800a218 <_dtoa_r+0x920>
 800a1f6:	f04f 0801 	mov.w	r8, #1
 800a1fa:	9b06      	ldr	r3, [sp, #24]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	9306      	str	r3, [sp, #24]
 800a200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a202:	3301      	adds	r3, #1
 800a204:	9309      	str	r3, [sp, #36]	; 0x24
 800a206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f47f af6a 	bne.w	800a0e2 <_dtoa_r+0x7ea>
 800a20e:	2001      	movs	r0, #1
 800a210:	e76f      	b.n	800a0f2 <_dtoa_r+0x7fa>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	e7f6      	b.n	800a206 <_dtoa_r+0x90e>
 800a218:	4698      	mov	r8, r3
 800a21a:	e7f4      	b.n	800a206 <_dtoa_r+0x90e>
 800a21c:	f43f af7d 	beq.w	800a11a <_dtoa_r+0x822>
 800a220:	4618      	mov	r0, r3
 800a222:	301c      	adds	r0, #28
 800a224:	e772      	b.n	800a10c <_dtoa_r+0x814>
 800a226:	9b02      	ldr	r3, [sp, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc36      	bgt.n	800a29a <_dtoa_r+0x9a2>
 800a22c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dd33      	ble.n	800a29a <_dtoa_r+0x9a2>
 800a232:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a236:	f1bb 0f00 	cmp.w	fp, #0
 800a23a:	d10d      	bne.n	800a258 <_dtoa_r+0x960>
 800a23c:	4621      	mov	r1, r4
 800a23e:	465b      	mov	r3, fp
 800a240:	2205      	movs	r2, #5
 800a242:	4628      	mov	r0, r5
 800a244:	f000 f9d0 	bl	800a5e8 <__multadd>
 800a248:	4601      	mov	r1, r0
 800a24a:	4604      	mov	r4, r0
 800a24c:	4650      	mov	r0, sl
 800a24e:	f000 fbe3 	bl	800aa18 <__mcmp>
 800a252:	2800      	cmp	r0, #0
 800a254:	f73f adb6 	bgt.w	8009dc4 <_dtoa_r+0x4cc>
 800a258:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a25a:	9f08      	ldr	r7, [sp, #32]
 800a25c:	ea6f 0903 	mvn.w	r9, r3
 800a260:	f04f 0800 	mov.w	r8, #0
 800a264:	4621      	mov	r1, r4
 800a266:	4628      	mov	r0, r5
 800a268:	f000 f99c 	bl	800a5a4 <_Bfree>
 800a26c:	2e00      	cmp	r6, #0
 800a26e:	f43f aea4 	beq.w	8009fba <_dtoa_r+0x6c2>
 800a272:	f1b8 0f00 	cmp.w	r8, #0
 800a276:	d005      	beq.n	800a284 <_dtoa_r+0x98c>
 800a278:	45b0      	cmp	r8, r6
 800a27a:	d003      	beq.n	800a284 <_dtoa_r+0x98c>
 800a27c:	4641      	mov	r1, r8
 800a27e:	4628      	mov	r0, r5
 800a280:	f000 f990 	bl	800a5a4 <_Bfree>
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f98c 	bl	800a5a4 <_Bfree>
 800a28c:	e695      	b.n	8009fba <_dtoa_r+0x6c2>
 800a28e:	2400      	movs	r4, #0
 800a290:	4626      	mov	r6, r4
 800a292:	e7e1      	b.n	800a258 <_dtoa_r+0x960>
 800a294:	46c1      	mov	r9, r8
 800a296:	4626      	mov	r6, r4
 800a298:	e594      	b.n	8009dc4 <_dtoa_r+0x4cc>
 800a29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80fc 	beq.w	800a49e <_dtoa_r+0xba6>
 800a2a6:	2f00      	cmp	r7, #0
 800a2a8:	dd05      	ble.n	800a2b6 <_dtoa_r+0x9be>
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	463a      	mov	r2, r7
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 fb46 	bl	800a940 <__lshift>
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	d05c      	beq.n	800a376 <_dtoa_r+0xa7e>
 800a2bc:	4628      	mov	r0, r5
 800a2be:	6871      	ldr	r1, [r6, #4]
 800a2c0:	f000 f930 	bl	800a524 <_Balloc>
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	b928      	cbnz	r0, 800a2d4 <_dtoa_r+0x9dc>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2ce:	4b7e      	ldr	r3, [pc, #504]	; (800a4c8 <_dtoa_r+0xbd0>)
 800a2d0:	f7ff bb26 	b.w	8009920 <_dtoa_r+0x28>
 800a2d4:	6932      	ldr	r2, [r6, #16]
 800a2d6:	f106 010c 	add.w	r1, r6, #12
 800a2da:	3202      	adds	r2, #2
 800a2dc:	0092      	lsls	r2, r2, #2
 800a2de:	300c      	adds	r0, #12
 800a2e0:	f000 f912 	bl	800a508 <memcpy>
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f000 fb29 	bl	800a940 <__lshift>
 800a2ee:	46b0      	mov	r8, r6
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	9302      	str	r3, [sp, #8]
 800a2f8:	9b08      	ldr	r3, [sp, #32]
 800a2fa:	445b      	add	r3, fp
 800a2fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a2fe:	9b04      	ldr	r3, [sp, #16]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	9309      	str	r3, [sp, #36]	; 0x24
 800a306:	9b02      	ldr	r3, [sp, #8]
 800a308:	4621      	mov	r1, r4
 800a30a:	4650      	mov	r0, sl
 800a30c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a310:	f7ff fa62 	bl	80097d8 <quorem>
 800a314:	4603      	mov	r3, r0
 800a316:	4641      	mov	r1, r8
 800a318:	3330      	adds	r3, #48	; 0x30
 800a31a:	9004      	str	r0, [sp, #16]
 800a31c:	4650      	mov	r0, sl
 800a31e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a320:	f000 fb7a 	bl	800aa18 <__mcmp>
 800a324:	4632      	mov	r2, r6
 800a326:	9006      	str	r0, [sp, #24]
 800a328:	4621      	mov	r1, r4
 800a32a:	4628      	mov	r0, r5
 800a32c:	f000 fb90 	bl	800aa50 <__mdiff>
 800a330:	68c2      	ldr	r2, [r0, #12]
 800a332:	4607      	mov	r7, r0
 800a334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a336:	bb02      	cbnz	r2, 800a37a <_dtoa_r+0xa82>
 800a338:	4601      	mov	r1, r0
 800a33a:	4650      	mov	r0, sl
 800a33c:	f000 fb6c 	bl	800aa18 <__mcmp>
 800a340:	4602      	mov	r2, r0
 800a342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a344:	4639      	mov	r1, r7
 800a346:	4628      	mov	r0, r5
 800a348:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a34c:	f000 f92a 	bl	800a5a4 <_Bfree>
 800a350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a354:	9f02      	ldr	r7, [sp, #8]
 800a356:	ea43 0102 	orr.w	r1, r3, r2
 800a35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35c:	430b      	orrs	r3, r1
 800a35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a360:	d10d      	bne.n	800a37e <_dtoa_r+0xa86>
 800a362:	2b39      	cmp	r3, #57	; 0x39
 800a364:	d027      	beq.n	800a3b6 <_dtoa_r+0xabe>
 800a366:	9a06      	ldr	r2, [sp, #24]
 800a368:	2a00      	cmp	r2, #0
 800a36a:	dd01      	ble.n	800a370 <_dtoa_r+0xa78>
 800a36c:	9b04      	ldr	r3, [sp, #16]
 800a36e:	3331      	adds	r3, #49	; 0x31
 800a370:	f88b 3000 	strb.w	r3, [fp]
 800a374:	e776      	b.n	800a264 <_dtoa_r+0x96c>
 800a376:	4630      	mov	r0, r6
 800a378:	e7b9      	b.n	800a2ee <_dtoa_r+0x9f6>
 800a37a:	2201      	movs	r2, #1
 800a37c:	e7e2      	b.n	800a344 <_dtoa_r+0xa4c>
 800a37e:	9906      	ldr	r1, [sp, #24]
 800a380:	2900      	cmp	r1, #0
 800a382:	db04      	blt.n	800a38e <_dtoa_r+0xa96>
 800a384:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a386:	4301      	orrs	r1, r0
 800a388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a38a:	4301      	orrs	r1, r0
 800a38c:	d120      	bne.n	800a3d0 <_dtoa_r+0xad8>
 800a38e:	2a00      	cmp	r2, #0
 800a390:	ddee      	ble.n	800a370 <_dtoa_r+0xa78>
 800a392:	4651      	mov	r1, sl
 800a394:	2201      	movs	r2, #1
 800a396:	4628      	mov	r0, r5
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	f000 fad1 	bl	800a940 <__lshift>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	f000 fb39 	bl	800aa18 <__mcmp>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	dc02      	bgt.n	800a3b2 <_dtoa_r+0xaba>
 800a3ac:	d1e0      	bne.n	800a370 <_dtoa_r+0xa78>
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d5de      	bpl.n	800a370 <_dtoa_r+0xa78>
 800a3b2:	2b39      	cmp	r3, #57	; 0x39
 800a3b4:	d1da      	bne.n	800a36c <_dtoa_r+0xa74>
 800a3b6:	2339      	movs	r3, #57	; 0x39
 800a3b8:	f88b 3000 	strb.w	r3, [fp]
 800a3bc:	463b      	mov	r3, r7
 800a3be:	461f      	mov	r7, r3
 800a3c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	2a39      	cmp	r2, #57	; 0x39
 800a3c8:	d050      	beq.n	800a46c <_dtoa_r+0xb74>
 800a3ca:	3201      	adds	r2, #1
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	e749      	b.n	800a264 <_dtoa_r+0x96c>
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	dd03      	ble.n	800a3dc <_dtoa_r+0xae4>
 800a3d4:	2b39      	cmp	r3, #57	; 0x39
 800a3d6:	d0ee      	beq.n	800a3b6 <_dtoa_r+0xabe>
 800a3d8:	3301      	adds	r3, #1
 800a3da:	e7c9      	b.n	800a370 <_dtoa_r+0xa78>
 800a3dc:	9a02      	ldr	r2, [sp, #8]
 800a3de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a3e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	d02a      	beq.n	800a43e <_dtoa_r+0xb46>
 800a3e8:	4651      	mov	r1, sl
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	220a      	movs	r2, #10
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 f8fa 	bl	800a5e8 <__multadd>
 800a3f4:	45b0      	cmp	r8, r6
 800a3f6:	4682      	mov	sl, r0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	f04f 020a 	mov.w	r2, #10
 800a400:	4641      	mov	r1, r8
 800a402:	4628      	mov	r0, r5
 800a404:	d107      	bne.n	800a416 <_dtoa_r+0xb1e>
 800a406:	f000 f8ef 	bl	800a5e8 <__multadd>
 800a40a:	4680      	mov	r8, r0
 800a40c:	4606      	mov	r6, r0
 800a40e:	9b02      	ldr	r3, [sp, #8]
 800a410:	3301      	adds	r3, #1
 800a412:	9302      	str	r3, [sp, #8]
 800a414:	e777      	b.n	800a306 <_dtoa_r+0xa0e>
 800a416:	f000 f8e7 	bl	800a5e8 <__multadd>
 800a41a:	4631      	mov	r1, r6
 800a41c:	4680      	mov	r8, r0
 800a41e:	2300      	movs	r3, #0
 800a420:	220a      	movs	r2, #10
 800a422:	4628      	mov	r0, r5
 800a424:	f000 f8e0 	bl	800a5e8 <__multadd>
 800a428:	4606      	mov	r6, r0
 800a42a:	e7f0      	b.n	800a40e <_dtoa_r+0xb16>
 800a42c:	f1bb 0f00 	cmp.w	fp, #0
 800a430:	bfcc      	ite	gt
 800a432:	465f      	movgt	r7, fp
 800a434:	2701      	movle	r7, #1
 800a436:	f04f 0800 	mov.w	r8, #0
 800a43a:	9a08      	ldr	r2, [sp, #32]
 800a43c:	4417      	add	r7, r2
 800a43e:	4651      	mov	r1, sl
 800a440:	2201      	movs	r2, #1
 800a442:	4628      	mov	r0, r5
 800a444:	9302      	str	r3, [sp, #8]
 800a446:	f000 fa7b 	bl	800a940 <__lshift>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4682      	mov	sl, r0
 800a44e:	f000 fae3 	bl	800aa18 <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	dcb2      	bgt.n	800a3bc <_dtoa_r+0xac4>
 800a456:	d102      	bne.n	800a45e <_dtoa_r+0xb66>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	07db      	lsls	r3, r3, #31
 800a45c:	d4ae      	bmi.n	800a3bc <_dtoa_r+0xac4>
 800a45e:	463b      	mov	r3, r7
 800a460:	461f      	mov	r7, r3
 800a462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a466:	2a30      	cmp	r2, #48	; 0x30
 800a468:	d0fa      	beq.n	800a460 <_dtoa_r+0xb68>
 800a46a:	e6fb      	b.n	800a264 <_dtoa_r+0x96c>
 800a46c:	9a08      	ldr	r2, [sp, #32]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d1a5      	bne.n	800a3be <_dtoa_r+0xac6>
 800a472:	2331      	movs	r3, #49	; 0x31
 800a474:	f109 0901 	add.w	r9, r9, #1
 800a478:	7013      	strb	r3, [r2, #0]
 800a47a:	e6f3      	b.n	800a264 <_dtoa_r+0x96c>
 800a47c:	4b13      	ldr	r3, [pc, #76]	; (800a4cc <_dtoa_r+0xbd4>)
 800a47e:	f7ff baa7 	b.w	80099d0 <_dtoa_r+0xd8>
 800a482:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a484:	2b00      	cmp	r3, #0
 800a486:	f47f aa80 	bne.w	800998a <_dtoa_r+0x92>
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <_dtoa_r+0xbd8>)
 800a48c:	f7ff baa0 	b.w	80099d0 <_dtoa_r+0xd8>
 800a490:	f1bb 0f00 	cmp.w	fp, #0
 800a494:	dc03      	bgt.n	800a49e <_dtoa_r+0xba6>
 800a496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a498:	2b02      	cmp	r3, #2
 800a49a:	f73f aecc 	bgt.w	800a236 <_dtoa_r+0x93e>
 800a49e:	9f08      	ldr	r7, [sp, #32]
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f7ff f998 	bl	80097d8 <quorem>
 800a4a8:	9a08      	ldr	r2, [sp, #32]
 800a4aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4ae:	f807 3b01 	strb.w	r3, [r7], #1
 800a4b2:	1aba      	subs	r2, r7, r2
 800a4b4:	4593      	cmp	fp, r2
 800a4b6:	ddb9      	ble.n	800a42c <_dtoa_r+0xb34>
 800a4b8:	4651      	mov	r1, sl
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	220a      	movs	r2, #10
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 f892 	bl	800a5e8 <__multadd>
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	e7eb      	b.n	800a4a0 <_dtoa_r+0xba8>
 800a4c8:	0800d513 	.word	0x0800d513
 800a4cc:	0800d46c 	.word	0x0800d46c
 800a4d0:	0800d490 	.word	0x0800d490

0800a4d4 <_localeconv_r>:
 800a4d4:	4800      	ldr	r0, [pc, #0]	; (800a4d8 <_localeconv_r+0x4>)
 800a4d6:	4770      	bx	lr
 800a4d8:	20000164 	.word	0x20000164

0800a4dc <malloc>:
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <malloc+0xc>)
 800a4de:	4601      	mov	r1, r0
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f000 bbfb 	b.w	800acdc <_malloc_r>
 800a4e6:	bf00      	nop
 800a4e8:	20000010 	.word	0x20000010

0800a4ec <memchr>:
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	b2c9      	uxtb	r1, r1
 800a4f2:	4402      	add	r2, r0
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	d101      	bne.n	800a4fe <memchr+0x12>
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	e003      	b.n	800a506 <memchr+0x1a>
 800a4fe:	7804      	ldrb	r4, [r0, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	428c      	cmp	r4, r1
 800a504:	d1f6      	bne.n	800a4f4 <memchr+0x8>
 800a506:	bd10      	pop	{r4, pc}

0800a508 <memcpy>:
 800a508:	440a      	add	r2, r1
 800a50a:	4291      	cmp	r1, r2
 800a50c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a510:	d100      	bne.n	800a514 <memcpy+0xc>
 800a512:	4770      	bx	lr
 800a514:	b510      	push	{r4, lr}
 800a516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a51a:	4291      	cmp	r1, r2
 800a51c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a520:	d1f9      	bne.n	800a516 <memcpy+0xe>
 800a522:	bd10      	pop	{r4, pc}

0800a524 <_Balloc>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a528:	4604      	mov	r4, r0
 800a52a:	460d      	mov	r5, r1
 800a52c:	b976      	cbnz	r6, 800a54c <_Balloc+0x28>
 800a52e:	2010      	movs	r0, #16
 800a530:	f7ff ffd4 	bl	800a4dc <malloc>
 800a534:	4602      	mov	r2, r0
 800a536:	6260      	str	r0, [r4, #36]	; 0x24
 800a538:	b920      	cbnz	r0, 800a544 <_Balloc+0x20>
 800a53a:	2166      	movs	r1, #102	; 0x66
 800a53c:	4b17      	ldr	r3, [pc, #92]	; (800a59c <_Balloc+0x78>)
 800a53e:	4818      	ldr	r0, [pc, #96]	; (800a5a0 <_Balloc+0x7c>)
 800a540:	f000 fd92 	bl	800b068 <__assert_func>
 800a544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a548:	6006      	str	r6, [r0, #0]
 800a54a:	60c6      	str	r6, [r0, #12]
 800a54c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a54e:	68f3      	ldr	r3, [r6, #12]
 800a550:	b183      	cbz	r3, 800a574 <_Balloc+0x50>
 800a552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a55a:	b9b8      	cbnz	r0, 800a58c <_Balloc+0x68>
 800a55c:	2101      	movs	r1, #1
 800a55e:	fa01 f605 	lsl.w	r6, r1, r5
 800a562:	1d72      	adds	r2, r6, #5
 800a564:	4620      	mov	r0, r4
 800a566:	0092      	lsls	r2, r2, #2
 800a568:	f000 fb5e 	bl	800ac28 <_calloc_r>
 800a56c:	b160      	cbz	r0, 800a588 <_Balloc+0x64>
 800a56e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a572:	e00e      	b.n	800a592 <_Balloc+0x6e>
 800a574:	2221      	movs	r2, #33	; 0x21
 800a576:	2104      	movs	r1, #4
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fb55 	bl	800ac28 <_calloc_r>
 800a57e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a580:	60f0      	str	r0, [r6, #12]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1e4      	bne.n	800a552 <_Balloc+0x2e>
 800a588:	2000      	movs	r0, #0
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
 800a58c:	6802      	ldr	r2, [r0, #0]
 800a58e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a592:	2300      	movs	r3, #0
 800a594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a598:	e7f7      	b.n	800a58a <_Balloc+0x66>
 800a59a:	bf00      	nop
 800a59c:	0800d49d 	.word	0x0800d49d
 800a5a0:	0800d524 	.word	0x0800d524

0800a5a4 <_Bfree>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	b976      	cbnz	r6, 800a5cc <_Bfree+0x28>
 800a5ae:	2010      	movs	r0, #16
 800a5b0:	f7ff ff94 	bl	800a4dc <malloc>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6268      	str	r0, [r5, #36]	; 0x24
 800a5b8:	b920      	cbnz	r0, 800a5c4 <_Bfree+0x20>
 800a5ba:	218a      	movs	r1, #138	; 0x8a
 800a5bc:	4b08      	ldr	r3, [pc, #32]	; (800a5e0 <_Bfree+0x3c>)
 800a5be:	4809      	ldr	r0, [pc, #36]	; (800a5e4 <_Bfree+0x40>)
 800a5c0:	f000 fd52 	bl	800b068 <__assert_func>
 800a5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5c8:	6006      	str	r6, [r0, #0]
 800a5ca:	60c6      	str	r6, [r0, #12]
 800a5cc:	b13c      	cbz	r4, 800a5de <_Bfree+0x3a>
 800a5ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5d0:	6862      	ldr	r2, [r4, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5d8:	6021      	str	r1, [r4, #0]
 800a5da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	0800d49d 	.word	0x0800d49d
 800a5e4:	0800d524 	.word	0x0800d524

0800a5e8 <__multadd>:
 800a5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ec:	4698      	mov	r8, r3
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	690e      	ldr	r6, [r1, #16]
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	f101 0014 	add.w	r0, r1, #20
 800a5fa:	6805      	ldr	r5, [r0, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	b2a9      	uxth	r1, r5
 800a600:	fb02 8101 	mla	r1, r2, r1, r8
 800a604:	0c2d      	lsrs	r5, r5, #16
 800a606:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a60a:	fb02 c505 	mla	r5, r2, r5, ip
 800a60e:	b289      	uxth	r1, r1
 800a610:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a614:	429e      	cmp	r6, r3
 800a616:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a61a:	f840 1b04 	str.w	r1, [r0], #4
 800a61e:	dcec      	bgt.n	800a5fa <__multadd+0x12>
 800a620:	f1b8 0f00 	cmp.w	r8, #0
 800a624:	d022      	beq.n	800a66c <__multadd+0x84>
 800a626:	68a3      	ldr	r3, [r4, #8]
 800a628:	42b3      	cmp	r3, r6
 800a62a:	dc19      	bgt.n	800a660 <__multadd+0x78>
 800a62c:	6861      	ldr	r1, [r4, #4]
 800a62e:	4638      	mov	r0, r7
 800a630:	3101      	adds	r1, #1
 800a632:	f7ff ff77 	bl	800a524 <_Balloc>
 800a636:	4605      	mov	r5, r0
 800a638:	b928      	cbnz	r0, 800a646 <__multadd+0x5e>
 800a63a:	4602      	mov	r2, r0
 800a63c:	21b5      	movs	r1, #181	; 0xb5
 800a63e:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <__multadd+0x8c>)
 800a640:	480d      	ldr	r0, [pc, #52]	; (800a678 <__multadd+0x90>)
 800a642:	f000 fd11 	bl	800b068 <__assert_func>
 800a646:	6922      	ldr	r2, [r4, #16]
 800a648:	f104 010c 	add.w	r1, r4, #12
 800a64c:	3202      	adds	r2, #2
 800a64e:	0092      	lsls	r2, r2, #2
 800a650:	300c      	adds	r0, #12
 800a652:	f7ff ff59 	bl	800a508 <memcpy>
 800a656:	4621      	mov	r1, r4
 800a658:	4638      	mov	r0, r7
 800a65a:	f7ff ffa3 	bl	800a5a4 <_Bfree>
 800a65e:	462c      	mov	r4, r5
 800a660:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a664:	3601      	adds	r6, #1
 800a666:	f8c3 8014 	str.w	r8, [r3, #20]
 800a66a:	6126      	str	r6, [r4, #16]
 800a66c:	4620      	mov	r0, r4
 800a66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a672:	bf00      	nop
 800a674:	0800d513 	.word	0x0800d513
 800a678:	0800d524 	.word	0x0800d524

0800a67c <__hi0bits>:
 800a67c:	0c02      	lsrs	r2, r0, #16
 800a67e:	0412      	lsls	r2, r2, #16
 800a680:	4603      	mov	r3, r0
 800a682:	b9ca      	cbnz	r2, 800a6b8 <__hi0bits+0x3c>
 800a684:	0403      	lsls	r3, r0, #16
 800a686:	2010      	movs	r0, #16
 800a688:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a68c:	bf04      	itt	eq
 800a68e:	021b      	lsleq	r3, r3, #8
 800a690:	3008      	addeq	r0, #8
 800a692:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a696:	bf04      	itt	eq
 800a698:	011b      	lsleq	r3, r3, #4
 800a69a:	3004      	addeq	r0, #4
 800a69c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a6a0:	bf04      	itt	eq
 800a6a2:	009b      	lsleq	r3, r3, #2
 800a6a4:	3002      	addeq	r0, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	db05      	blt.n	800a6b6 <__hi0bits+0x3a>
 800a6aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a6ae:	f100 0001 	add.w	r0, r0, #1
 800a6b2:	bf08      	it	eq
 800a6b4:	2020      	moveq	r0, #32
 800a6b6:	4770      	bx	lr
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	e7e5      	b.n	800a688 <__hi0bits+0xc>

0800a6bc <__lo0bits>:
 800a6bc:	6803      	ldr	r3, [r0, #0]
 800a6be:	4602      	mov	r2, r0
 800a6c0:	f013 0007 	ands.w	r0, r3, #7
 800a6c4:	d00b      	beq.n	800a6de <__lo0bits+0x22>
 800a6c6:	07d9      	lsls	r1, r3, #31
 800a6c8:	d422      	bmi.n	800a710 <__lo0bits+0x54>
 800a6ca:	0798      	lsls	r0, r3, #30
 800a6cc:	bf49      	itett	mi
 800a6ce:	085b      	lsrmi	r3, r3, #1
 800a6d0:	089b      	lsrpl	r3, r3, #2
 800a6d2:	2001      	movmi	r0, #1
 800a6d4:	6013      	strmi	r3, [r2, #0]
 800a6d6:	bf5c      	itt	pl
 800a6d8:	2002      	movpl	r0, #2
 800a6da:	6013      	strpl	r3, [r2, #0]
 800a6dc:	4770      	bx	lr
 800a6de:	b299      	uxth	r1, r3
 800a6e0:	b909      	cbnz	r1, 800a6e6 <__lo0bits+0x2a>
 800a6e2:	2010      	movs	r0, #16
 800a6e4:	0c1b      	lsrs	r3, r3, #16
 800a6e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a6ea:	bf04      	itt	eq
 800a6ec:	0a1b      	lsreq	r3, r3, #8
 800a6ee:	3008      	addeq	r0, #8
 800a6f0:	0719      	lsls	r1, r3, #28
 800a6f2:	bf04      	itt	eq
 800a6f4:	091b      	lsreq	r3, r3, #4
 800a6f6:	3004      	addeq	r0, #4
 800a6f8:	0799      	lsls	r1, r3, #30
 800a6fa:	bf04      	itt	eq
 800a6fc:	089b      	lsreq	r3, r3, #2
 800a6fe:	3002      	addeq	r0, #2
 800a700:	07d9      	lsls	r1, r3, #31
 800a702:	d403      	bmi.n	800a70c <__lo0bits+0x50>
 800a704:	085b      	lsrs	r3, r3, #1
 800a706:	f100 0001 	add.w	r0, r0, #1
 800a70a:	d003      	beq.n	800a714 <__lo0bits+0x58>
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	4770      	bx	lr
 800a710:	2000      	movs	r0, #0
 800a712:	4770      	bx	lr
 800a714:	2020      	movs	r0, #32
 800a716:	4770      	bx	lr

0800a718 <__i2b>:
 800a718:	b510      	push	{r4, lr}
 800a71a:	460c      	mov	r4, r1
 800a71c:	2101      	movs	r1, #1
 800a71e:	f7ff ff01 	bl	800a524 <_Balloc>
 800a722:	4602      	mov	r2, r0
 800a724:	b928      	cbnz	r0, 800a732 <__i2b+0x1a>
 800a726:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a72a:	4b04      	ldr	r3, [pc, #16]	; (800a73c <__i2b+0x24>)
 800a72c:	4804      	ldr	r0, [pc, #16]	; (800a740 <__i2b+0x28>)
 800a72e:	f000 fc9b 	bl	800b068 <__assert_func>
 800a732:	2301      	movs	r3, #1
 800a734:	6144      	str	r4, [r0, #20]
 800a736:	6103      	str	r3, [r0, #16]
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	0800d513 	.word	0x0800d513
 800a740:	0800d524 	.word	0x0800d524

0800a744 <__multiply>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	4614      	mov	r4, r2
 800a74a:	690a      	ldr	r2, [r1, #16]
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	460d      	mov	r5, r1
 800a750:	429a      	cmp	r2, r3
 800a752:	bfbe      	ittt	lt
 800a754:	460b      	movlt	r3, r1
 800a756:	4625      	movlt	r5, r4
 800a758:	461c      	movlt	r4, r3
 800a75a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a75e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a762:	68ab      	ldr	r3, [r5, #8]
 800a764:	6869      	ldr	r1, [r5, #4]
 800a766:	eb0a 0709 	add.w	r7, sl, r9
 800a76a:	42bb      	cmp	r3, r7
 800a76c:	b085      	sub	sp, #20
 800a76e:	bfb8      	it	lt
 800a770:	3101      	addlt	r1, #1
 800a772:	f7ff fed7 	bl	800a524 <_Balloc>
 800a776:	b930      	cbnz	r0, 800a786 <__multiply+0x42>
 800a778:	4602      	mov	r2, r0
 800a77a:	f240 115d 	movw	r1, #349	; 0x15d
 800a77e:	4b41      	ldr	r3, [pc, #260]	; (800a884 <__multiply+0x140>)
 800a780:	4841      	ldr	r0, [pc, #260]	; (800a888 <__multiply+0x144>)
 800a782:	f000 fc71 	bl	800b068 <__assert_func>
 800a786:	f100 0614 	add.w	r6, r0, #20
 800a78a:	4633      	mov	r3, r6
 800a78c:	2200      	movs	r2, #0
 800a78e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a792:	4543      	cmp	r3, r8
 800a794:	d31e      	bcc.n	800a7d4 <__multiply+0x90>
 800a796:	f105 0c14 	add.w	ip, r5, #20
 800a79a:	f104 0314 	add.w	r3, r4, #20
 800a79e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a7a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a7a6:	9202      	str	r2, [sp, #8]
 800a7a8:	ebac 0205 	sub.w	r2, ip, r5
 800a7ac:	3a15      	subs	r2, #21
 800a7ae:	f022 0203 	bic.w	r2, r2, #3
 800a7b2:	3204      	adds	r2, #4
 800a7b4:	f105 0115 	add.w	r1, r5, #21
 800a7b8:	458c      	cmp	ip, r1
 800a7ba:	bf38      	it	cc
 800a7bc:	2204      	movcc	r2, #4
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	9a02      	ldr	r2, [sp, #8]
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d808      	bhi.n	800a7da <__multiply+0x96>
 800a7c8:	2f00      	cmp	r7, #0
 800a7ca:	dc55      	bgt.n	800a878 <__multiply+0x134>
 800a7cc:	6107      	str	r7, [r0, #16]
 800a7ce:	b005      	add	sp, #20
 800a7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d4:	f843 2b04 	str.w	r2, [r3], #4
 800a7d8:	e7db      	b.n	800a792 <__multiply+0x4e>
 800a7da:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7de:	f1ba 0f00 	cmp.w	sl, #0
 800a7e2:	d020      	beq.n	800a826 <__multiply+0xe2>
 800a7e4:	46b1      	mov	r9, r6
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f105 0e14 	add.w	lr, r5, #20
 800a7ec:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a7f0:	f8d9 b000 	ldr.w	fp, [r9]
 800a7f4:	b2a1      	uxth	r1, r4
 800a7f6:	fa1f fb8b 	uxth.w	fp, fp
 800a7fa:	fb0a b101 	mla	r1, sl, r1, fp
 800a7fe:	4411      	add	r1, r2
 800a800:	f8d9 2000 	ldr.w	r2, [r9]
 800a804:	0c24      	lsrs	r4, r4, #16
 800a806:	0c12      	lsrs	r2, r2, #16
 800a808:	fb0a 2404 	mla	r4, sl, r4, r2
 800a80c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a810:	b289      	uxth	r1, r1
 800a812:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a816:	45f4      	cmp	ip, lr
 800a818:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a81c:	f849 1b04 	str.w	r1, [r9], #4
 800a820:	d8e4      	bhi.n	800a7ec <__multiply+0xa8>
 800a822:	9901      	ldr	r1, [sp, #4]
 800a824:	5072      	str	r2, [r6, r1]
 800a826:	9a03      	ldr	r2, [sp, #12]
 800a828:	3304      	adds	r3, #4
 800a82a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a82e:	f1b9 0f00 	cmp.w	r9, #0
 800a832:	d01f      	beq.n	800a874 <__multiply+0x130>
 800a834:	46b6      	mov	lr, r6
 800a836:	f04f 0a00 	mov.w	sl, #0
 800a83a:	6834      	ldr	r4, [r6, #0]
 800a83c:	f105 0114 	add.w	r1, r5, #20
 800a840:	880a      	ldrh	r2, [r1, #0]
 800a842:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a846:	b2a4      	uxth	r4, r4
 800a848:	fb09 b202 	mla	r2, r9, r2, fp
 800a84c:	4492      	add	sl, r2
 800a84e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a852:	f84e 4b04 	str.w	r4, [lr], #4
 800a856:	f851 4b04 	ldr.w	r4, [r1], #4
 800a85a:	f8be 2000 	ldrh.w	r2, [lr]
 800a85e:	0c24      	lsrs	r4, r4, #16
 800a860:	fb09 2404 	mla	r4, r9, r4, r2
 800a864:	458c      	cmp	ip, r1
 800a866:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a86a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a86e:	d8e7      	bhi.n	800a840 <__multiply+0xfc>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	50b4      	str	r4, [r6, r2]
 800a874:	3604      	adds	r6, #4
 800a876:	e7a3      	b.n	800a7c0 <__multiply+0x7c>
 800a878:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1a5      	bne.n	800a7cc <__multiply+0x88>
 800a880:	3f01      	subs	r7, #1
 800a882:	e7a1      	b.n	800a7c8 <__multiply+0x84>
 800a884:	0800d513 	.word	0x0800d513
 800a888:	0800d524 	.word	0x0800d524

0800a88c <__pow5mult>:
 800a88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a890:	4615      	mov	r5, r2
 800a892:	f012 0203 	ands.w	r2, r2, #3
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	d007      	beq.n	800a8ac <__pow5mult+0x20>
 800a89c:	4c25      	ldr	r4, [pc, #148]	; (800a934 <__pow5mult+0xa8>)
 800a89e:	3a01      	subs	r2, #1
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8a6:	f7ff fe9f 	bl	800a5e8 <__multadd>
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	10ad      	asrs	r5, r5, #2
 800a8ae:	d03d      	beq.n	800a92c <__pow5mult+0xa0>
 800a8b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8b2:	b97c      	cbnz	r4, 800a8d4 <__pow5mult+0x48>
 800a8b4:	2010      	movs	r0, #16
 800a8b6:	f7ff fe11 	bl	800a4dc <malloc>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	6270      	str	r0, [r6, #36]	; 0x24
 800a8be:	b928      	cbnz	r0, 800a8cc <__pow5mult+0x40>
 800a8c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8c4:	4b1c      	ldr	r3, [pc, #112]	; (800a938 <__pow5mult+0xac>)
 800a8c6:	481d      	ldr	r0, [pc, #116]	; (800a93c <__pow5mult+0xb0>)
 800a8c8:	f000 fbce 	bl	800b068 <__assert_func>
 800a8cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8d0:	6004      	str	r4, [r0, #0]
 800a8d2:	60c4      	str	r4, [r0, #12]
 800a8d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a8d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8dc:	b94c      	cbnz	r4, 800a8f2 <__pow5mult+0x66>
 800a8de:	f240 2171 	movw	r1, #625	; 0x271
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7ff ff18 	bl	800a718 <__i2b>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8f0:	6003      	str	r3, [r0, #0]
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	07eb      	lsls	r3, r5, #31
 800a8f8:	d50a      	bpl.n	800a910 <__pow5mult+0x84>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4630      	mov	r0, r6
 800a900:	f7ff ff20 	bl	800a744 <__multiply>
 800a904:	4680      	mov	r8, r0
 800a906:	4639      	mov	r1, r7
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff fe4b 	bl	800a5a4 <_Bfree>
 800a90e:	4647      	mov	r7, r8
 800a910:	106d      	asrs	r5, r5, #1
 800a912:	d00b      	beq.n	800a92c <__pow5mult+0xa0>
 800a914:	6820      	ldr	r0, [r4, #0]
 800a916:	b938      	cbnz	r0, 800a928 <__pow5mult+0x9c>
 800a918:	4622      	mov	r2, r4
 800a91a:	4621      	mov	r1, r4
 800a91c:	4630      	mov	r0, r6
 800a91e:	f7ff ff11 	bl	800a744 <__multiply>
 800a922:	6020      	str	r0, [r4, #0]
 800a924:	f8c0 9000 	str.w	r9, [r0]
 800a928:	4604      	mov	r4, r0
 800a92a:	e7e4      	b.n	800a8f6 <__pow5mult+0x6a>
 800a92c:	4638      	mov	r0, r7
 800a92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a932:	bf00      	nop
 800a934:	0800d678 	.word	0x0800d678
 800a938:	0800d49d 	.word	0x0800d49d
 800a93c:	0800d524 	.word	0x0800d524

0800a940 <__lshift>:
 800a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	460c      	mov	r4, r1
 800a946:	4607      	mov	r7, r0
 800a948:	4691      	mov	r9, r2
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6849      	ldr	r1, [r1, #4]
 800a94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a958:	f108 0601 	add.w	r6, r8, #1
 800a95c:	42b3      	cmp	r3, r6
 800a95e:	db0b      	blt.n	800a978 <__lshift+0x38>
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff fddf 	bl	800a524 <_Balloc>
 800a966:	4605      	mov	r5, r0
 800a968:	b948      	cbnz	r0, 800a97e <__lshift+0x3e>
 800a96a:	4602      	mov	r2, r0
 800a96c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a970:	4b27      	ldr	r3, [pc, #156]	; (800aa10 <__lshift+0xd0>)
 800a972:	4828      	ldr	r0, [pc, #160]	; (800aa14 <__lshift+0xd4>)
 800a974:	f000 fb78 	bl	800b068 <__assert_func>
 800a978:	3101      	adds	r1, #1
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	e7ee      	b.n	800a95c <__lshift+0x1c>
 800a97e:	2300      	movs	r3, #0
 800a980:	f100 0114 	add.w	r1, r0, #20
 800a984:	f100 0210 	add.w	r2, r0, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	4553      	cmp	r3, sl
 800a98c:	db33      	blt.n	800a9f6 <__lshift+0xb6>
 800a98e:	6920      	ldr	r0, [r4, #16]
 800a990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a994:	f104 0314 	add.w	r3, r4, #20
 800a998:	f019 091f 	ands.w	r9, r9, #31
 800a99c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9a4:	d02b      	beq.n	800a9fe <__lshift+0xbe>
 800a9a6:	468a      	mov	sl, r1
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a9ae:	6818      	ldr	r0, [r3, #0]
 800a9b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9b4:	4302      	orrs	r2, r0
 800a9b6:	f84a 2b04 	str.w	r2, [sl], #4
 800a9ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9be:	459c      	cmp	ip, r3
 800a9c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9c4:	d8f3      	bhi.n	800a9ae <__lshift+0x6e>
 800a9c6:	ebac 0304 	sub.w	r3, ip, r4
 800a9ca:	3b15      	subs	r3, #21
 800a9cc:	f023 0303 	bic.w	r3, r3, #3
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	f104 0015 	add.w	r0, r4, #21
 800a9d6:	4584      	cmp	ip, r0
 800a9d8:	bf38      	it	cc
 800a9da:	2304      	movcc	r3, #4
 800a9dc:	50ca      	str	r2, [r1, r3]
 800a9de:	b10a      	cbz	r2, 800a9e4 <__lshift+0xa4>
 800a9e0:	f108 0602 	add.w	r6, r8, #2
 800a9e4:	3e01      	subs	r6, #1
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	612e      	str	r6, [r5, #16]
 800a9ec:	f7ff fdda 	bl	800a5a4 <_Bfree>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	e7c5      	b.n	800a98a <__lshift+0x4a>
 800a9fe:	3904      	subs	r1, #4
 800aa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa04:	459c      	cmp	ip, r3
 800aa06:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa0a:	d8f9      	bhi.n	800aa00 <__lshift+0xc0>
 800aa0c:	e7ea      	b.n	800a9e4 <__lshift+0xa4>
 800aa0e:	bf00      	nop
 800aa10:	0800d513 	.word	0x0800d513
 800aa14:	0800d524 	.word	0x0800d524

0800aa18 <__mcmp>:
 800aa18:	4603      	mov	r3, r0
 800aa1a:	690a      	ldr	r2, [r1, #16]
 800aa1c:	6900      	ldr	r0, [r0, #16]
 800aa1e:	b530      	push	{r4, r5, lr}
 800aa20:	1a80      	subs	r0, r0, r2
 800aa22:	d10d      	bne.n	800aa40 <__mcmp+0x28>
 800aa24:	3314      	adds	r3, #20
 800aa26:	3114      	adds	r1, #20
 800aa28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa38:	4295      	cmp	r5, r2
 800aa3a:	d002      	beq.n	800aa42 <__mcmp+0x2a>
 800aa3c:	d304      	bcc.n	800aa48 <__mcmp+0x30>
 800aa3e:	2001      	movs	r0, #1
 800aa40:	bd30      	pop	{r4, r5, pc}
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	d3f4      	bcc.n	800aa30 <__mcmp+0x18>
 800aa46:	e7fb      	b.n	800aa40 <__mcmp+0x28>
 800aa48:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4c:	e7f8      	b.n	800aa40 <__mcmp+0x28>
	...

0800aa50 <__mdiff>:
 800aa50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	460c      	mov	r4, r1
 800aa56:	4606      	mov	r6, r0
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4692      	mov	sl, r2
 800aa5e:	f7ff ffdb 	bl	800aa18 <__mcmp>
 800aa62:	1e05      	subs	r5, r0, #0
 800aa64:	d111      	bne.n	800aa8a <__mdiff+0x3a>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7ff fd5b 	bl	800a524 <_Balloc>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	b928      	cbnz	r0, 800aa7e <__mdiff+0x2e>
 800aa72:	f240 2132 	movw	r1, #562	; 0x232
 800aa76:	4b3c      	ldr	r3, [pc, #240]	; (800ab68 <__mdiff+0x118>)
 800aa78:	483c      	ldr	r0, [pc, #240]	; (800ab6c <__mdiff+0x11c>)
 800aa7a:	f000 faf5 	bl	800b068 <__assert_func>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa84:	4610      	mov	r0, r2
 800aa86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8a:	bfa4      	itt	ge
 800aa8c:	4653      	movge	r3, sl
 800aa8e:	46a2      	movge	sl, r4
 800aa90:	4630      	mov	r0, r6
 800aa92:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aa96:	bfa6      	itte	ge
 800aa98:	461c      	movge	r4, r3
 800aa9a:	2500      	movge	r5, #0
 800aa9c:	2501      	movlt	r5, #1
 800aa9e:	f7ff fd41 	bl	800a524 <_Balloc>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	b918      	cbnz	r0, 800aaae <__mdiff+0x5e>
 800aaa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	; (800ab68 <__mdiff+0x118>)
 800aaac:	e7e4      	b.n	800aa78 <__mdiff+0x28>
 800aaae:	f100 0814 	add.w	r8, r0, #20
 800aab2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800aab6:	60c5      	str	r5, [r0, #12]
 800aab8:	f04f 0c00 	mov.w	ip, #0
 800aabc:	f10a 0514 	add.w	r5, sl, #20
 800aac0:	f10a 0010 	add.w	r0, sl, #16
 800aac4:	46c2      	mov	sl, r8
 800aac6:	6926      	ldr	r6, [r4, #16]
 800aac8:	f104 0914 	add.w	r9, r4, #20
 800aacc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800aad0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aad4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800aad8:	f859 3b04 	ldr.w	r3, [r9], #4
 800aadc:	fa1f f18b 	uxth.w	r1, fp
 800aae0:	4461      	add	r1, ip
 800aae2:	fa1f fc83 	uxth.w	ip, r3
 800aae6:	0c1b      	lsrs	r3, r3, #16
 800aae8:	eba1 010c 	sub.w	r1, r1, ip
 800aaec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aaf0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aaf4:	b289      	uxth	r1, r1
 800aaf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aafa:	454e      	cmp	r6, r9
 800aafc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ab00:	f84a 3b04 	str.w	r3, [sl], #4
 800ab04:	d8e6      	bhi.n	800aad4 <__mdiff+0x84>
 800ab06:	1b33      	subs	r3, r6, r4
 800ab08:	3b15      	subs	r3, #21
 800ab0a:	f023 0303 	bic.w	r3, r3, #3
 800ab0e:	3415      	adds	r4, #21
 800ab10:	3304      	adds	r3, #4
 800ab12:	42a6      	cmp	r6, r4
 800ab14:	bf38      	it	cc
 800ab16:	2304      	movcc	r3, #4
 800ab18:	441d      	add	r5, r3
 800ab1a:	4443      	add	r3, r8
 800ab1c:	461e      	mov	r6, r3
 800ab1e:	462c      	mov	r4, r5
 800ab20:	4574      	cmp	r4, lr
 800ab22:	d30e      	bcc.n	800ab42 <__mdiff+0xf2>
 800ab24:	f10e 0103 	add.w	r1, lr, #3
 800ab28:	1b49      	subs	r1, r1, r5
 800ab2a:	f021 0103 	bic.w	r1, r1, #3
 800ab2e:	3d03      	subs	r5, #3
 800ab30:	45ae      	cmp	lr, r5
 800ab32:	bf38      	it	cc
 800ab34:	2100      	movcc	r1, #0
 800ab36:	4419      	add	r1, r3
 800ab38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ab3c:	b18b      	cbz	r3, 800ab62 <__mdiff+0x112>
 800ab3e:	6117      	str	r7, [r2, #16]
 800ab40:	e7a0      	b.n	800aa84 <__mdiff+0x34>
 800ab42:	f854 8b04 	ldr.w	r8, [r4], #4
 800ab46:	fa1f f188 	uxth.w	r1, r8
 800ab4a:	4461      	add	r1, ip
 800ab4c:	1408      	asrs	r0, r1, #16
 800ab4e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800ab52:	b289      	uxth	r1, r1
 800ab54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab5c:	f846 1b04 	str.w	r1, [r6], #4
 800ab60:	e7de      	b.n	800ab20 <__mdiff+0xd0>
 800ab62:	3f01      	subs	r7, #1
 800ab64:	e7e8      	b.n	800ab38 <__mdiff+0xe8>
 800ab66:	bf00      	nop
 800ab68:	0800d513 	.word	0x0800d513
 800ab6c:	0800d524 	.word	0x0800d524

0800ab70 <__d2b>:
 800ab70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ab74:	2101      	movs	r1, #1
 800ab76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ab7a:	4690      	mov	r8, r2
 800ab7c:	461d      	mov	r5, r3
 800ab7e:	f7ff fcd1 	bl	800a524 <_Balloc>
 800ab82:	4604      	mov	r4, r0
 800ab84:	b930      	cbnz	r0, 800ab94 <__d2b+0x24>
 800ab86:	4602      	mov	r2, r0
 800ab88:	f240 310a 	movw	r1, #778	; 0x30a
 800ab8c:	4b24      	ldr	r3, [pc, #144]	; (800ac20 <__d2b+0xb0>)
 800ab8e:	4825      	ldr	r0, [pc, #148]	; (800ac24 <__d2b+0xb4>)
 800ab90:	f000 fa6a 	bl	800b068 <__assert_func>
 800ab94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ab98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ab9c:	bb2d      	cbnz	r5, 800abea <__d2b+0x7a>
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	f1b8 0300 	subs.w	r3, r8, #0
 800aba4:	d026      	beq.n	800abf4 <__d2b+0x84>
 800aba6:	4668      	mov	r0, sp
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	f7ff fd87 	bl	800a6bc <__lo0bits>
 800abae:	9900      	ldr	r1, [sp, #0]
 800abb0:	b1f0      	cbz	r0, 800abf0 <__d2b+0x80>
 800abb2:	9a01      	ldr	r2, [sp, #4]
 800abb4:	f1c0 0320 	rsb	r3, r0, #32
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	430b      	orrs	r3, r1
 800abbe:	40c2      	lsrs	r2, r0
 800abc0:	6163      	str	r3, [r4, #20]
 800abc2:	9201      	str	r2, [sp, #4]
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	bf14      	ite	ne
 800abca:	2102      	movne	r1, #2
 800abcc:	2101      	moveq	r1, #1
 800abce:	61a3      	str	r3, [r4, #24]
 800abd0:	6121      	str	r1, [r4, #16]
 800abd2:	b1c5      	cbz	r5, 800ac06 <__d2b+0x96>
 800abd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800abd8:	4405      	add	r5, r0
 800abda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abde:	603d      	str	r5, [r7, #0]
 800abe0:	6030      	str	r0, [r6, #0]
 800abe2:	4620      	mov	r0, r4
 800abe4:	b002      	add	sp, #8
 800abe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abee:	e7d6      	b.n	800ab9e <__d2b+0x2e>
 800abf0:	6161      	str	r1, [r4, #20]
 800abf2:	e7e7      	b.n	800abc4 <__d2b+0x54>
 800abf4:	a801      	add	r0, sp, #4
 800abf6:	f7ff fd61 	bl	800a6bc <__lo0bits>
 800abfa:	2101      	movs	r1, #1
 800abfc:	9b01      	ldr	r3, [sp, #4]
 800abfe:	6121      	str	r1, [r4, #16]
 800ac00:	6163      	str	r3, [r4, #20]
 800ac02:	3020      	adds	r0, #32
 800ac04:	e7e5      	b.n	800abd2 <__d2b+0x62>
 800ac06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ac0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac0e:	6038      	str	r0, [r7, #0]
 800ac10:	6918      	ldr	r0, [r3, #16]
 800ac12:	f7ff fd33 	bl	800a67c <__hi0bits>
 800ac16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ac1a:	6031      	str	r1, [r6, #0]
 800ac1c:	e7e1      	b.n	800abe2 <__d2b+0x72>
 800ac1e:	bf00      	nop
 800ac20:	0800d513 	.word	0x0800d513
 800ac24:	0800d524 	.word	0x0800d524

0800ac28 <_calloc_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	fb02 f501 	mul.w	r5, r2, r1
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f000 f854 	bl	800acdc <_malloc_r>
 800ac34:	4604      	mov	r4, r0
 800ac36:	b118      	cbz	r0, 800ac40 <_calloc_r+0x18>
 800ac38:	462a      	mov	r2, r5
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	f7fe f944 	bl	8008ec8 <memset>
 800ac40:	4620      	mov	r0, r4
 800ac42:	bd38      	pop	{r3, r4, r5, pc}

0800ac44 <_free_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4605      	mov	r5, r0
 800ac48:	2900      	cmp	r1, #0
 800ac4a:	d043      	beq.n	800acd4 <_free_r+0x90>
 800ac4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac50:	1f0c      	subs	r4, r1, #4
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bfb8      	it	lt
 800ac56:	18e4      	addlt	r4, r4, r3
 800ac58:	f000 fa62 	bl	800b120 <__malloc_lock>
 800ac5c:	4a1e      	ldr	r2, [pc, #120]	; (800acd8 <_free_r+0x94>)
 800ac5e:	6813      	ldr	r3, [r2, #0]
 800ac60:	4610      	mov	r0, r2
 800ac62:	b933      	cbnz	r3, 800ac72 <_free_r+0x2e>
 800ac64:	6063      	str	r3, [r4, #4]
 800ac66:	6014      	str	r4, [r2, #0]
 800ac68:	4628      	mov	r0, r5
 800ac6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac6e:	f000 ba5d 	b.w	800b12c <__malloc_unlock>
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	d90a      	bls.n	800ac8c <_free_r+0x48>
 800ac76:	6821      	ldr	r1, [r4, #0]
 800ac78:	1862      	adds	r2, r4, r1
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	bf01      	itttt	eq
 800ac7e:	681a      	ldreq	r2, [r3, #0]
 800ac80:	685b      	ldreq	r3, [r3, #4]
 800ac82:	1852      	addeq	r2, r2, r1
 800ac84:	6022      	streq	r2, [r4, #0]
 800ac86:	6063      	str	r3, [r4, #4]
 800ac88:	6004      	str	r4, [r0, #0]
 800ac8a:	e7ed      	b.n	800ac68 <_free_r+0x24>
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	b10b      	cbz	r3, 800ac96 <_free_r+0x52>
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	d9fa      	bls.n	800ac8c <_free_r+0x48>
 800ac96:	6811      	ldr	r1, [r2, #0]
 800ac98:	1850      	adds	r0, r2, r1
 800ac9a:	42a0      	cmp	r0, r4
 800ac9c:	d10b      	bne.n	800acb6 <_free_r+0x72>
 800ac9e:	6820      	ldr	r0, [r4, #0]
 800aca0:	4401      	add	r1, r0
 800aca2:	1850      	adds	r0, r2, r1
 800aca4:	4283      	cmp	r3, r0
 800aca6:	6011      	str	r1, [r2, #0]
 800aca8:	d1de      	bne.n	800ac68 <_free_r+0x24>
 800acaa:	6818      	ldr	r0, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	4401      	add	r1, r0
 800acb0:	6011      	str	r1, [r2, #0]
 800acb2:	6053      	str	r3, [r2, #4]
 800acb4:	e7d8      	b.n	800ac68 <_free_r+0x24>
 800acb6:	d902      	bls.n	800acbe <_free_r+0x7a>
 800acb8:	230c      	movs	r3, #12
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	e7d4      	b.n	800ac68 <_free_r+0x24>
 800acbe:	6820      	ldr	r0, [r4, #0]
 800acc0:	1821      	adds	r1, r4, r0
 800acc2:	428b      	cmp	r3, r1
 800acc4:	bf01      	itttt	eq
 800acc6:	6819      	ldreq	r1, [r3, #0]
 800acc8:	685b      	ldreq	r3, [r3, #4]
 800acca:	1809      	addeq	r1, r1, r0
 800accc:	6021      	streq	r1, [r4, #0]
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	6054      	str	r4, [r2, #4]
 800acd2:	e7c9      	b.n	800ac68 <_free_r+0x24>
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	bf00      	nop
 800acd8:	20000204 	.word	0x20000204

0800acdc <_malloc_r>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	1ccd      	adds	r5, r1, #3
 800ace0:	f025 0503 	bic.w	r5, r5, #3
 800ace4:	3508      	adds	r5, #8
 800ace6:	2d0c      	cmp	r5, #12
 800ace8:	bf38      	it	cc
 800acea:	250c      	movcc	r5, #12
 800acec:	2d00      	cmp	r5, #0
 800acee:	4606      	mov	r6, r0
 800acf0:	db01      	blt.n	800acf6 <_malloc_r+0x1a>
 800acf2:	42a9      	cmp	r1, r5
 800acf4:	d903      	bls.n	800acfe <_malloc_r+0x22>
 800acf6:	230c      	movs	r3, #12
 800acf8:	6033      	str	r3, [r6, #0]
 800acfa:	2000      	movs	r0, #0
 800acfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfe:	f000 fa0f 	bl	800b120 <__malloc_lock>
 800ad02:	4921      	ldr	r1, [pc, #132]	; (800ad88 <_malloc_r+0xac>)
 800ad04:	680a      	ldr	r2, [r1, #0]
 800ad06:	4614      	mov	r4, r2
 800ad08:	b99c      	cbnz	r4, 800ad32 <_malloc_r+0x56>
 800ad0a:	4f20      	ldr	r7, [pc, #128]	; (800ad8c <_malloc_r+0xb0>)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	b923      	cbnz	r3, 800ad1a <_malloc_r+0x3e>
 800ad10:	4621      	mov	r1, r4
 800ad12:	4630      	mov	r0, r6
 800ad14:	f000 f998 	bl	800b048 <_sbrk_r>
 800ad18:	6038      	str	r0, [r7, #0]
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 f993 	bl	800b048 <_sbrk_r>
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	d123      	bne.n	800ad6e <_malloc_r+0x92>
 800ad26:	230c      	movs	r3, #12
 800ad28:	4630      	mov	r0, r6
 800ad2a:	6033      	str	r3, [r6, #0]
 800ad2c:	f000 f9fe 	bl	800b12c <__malloc_unlock>
 800ad30:	e7e3      	b.n	800acfa <_malloc_r+0x1e>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	1b5b      	subs	r3, r3, r5
 800ad36:	d417      	bmi.n	800ad68 <_malloc_r+0x8c>
 800ad38:	2b0b      	cmp	r3, #11
 800ad3a:	d903      	bls.n	800ad44 <_malloc_r+0x68>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	441c      	add	r4, r3
 800ad40:	6025      	str	r5, [r4, #0]
 800ad42:	e004      	b.n	800ad4e <_malloc_r+0x72>
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	42a2      	cmp	r2, r4
 800ad48:	bf0c      	ite	eq
 800ad4a:	600b      	streq	r3, [r1, #0]
 800ad4c:	6053      	strne	r3, [r2, #4]
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f000 f9ec 	bl	800b12c <__malloc_unlock>
 800ad54:	f104 000b 	add.w	r0, r4, #11
 800ad58:	1d23      	adds	r3, r4, #4
 800ad5a:	f020 0007 	bic.w	r0, r0, #7
 800ad5e:	1ac2      	subs	r2, r0, r3
 800ad60:	d0cc      	beq.n	800acfc <_malloc_r+0x20>
 800ad62:	1a1b      	subs	r3, r3, r0
 800ad64:	50a3      	str	r3, [r4, r2]
 800ad66:	e7c9      	b.n	800acfc <_malloc_r+0x20>
 800ad68:	4622      	mov	r2, r4
 800ad6a:	6864      	ldr	r4, [r4, #4]
 800ad6c:	e7cc      	b.n	800ad08 <_malloc_r+0x2c>
 800ad6e:	1cc4      	adds	r4, r0, #3
 800ad70:	f024 0403 	bic.w	r4, r4, #3
 800ad74:	42a0      	cmp	r0, r4
 800ad76:	d0e3      	beq.n	800ad40 <_malloc_r+0x64>
 800ad78:	1a21      	subs	r1, r4, r0
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	f000 f964 	bl	800b048 <_sbrk_r>
 800ad80:	3001      	adds	r0, #1
 800ad82:	d1dd      	bne.n	800ad40 <_malloc_r+0x64>
 800ad84:	e7cf      	b.n	800ad26 <_malloc_r+0x4a>
 800ad86:	bf00      	nop
 800ad88:	20000204 	.word	0x20000204
 800ad8c:	20000208 	.word	0x20000208

0800ad90 <__ssputs_r>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	688e      	ldr	r6, [r1, #8]
 800ad96:	4682      	mov	sl, r0
 800ad98:	429e      	cmp	r6, r3
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4690      	mov	r8, r2
 800ad9e:	461f      	mov	r7, r3
 800ada0:	d838      	bhi.n	800ae14 <__ssputs_r+0x84>
 800ada2:	898a      	ldrh	r2, [r1, #12]
 800ada4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ada8:	d032      	beq.n	800ae10 <__ssputs_r+0x80>
 800adaa:	6825      	ldr	r5, [r4, #0]
 800adac:	6909      	ldr	r1, [r1, #16]
 800adae:	3301      	adds	r3, #1
 800adb0:	eba5 0901 	sub.w	r9, r5, r1
 800adb4:	6965      	ldr	r5, [r4, #20]
 800adb6:	444b      	add	r3, r9
 800adb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adc0:	106d      	asrs	r5, r5, #1
 800adc2:	429d      	cmp	r5, r3
 800adc4:	bf38      	it	cc
 800adc6:	461d      	movcc	r5, r3
 800adc8:	0553      	lsls	r3, r2, #21
 800adca:	d531      	bpl.n	800ae30 <__ssputs_r+0xa0>
 800adcc:	4629      	mov	r1, r5
 800adce:	f7ff ff85 	bl	800acdc <_malloc_r>
 800add2:	4606      	mov	r6, r0
 800add4:	b950      	cbnz	r0, 800adec <__ssputs_r+0x5c>
 800add6:	230c      	movs	r3, #12
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	f8ca 3000 	str.w	r3, [sl]
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adec:	464a      	mov	r2, r9
 800adee:	6921      	ldr	r1, [r4, #16]
 800adf0:	f7ff fb8a 	bl	800a508 <memcpy>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	6126      	str	r6, [r4, #16]
 800ae02:	444e      	add	r6, r9
 800ae04:	6026      	str	r6, [r4, #0]
 800ae06:	463e      	mov	r6, r7
 800ae08:	6165      	str	r5, [r4, #20]
 800ae0a:	eba5 0509 	sub.w	r5, r5, r9
 800ae0e:	60a5      	str	r5, [r4, #8]
 800ae10:	42be      	cmp	r6, r7
 800ae12:	d900      	bls.n	800ae16 <__ssputs_r+0x86>
 800ae14:	463e      	mov	r6, r7
 800ae16:	4632      	mov	r2, r6
 800ae18:	4641      	mov	r1, r8
 800ae1a:	6820      	ldr	r0, [r4, #0]
 800ae1c:	f000 f966 	bl	800b0ec <memmove>
 800ae20:	68a3      	ldr	r3, [r4, #8]
 800ae22:	6822      	ldr	r2, [r4, #0]
 800ae24:	1b9b      	subs	r3, r3, r6
 800ae26:	4432      	add	r2, r6
 800ae28:	2000      	movs	r0, #0
 800ae2a:	60a3      	str	r3, [r4, #8]
 800ae2c:	6022      	str	r2, [r4, #0]
 800ae2e:	e7db      	b.n	800ade8 <__ssputs_r+0x58>
 800ae30:	462a      	mov	r2, r5
 800ae32:	f000 f981 	bl	800b138 <_realloc_r>
 800ae36:	4606      	mov	r6, r0
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d1e1      	bne.n	800ae00 <__ssputs_r+0x70>
 800ae3c:	4650      	mov	r0, sl
 800ae3e:	6921      	ldr	r1, [r4, #16]
 800ae40:	f7ff ff00 	bl	800ac44 <_free_r>
 800ae44:	e7c7      	b.n	800add6 <__ssputs_r+0x46>
	...

0800ae48 <_svfiprintf_r>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	4698      	mov	r8, r3
 800ae4e:	898b      	ldrh	r3, [r1, #12]
 800ae50:	4607      	mov	r7, r0
 800ae52:	061b      	lsls	r3, r3, #24
 800ae54:	460d      	mov	r5, r1
 800ae56:	4614      	mov	r4, r2
 800ae58:	b09d      	sub	sp, #116	; 0x74
 800ae5a:	d50e      	bpl.n	800ae7a <_svfiprintf_r+0x32>
 800ae5c:	690b      	ldr	r3, [r1, #16]
 800ae5e:	b963      	cbnz	r3, 800ae7a <_svfiprintf_r+0x32>
 800ae60:	2140      	movs	r1, #64	; 0x40
 800ae62:	f7ff ff3b 	bl	800acdc <_malloc_r>
 800ae66:	6028      	str	r0, [r5, #0]
 800ae68:	6128      	str	r0, [r5, #16]
 800ae6a:	b920      	cbnz	r0, 800ae76 <_svfiprintf_r+0x2e>
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	e0d1      	b.n	800b01a <_svfiprintf_r+0x1d2>
 800ae76:	2340      	movs	r3, #64	; 0x40
 800ae78:	616b      	str	r3, [r5, #20]
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7e:	2320      	movs	r3, #32
 800ae80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae84:	2330      	movs	r3, #48	; 0x30
 800ae86:	f04f 0901 	mov.w	r9, #1
 800ae8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b034 <_svfiprintf_r+0x1ec>
 800ae92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae96:	4623      	mov	r3, r4
 800ae98:	469a      	mov	sl, r3
 800ae9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae9e:	b10a      	cbz	r2, 800aea4 <_svfiprintf_r+0x5c>
 800aea0:	2a25      	cmp	r2, #37	; 0x25
 800aea2:	d1f9      	bne.n	800ae98 <_svfiprintf_r+0x50>
 800aea4:	ebba 0b04 	subs.w	fp, sl, r4
 800aea8:	d00b      	beq.n	800aec2 <_svfiprintf_r+0x7a>
 800aeaa:	465b      	mov	r3, fp
 800aeac:	4622      	mov	r2, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff ff6d 	bl	800ad90 <__ssputs_r>
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f000 80aa 	beq.w	800b010 <_svfiprintf_r+0x1c8>
 800aebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aebe:	445a      	add	r2, fp
 800aec0:	9209      	str	r2, [sp, #36]	; 0x24
 800aec2:	f89a 3000 	ldrb.w	r3, [sl]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 80a2 	beq.w	800b010 <_svfiprintf_r+0x1c8>
 800aecc:	2300      	movs	r3, #0
 800aece:	f04f 32ff 	mov.w	r2, #4294967295
 800aed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed6:	f10a 0a01 	add.w	sl, sl, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	9307      	str	r3, [sp, #28]
 800aede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee2:	931a      	str	r3, [sp, #104]	; 0x68
 800aee4:	4654      	mov	r4, sl
 800aee6:	2205      	movs	r2, #5
 800aee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeec:	4851      	ldr	r0, [pc, #324]	; (800b034 <_svfiprintf_r+0x1ec>)
 800aeee:	f7ff fafd 	bl	800a4ec <memchr>
 800aef2:	9a04      	ldr	r2, [sp, #16]
 800aef4:	b9d8      	cbnz	r0, 800af2e <_svfiprintf_r+0xe6>
 800aef6:	06d0      	lsls	r0, r2, #27
 800aef8:	bf44      	itt	mi
 800aefa:	2320      	movmi	r3, #32
 800aefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af00:	0711      	lsls	r1, r2, #28
 800af02:	bf44      	itt	mi
 800af04:	232b      	movmi	r3, #43	; 0x2b
 800af06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af0a:	f89a 3000 	ldrb.w	r3, [sl]
 800af0e:	2b2a      	cmp	r3, #42	; 0x2a
 800af10:	d015      	beq.n	800af3e <_svfiprintf_r+0xf6>
 800af12:	4654      	mov	r4, sl
 800af14:	2000      	movs	r0, #0
 800af16:	f04f 0c0a 	mov.w	ip, #10
 800af1a:	9a07      	ldr	r2, [sp, #28]
 800af1c:	4621      	mov	r1, r4
 800af1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af22:	3b30      	subs	r3, #48	; 0x30
 800af24:	2b09      	cmp	r3, #9
 800af26:	d94e      	bls.n	800afc6 <_svfiprintf_r+0x17e>
 800af28:	b1b0      	cbz	r0, 800af58 <_svfiprintf_r+0x110>
 800af2a:	9207      	str	r2, [sp, #28]
 800af2c:	e014      	b.n	800af58 <_svfiprintf_r+0x110>
 800af2e:	eba0 0308 	sub.w	r3, r0, r8
 800af32:	fa09 f303 	lsl.w	r3, r9, r3
 800af36:	4313      	orrs	r3, r2
 800af38:	46a2      	mov	sl, r4
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	e7d2      	b.n	800aee4 <_svfiprintf_r+0x9c>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	1d19      	adds	r1, r3, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	9103      	str	r1, [sp, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	bfbb      	ittet	lt
 800af4a:	425b      	neglt	r3, r3
 800af4c:	f042 0202 	orrlt.w	r2, r2, #2
 800af50:	9307      	strge	r3, [sp, #28]
 800af52:	9307      	strlt	r3, [sp, #28]
 800af54:	bfb8      	it	lt
 800af56:	9204      	strlt	r2, [sp, #16]
 800af58:	7823      	ldrb	r3, [r4, #0]
 800af5a:	2b2e      	cmp	r3, #46	; 0x2e
 800af5c:	d10c      	bne.n	800af78 <_svfiprintf_r+0x130>
 800af5e:	7863      	ldrb	r3, [r4, #1]
 800af60:	2b2a      	cmp	r3, #42	; 0x2a
 800af62:	d135      	bne.n	800afd0 <_svfiprintf_r+0x188>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	3402      	adds	r4, #2
 800af68:	1d1a      	adds	r2, r3, #4
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	9203      	str	r2, [sp, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfb8      	it	lt
 800af72:	f04f 33ff 	movlt.w	r3, #4294967295
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b044 <_svfiprintf_r+0x1fc>
 800af7c:	2203      	movs	r2, #3
 800af7e:	4650      	mov	r0, sl
 800af80:	7821      	ldrb	r1, [r4, #0]
 800af82:	f7ff fab3 	bl	800a4ec <memchr>
 800af86:	b140      	cbz	r0, 800af9a <_svfiprintf_r+0x152>
 800af88:	2340      	movs	r3, #64	; 0x40
 800af8a:	eba0 000a 	sub.w	r0, r0, sl
 800af8e:	fa03 f000 	lsl.w	r0, r3, r0
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	3401      	adds	r4, #1
 800af96:	4303      	orrs	r3, r0
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9e:	2206      	movs	r2, #6
 800afa0:	4825      	ldr	r0, [pc, #148]	; (800b038 <_svfiprintf_r+0x1f0>)
 800afa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa6:	f7ff faa1 	bl	800a4ec <memchr>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d038      	beq.n	800b020 <_svfiprintf_r+0x1d8>
 800afae:	4b23      	ldr	r3, [pc, #140]	; (800b03c <_svfiprintf_r+0x1f4>)
 800afb0:	bb1b      	cbnz	r3, 800affa <_svfiprintf_r+0x1b2>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	3307      	adds	r3, #7
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	3308      	adds	r3, #8
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc0:	4433      	add	r3, r6
 800afc2:	9309      	str	r3, [sp, #36]	; 0x24
 800afc4:	e767      	b.n	800ae96 <_svfiprintf_r+0x4e>
 800afc6:	460c      	mov	r4, r1
 800afc8:	2001      	movs	r0, #1
 800afca:	fb0c 3202 	mla	r2, ip, r2, r3
 800afce:	e7a5      	b.n	800af1c <_svfiprintf_r+0xd4>
 800afd0:	2300      	movs	r3, #0
 800afd2:	f04f 0c0a 	mov.w	ip, #10
 800afd6:	4619      	mov	r1, r3
 800afd8:	3401      	adds	r4, #1
 800afda:	9305      	str	r3, [sp, #20]
 800afdc:	4620      	mov	r0, r4
 800afde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe2:	3a30      	subs	r2, #48	; 0x30
 800afe4:	2a09      	cmp	r2, #9
 800afe6:	d903      	bls.n	800aff0 <_svfiprintf_r+0x1a8>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0c5      	beq.n	800af78 <_svfiprintf_r+0x130>
 800afec:	9105      	str	r1, [sp, #20]
 800afee:	e7c3      	b.n	800af78 <_svfiprintf_r+0x130>
 800aff0:	4604      	mov	r4, r0
 800aff2:	2301      	movs	r3, #1
 800aff4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff8:	e7f0      	b.n	800afdc <_svfiprintf_r+0x194>
 800affa:	ab03      	add	r3, sp, #12
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	462a      	mov	r2, r5
 800b000:	4638      	mov	r0, r7
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <_svfiprintf_r+0x1f8>)
 800b004:	a904      	add	r1, sp, #16
 800b006:	f7fe f805 	bl	8009014 <_printf_float>
 800b00a:	1c42      	adds	r2, r0, #1
 800b00c:	4606      	mov	r6, r0
 800b00e:	d1d6      	bne.n	800afbe <_svfiprintf_r+0x176>
 800b010:	89ab      	ldrh	r3, [r5, #12]
 800b012:	065b      	lsls	r3, r3, #25
 800b014:	f53f af2c 	bmi.w	800ae70 <_svfiprintf_r+0x28>
 800b018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b01a:	b01d      	add	sp, #116	; 0x74
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b020:	ab03      	add	r3, sp, #12
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	462a      	mov	r2, r5
 800b026:	4638      	mov	r0, r7
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <_svfiprintf_r+0x1f8>)
 800b02a:	a904      	add	r1, sp, #16
 800b02c:	f7fe fa8e 	bl	800954c <_printf_i>
 800b030:	e7eb      	b.n	800b00a <_svfiprintf_r+0x1c2>
 800b032:	bf00      	nop
 800b034:	0800d684 	.word	0x0800d684
 800b038:	0800d68e 	.word	0x0800d68e
 800b03c:	08009015 	.word	0x08009015
 800b040:	0800ad91 	.word	0x0800ad91
 800b044:	0800d68a 	.word	0x0800d68a

0800b048 <_sbrk_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	2300      	movs	r3, #0
 800b04c:	4d05      	ldr	r5, [pc, #20]	; (800b064 <_sbrk_r+0x1c>)
 800b04e:	4604      	mov	r4, r0
 800b050:	4608      	mov	r0, r1
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	f7fb fc4c 	bl	80068f0 <_sbrk>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d102      	bne.n	800b062 <_sbrk_r+0x1a>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	b103      	cbz	r3, 800b062 <_sbrk_r+0x1a>
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	20000298 	.word	0x20000298

0800b068 <__assert_func>:
 800b068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b06a:	4614      	mov	r4, r2
 800b06c:	461a      	mov	r2, r3
 800b06e:	4b09      	ldr	r3, [pc, #36]	; (800b094 <__assert_func+0x2c>)
 800b070:	4605      	mov	r5, r0
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68d8      	ldr	r0, [r3, #12]
 800b076:	b14c      	cbz	r4, 800b08c <__assert_func+0x24>
 800b078:	4b07      	ldr	r3, [pc, #28]	; (800b098 <__assert_func+0x30>)
 800b07a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b07e:	9100      	str	r1, [sp, #0]
 800b080:	462b      	mov	r3, r5
 800b082:	4906      	ldr	r1, [pc, #24]	; (800b09c <__assert_func+0x34>)
 800b084:	f000 f80e 	bl	800b0a4 <fiprintf>
 800b088:	f000 faa2 	bl	800b5d0 <abort>
 800b08c:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <__assert_func+0x38>)
 800b08e:	461c      	mov	r4, r3
 800b090:	e7f3      	b.n	800b07a <__assert_func+0x12>
 800b092:	bf00      	nop
 800b094:	20000010 	.word	0x20000010
 800b098:	0800d695 	.word	0x0800d695
 800b09c:	0800d6a2 	.word	0x0800d6a2
 800b0a0:	0800d6d0 	.word	0x0800d6d0

0800b0a4 <fiprintf>:
 800b0a4:	b40e      	push	{r1, r2, r3}
 800b0a6:	b503      	push	{r0, r1, lr}
 800b0a8:	4601      	mov	r1, r0
 800b0aa:	ab03      	add	r3, sp, #12
 800b0ac:	4805      	ldr	r0, [pc, #20]	; (800b0c4 <fiprintf+0x20>)
 800b0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b2:	6800      	ldr	r0, [r0, #0]
 800b0b4:	9301      	str	r3, [sp, #4]
 800b0b6:	f000 f88d 	bl	800b1d4 <_vfiprintf_r>
 800b0ba:	b002      	add	sp, #8
 800b0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c0:	b003      	add	sp, #12
 800b0c2:	4770      	bx	lr
 800b0c4:	20000010 	.word	0x20000010

0800b0c8 <__ascii_mbtowc>:
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	b901      	cbnz	r1, 800b0ce <__ascii_mbtowc+0x6>
 800b0cc:	a901      	add	r1, sp, #4
 800b0ce:	b142      	cbz	r2, 800b0e2 <__ascii_mbtowc+0x1a>
 800b0d0:	b14b      	cbz	r3, 800b0e6 <__ascii_mbtowc+0x1e>
 800b0d2:	7813      	ldrb	r3, [r2, #0]
 800b0d4:	600b      	str	r3, [r1, #0]
 800b0d6:	7812      	ldrb	r2, [r2, #0]
 800b0d8:	1e10      	subs	r0, r2, #0
 800b0da:	bf18      	it	ne
 800b0dc:	2001      	movne	r0, #1
 800b0de:	b002      	add	sp, #8
 800b0e0:	4770      	bx	lr
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	e7fb      	b.n	800b0de <__ascii_mbtowc+0x16>
 800b0e6:	f06f 0001 	mvn.w	r0, #1
 800b0ea:	e7f8      	b.n	800b0de <__ascii_mbtowc+0x16>

0800b0ec <memmove>:
 800b0ec:	4288      	cmp	r0, r1
 800b0ee:	b510      	push	{r4, lr}
 800b0f0:	eb01 0402 	add.w	r4, r1, r2
 800b0f4:	d902      	bls.n	800b0fc <memmove+0x10>
 800b0f6:	4284      	cmp	r4, r0
 800b0f8:	4623      	mov	r3, r4
 800b0fa:	d807      	bhi.n	800b10c <memmove+0x20>
 800b0fc:	1e43      	subs	r3, r0, #1
 800b0fe:	42a1      	cmp	r1, r4
 800b100:	d008      	beq.n	800b114 <memmove+0x28>
 800b102:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b10a:	e7f8      	b.n	800b0fe <memmove+0x12>
 800b10c:	4601      	mov	r1, r0
 800b10e:	4402      	add	r2, r0
 800b110:	428a      	cmp	r2, r1
 800b112:	d100      	bne.n	800b116 <memmove+0x2a>
 800b114:	bd10      	pop	{r4, pc}
 800b116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b11a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b11e:	e7f7      	b.n	800b110 <memmove+0x24>

0800b120 <__malloc_lock>:
 800b120:	4801      	ldr	r0, [pc, #4]	; (800b128 <__malloc_lock+0x8>)
 800b122:	f000 bc15 	b.w	800b950 <__retarget_lock_acquire_recursive>
 800b126:	bf00      	nop
 800b128:	200002a0 	.word	0x200002a0

0800b12c <__malloc_unlock>:
 800b12c:	4801      	ldr	r0, [pc, #4]	; (800b134 <__malloc_unlock+0x8>)
 800b12e:	f000 bc10 	b.w	800b952 <__retarget_lock_release_recursive>
 800b132:	bf00      	nop
 800b134:	200002a0 	.word	0x200002a0

0800b138 <_realloc_r>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	4607      	mov	r7, r0
 800b13c:	4614      	mov	r4, r2
 800b13e:	460e      	mov	r6, r1
 800b140:	b921      	cbnz	r1, 800b14c <_realloc_r+0x14>
 800b142:	4611      	mov	r1, r2
 800b144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b148:	f7ff bdc8 	b.w	800acdc <_malloc_r>
 800b14c:	b922      	cbnz	r2, 800b158 <_realloc_r+0x20>
 800b14e:	f7ff fd79 	bl	800ac44 <_free_r>
 800b152:	4625      	mov	r5, r4
 800b154:	4628      	mov	r0, r5
 800b156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b158:	f000 fc60 	bl	800ba1c <_malloc_usable_size_r>
 800b15c:	42a0      	cmp	r0, r4
 800b15e:	d20f      	bcs.n	800b180 <_realloc_r+0x48>
 800b160:	4621      	mov	r1, r4
 800b162:	4638      	mov	r0, r7
 800b164:	f7ff fdba 	bl	800acdc <_malloc_r>
 800b168:	4605      	mov	r5, r0
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0f2      	beq.n	800b154 <_realloc_r+0x1c>
 800b16e:	4631      	mov	r1, r6
 800b170:	4622      	mov	r2, r4
 800b172:	f7ff f9c9 	bl	800a508 <memcpy>
 800b176:	4631      	mov	r1, r6
 800b178:	4638      	mov	r0, r7
 800b17a:	f7ff fd63 	bl	800ac44 <_free_r>
 800b17e:	e7e9      	b.n	800b154 <_realloc_r+0x1c>
 800b180:	4635      	mov	r5, r6
 800b182:	e7e7      	b.n	800b154 <_realloc_r+0x1c>

0800b184 <__sfputc_r>:
 800b184:	6893      	ldr	r3, [r2, #8]
 800b186:	b410      	push	{r4}
 800b188:	3b01      	subs	r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	6093      	str	r3, [r2, #8]
 800b18e:	da07      	bge.n	800b1a0 <__sfputc_r+0x1c>
 800b190:	6994      	ldr	r4, [r2, #24]
 800b192:	42a3      	cmp	r3, r4
 800b194:	db01      	blt.n	800b19a <__sfputc_r+0x16>
 800b196:	290a      	cmp	r1, #10
 800b198:	d102      	bne.n	800b1a0 <__sfputc_r+0x1c>
 800b19a:	bc10      	pop	{r4}
 800b19c:	f000 b94a 	b.w	800b434 <__swbuf_r>
 800b1a0:	6813      	ldr	r3, [r2, #0]
 800b1a2:	1c58      	adds	r0, r3, #1
 800b1a4:	6010      	str	r0, [r2, #0]
 800b1a6:	7019      	strb	r1, [r3, #0]
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	bc10      	pop	{r4}
 800b1ac:	4770      	bx	lr

0800b1ae <__sfputs_r>:
 800b1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	18d5      	adds	r5, r2, r3
 800b1b8:	42ac      	cmp	r4, r5
 800b1ba:	d101      	bne.n	800b1c0 <__sfputs_r+0x12>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e007      	b.n	800b1d0 <__sfputs_r+0x22>
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c8:	f7ff ffdc 	bl	800b184 <__sfputc_r>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d1f3      	bne.n	800b1b8 <__sfputs_r+0xa>
 800b1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1d4 <_vfiprintf_r>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	460d      	mov	r5, r1
 800b1da:	4614      	mov	r4, r2
 800b1dc:	4698      	mov	r8, r3
 800b1de:	4606      	mov	r6, r0
 800b1e0:	b09d      	sub	sp, #116	; 0x74
 800b1e2:	b118      	cbz	r0, 800b1ec <_vfiprintf_r+0x18>
 800b1e4:	6983      	ldr	r3, [r0, #24]
 800b1e6:	b90b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x18>
 800b1e8:	f000 fb14 	bl	800b814 <__sinit>
 800b1ec:	4b89      	ldr	r3, [pc, #548]	; (800b414 <_vfiprintf_r+0x240>)
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	d11b      	bne.n	800b22a <_vfiprintf_r+0x56>
 800b1f2:	6875      	ldr	r5, [r6, #4]
 800b1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f6:	07d9      	lsls	r1, r3, #31
 800b1f8:	d405      	bmi.n	800b206 <_vfiprintf_r+0x32>
 800b1fa:	89ab      	ldrh	r3, [r5, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d402      	bmi.n	800b206 <_vfiprintf_r+0x32>
 800b200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b202:	f000 fba5 	bl	800b950 <__retarget_lock_acquire_recursive>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	071b      	lsls	r3, r3, #28
 800b20a:	d501      	bpl.n	800b210 <_vfiprintf_r+0x3c>
 800b20c:	692b      	ldr	r3, [r5, #16]
 800b20e:	b9eb      	cbnz	r3, 800b24c <_vfiprintf_r+0x78>
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f000 f96e 	bl	800b4f4 <__swsetup_r>
 800b218:	b1c0      	cbz	r0, 800b24c <_vfiprintf_r+0x78>
 800b21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b21c:	07dc      	lsls	r4, r3, #31
 800b21e:	d50e      	bpl.n	800b23e <_vfiprintf_r+0x6a>
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	b01d      	add	sp, #116	; 0x74
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	4b7b      	ldr	r3, [pc, #492]	; (800b418 <_vfiprintf_r+0x244>)
 800b22c:	429d      	cmp	r5, r3
 800b22e:	d101      	bne.n	800b234 <_vfiprintf_r+0x60>
 800b230:	68b5      	ldr	r5, [r6, #8]
 800b232:	e7df      	b.n	800b1f4 <_vfiprintf_r+0x20>
 800b234:	4b79      	ldr	r3, [pc, #484]	; (800b41c <_vfiprintf_r+0x248>)
 800b236:	429d      	cmp	r5, r3
 800b238:	bf08      	it	eq
 800b23a:	68f5      	ldreq	r5, [r6, #12]
 800b23c:	e7da      	b.n	800b1f4 <_vfiprintf_r+0x20>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	0598      	lsls	r0, r3, #22
 800b242:	d4ed      	bmi.n	800b220 <_vfiprintf_r+0x4c>
 800b244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b246:	f000 fb84 	bl	800b952 <__retarget_lock_release_recursive>
 800b24a:	e7e9      	b.n	800b220 <_vfiprintf_r+0x4c>
 800b24c:	2300      	movs	r3, #0
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	2320      	movs	r3, #32
 800b252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b256:	2330      	movs	r3, #48	; 0x30
 800b258:	f04f 0901 	mov.w	r9, #1
 800b25c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b260:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b420 <_vfiprintf_r+0x24c>
 800b264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b268:	4623      	mov	r3, r4
 800b26a:	469a      	mov	sl, r3
 800b26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b270:	b10a      	cbz	r2, 800b276 <_vfiprintf_r+0xa2>
 800b272:	2a25      	cmp	r2, #37	; 0x25
 800b274:	d1f9      	bne.n	800b26a <_vfiprintf_r+0x96>
 800b276:	ebba 0b04 	subs.w	fp, sl, r4
 800b27a:	d00b      	beq.n	800b294 <_vfiprintf_r+0xc0>
 800b27c:	465b      	mov	r3, fp
 800b27e:	4622      	mov	r2, r4
 800b280:	4629      	mov	r1, r5
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff93 	bl	800b1ae <__sfputs_r>
 800b288:	3001      	adds	r0, #1
 800b28a:	f000 80aa 	beq.w	800b3e2 <_vfiprintf_r+0x20e>
 800b28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b290:	445a      	add	r2, fp
 800b292:	9209      	str	r2, [sp, #36]	; 0x24
 800b294:	f89a 3000 	ldrb.w	r3, [sl]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80a2 	beq.w	800b3e2 <_vfiprintf_r+0x20e>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a8:	f10a 0a01 	add.w	sl, sl, #1
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	9307      	str	r3, [sp, #28]
 800b2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b2b6:	4654      	mov	r4, sl
 800b2b8:	2205      	movs	r2, #5
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	4858      	ldr	r0, [pc, #352]	; (800b420 <_vfiprintf_r+0x24c>)
 800b2c0:	f7ff f914 	bl	800a4ec <memchr>
 800b2c4:	9a04      	ldr	r2, [sp, #16]
 800b2c6:	b9d8      	cbnz	r0, 800b300 <_vfiprintf_r+0x12c>
 800b2c8:	06d1      	lsls	r1, r2, #27
 800b2ca:	bf44      	itt	mi
 800b2cc:	2320      	movmi	r3, #32
 800b2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d2:	0713      	lsls	r3, r2, #28
 800b2d4:	bf44      	itt	mi
 800b2d6:	232b      	movmi	r3, #43	; 0x2b
 800b2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e2:	d015      	beq.n	800b310 <_vfiprintf_r+0x13c>
 800b2e4:	4654      	mov	r4, sl
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	f04f 0c0a 	mov.w	ip, #10
 800b2ec:	9a07      	ldr	r2, [sp, #28]
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f4:	3b30      	subs	r3, #48	; 0x30
 800b2f6:	2b09      	cmp	r3, #9
 800b2f8:	d94e      	bls.n	800b398 <_vfiprintf_r+0x1c4>
 800b2fa:	b1b0      	cbz	r0, 800b32a <_vfiprintf_r+0x156>
 800b2fc:	9207      	str	r2, [sp, #28]
 800b2fe:	e014      	b.n	800b32a <_vfiprintf_r+0x156>
 800b300:	eba0 0308 	sub.w	r3, r0, r8
 800b304:	fa09 f303 	lsl.w	r3, r9, r3
 800b308:	4313      	orrs	r3, r2
 800b30a:	46a2      	mov	sl, r4
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	e7d2      	b.n	800b2b6 <_vfiprintf_r+0xe2>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	1d19      	adds	r1, r3, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	9103      	str	r1, [sp, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfbb      	ittet	lt
 800b31c:	425b      	neglt	r3, r3
 800b31e:	f042 0202 	orrlt.w	r2, r2, #2
 800b322:	9307      	strge	r3, [sp, #28]
 800b324:	9307      	strlt	r3, [sp, #28]
 800b326:	bfb8      	it	lt
 800b328:	9204      	strlt	r2, [sp, #16]
 800b32a:	7823      	ldrb	r3, [r4, #0]
 800b32c:	2b2e      	cmp	r3, #46	; 0x2e
 800b32e:	d10c      	bne.n	800b34a <_vfiprintf_r+0x176>
 800b330:	7863      	ldrb	r3, [r4, #1]
 800b332:	2b2a      	cmp	r3, #42	; 0x2a
 800b334:	d135      	bne.n	800b3a2 <_vfiprintf_r+0x1ce>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	3402      	adds	r4, #2
 800b33a:	1d1a      	adds	r2, r3, #4
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	9203      	str	r2, [sp, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	bfb8      	it	lt
 800b344:	f04f 33ff 	movlt.w	r3, #4294967295
 800b348:	9305      	str	r3, [sp, #20]
 800b34a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b430 <_vfiprintf_r+0x25c>
 800b34e:	2203      	movs	r2, #3
 800b350:	4650      	mov	r0, sl
 800b352:	7821      	ldrb	r1, [r4, #0]
 800b354:	f7ff f8ca 	bl	800a4ec <memchr>
 800b358:	b140      	cbz	r0, 800b36c <_vfiprintf_r+0x198>
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	eba0 000a 	sub.w	r0, r0, sl
 800b360:	fa03 f000 	lsl.w	r0, r3, r0
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	3401      	adds	r4, #1
 800b368:	4303      	orrs	r3, r0
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b370:	2206      	movs	r2, #6
 800b372:	482c      	ldr	r0, [pc, #176]	; (800b424 <_vfiprintf_r+0x250>)
 800b374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b378:	f7ff f8b8 	bl	800a4ec <memchr>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d03f      	beq.n	800b400 <_vfiprintf_r+0x22c>
 800b380:	4b29      	ldr	r3, [pc, #164]	; (800b428 <_vfiprintf_r+0x254>)
 800b382:	bb1b      	cbnz	r3, 800b3cc <_vfiprintf_r+0x1f8>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	3307      	adds	r3, #7
 800b388:	f023 0307 	bic.w	r3, r3, #7
 800b38c:	3308      	adds	r3, #8
 800b38e:	9303      	str	r3, [sp, #12]
 800b390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b392:	443b      	add	r3, r7
 800b394:	9309      	str	r3, [sp, #36]	; 0x24
 800b396:	e767      	b.n	800b268 <_vfiprintf_r+0x94>
 800b398:	460c      	mov	r4, r1
 800b39a:	2001      	movs	r0, #1
 800b39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3a0:	e7a5      	b.n	800b2ee <_vfiprintf_r+0x11a>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f04f 0c0a 	mov.w	ip, #10
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	3401      	adds	r4, #1
 800b3ac:	9305      	str	r3, [sp, #20]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b4:	3a30      	subs	r2, #48	; 0x30
 800b3b6:	2a09      	cmp	r2, #9
 800b3b8:	d903      	bls.n	800b3c2 <_vfiprintf_r+0x1ee>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0c5      	beq.n	800b34a <_vfiprintf_r+0x176>
 800b3be:	9105      	str	r1, [sp, #20]
 800b3c0:	e7c3      	b.n	800b34a <_vfiprintf_r+0x176>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ca:	e7f0      	b.n	800b3ae <_vfiprintf_r+0x1da>
 800b3cc:	ab03      	add	r3, sp, #12
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	4b15      	ldr	r3, [pc, #84]	; (800b42c <_vfiprintf_r+0x258>)
 800b3d6:	a904      	add	r1, sp, #16
 800b3d8:	f7fd fe1c 	bl	8009014 <_printf_float>
 800b3dc:	4607      	mov	r7, r0
 800b3de:	1c78      	adds	r0, r7, #1
 800b3e0:	d1d6      	bne.n	800b390 <_vfiprintf_r+0x1bc>
 800b3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e4:	07d9      	lsls	r1, r3, #31
 800b3e6:	d405      	bmi.n	800b3f4 <_vfiprintf_r+0x220>
 800b3e8:	89ab      	ldrh	r3, [r5, #12]
 800b3ea:	059a      	lsls	r2, r3, #22
 800b3ec:	d402      	bmi.n	800b3f4 <_vfiprintf_r+0x220>
 800b3ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f0:	f000 faaf 	bl	800b952 <__retarget_lock_release_recursive>
 800b3f4:	89ab      	ldrh	r3, [r5, #12]
 800b3f6:	065b      	lsls	r3, r3, #25
 800b3f8:	f53f af12 	bmi.w	800b220 <_vfiprintf_r+0x4c>
 800b3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3fe:	e711      	b.n	800b224 <_vfiprintf_r+0x50>
 800b400:	ab03      	add	r3, sp, #12
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	462a      	mov	r2, r5
 800b406:	4630      	mov	r0, r6
 800b408:	4b08      	ldr	r3, [pc, #32]	; (800b42c <_vfiprintf_r+0x258>)
 800b40a:	a904      	add	r1, sp, #16
 800b40c:	f7fe f89e 	bl	800954c <_printf_i>
 800b410:	e7e4      	b.n	800b3dc <_vfiprintf_r+0x208>
 800b412:	bf00      	nop
 800b414:	0800d7fc 	.word	0x0800d7fc
 800b418:	0800d81c 	.word	0x0800d81c
 800b41c:	0800d7dc 	.word	0x0800d7dc
 800b420:	0800d684 	.word	0x0800d684
 800b424:	0800d68e 	.word	0x0800d68e
 800b428:	08009015 	.word	0x08009015
 800b42c:	0800b1af 	.word	0x0800b1af
 800b430:	0800d68a 	.word	0x0800d68a

0800b434 <__swbuf_r>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	460e      	mov	r6, r1
 800b438:	4614      	mov	r4, r2
 800b43a:	4605      	mov	r5, r0
 800b43c:	b118      	cbz	r0, 800b446 <__swbuf_r+0x12>
 800b43e:	6983      	ldr	r3, [r0, #24]
 800b440:	b90b      	cbnz	r3, 800b446 <__swbuf_r+0x12>
 800b442:	f000 f9e7 	bl	800b814 <__sinit>
 800b446:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <__swbuf_r+0x98>)
 800b448:	429c      	cmp	r4, r3
 800b44a:	d12b      	bne.n	800b4a4 <__swbuf_r+0x70>
 800b44c:	686c      	ldr	r4, [r5, #4]
 800b44e:	69a3      	ldr	r3, [r4, #24]
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	071a      	lsls	r2, r3, #28
 800b456:	d52f      	bpl.n	800b4b8 <__swbuf_r+0x84>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	b36b      	cbz	r3, 800b4b8 <__swbuf_r+0x84>
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	6820      	ldr	r0, [r4, #0]
 800b460:	b2f6      	uxtb	r6, r6
 800b462:	1ac0      	subs	r0, r0, r3
 800b464:	6963      	ldr	r3, [r4, #20]
 800b466:	4637      	mov	r7, r6
 800b468:	4283      	cmp	r3, r0
 800b46a:	dc04      	bgt.n	800b476 <__swbuf_r+0x42>
 800b46c:	4621      	mov	r1, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f93c 	bl	800b6ec <_fflush_r>
 800b474:	bb30      	cbnz	r0, 800b4c4 <__swbuf_r+0x90>
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	3001      	adds	r0, #1
 800b47a:	3b01      	subs	r3, #1
 800b47c:	60a3      	str	r3, [r4, #8]
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	701e      	strb	r6, [r3, #0]
 800b486:	6963      	ldr	r3, [r4, #20]
 800b488:	4283      	cmp	r3, r0
 800b48a:	d004      	beq.n	800b496 <__swbuf_r+0x62>
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	07db      	lsls	r3, r3, #31
 800b490:	d506      	bpl.n	800b4a0 <__swbuf_r+0x6c>
 800b492:	2e0a      	cmp	r6, #10
 800b494:	d104      	bne.n	800b4a0 <__swbuf_r+0x6c>
 800b496:	4621      	mov	r1, r4
 800b498:	4628      	mov	r0, r5
 800b49a:	f000 f927 	bl	800b6ec <_fflush_r>
 800b49e:	b988      	cbnz	r0, 800b4c4 <__swbuf_r+0x90>
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <__swbuf_r+0x9c>)
 800b4a6:	429c      	cmp	r4, r3
 800b4a8:	d101      	bne.n	800b4ae <__swbuf_r+0x7a>
 800b4aa:	68ac      	ldr	r4, [r5, #8]
 800b4ac:	e7cf      	b.n	800b44e <__swbuf_r+0x1a>
 800b4ae:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <__swbuf_r+0xa0>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	bf08      	it	eq
 800b4b4:	68ec      	ldreq	r4, [r5, #12]
 800b4b6:	e7ca      	b.n	800b44e <__swbuf_r+0x1a>
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f000 f81a 	bl	800b4f4 <__swsetup_r>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d0cb      	beq.n	800b45c <__swbuf_r+0x28>
 800b4c4:	f04f 37ff 	mov.w	r7, #4294967295
 800b4c8:	e7ea      	b.n	800b4a0 <__swbuf_r+0x6c>
 800b4ca:	bf00      	nop
 800b4cc:	0800d7fc 	.word	0x0800d7fc
 800b4d0:	0800d81c 	.word	0x0800d81c
 800b4d4:	0800d7dc 	.word	0x0800d7dc

0800b4d8 <__ascii_wctomb>:
 800b4d8:	4603      	mov	r3, r0
 800b4da:	4608      	mov	r0, r1
 800b4dc:	b141      	cbz	r1, 800b4f0 <__ascii_wctomb+0x18>
 800b4de:	2aff      	cmp	r2, #255	; 0xff
 800b4e0:	d904      	bls.n	800b4ec <__ascii_wctomb+0x14>
 800b4e2:	228a      	movs	r2, #138	; 0x8a
 800b4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	4770      	bx	lr
 800b4ec:	2001      	movs	r0, #1
 800b4ee:	700a      	strb	r2, [r1, #0]
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <__swsetup_r>:
 800b4f4:	4b32      	ldr	r3, [pc, #200]	; (800b5c0 <__swsetup_r+0xcc>)
 800b4f6:	b570      	push	{r4, r5, r6, lr}
 800b4f8:	681d      	ldr	r5, [r3, #0]
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	b125      	cbz	r5, 800b50a <__swsetup_r+0x16>
 800b500:	69ab      	ldr	r3, [r5, #24]
 800b502:	b913      	cbnz	r3, 800b50a <__swsetup_r+0x16>
 800b504:	4628      	mov	r0, r5
 800b506:	f000 f985 	bl	800b814 <__sinit>
 800b50a:	4b2e      	ldr	r3, [pc, #184]	; (800b5c4 <__swsetup_r+0xd0>)
 800b50c:	429c      	cmp	r4, r3
 800b50e:	d10f      	bne.n	800b530 <__swsetup_r+0x3c>
 800b510:	686c      	ldr	r4, [r5, #4]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b518:	0719      	lsls	r1, r3, #28
 800b51a:	d42c      	bmi.n	800b576 <__swsetup_r+0x82>
 800b51c:	06dd      	lsls	r5, r3, #27
 800b51e:	d411      	bmi.n	800b544 <__swsetup_r+0x50>
 800b520:	2309      	movs	r3, #9
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	e03e      	b.n	800b5ae <__swsetup_r+0xba>
 800b530:	4b25      	ldr	r3, [pc, #148]	; (800b5c8 <__swsetup_r+0xd4>)
 800b532:	429c      	cmp	r4, r3
 800b534:	d101      	bne.n	800b53a <__swsetup_r+0x46>
 800b536:	68ac      	ldr	r4, [r5, #8]
 800b538:	e7eb      	b.n	800b512 <__swsetup_r+0x1e>
 800b53a:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <__swsetup_r+0xd8>)
 800b53c:	429c      	cmp	r4, r3
 800b53e:	bf08      	it	eq
 800b540:	68ec      	ldreq	r4, [r5, #12]
 800b542:	e7e6      	b.n	800b512 <__swsetup_r+0x1e>
 800b544:	0758      	lsls	r0, r3, #29
 800b546:	d512      	bpl.n	800b56e <__swsetup_r+0x7a>
 800b548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b54a:	b141      	cbz	r1, 800b55e <__swsetup_r+0x6a>
 800b54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b550:	4299      	cmp	r1, r3
 800b552:	d002      	beq.n	800b55a <__swsetup_r+0x66>
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff fb75 	bl	800ac44 <_free_r>
 800b55a:	2300      	movs	r3, #0
 800b55c:	6363      	str	r3, [r4, #52]	; 0x34
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	2300      	movs	r3, #0
 800b568:	6063      	str	r3, [r4, #4]
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	f043 0308 	orr.w	r3, r3, #8
 800b574:	81a3      	strh	r3, [r4, #12]
 800b576:	6923      	ldr	r3, [r4, #16]
 800b578:	b94b      	cbnz	r3, 800b58e <__swsetup_r+0x9a>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b584:	d003      	beq.n	800b58e <__swsetup_r+0x9a>
 800b586:	4621      	mov	r1, r4
 800b588:	4630      	mov	r0, r6
 800b58a:	f000 fa07 	bl	800b99c <__smakebuf_r>
 800b58e:	89a0      	ldrh	r0, [r4, #12]
 800b590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b594:	f010 0301 	ands.w	r3, r0, #1
 800b598:	d00a      	beq.n	800b5b0 <__swsetup_r+0xbc>
 800b59a:	2300      	movs	r3, #0
 800b59c:	60a3      	str	r3, [r4, #8]
 800b59e:	6963      	ldr	r3, [r4, #20]
 800b5a0:	425b      	negs	r3, r3
 800b5a2:	61a3      	str	r3, [r4, #24]
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	b943      	cbnz	r3, 800b5ba <__swsetup_r+0xc6>
 800b5a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5ac:	d1ba      	bne.n	800b524 <__swsetup_r+0x30>
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	0781      	lsls	r1, r0, #30
 800b5b2:	bf58      	it	pl
 800b5b4:	6963      	ldrpl	r3, [r4, #20]
 800b5b6:	60a3      	str	r3, [r4, #8]
 800b5b8:	e7f4      	b.n	800b5a4 <__swsetup_r+0xb0>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e7f7      	b.n	800b5ae <__swsetup_r+0xba>
 800b5be:	bf00      	nop
 800b5c0:	20000010 	.word	0x20000010
 800b5c4:	0800d7fc 	.word	0x0800d7fc
 800b5c8:	0800d81c 	.word	0x0800d81c
 800b5cc:	0800d7dc 	.word	0x0800d7dc

0800b5d0 <abort>:
 800b5d0:	2006      	movs	r0, #6
 800b5d2:	b508      	push	{r3, lr}
 800b5d4:	f000 fa52 	bl	800ba7c <raise>
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f7fb f916 	bl	800680a <_exit>
	...

0800b5e0 <__sflush_r>:
 800b5e0:	898a      	ldrh	r2, [r1, #12]
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	0710      	lsls	r0, r2, #28
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	d458      	bmi.n	800b6a0 <__sflush_r+0xc0>
 800b5ee:	684b      	ldr	r3, [r1, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dc05      	bgt.n	800b600 <__sflush_r+0x20>
 800b5f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	dc02      	bgt.n	800b600 <__sflush_r+0x20>
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b602:	2e00      	cmp	r6, #0
 800b604:	d0f9      	beq.n	800b5fa <__sflush_r+0x1a>
 800b606:	2300      	movs	r3, #0
 800b608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b60c:	682f      	ldr	r7, [r5, #0]
 800b60e:	602b      	str	r3, [r5, #0]
 800b610:	d032      	beq.n	800b678 <__sflush_r+0x98>
 800b612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	075a      	lsls	r2, r3, #29
 800b618:	d505      	bpl.n	800b626 <__sflush_r+0x46>
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	1ac0      	subs	r0, r0, r3
 800b61e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b620:	b10b      	cbz	r3, 800b626 <__sflush_r+0x46>
 800b622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b624:	1ac0      	subs	r0, r0, r3
 800b626:	2300      	movs	r3, #0
 800b628:	4602      	mov	r2, r0
 800b62a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b62c:	4628      	mov	r0, r5
 800b62e:	6a21      	ldr	r1, [r4, #32]
 800b630:	47b0      	blx	r6
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	d106      	bne.n	800b646 <__sflush_r+0x66>
 800b638:	6829      	ldr	r1, [r5, #0]
 800b63a:	291d      	cmp	r1, #29
 800b63c:	d82c      	bhi.n	800b698 <__sflush_r+0xb8>
 800b63e:	4a2a      	ldr	r2, [pc, #168]	; (800b6e8 <__sflush_r+0x108>)
 800b640:	40ca      	lsrs	r2, r1
 800b642:	07d6      	lsls	r6, r2, #31
 800b644:	d528      	bpl.n	800b698 <__sflush_r+0xb8>
 800b646:	2200      	movs	r2, #0
 800b648:	6062      	str	r2, [r4, #4]
 800b64a:	6922      	ldr	r2, [r4, #16]
 800b64c:	04d9      	lsls	r1, r3, #19
 800b64e:	6022      	str	r2, [r4, #0]
 800b650:	d504      	bpl.n	800b65c <__sflush_r+0x7c>
 800b652:	1c42      	adds	r2, r0, #1
 800b654:	d101      	bne.n	800b65a <__sflush_r+0x7a>
 800b656:	682b      	ldr	r3, [r5, #0]
 800b658:	b903      	cbnz	r3, 800b65c <__sflush_r+0x7c>
 800b65a:	6560      	str	r0, [r4, #84]	; 0x54
 800b65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b65e:	602f      	str	r7, [r5, #0]
 800b660:	2900      	cmp	r1, #0
 800b662:	d0ca      	beq.n	800b5fa <__sflush_r+0x1a>
 800b664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b668:	4299      	cmp	r1, r3
 800b66a:	d002      	beq.n	800b672 <__sflush_r+0x92>
 800b66c:	4628      	mov	r0, r5
 800b66e:	f7ff fae9 	bl	800ac44 <_free_r>
 800b672:	2000      	movs	r0, #0
 800b674:	6360      	str	r0, [r4, #52]	; 0x34
 800b676:	e7c1      	b.n	800b5fc <__sflush_r+0x1c>
 800b678:	6a21      	ldr	r1, [r4, #32]
 800b67a:	2301      	movs	r3, #1
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b0      	blx	r6
 800b680:	1c41      	adds	r1, r0, #1
 800b682:	d1c7      	bne.n	800b614 <__sflush_r+0x34>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0c4      	beq.n	800b614 <__sflush_r+0x34>
 800b68a:	2b1d      	cmp	r3, #29
 800b68c:	d001      	beq.n	800b692 <__sflush_r+0xb2>
 800b68e:	2b16      	cmp	r3, #22
 800b690:	d101      	bne.n	800b696 <__sflush_r+0xb6>
 800b692:	602f      	str	r7, [r5, #0]
 800b694:	e7b1      	b.n	800b5fa <__sflush_r+0x1a>
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	e7ad      	b.n	800b5fc <__sflush_r+0x1c>
 800b6a0:	690f      	ldr	r7, [r1, #16]
 800b6a2:	2f00      	cmp	r7, #0
 800b6a4:	d0a9      	beq.n	800b5fa <__sflush_r+0x1a>
 800b6a6:	0793      	lsls	r3, r2, #30
 800b6a8:	bf18      	it	ne
 800b6aa:	2300      	movne	r3, #0
 800b6ac:	680e      	ldr	r6, [r1, #0]
 800b6ae:	bf08      	it	eq
 800b6b0:	694b      	ldreq	r3, [r1, #20]
 800b6b2:	eba6 0807 	sub.w	r8, r6, r7
 800b6b6:	600f      	str	r7, [r1, #0]
 800b6b8:	608b      	str	r3, [r1, #8]
 800b6ba:	f1b8 0f00 	cmp.w	r8, #0
 800b6be:	dd9c      	ble.n	800b5fa <__sflush_r+0x1a>
 800b6c0:	4643      	mov	r3, r8
 800b6c2:	463a      	mov	r2, r7
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	6a21      	ldr	r1, [r4, #32]
 800b6c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6ca:	47b0      	blx	r6
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	dc06      	bgt.n	800b6de <__sflush_r+0xfe>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	e78e      	b.n	800b5fc <__sflush_r+0x1c>
 800b6de:	4407      	add	r7, r0
 800b6e0:	eba8 0800 	sub.w	r8, r8, r0
 800b6e4:	e7e9      	b.n	800b6ba <__sflush_r+0xda>
 800b6e6:	bf00      	nop
 800b6e8:	20400001 	.word	0x20400001

0800b6ec <_fflush_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	690b      	ldr	r3, [r1, #16]
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	b913      	cbnz	r3, 800b6fc <_fflush_r+0x10>
 800b6f6:	2500      	movs	r5, #0
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
 800b6fc:	b118      	cbz	r0, 800b706 <_fflush_r+0x1a>
 800b6fe:	6983      	ldr	r3, [r0, #24]
 800b700:	b90b      	cbnz	r3, 800b706 <_fflush_r+0x1a>
 800b702:	f000 f887 	bl	800b814 <__sinit>
 800b706:	4b14      	ldr	r3, [pc, #80]	; (800b758 <_fflush_r+0x6c>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	d11b      	bne.n	800b744 <_fflush_r+0x58>
 800b70c:	686c      	ldr	r4, [r5, #4]
 800b70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0ef      	beq.n	800b6f6 <_fflush_r+0xa>
 800b716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b718:	07d0      	lsls	r0, r2, #31
 800b71a:	d404      	bmi.n	800b726 <_fflush_r+0x3a>
 800b71c:	0599      	lsls	r1, r3, #22
 800b71e:	d402      	bmi.n	800b726 <_fflush_r+0x3a>
 800b720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b722:	f000 f915 	bl	800b950 <__retarget_lock_acquire_recursive>
 800b726:	4628      	mov	r0, r5
 800b728:	4621      	mov	r1, r4
 800b72a:	f7ff ff59 	bl	800b5e0 <__sflush_r>
 800b72e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b730:	4605      	mov	r5, r0
 800b732:	07da      	lsls	r2, r3, #31
 800b734:	d4e0      	bmi.n	800b6f8 <_fflush_r+0xc>
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	059b      	lsls	r3, r3, #22
 800b73a:	d4dd      	bmi.n	800b6f8 <_fflush_r+0xc>
 800b73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b73e:	f000 f908 	bl	800b952 <__retarget_lock_release_recursive>
 800b742:	e7d9      	b.n	800b6f8 <_fflush_r+0xc>
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <_fflush_r+0x70>)
 800b746:	429c      	cmp	r4, r3
 800b748:	d101      	bne.n	800b74e <_fflush_r+0x62>
 800b74a:	68ac      	ldr	r4, [r5, #8]
 800b74c:	e7df      	b.n	800b70e <_fflush_r+0x22>
 800b74e:	4b04      	ldr	r3, [pc, #16]	; (800b760 <_fflush_r+0x74>)
 800b750:	429c      	cmp	r4, r3
 800b752:	bf08      	it	eq
 800b754:	68ec      	ldreq	r4, [r5, #12]
 800b756:	e7da      	b.n	800b70e <_fflush_r+0x22>
 800b758:	0800d7fc 	.word	0x0800d7fc
 800b75c:	0800d81c 	.word	0x0800d81c
 800b760:	0800d7dc 	.word	0x0800d7dc

0800b764 <std>:
 800b764:	2300      	movs	r3, #0
 800b766:	b510      	push	{r4, lr}
 800b768:	4604      	mov	r4, r0
 800b76a:	e9c0 3300 	strd	r3, r3, [r0]
 800b76e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b772:	6083      	str	r3, [r0, #8]
 800b774:	8181      	strh	r1, [r0, #12]
 800b776:	6643      	str	r3, [r0, #100]	; 0x64
 800b778:	81c2      	strh	r2, [r0, #14]
 800b77a:	6183      	str	r3, [r0, #24]
 800b77c:	4619      	mov	r1, r3
 800b77e:	2208      	movs	r2, #8
 800b780:	305c      	adds	r0, #92	; 0x5c
 800b782:	f7fd fba1 	bl	8008ec8 <memset>
 800b786:	4b05      	ldr	r3, [pc, #20]	; (800b79c <std+0x38>)
 800b788:	6224      	str	r4, [r4, #32]
 800b78a:	6263      	str	r3, [r4, #36]	; 0x24
 800b78c:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <std+0x3c>)
 800b78e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <std+0x40>)
 800b792:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b794:	4b04      	ldr	r3, [pc, #16]	; (800b7a8 <std+0x44>)
 800b796:	6323      	str	r3, [r4, #48]	; 0x30
 800b798:	bd10      	pop	{r4, pc}
 800b79a:	bf00      	nop
 800b79c:	0800bab5 	.word	0x0800bab5
 800b7a0:	0800bad7 	.word	0x0800bad7
 800b7a4:	0800bb0f 	.word	0x0800bb0f
 800b7a8:	0800bb33 	.word	0x0800bb33

0800b7ac <_cleanup_r>:
 800b7ac:	4901      	ldr	r1, [pc, #4]	; (800b7b4 <_cleanup_r+0x8>)
 800b7ae:	f000 b8af 	b.w	800b910 <_fwalk_reent>
 800b7b2:	bf00      	nop
 800b7b4:	0800b6ed 	.word	0x0800b6ed

0800b7b8 <__sfmoreglue>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	2568      	movs	r5, #104	; 0x68
 800b7bc:	1e4a      	subs	r2, r1, #1
 800b7be:	4355      	muls	r5, r2
 800b7c0:	460e      	mov	r6, r1
 800b7c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7c6:	f7ff fa89 	bl	800acdc <_malloc_r>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	b140      	cbz	r0, 800b7e0 <__sfmoreglue+0x28>
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	e9c0 1600 	strd	r1, r6, [r0]
 800b7d4:	300c      	adds	r0, #12
 800b7d6:	60a0      	str	r0, [r4, #8]
 800b7d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7dc:	f7fd fb74 	bl	8008ec8 <memset>
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}

0800b7e4 <__sfp_lock_acquire>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__sfp_lock_acquire+0x8>)
 800b7e6:	f000 b8b3 	b.w	800b950 <__retarget_lock_acquire_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	200002a4 	.word	0x200002a4

0800b7f0 <__sfp_lock_release>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__sfp_lock_release+0x8>)
 800b7f2:	f000 b8ae 	b.w	800b952 <__retarget_lock_release_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	200002a4 	.word	0x200002a4

0800b7fc <__sinit_lock_acquire>:
 800b7fc:	4801      	ldr	r0, [pc, #4]	; (800b804 <__sinit_lock_acquire+0x8>)
 800b7fe:	f000 b8a7 	b.w	800b950 <__retarget_lock_acquire_recursive>
 800b802:	bf00      	nop
 800b804:	2000029f 	.word	0x2000029f

0800b808 <__sinit_lock_release>:
 800b808:	4801      	ldr	r0, [pc, #4]	; (800b810 <__sinit_lock_release+0x8>)
 800b80a:	f000 b8a2 	b.w	800b952 <__retarget_lock_release_recursive>
 800b80e:	bf00      	nop
 800b810:	2000029f 	.word	0x2000029f

0800b814 <__sinit>:
 800b814:	b510      	push	{r4, lr}
 800b816:	4604      	mov	r4, r0
 800b818:	f7ff fff0 	bl	800b7fc <__sinit_lock_acquire>
 800b81c:	69a3      	ldr	r3, [r4, #24]
 800b81e:	b11b      	cbz	r3, 800b828 <__sinit+0x14>
 800b820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b824:	f7ff bff0 	b.w	800b808 <__sinit_lock_release>
 800b828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b82c:	6523      	str	r3, [r4, #80]	; 0x50
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <__sinit+0x68>)
 800b830:	4a13      	ldr	r2, [pc, #76]	; (800b880 <__sinit+0x6c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	62a2      	str	r2, [r4, #40]	; 0x28
 800b836:	42a3      	cmp	r3, r4
 800b838:	bf08      	it	eq
 800b83a:	2301      	moveq	r3, #1
 800b83c:	4620      	mov	r0, r4
 800b83e:	bf08      	it	eq
 800b840:	61a3      	streq	r3, [r4, #24]
 800b842:	f000 f81f 	bl	800b884 <__sfp>
 800b846:	6060      	str	r0, [r4, #4]
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 f81b 	bl	800b884 <__sfp>
 800b84e:	60a0      	str	r0, [r4, #8]
 800b850:	4620      	mov	r0, r4
 800b852:	f000 f817 	bl	800b884 <__sfp>
 800b856:	2200      	movs	r2, #0
 800b858:	2104      	movs	r1, #4
 800b85a:	60e0      	str	r0, [r4, #12]
 800b85c:	6860      	ldr	r0, [r4, #4]
 800b85e:	f7ff ff81 	bl	800b764 <std>
 800b862:	2201      	movs	r2, #1
 800b864:	2109      	movs	r1, #9
 800b866:	68a0      	ldr	r0, [r4, #8]
 800b868:	f7ff ff7c 	bl	800b764 <std>
 800b86c:	2202      	movs	r2, #2
 800b86e:	2112      	movs	r1, #18
 800b870:	68e0      	ldr	r0, [r4, #12]
 800b872:	f7ff ff77 	bl	800b764 <std>
 800b876:	2301      	movs	r3, #1
 800b878:	61a3      	str	r3, [r4, #24]
 800b87a:	e7d1      	b.n	800b820 <__sinit+0xc>
 800b87c:	0800d458 	.word	0x0800d458
 800b880:	0800b7ad 	.word	0x0800b7ad

0800b884 <__sfp>:
 800b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b886:	4607      	mov	r7, r0
 800b888:	f7ff ffac 	bl	800b7e4 <__sfp_lock_acquire>
 800b88c:	4b1e      	ldr	r3, [pc, #120]	; (800b908 <__sfp+0x84>)
 800b88e:	681e      	ldr	r6, [r3, #0]
 800b890:	69b3      	ldr	r3, [r6, #24]
 800b892:	b913      	cbnz	r3, 800b89a <__sfp+0x16>
 800b894:	4630      	mov	r0, r6
 800b896:	f7ff ffbd 	bl	800b814 <__sinit>
 800b89a:	3648      	adds	r6, #72	; 0x48
 800b89c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	d503      	bpl.n	800b8ac <__sfp+0x28>
 800b8a4:	6833      	ldr	r3, [r6, #0]
 800b8a6:	b30b      	cbz	r3, 800b8ec <__sfp+0x68>
 800b8a8:	6836      	ldr	r6, [r6, #0]
 800b8aa:	e7f7      	b.n	800b89c <__sfp+0x18>
 800b8ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8b0:	b9d5      	cbnz	r5, 800b8e8 <__sfp+0x64>
 800b8b2:	4b16      	ldr	r3, [pc, #88]	; (800b90c <__sfp+0x88>)
 800b8b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8b8:	60e3      	str	r3, [r4, #12]
 800b8ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b8bc:	f000 f847 	bl	800b94e <__retarget_lock_init_recursive>
 800b8c0:	f7ff ff96 	bl	800b7f0 <__sfp_lock_release>
 800b8c4:	2208      	movs	r2, #8
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8d0:	6025      	str	r5, [r4, #0]
 800b8d2:	61a5      	str	r5, [r4, #24]
 800b8d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8d8:	f7fd faf6 	bl	8008ec8 <memset>
 800b8dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e8:	3468      	adds	r4, #104	; 0x68
 800b8ea:	e7d9      	b.n	800b8a0 <__sfp+0x1c>
 800b8ec:	2104      	movs	r1, #4
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f7ff ff62 	bl	800b7b8 <__sfmoreglue>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	6030      	str	r0, [r6, #0]
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d1d5      	bne.n	800b8a8 <__sfp+0x24>
 800b8fc:	f7ff ff78 	bl	800b7f0 <__sfp_lock_release>
 800b900:	230c      	movs	r3, #12
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	e7ee      	b.n	800b8e4 <__sfp+0x60>
 800b906:	bf00      	nop
 800b908:	0800d458 	.word	0x0800d458
 800b90c:	ffff0001 	.word	0xffff0001

0800b910 <_fwalk_reent>:
 800b910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b914:	4606      	mov	r6, r0
 800b916:	4688      	mov	r8, r1
 800b918:	2700      	movs	r7, #0
 800b91a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b91e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b922:	f1b9 0901 	subs.w	r9, r9, #1
 800b926:	d505      	bpl.n	800b934 <_fwalk_reent+0x24>
 800b928:	6824      	ldr	r4, [r4, #0]
 800b92a:	2c00      	cmp	r4, #0
 800b92c:	d1f7      	bne.n	800b91e <_fwalk_reent+0xe>
 800b92e:	4638      	mov	r0, r7
 800b930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b934:	89ab      	ldrh	r3, [r5, #12]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d907      	bls.n	800b94a <_fwalk_reent+0x3a>
 800b93a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b93e:	3301      	adds	r3, #1
 800b940:	d003      	beq.n	800b94a <_fwalk_reent+0x3a>
 800b942:	4629      	mov	r1, r5
 800b944:	4630      	mov	r0, r6
 800b946:	47c0      	blx	r8
 800b948:	4307      	orrs	r7, r0
 800b94a:	3568      	adds	r5, #104	; 0x68
 800b94c:	e7e9      	b.n	800b922 <_fwalk_reent+0x12>

0800b94e <__retarget_lock_init_recursive>:
 800b94e:	4770      	bx	lr

0800b950 <__retarget_lock_acquire_recursive>:
 800b950:	4770      	bx	lr

0800b952 <__retarget_lock_release_recursive>:
 800b952:	4770      	bx	lr

0800b954 <__swhatbuf_r>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	460e      	mov	r6, r1
 800b958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b95c:	4614      	mov	r4, r2
 800b95e:	2900      	cmp	r1, #0
 800b960:	461d      	mov	r5, r3
 800b962:	b096      	sub	sp, #88	; 0x58
 800b964:	da07      	bge.n	800b976 <__swhatbuf_r+0x22>
 800b966:	2300      	movs	r3, #0
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	89b3      	ldrh	r3, [r6, #12]
 800b96c:	061a      	lsls	r2, r3, #24
 800b96e:	d410      	bmi.n	800b992 <__swhatbuf_r+0x3e>
 800b970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b974:	e00e      	b.n	800b994 <__swhatbuf_r+0x40>
 800b976:	466a      	mov	r2, sp
 800b978:	f000 f902 	bl	800bb80 <_fstat_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	dbf2      	blt.n	800b966 <__swhatbuf_r+0x12>
 800b980:	9a01      	ldr	r2, [sp, #4]
 800b982:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b986:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b98a:	425a      	negs	r2, r3
 800b98c:	415a      	adcs	r2, r3
 800b98e:	602a      	str	r2, [r5, #0]
 800b990:	e7ee      	b.n	800b970 <__swhatbuf_r+0x1c>
 800b992:	2340      	movs	r3, #64	; 0x40
 800b994:	2000      	movs	r0, #0
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	b016      	add	sp, #88	; 0x58
 800b99a:	bd70      	pop	{r4, r5, r6, pc}

0800b99c <__smakebuf_r>:
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9a0:	079d      	lsls	r5, r3, #30
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	d507      	bpl.n	800b9b8 <__smakebuf_r+0x1c>
 800b9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	6163      	str	r3, [r4, #20]
 800b9b4:	b002      	add	sp, #8
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	466a      	mov	r2, sp
 800b9ba:	ab01      	add	r3, sp, #4
 800b9bc:	f7ff ffca 	bl	800b954 <__swhatbuf_r>
 800b9c0:	9900      	ldr	r1, [sp, #0]
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f7ff f989 	bl	800acdc <_malloc_r>
 800b9ca:	b948      	cbnz	r0, 800b9e0 <__smakebuf_r+0x44>
 800b9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d0:	059a      	lsls	r2, r3, #22
 800b9d2:	d4ef      	bmi.n	800b9b4 <__smakebuf_r+0x18>
 800b9d4:	f023 0303 	bic.w	r3, r3, #3
 800b9d8:	f043 0302 	orr.w	r3, r3, #2
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	e7e3      	b.n	800b9a8 <__smakebuf_r+0xc>
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <__smakebuf_r+0x7c>)
 800b9e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	6020      	str	r0, [r4, #0]
 800b9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	9b00      	ldr	r3, [sp, #0]
 800b9f0:	6120      	str	r0, [r4, #16]
 800b9f2:	6163      	str	r3, [r4, #20]
 800b9f4:	9b01      	ldr	r3, [sp, #4]
 800b9f6:	b15b      	cbz	r3, 800ba10 <__smakebuf_r+0x74>
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9fe:	f000 f8d1 	bl	800bba4 <_isatty_r>
 800ba02:	b128      	cbz	r0, 800ba10 <__smakebuf_r+0x74>
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	f023 0303 	bic.w	r3, r3, #3
 800ba0a:	f043 0301 	orr.w	r3, r3, #1
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	89a0      	ldrh	r0, [r4, #12]
 800ba12:	4305      	orrs	r5, r0
 800ba14:	81a5      	strh	r5, [r4, #12]
 800ba16:	e7cd      	b.n	800b9b4 <__smakebuf_r+0x18>
 800ba18:	0800b7ad 	.word	0x0800b7ad

0800ba1c <_malloc_usable_size_r>:
 800ba1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba20:	1f18      	subs	r0, r3, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bfbc      	itt	lt
 800ba26:	580b      	ldrlt	r3, [r1, r0]
 800ba28:	18c0      	addlt	r0, r0, r3
 800ba2a:	4770      	bx	lr

0800ba2c <_raise_r>:
 800ba2c:	291f      	cmp	r1, #31
 800ba2e:	b538      	push	{r3, r4, r5, lr}
 800ba30:	4604      	mov	r4, r0
 800ba32:	460d      	mov	r5, r1
 800ba34:	d904      	bls.n	800ba40 <_raise_r+0x14>
 800ba36:	2316      	movs	r3, #22
 800ba38:	6003      	str	r3, [r0, #0]
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba42:	b112      	cbz	r2, 800ba4a <_raise_r+0x1e>
 800ba44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba48:	b94b      	cbnz	r3, 800ba5e <_raise_r+0x32>
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 f830 	bl	800bab0 <_getpid_r>
 800ba50:	462a      	mov	r2, r5
 800ba52:	4601      	mov	r1, r0
 800ba54:	4620      	mov	r0, r4
 800ba56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba5a:	f000 b817 	b.w	800ba8c <_kill_r>
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d00a      	beq.n	800ba78 <_raise_r+0x4c>
 800ba62:	1c59      	adds	r1, r3, #1
 800ba64:	d103      	bne.n	800ba6e <_raise_r+0x42>
 800ba66:	2316      	movs	r3, #22
 800ba68:	6003      	str	r3, [r0, #0]
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	e7e7      	b.n	800ba3e <_raise_r+0x12>
 800ba6e:	2400      	movs	r4, #0
 800ba70:	4628      	mov	r0, r5
 800ba72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba76:	4798      	blx	r3
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e7e0      	b.n	800ba3e <_raise_r+0x12>

0800ba7c <raise>:
 800ba7c:	4b02      	ldr	r3, [pc, #8]	; (800ba88 <raise+0xc>)
 800ba7e:	4601      	mov	r1, r0
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	f7ff bfd3 	b.w	800ba2c <_raise_r>
 800ba86:	bf00      	nop
 800ba88:	20000010 	.word	0x20000010

0800ba8c <_kill_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	2300      	movs	r3, #0
 800ba90:	4d06      	ldr	r5, [pc, #24]	; (800baac <_kill_r+0x20>)
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	4611      	mov	r1, r2
 800ba98:	602b      	str	r3, [r5, #0]
 800ba9a:	f7fa fea6 	bl	80067ea <_kill>
 800ba9e:	1c43      	adds	r3, r0, #1
 800baa0:	d102      	bne.n	800baa8 <_kill_r+0x1c>
 800baa2:	682b      	ldr	r3, [r5, #0]
 800baa4:	b103      	cbz	r3, 800baa8 <_kill_r+0x1c>
 800baa6:	6023      	str	r3, [r4, #0]
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
 800baaa:	bf00      	nop
 800baac:	20000298 	.word	0x20000298

0800bab0 <_getpid_r>:
 800bab0:	f7fa be94 	b.w	80067dc <_getpid>

0800bab4 <__sread>:
 800bab4:	b510      	push	{r4, lr}
 800bab6:	460c      	mov	r4, r1
 800bab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800babc:	f000 f894 	bl	800bbe8 <_read_r>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	bfab      	itete	ge
 800bac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bac6:	89a3      	ldrhlt	r3, [r4, #12]
 800bac8:	181b      	addge	r3, r3, r0
 800baca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bace:	bfac      	ite	ge
 800bad0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bad2:	81a3      	strhlt	r3, [r4, #12]
 800bad4:	bd10      	pop	{r4, pc}

0800bad6 <__swrite>:
 800bad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bada:	461f      	mov	r7, r3
 800badc:	898b      	ldrh	r3, [r1, #12]
 800bade:	4605      	mov	r5, r0
 800bae0:	05db      	lsls	r3, r3, #23
 800bae2:	460c      	mov	r4, r1
 800bae4:	4616      	mov	r6, r2
 800bae6:	d505      	bpl.n	800baf4 <__swrite+0x1e>
 800bae8:	2302      	movs	r3, #2
 800baea:	2200      	movs	r2, #0
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	f000 f868 	bl	800bbc4 <_lseek_r>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	4632      	mov	r2, r6
 800baf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	4628      	mov	r0, r5
 800bb00:	463b      	mov	r3, r7
 800bb02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0a:	f000 b817 	b.w	800bb3c <_write_r>

0800bb0e <__sseek>:
 800bb0e:	b510      	push	{r4, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb16:	f000 f855 	bl	800bbc4 <_lseek_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	bf15      	itete	ne
 800bb20:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb2a:	81a3      	strheq	r3, [r4, #12]
 800bb2c:	bf18      	it	ne
 800bb2e:	81a3      	strhne	r3, [r4, #12]
 800bb30:	bd10      	pop	{r4, pc}

0800bb32 <__sclose>:
 800bb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb36:	f000 b813 	b.w	800bb60 <_close_r>
	...

0800bb3c <_write_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	4611      	mov	r1, r2
 800bb44:	2200      	movs	r2, #0
 800bb46:	4d05      	ldr	r5, [pc, #20]	; (800bb5c <_write_r+0x20>)
 800bb48:	602a      	str	r2, [r5, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f7fa fe84 	bl	8006858 <_write>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	d102      	bne.n	800bb5a <_write_r+0x1e>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	b103      	cbz	r3, 800bb5a <_write_r+0x1e>
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
 800bb5c:	20000298 	.word	0x20000298

0800bb60 <_close_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	2300      	movs	r3, #0
 800bb64:	4d05      	ldr	r5, [pc, #20]	; (800bb7c <_close_r+0x1c>)
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7fa fe90 	bl	8006890 <_close>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_close_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_close_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20000298 	.word	0x20000298

0800bb80 <_fstat_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	2300      	movs	r3, #0
 800bb84:	4d06      	ldr	r5, [pc, #24]	; (800bba0 <_fstat_r+0x20>)
 800bb86:	4604      	mov	r4, r0
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	602b      	str	r3, [r5, #0]
 800bb8e:	f7fa fe8a 	bl	80068a6 <_fstat>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d102      	bne.n	800bb9c <_fstat_r+0x1c>
 800bb96:	682b      	ldr	r3, [r5, #0]
 800bb98:	b103      	cbz	r3, 800bb9c <_fstat_r+0x1c>
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	bd38      	pop	{r3, r4, r5, pc}
 800bb9e:	bf00      	nop
 800bba0:	20000298 	.word	0x20000298

0800bba4 <_isatty_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	2300      	movs	r3, #0
 800bba8:	4d05      	ldr	r5, [pc, #20]	; (800bbc0 <_isatty_r+0x1c>)
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	f7fa fe88 	bl	80068c4 <_isatty>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d102      	bne.n	800bbbe <_isatty_r+0x1a>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b103      	cbz	r3, 800bbbe <_isatty_r+0x1a>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	20000298 	.word	0x20000298

0800bbc4 <_lseek_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4d05      	ldr	r5, [pc, #20]	; (800bbe4 <_lseek_r+0x20>)
 800bbd0:	602a      	str	r2, [r5, #0]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f7fa fe80 	bl	80068d8 <_lseek>
 800bbd8:	1c43      	adds	r3, r0, #1
 800bbda:	d102      	bne.n	800bbe2 <_lseek_r+0x1e>
 800bbdc:	682b      	ldr	r3, [r5, #0]
 800bbde:	b103      	cbz	r3, 800bbe2 <_lseek_r+0x1e>
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	20000298 	.word	0x20000298

0800bbe8 <_read_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	4611      	mov	r1, r2
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4d05      	ldr	r5, [pc, #20]	; (800bc08 <_read_r+0x20>)
 800bbf4:	602a      	str	r2, [r5, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f7fa fe11 	bl	800681e <_read>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d102      	bne.n	800bc06 <_read_r+0x1e>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	b103      	cbz	r3, 800bc06 <_read_r+0x1e>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	20000298 	.word	0x20000298

0800bc0c <_init>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	bf00      	nop
 800bc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc12:	bc08      	pop	{r3}
 800bc14:	469e      	mov	lr, r3
 800bc16:	4770      	bx	lr

0800bc18 <_fini>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	bf00      	nop
 800bc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1e:	bc08      	pop	{r3}
 800bc20:	469e      	mov	lr, r3
 800bc22:	4770      	bx	lr
