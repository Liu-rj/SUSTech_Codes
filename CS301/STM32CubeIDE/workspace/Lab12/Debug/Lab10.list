
Lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000523c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005524  08005524  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005524  08005524  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005524  08005524  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800552c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005260  20000074  080055a0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052d4  080055a0  000252d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f75d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3b  00000000  00000000  0002f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00032238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00032e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019de6  00000000  00000000  000339e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbfe  00000000  00000000  0004d7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098747  00000000  00000000  0005b3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3b0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034cc  00000000  00000000  000f3b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08005414 	.word	0x08005414

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08005414 	.word	0x08005414

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x28>)
 8000250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4a05      	ldr	r2, [pc, #20]	; (800026c <vApplicationGetIdleTaskMemory+0x2c>)
 8000256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000090 	.word	0x20000090
 800026c:	200000e4 	.word	0x200000e4

08000270 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b09e      	sub	sp, #120	; 0x78
 8000274:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000276:	f000 faf3 	bl	8000860 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027a:	f000 f895 	bl	80003a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800027e:	f000 f903 	bl	8000488 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000282:	f000 f8d7 	bl	8000434 <MX_USART1_UART_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of bSem01 */
	osSemaphoreDef(bSem01);
 8000286:	2300      	movs	r3, #0
 8000288:	673b      	str	r3, [r7, #112]	; 0x70
 800028a:	2300      	movs	r3, #0
 800028c:	677b      	str	r3, [r7, #116]	; 0x74
	bSem01Handle = osSemaphoreCreate(osSemaphore(bSem01), 1);
 800028e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000292:	2101      	movs	r1, #1
 8000294:	4618      	mov	r0, r3
 8000296:	f002 f8c2 	bl	800241e <osSemaphoreCreate>
 800029a:	4603      	mov	r3, r0
 800029c:	4a37      	ldr	r2, [pc, #220]	; (800037c <main+0x10c>)
 800029e:	6013      	str	r3, [r2, #0]

	/* definition and creation of bSemEmpty */
	osSemaphoreDef(bSemEmpty);
 80002a0:	2300      	movs	r3, #0
 80002a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80002a4:	2300      	movs	r3, #0
 80002a6:	66fb      	str	r3, [r7, #108]	; 0x6c
	bSemEmptyHandle = osSemaphoreCreate(osSemaphore(bSemEmpty), 1);
 80002a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80002ac:	2101      	movs	r1, #1
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 f8b5 	bl	800241e <osSemaphoreCreate>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a32      	ldr	r2, [pc, #200]	; (8000380 <main+0x110>)
 80002b8:	6013      	str	r3, [r2, #0]

	/* definition and creation of bSemFilled */
	osSemaphoreDef(bSemFilled);
 80002ba:	2300      	movs	r3, #0
 80002bc:	663b      	str	r3, [r7, #96]	; 0x60
 80002be:	2300      	movs	r3, #0
 80002c0:	667b      	str	r3, [r7, #100]	; 0x64
	bSemFilledHandle = osSemaphoreCreate(osSemaphore(bSemFilled), 1);
 80002c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002c6:	2101      	movs	r1, #1
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 f8a8 	bl	800241e <osSemaphoreCreate>
 80002ce:	4603      	mov	r3, r0
 80002d0:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <main+0x114>)
 80002d2:	6013      	str	r3, [r2, #0]

	/* definition and creation of bSemBuffer */
	osSemaphoreDef(bSemBuffer);
 80002d4:	2300      	movs	r3, #0
 80002d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80002d8:	2300      	movs	r3, #0
 80002da:	65fb      	str	r3, [r7, #92]	; 0x5c
	bSemBufferHandle = osSemaphoreCreate(osSemaphore(bSemBuffer), 4);
 80002dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002e0:	2104      	movs	r1, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f89b 	bl	800241e <osSemaphoreCreate>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a27      	ldr	r2, [pc, #156]	; (8000388 <main+0x118>)
 80002ec:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 4, uint16_t);
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <main+0x11c>)
 80002f0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80002f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80002fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f002 f9ca 	bl	800269a <osMessageCreate>
 8000306:	4603      	mov	r3, r0
 8000308:	4a21      	ldr	r2, [pc, #132]	; (8000390 <main+0x120>)
 800030a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osMailQDef(mail01, 4, mailStruct);
 800030c:	2304      	movs	r3, #4
 800030e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000310:	2302      	movs	r3, #2
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000318:	643b      	str	r3, [r7, #64]	; 0x40
	mail01Handle = osMailCreate(osMailQ(mail01), NULL);
 800031a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f002 f9e2 	bl	80026ea <osMailCreate>
 8000326:	4603      	mov	r3, r0
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <main+0x124>)
 800032a:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Producer */
	osThreadDef(Producer, FuncProducer, osPriorityNormal, 0, 128);
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <main+0x128>)
 800032e:	f107 041c 	add.w	r4, r7, #28
 8000332:	461d      	mov	r5, r3
 8000334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ProducerHandle = osThreadCreate(osThread(Producer), NULL);
 8000340:	f107 031c 	add.w	r3, r7, #28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f002 f809 	bl	800235e <osThreadCreate>
 800034c:	4603      	mov	r3, r0
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <main+0x12c>)
 8000350:	6013      	str	r3, [r2, #0]

	/* definition and creation of Consumer */
	osThreadDef(Consumer, FuncConsumer, osPriorityNormal, 0, 128);
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <main+0x130>)
 8000354:	463c      	mov	r4, r7
 8000356:	461d      	mov	r5, r3
 8000358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ConsumerHandle = osThreadCreate(osThread(Consumer), NULL);
 8000364:	463b      	mov	r3, r7
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f001 fff8 	bl	800235e <osThreadCreate>
 800036e:	4603      	mov	r3, r0
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <main+0x134>)
 8000372:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000374:	f001 ffec 	bl	8002350 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000378:	e7fe      	b.n	8000378 <main+0x108>
 800037a:	bf00      	nop
 800037c:	20005264 	.word	0x20005264
 8000380:	20005260 	.word	0x20005260
 8000384:	200052bc 	.word	0x200052bc
 8000388:	200052b0 	.word	0x200052b0
 800038c:	08005444 	.word	0x08005444
 8000390:	200052b4 	.word	0x200052b4
 8000394:	200052ac 	.word	0x200052ac
 8000398:	08005454 	.word	0x08005454
 800039c:	2000525c 	.word	0x2000525c
 80003a0:	08005470 	.word	0x08005470
 80003a4:	200052b8 	.word	0x200052b8

080003a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	; 0x40
 80003ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 fbf8 	bl	8004bac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003ec:	f107 0318 	add.w	r3, r7, #24
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fe93 	bl	800111c <HAL_RCC_OscConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x58>
		Error_Handler();
 80003fc:	f000 f910 	bl	8000620 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000400:	230f      	movs	r3, #15
 8000402:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000404:	2302      	movs	r3, #2
 8000406:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000410:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2102      	movs	r1, #2
 800041a:	4618      	mov	r0, r3
 800041c:	f001 f8fe 	bl	800161c <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x82>
		Error_Handler();
 8000426:	f000 f8fb 	bl	8000620 <Error_Handler>
	}
}
 800042a:	bf00      	nop
 800042c:	3740      	adds	r7, #64	; 0x40
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_USART1_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800046c:	f001 fa70 	bl	8001950 <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000476:	f000 f8d3 	bl	8000620 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20005268 	.word	0x20005268
 8000484:	40013800 	.word	0x40013800

08000488 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <MX_GPIO_Init+0x9c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a20      	ldr	r2, [pc, #128]	; (8000524 <MX_GPIO_Init+0x9c>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0x9c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0320 	and.w	r3, r3, #32
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_GPIO_Init+0x9c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <MX_GPIO_Init+0x9c>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_GPIO_Init+0x9c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	4815      	ldr	r0, [pc, #84]	; (8000528 <MX_GPIO_Init+0xa0>)
 80004d4:	f000 fe0a 	bl	80010ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2104      	movs	r1, #4
 80004dc:	4813      	ldr	r0, [pc, #76]	; (800052c <MX_GPIO_Init+0xa4>)
 80004de:	f000 fe05 	bl	80010ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80004e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2302      	movs	r3, #2
 80004f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004f4:	f107 0308 	add.w	r3, r7, #8
 80004f8:	4619      	mov	r1, r3
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <MX_GPIO_Init+0xa0>)
 80004fc:	f000 fc62 	bl	8000dc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000500:	2304      	movs	r3, #4
 8000502:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2302      	movs	r3, #2
 800050e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_GPIO_Init+0xa4>)
 8000518:	f000 fc54 	bl	8000dc4 <HAL_GPIO_Init>

}
 800051c:	bf00      	nop
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800
 800052c:	40011400 	.word	0x40011400

08000530 <FuncProducer>:
 * @brief  Function implementing the Producer thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_FuncProducer */
void FuncProducer(void const *argument) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	mailStruct *mail; /* Infinite loop */
	int i = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
	char msg[20];
	for (;;) {
		i++;
 800053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053e:	3301      	adds	r3, #1
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
		mail = (mailStruct*) osMailAlloc(mail01Handle,
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <FuncProducer+0x70>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f04f 31ff 	mov.w	r1, #4294967295
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f925 	bl	800279a <osMailAlloc>
 8000550:	6238      	str	r0, [r7, #32]
		osWaitForever);
		mail->var = i;
 8000552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000554:	b29a      	uxth	r2, r3
 8000556:	6a3b      	ldr	r3, [r7, #32]
 8000558:	801a      	strh	r2, [r3, #0]
		osMailPut(mail01Handle, mail);
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <FuncProducer+0x70>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6a39      	ldr	r1, [r7, #32]
 8000560:	4618      	mov	r0, r3
 8000562:	f002 f92f 	bl	80027c4 <osMailPut>
		sprintf(msg, "PUT Mail value: %d\r\n", mail->var);
 8000566:	6a3b      	ldr	r3, [r7, #32]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	490c      	ldr	r1, [pc, #48]	; (80005a4 <FuncProducer+0x74>)
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fb22 	bl	8004bbc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe57 	bl	8000230 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	f107 010c 	add.w	r1, r7, #12
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <FuncProducer+0x78>)
 8000590:	f001 fa2b 	bl	80019ea <HAL_UART_Transmit>
		osDelay(1000);
 8000594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000598:	f001 ff2d 	bl	80023f6 <osDelay>
	for (;;) {
 800059c:	e7ce      	b.n	800053c <FuncProducer+0xc>
 800059e:	bf00      	nop
 80005a0:	200052ac 	.word	0x200052ac
 80005a4:	0800548c 	.word	0x0800548c
 80005a8:	20005268 	.word	0x20005268

080005ac <FuncConsumer>:
 * @brief Function implementing the Consumer thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FuncConsumer */
void FuncConsumer(void const *argument) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FuncConsumer */
	osEvent event;
	mailStruct *pMail;
	char msg[20]; /* Infinite loop */
	osDelay(10000);
 80005b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005b8:	f001 ff1d 	bl	80023f6 <osDelay>
	for (;;) {
		event = osMailGet(mail01Handle, osWaitForever);
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <FuncConsumer+0x68>)
 80005be:	6819      	ldr	r1, [r3, #0]
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f939 	bl	8002840 <osMailGet>
		if (event.status == osEventMail) {
 80005ce:	6a3b      	ldr	r3, [r7, #32]
 80005d0:	2b20      	cmp	r3, #32
 80005d2:	d1f3      	bne.n	80005bc <FuncConsumer+0x10>
			pMail = event.value.p;
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			sprintf(msg, "Receive Mail value: %d\r\n", pMail->var);
 80005d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <FuncConsumer+0x6c>)
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 fae9 	bl	8004bbc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg),
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe1e 	bl	8000230 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f107 010c 	add.w	r1, r7, #12
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <FuncConsumer+0x70>)
 8000602:	f001 f9f2 	bl	80019ea <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			osMailFree(mail01Handle, pMail);
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <FuncConsumer+0x68>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800060c:	4618      	mov	r0, r3
 800060e:	f002 f98b 	bl	8002928 <osMailFree>
		event = osMailGet(mail01Handle, osWaitForever);
 8000612:	e7d3      	b.n	80005bc <FuncConsumer+0x10>
 8000614:	200052ac 	.word	0x200052ac
 8000618:	080054a4 	.word	0x080054a4
 800061c:	20005268 	.word	0x20005268

08000620 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <HAL_MspInit+0x68>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_MspInit+0x68>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x68>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x68>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <HAL_MspInit+0x68>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x68>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	210f      	movs	r1, #15
 8000666:	f06f 0001 	mvn.w	r0, #1
 800066a:	f000 fa32 	bl	8000ad2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x6c>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x6c>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a20      	ldr	r2, [pc, #128]	; (8000738 <HAL_UART_MspInit+0x9c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d139      	bne.n	8000730 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <HAL_UART_MspInit+0xa0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a1e      	ldr	r2, [pc, #120]	; (800073c <HAL_UART_MspInit+0xa0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_UART_MspInit+0xa0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_UART_MspInit+0xa0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <HAL_UART_MspInit+0xa0>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_UART_MspInit+0xa0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_UART_MspInit+0xa4>)
 8000702:	f000 fb5f 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <HAL_UART_MspInit+0xa4>)
 800071c:	f000 fb52 	bl	8000dc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	2025      	movs	r0, #37	; 0x25
 8000726:	f000 f9d4 	bl	8000ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800072a:	2025      	movs	r0, #37	; 0x25
 800072c:	f000 f9ed 	bl	8000b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40013800 	.word	0x40013800
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f8bb 	bl	80008ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000776:	f003 fd0b 	bl	8004190 <xTaskGetSchedulerState>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d001      	beq.n	8000784 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000780:	f003 ff82 	bl	8004688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <USART1_IRQHandler+0x10>)
 800078e:	f001 f9bf 	bl	8001b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20005268 	.word	0x20005268

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f004 f9b6 	bl	8004b3c <__errno>
 80007d0:	4603      	mov	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a05      	ldr	r2, [pc, #20]	; (8000800 <_sbrk+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000c000 	.word	0x2000c000
 80007fc:	00000400 	.word	0x00000400
 8000800:	200002e4 	.word	0x200002e4
 8000804:	200052d8 	.word	0x200052d8

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083a:	f7ff ffe5 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083e:	f004 f983 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fd15 	bl	8000270 <main>
  bx lr
 8000846:	4770      	bx	lr
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000850:	0800552c 	.word	0x0800552c
  ldr r2, =_sbss
 8000854:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000858:	200052d4 	.word	0x200052d4

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x28>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f923 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff fed6 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f93b 	bl	8000b26 <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 f903 	bl	8000ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000008 	.word	0x20000008
 800090c:	200052c0 	.word	0x200052c0

08000910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	200052c0 	.word	0x200052c0

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4906      	ldr	r1, [pc, #24]	; (80009bc <__NVIC_EnableIRQ+0x34>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a88:	d301      	bcc.n	8000a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00f      	b.n	8000aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <SysTick_Config+0x40>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a96:	210f      	movs	r1, #15
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f7ff ff90 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff2d 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae4:	f7ff ff42 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff ff90 	bl	8000a14 <NVIC_EncodePriority>
 8000af4:	4602      	mov	r2, r0
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff5f 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff35 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffa2 	bl	8000a78 <SysTick_Config>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b085      	sub	sp, #20
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d008      	beq.n	8000b66 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2204      	movs	r2, #4
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e020      	b.n	8000ba8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 020e 	bic.w	r2, r2, #14
 8000b74:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0201 	bic.w	r2, r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d005      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e0d6      	b.n	8000d84 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 020e 	bic.w	r2, r2, #14
 8000be4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0201 	bic.w	r2, r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b64      	ldr	r3, [pc, #400]	; (8000d90 <HAL_DMA_Abort_IT+0x1dc>)
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d958      	bls.n	8000cb4 <HAL_DMA_Abort_IT+0x100>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a63      	ldr	r2, [pc, #396]	; (8000d94 <HAL_DMA_Abort_IT+0x1e0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d04f      	beq.n	8000cac <HAL_DMA_Abort_IT+0xf8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a61      	ldr	r2, [pc, #388]	; (8000d98 <HAL_DMA_Abort_IT+0x1e4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d048      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0xf4>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a60      	ldr	r2, [pc, #384]	; (8000d9c <HAL_DMA_Abort_IT+0x1e8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d040      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0xee>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a5e      	ldr	r2, [pc, #376]	; (8000da0 <HAL_DMA_Abort_IT+0x1ec>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d038      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xe8>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a5d      	ldr	r2, [pc, #372]	; (8000da4 <HAL_DMA_Abort_IT+0x1f0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d030      	beq.n	8000c96 <HAL_DMA_Abort_IT+0xe2>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a5b      	ldr	r2, [pc, #364]	; (8000da8 <HAL_DMA_Abort_IT+0x1f4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d028      	beq.n	8000c90 <HAL_DMA_Abort_IT+0xdc>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a53      	ldr	r2, [pc, #332]	; (8000d90 <HAL_DMA_Abort_IT+0x1dc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d020      	beq.n	8000c8a <HAL_DMA_Abort_IT+0xd6>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a57      	ldr	r2, [pc, #348]	; (8000dac <HAL_DMA_Abort_IT+0x1f8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d019      	beq.n	8000c86 <HAL_DMA_Abort_IT+0xd2>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a56      	ldr	r2, [pc, #344]	; (8000db0 <HAL_DMA_Abort_IT+0x1fc>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d012      	beq.n	8000c82 <HAL_DMA_Abort_IT+0xce>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a54      	ldr	r2, [pc, #336]	; (8000db4 <HAL_DMA_Abort_IT+0x200>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00a      	beq.n	8000c7c <HAL_DMA_Abort_IT+0xc8>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a53      	ldr	r2, [pc, #332]	; (8000db8 <HAL_DMA_Abort_IT+0x204>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d102      	bne.n	8000c76 <HAL_DMA_Abort_IT+0xc2>
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	e01b      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7a:	e018      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	e015      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c82:	2310      	movs	r3, #16
 8000c84:	e013      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e011      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c8e:	e00e      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c94:	e00b      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9a:	e008      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	e005      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	e002      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000ca8:	2310      	movs	r3, #16
 8000caa:	e000      	b.n	8000cae <HAL_DMA_Abort_IT+0xfa>
 8000cac:	2301      	movs	r3, #1
 8000cae:	4a43      	ldr	r2, [pc, #268]	; (8000dbc <HAL_DMA_Abort_IT+0x208>)
 8000cb0:	6053      	str	r3, [r2, #4]
 8000cb2:	e057      	b.n	8000d64 <HAL_DMA_Abort_IT+0x1b0>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <HAL_DMA_Abort_IT+0x1e0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d04f      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x1aa>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a35      	ldr	r2, [pc, #212]	; (8000d98 <HAL_DMA_Abort_IT+0x1e4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d048      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x1a6>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <HAL_DMA_Abort_IT+0x1e8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d040      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x1a0>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a32      	ldr	r2, [pc, #200]	; (8000da0 <HAL_DMA_Abort_IT+0x1ec>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d038      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x19a>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a30      	ldr	r2, [pc, #192]	; (8000da4 <HAL_DMA_Abort_IT+0x1f0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d030      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x194>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <HAL_DMA_Abort_IT+0x1f4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d028      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x18e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_DMA_Abort_IT+0x1dc>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d020      	beq.n	8000d3c <HAL_DMA_Abort_IT+0x188>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2b      	ldr	r2, [pc, #172]	; (8000dac <HAL_DMA_Abort_IT+0x1f8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d019      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x184>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <HAL_DMA_Abort_IT+0x1fc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d012      	beq.n	8000d34 <HAL_DMA_Abort_IT+0x180>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <HAL_DMA_Abort_IT+0x200>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00a      	beq.n	8000d2e <HAL_DMA_Abort_IT+0x17a>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_DMA_Abort_IT+0x204>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d102      	bne.n	8000d28 <HAL_DMA_Abort_IT+0x174>
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	e01b      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	e018      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d32:	e015      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d34:	2310      	movs	r3, #16
 8000d36:	e013      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e011      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d40:	e00e      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d46:	e00b      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	e008      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	e005      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	e002      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	e000      	b.n	8000d60 <HAL_DMA_Abort_IT+0x1ac>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_DMA_Abort_IT+0x20c>)
 8000d62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	4798      	blx	r3
    } 
  }
  return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40020080 	.word	0x40020080
 8000d94:	40020008 	.word	0x40020008
 8000d98:	4002001c 	.word	0x4002001c
 8000d9c:	40020030 	.word	0x40020030
 8000da0:	40020044 	.word	0x40020044
 8000da4:	40020058 	.word	0x40020058
 8000da8:	4002006c 	.word	0x4002006c
 8000dac:	40020408 	.word	0x40020408
 8000db0:	4002041c 	.word	0x4002041c
 8000db4:	40020430 	.word	0x40020430
 8000db8:	40020444 	.word	0x40020444
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b08b      	sub	sp, #44	; 0x2c
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	e179      	b.n	80010cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8168 	bne.w	80010c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4aa0      	ldr	r2, [pc, #640]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d05e      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e00:	4a9e      	ldr	r2, [pc, #632]	; (800107c <HAL_GPIO_Init+0x2b8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d875      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e06:	4a9e      	ldr	r2, [pc, #632]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d058      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e0c:	4a9c      	ldr	r2, [pc, #624]	; (8001080 <HAL_GPIO_Init+0x2bc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d86f      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e12:	4a9c      	ldr	r2, [pc, #624]	; (8001084 <HAL_GPIO_Init+0x2c0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d052      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e18:	4a9a      	ldr	r2, [pc, #616]	; (8001084 <HAL_GPIO_Init+0x2c0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d869      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e1e:	4a9a      	ldr	r2, [pc, #616]	; (8001088 <HAL_GPIO_Init+0x2c4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d04c      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e24:	4a98      	ldr	r2, [pc, #608]	; (8001088 <HAL_GPIO_Init+0x2c4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d863      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e2a:	4a98      	ldr	r2, [pc, #608]	; (800108c <HAL_GPIO_Init+0x2c8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d046      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
 8000e30:	4a96      	ldr	r2, [pc, #600]	; (800108c <HAL_GPIO_Init+0x2c8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d85d      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d82a      	bhi.n	8000e90 <HAL_GPIO_Init+0xcc>
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d859      	bhi.n	8000ef2 <HAL_GPIO_Init+0x12e>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <HAL_GPIO_Init+0x80>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000ebf 	.word	0x08000ebf
 8000e48:	08000e99 	.word	0x08000e99
 8000e4c:	08000eab 	.word	0x08000eab
 8000e50:	08000eed 	.word	0x08000eed
 8000e54:	08000ef3 	.word	0x08000ef3
 8000e58:	08000ef3 	.word	0x08000ef3
 8000e5c:	08000ef3 	.word	0x08000ef3
 8000e60:	08000ef3 	.word	0x08000ef3
 8000e64:	08000ef3 	.word	0x08000ef3
 8000e68:	08000ef3 	.word	0x08000ef3
 8000e6c:	08000ef3 	.word	0x08000ef3
 8000e70:	08000ef3 	.word	0x08000ef3
 8000e74:	08000ef3 	.word	0x08000ef3
 8000e78:	08000ef3 	.word	0x08000ef3
 8000e7c:	08000ef3 	.word	0x08000ef3
 8000e80:	08000ef3 	.word	0x08000ef3
 8000e84:	08000ef3 	.word	0x08000ef3
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000eb5 	.word	0x08000eb5
 8000e90:	4a7f      	ldr	r2, [pc, #508]	; (8001090 <HAL_GPIO_Init+0x2cc>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e96:	e02c      	b.n	8000ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	623b      	str	r3, [r7, #32]
          break;
 8000e9e:	e029      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e024      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	3308      	adds	r3, #8
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e01f      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e01a      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e013      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	611a      	str	r2, [r3, #16]
          break;
 8000ede:	e009      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	615a      	str	r2, [r3, #20]
          break;
 8000eea:	e003      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x130>
          break;
 8000ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2bff      	cmp	r3, #255	; 0xff
 8000ef8:	d801      	bhi.n	8000efe <HAL_GPIO_Init+0x13a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	e001      	b.n	8000f02 <HAL_GPIO_Init+0x13e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3304      	adds	r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d802      	bhi.n	8000f10 <HAL_GPIO_Init+0x14c>
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x152>
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3b08      	subs	r3, #8
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	6a39      	ldr	r1, [r7, #32]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	431a      	orrs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 80c1 	beq.w	80010c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f44:	4b53      	ldr	r3, [pc, #332]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a52      	ldr	r2, [pc, #328]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b50      	ldr	r3, [pc, #320]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x2d4>)
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a46      	ldr	r2, [pc, #280]	; (800109c <HAL_GPIO_Init+0x2d8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d01f      	beq.n	8000fc8 <HAL_GPIO_Init+0x204>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a45      	ldr	r2, [pc, #276]	; (80010a0 <HAL_GPIO_Init+0x2dc>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d019      	beq.n	8000fc4 <HAL_GPIO_Init+0x200>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a44      	ldr	r2, [pc, #272]	; (80010a4 <HAL_GPIO_Init+0x2e0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d013      	beq.n	8000fc0 <HAL_GPIO_Init+0x1fc>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <HAL_GPIO_Init+0x2e4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a42      	ldr	r2, [pc, #264]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x1f4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a41      	ldr	r2, [pc, #260]	; (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_GPIO_Init+0x1f0>
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	e00a      	b.n	8000fca <HAL_GPIO_Init+0x206>
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	e008      	b.n	8000fca <HAL_GPIO_Init+0x206>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x206>
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e004      	b.n	8000fca <HAL_GPIO_Init+0x206>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e002      	b.n	8000fca <HAL_GPIO_Init+0x206>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <HAL_GPIO_Init+0x206>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fcc:	f002 0203 	and.w	r2, r2, #3
 8000fd0:	0092      	lsls	r2, r2, #2
 8000fd2:	4093      	lsls	r3, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fda:	492f      	ldr	r1, [pc, #188]	; (8001098 <HAL_GPIO_Init+0x2d4>)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	492e      	ldr	r1, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	492a      	ldr	r1, [pc, #168]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 800100c:	4013      	ands	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4924      	ldr	r1, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4920      	ldr	r1, [pc, #128]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8001034:	4013      	ands	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	491a      	ldr	r1, [pc, #104]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4916      	ldr	r1, [pc, #88]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 800105c:	4013      	ands	r3, r2
 800105e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d025      	beq.n	80010b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	4910      	ldr	r1, [pc, #64]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	60cb      	str	r3, [r1, #12]
 8001078:	e025      	b.n	80010c6 <HAL_GPIO_Init+0x302>
 800107a:	bf00      	nop
 800107c:	10320000 	.word	0x10320000
 8001080:	10310000 	.word	0x10310000
 8001084:	10220000 	.word	0x10220000
 8001088:	10210000 	.word	0x10210000
 800108c:	10120000 	.word	0x10120000
 8001090:	10110000 	.word	0x10110000
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	40010800 	.word	0x40010800
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	40011400 	.word	0x40011400
 80010ac:	40011800 	.word	0x40011800
 80010b0:	40011c00 	.word	0x40011c00
 80010b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_GPIO_Init+0x324>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	4909      	ldr	r1, [pc, #36]	; (80010e8 <HAL_GPIO_Init+0x324>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	3301      	adds	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f47f ae7e 	bne.w	8000dd8 <HAL_GPIO_Init+0x14>
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	372c      	adds	r7, #44	; 0x2c
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	611a      	str	r2, [r3, #16]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e26c      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8087 	beq.w	800124a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800113c:	4b92      	ldr	r3, [pc, #584]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b04      	cmp	r3, #4
 8001146:	d00c      	beq.n	8001162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001148:	4b8f      	ldr	r3, [pc, #572]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d112      	bne.n	800117a <HAL_RCC_OscConfig+0x5e>
 8001154:	4b8c      	ldr	r3, [pc, #560]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d10b      	bne.n	800117a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d06c      	beq.n	8001248 <HAL_RCC_OscConfig+0x12c>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d168      	bne.n	8001248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e246      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x76>
 8001184:	4b80      	ldr	r3, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a7f      	ldr	r2, [pc, #508]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e02e      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x98>
 800119a:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7a      	ldr	r2, [pc, #488]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a77      	ldr	r2, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0xbc>
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a71      	ldr	r2, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a67      	ldr	r2, [pc, #412]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb8a 	bl	8000910 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fb86 	bl	8000910 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1fa      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xe4>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fb76 	bl	8000910 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fb72 	bl	8000910 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1e6      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x10c>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001256:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x18c>
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1ba      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4939      	ldr	r1, [pc, #228]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fb2b 	bl	8000910 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fb27 	bl	8000910 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e19b      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4927      	ldr	r1, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb0a 	bl	8000910 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fb06 	bl	8000910 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e17a      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d03a      	beq.n	80013a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d019      	beq.n	8001366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff faea 	bl	8000910 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fae6 	bl	8000910 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e15a      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 fad8 	bl	8001914 <RCC_Delay>
 8001364:	e01c      	b.n	80013a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff fad0 	bl	8000910 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001372:	e00f      	b.n	8001394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff facc 	bl	8000910 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d908      	bls.n	8001394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e140      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	42420000 	.word	0x42420000
 8001390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e9      	bne.n	8001374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a6 	beq.w	80014fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b97      	ldr	r3, [pc, #604]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b94      	ldr	r3, [pc, #592]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a93      	ldr	r2, [pc, #588]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b91      	ldr	r3, [pc, #580]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a8a      	ldr	r2, [pc, #552]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fa8d 	bl	8000910 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fa89 	bl	8000910 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0fd      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x312>
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a7a      	ldr	r2, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e02d      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x334>
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a75      	ldr	r2, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a72      	ldr	r2, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x356>
 8001458:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a69      	ldr	r2, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a66      	ldr	r2, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a63      	ldr	r2, [pc, #396]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fa3d 	bl	8000910 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fa39 	bl	8000910 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0ab      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4b57      	ldr	r3, [pc, #348]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ee      	beq.n	800149a <HAL_RCC_OscConfig+0x37e>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fa27 	bl	8000910 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fa23 	bl	8000910 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e095      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a47      	ldr	r2, [pc, #284]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8081 	beq.w	8001606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d061      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d146      	bne.n	80015a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x4fc>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff f9f7 	bl	8000910 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff f9f3 	bl	8000910 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e067      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d108      	bne.n	8001560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	492d      	ldr	r1, [pc, #180]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a19      	ldr	r1, [r3, #32]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	430b      	orrs	r3, r1
 8001572:	4927      	ldr	r1, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x4fc>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff f9c7 	bl	8000910 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff f9c3 	bl	8000910 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e037      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x46a>
 80015a4:	e02f      	b.n	8001606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_RCC_OscConfig+0x4fc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff f9b0 	bl	8000910 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff f9ac 	bl	8000910 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e020      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x498>
 80015d2:	e018      	b.n	8001606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e013      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	40007000 	.word	0x40007000
 8001618:	42420060 	.word	0x42420060

0800161c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0d0      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d910      	bls.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b67      	ldr	r3, [pc, #412]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 0207 	bic.w	r2, r3, #7
 8001646:	4965      	ldr	r1, [pc, #404]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b63      	ldr	r3, [pc, #396]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0b8      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001678:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800169a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	494d      	ldr	r1, [pc, #308]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d040      	beq.n	800173c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d115      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e07f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e073      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06b      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f023 0203 	bic.w	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4936      	ldr	r1, [pc, #216]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800170c:	f7ff f900 	bl	8000910 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	e00a      	b.n	800172a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff f8fc 	bl	8000910 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e053      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 020c 	and.w	r2, r3, #12
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	429a      	cmp	r2, r3
 800173a:	d1eb      	bne.n	8001714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d210      	bcs.n	800176c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	4922      	ldr	r1, [pc, #136]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e032      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4916      	ldr	r1, [pc, #88]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	490e      	ldr	r1, [pc, #56]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017aa:	f000 f821 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	490a      	ldr	r1, [pc, #40]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	5ccb      	ldrb	r3, [r1, r3]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1cc>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f85e 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	080054d8 	.word	0x080054d8
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b490      	push	{r4, r7}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017f8:	1d3c      	adds	r4, r7, #4
 80017fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001800:	f240 2301 	movw	r3, #513	; 0x201
 8001804:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x40>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x46>
 800182e:	e02d      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001832:	623b      	str	r3, [r7, #32]
      break;
 8001834:	e02d      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001842:	4413      	add	r3, r2
 8001844:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001848:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c5b      	lsrs	r3, r3, #17
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001862:	4413      	add	r3, r2
 8001864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186e:	fb02 f203 	mul.w	r2, r2, r3
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
 800187a:	e004      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	623b      	str	r3, [r7, #32]
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800188e:	623b      	str	r3, [r7, #32]
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	6a3b      	ldr	r3, [r7, #32]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bc90      	pop	{r4, r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	080054c0 	.word	0x080054c0
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200
 80018ac:	003d0900 	.word	0x003d0900

080018b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c8:	f7ff fff2 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4903      	ldr	r1, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	080054e8 	.word	0x080054e8

080018ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0adb      	lsrs	r3, r3, #11
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	080054e8 	.word	0x080054e8

08001914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <RCC_Delay+0x34>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <RCC_Delay+0x38>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0a5b      	lsrs	r3, r3, #9
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001930:	bf00      	nop
  }
  while (Delay --);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f9      	bne.n	8001930 <RCC_Delay+0x1c>
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000000 	.word	0x20000000
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e03f      	b.n	80019e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe fe90 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2224      	movs	r2, #36	; 0x24
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fc25 	bl	80021e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b08a      	sub	sp, #40	; 0x28
 80019ee:	af02      	add	r7, sp, #8
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d17c      	bne.n	8001b04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HAL_UART_Transmit+0x2c>
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e075      	b.n	8001b06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_UART_Transmit+0x3e>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e06e      	b.n	8001b06 <HAL_UART_Transmit+0x11c>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2221      	movs	r2, #33	; 0x21
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a3e:	f7fe ff67 	bl	8000910 <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	88fa      	ldrh	r2, [r7, #6]
 8001a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a58:	d108      	bne.n	8001a6c <HAL_UART_Transmit+0x82>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e003      	b.n	8001a74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a7c:	e02a      	b.n	8001ad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2200      	movs	r2, #0
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fa11 	bl	8001eb0 <UART_WaitOnFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e036      	b.n	8001b06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	e007      	b.n	8001ac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1cf      	bne.n	8001a7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2140      	movs	r1, #64	; 0x40
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f9e1 	bl	8001eb0 <UART_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e006      	b.n	8001b06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10d      	bne.n	8001b62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_UART_IRQHandler+0x52>
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fa99 	bl	8002092 <UART_Receive_IT>
      return;
 8001b60:	e17b      	b.n	8001e5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80b1 	beq.w	8001ccc <HAL_UART_IRQHandler+0x1bc>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_UART_IRQHandler+0x70>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x90>
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_UART_IRQHandler+0xb0>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <HAL_UART_IRQHandler+0xd0>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f043 0204 	orr.w	r2, r3, #4
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00f      	beq.n	8001c0a <HAL_UART_IRQHandler+0xfa>
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <HAL_UART_IRQHandler+0xee>
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f043 0208 	orr.w	r2, r3, #8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 811e 	beq.w	8001e50 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_UART_IRQHandler+0x11e>
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa32 	bl	8002092 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_UART_IRQHandler+0x146>
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d031      	beq.n	8001cba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f974 	bl	8001f44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d023      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d013      	beq.n	8001caa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	4a76      	ldr	r2, [pc, #472]	; (8001e60 <HAL_UART_IRQHandler+0x350>)
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff90 	bl	8000bb4 <HAL_DMA_Abort_IT>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca8:	e00e      	b.n	8001cc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8ec 	bl	8001e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb0:	e00a      	b.n	8001cc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8e8 	bl	8001e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cb8:	e006      	b.n	8001cc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8e4 	bl	8001e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001cc6:	e0c3      	b.n	8001e50 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc8:	bf00      	nop
    return;
 8001cca:	e0c1      	b.n	8001e50 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 80a1 	bne.w	8001e18 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 809b 	beq.w	8001e18 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8095 	beq.w	8001e18 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d04e      	beq.n	8001db0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001d1c:	8a3b      	ldrh	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8098 	beq.w	8001e54 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d28:	8a3a      	ldrh	r2, [r7, #16]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	f080 8092 	bcs.w	8001e54 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8a3a      	ldrh	r2, [r7, #16]
 8001d34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d02b      	beq.n	8001d98 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d6e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0210 	bic.w	r2, r2, #16
 8001d8c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fed3 	bl	8000b3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f876 	bl	8001e9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001dae:	e051      	b.n	8001e54 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d047      	beq.n	8001e58 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001dc8:	8a7b      	ldrh	r3, [r7, #18]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d044      	beq.n	8001e58 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ddc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0210 	bic.w	r2, r2, #16
 8001e0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f842 	bl	8001e9a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001e16:	e01f      	b.n	8001e58 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_UART_IRQHandler+0x324>
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8c9 	bl	8001fc4 <UART_Transmit_IT>
    return;
 8001e32:	e012      	b.n	8001e5a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <HAL_UART_IRQHandler+0x34a>
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f90a 	bl	8002062 <UART_EndTransmit_IT>
    return;
 8001e4e:	e004      	b.n	8001e5a <HAL_UART_IRQHandler+0x34a>
    return;
 8001e50:	bf00      	nop
 8001e52:	e002      	b.n	8001e5a <HAL_UART_IRQHandler+0x34a>
      return;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <HAL_UART_IRQHandler+0x34a>
      return;
 8001e58:	bf00      	nop
  }
}
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	08001f9d 	.word	0x08001f9d

08001e64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec0:	e02c      	b.n	8001f1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d028      	beq.n	8001f1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ed0:	f7fe fd1e 	bl	8000910 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d21d      	bcs.n	8001f1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001eee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e00f      	b.n	8001f3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d0c3      	beq.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0210 	bic.w	r2, r2, #16
 8001f82:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff ff66 	bl	8001e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b21      	cmp	r3, #33	; 0x21
 8001fd6:	d13e      	bne.n	8002056 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe0:	d114      	bne.n	800200c <UART_Transmit_IT+0x48>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d110      	bne.n	800200c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ffe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	1c9a      	adds	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	621a      	str	r2, [r3, #32]
 800200a:	e008      	b.n	800201e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	1c59      	adds	r1, r3, #1
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6211      	str	r1, [r2, #32]
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29b      	uxth	r3, r3
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4619      	mov	r1, r3
 800202c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002040:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002050:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002078:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff feee 	bl	8001e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b22      	cmp	r3, #34	; 0x22
 80020a4:	f040 8099 	bne.w	80021da <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b0:	d117      	bne.n	80020e2 <UART_Receive_IT+0x50>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
 80020e0:	e026      	b.n	8002130 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	d007      	beq.n	8002106 <UART_Receive_IT+0x74>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <UART_Receive_IT+0x82>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e008      	b.n	8002126 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002120:	b2da      	uxtb	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29b      	uxth	r3, r3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4619      	mov	r1, r3
 800213e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002140:	2b00      	cmp	r3, #0
 8002142:	d148      	bne.n	80021d6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0220 	bic.w	r2, r2, #32
 8002152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	2b01      	cmp	r3, #1
 8002182:	d123      	bne.n	80021cc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0210 	bic.w	r2, r2, #16
 8002198:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d10a      	bne.n	80021be <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fe68 	bl	8001e9a <HAL_UARTEx_RxEventCallback>
 80021ca:	e002      	b.n	80021d2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff fe52 	bl	8001e76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e002      	b.n	80021dc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800221e:	f023 030c 	bic.w	r3, r3, #12
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	430b      	orrs	r3, r1
 800222a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <UART_SetConfig+0x114>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800224c:	f7ff fb4e 	bl	80018ec <HAL_RCC_GetPCLK2Freq>
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	e002      	b.n	800225a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002254:	f7ff fb36 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8002258:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009a      	lsls	r2, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <UART_SetConfig+0x118>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	0119      	lsls	r1, r3, #4
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009a      	lsls	r2, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <UART_SetConfig+0x118>)
 8002292:	fba3 0302 	umull	r0, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2064      	movs	r0, #100	; 0x64
 800229a:	fb00 f303 	mul.w	r3, r0, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <UART_SetConfig+0x118>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b0:	4419      	add	r1, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009a      	lsls	r2, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <UART_SetConfig+0x118>)
 80022ca:	fba3 0302 	umull	r0, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2064      	movs	r0, #100	; 0x64
 80022d2:	fb00 f303 	mul.w	r3, r0, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <UART_SetConfig+0x118>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	440a      	add	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40013800 	.word	0x40013800
 80022fc:	51eb851f 	.word	0x51eb851f

08002300 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800230e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002312:	2b84      	cmp	r3, #132	; 0x84
 8002314:	d005      	beq.n	8002322 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002316:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4413      	add	r3, r2
 800231e:	3303      	adds	r3, #3
 8002320:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002334:	f3ef 8305 	mrs	r3, IPSR
 8002338:	607b      	str	r3, [r7, #4]
  return(result);
 800233a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002354:	f001 fb16 	bl	8003984 <vTaskStartScheduler>
  
  return osOK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}

0800235e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800235e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002360:	b089      	sub	sp, #36	; 0x24
 8002362:	af04      	add	r7, sp, #16
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <osThreadCreate+0x54>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01c      	beq.n	80023b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685c      	ldr	r4, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681d      	ldr	r5, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691e      	ldr	r6, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ffb8 	bl	8002300 <makeFreeRtosPriority>
 8002390:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800239a:	9202      	str	r2, [sp, #8]
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9100      	str	r1, [sp, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4632      	mov	r2, r6
 80023a4:	4629      	mov	r1, r5
 80023a6:	4620      	mov	r0, r4
 80023a8:	f001 f92e 	bl	8003608 <xTaskCreateStatic>
 80023ac:	4603      	mov	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e01c      	b.n	80023ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685c      	ldr	r4, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023be:	b29e      	uxth	r6, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff9a 	bl	8002300 <makeFreeRtosPriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	4632      	mov	r2, r6
 80023da:	4629      	mov	r1, r5
 80023dc:	4620      	mov	r0, r4
 80023de:	f001 f96f 	bl	80036c0 <xTaskCreate>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <osDelay+0x16>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	e000      	b.n	800240e <osDelay+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fa84 	bl	800391c <vTaskDelay>
  
  return osOK;
 8002414:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af02      	add	r7, sp, #8
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d016      	beq.n	800245e <osSemaphoreCreate+0x40>
    if (count == 1) {
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10a      	bne.n	800244c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2203      	movs	r2, #3
 800243c:	9200      	str	r2, [sp, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2001      	movs	r0, #1
 8002444:	f000 fb9c 	bl	8002b80 <xQueueGenericCreateStatic>
 8002448:	4603      	mov	r3, r0
 800244a:	e023      	b.n	8002494 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	461a      	mov	r2, r3
 8002456:	f000 fc67 	bl	8002d28 <xQueueCreateCountingSemaphoreStatic>
 800245a:	4603      	mov	r3, r0
 800245c:	e01a      	b.n	8002494 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d110      	bne.n	8002486 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8002464:	2203      	movs	r2, #3
 8002466:	2100      	movs	r1, #0
 8002468:	2001      	movs	r0, #1
 800246a:	f000 fc00 	bl	8002c6e <xQueueGenericCreate>
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <osSemaphoreCreate+0x64>
 8002476:	2300      	movs	r3, #0
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fcbd 	bl	8002dfc <xQueueGenericSend>
      return sema;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	e006      	b.n	8002494 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fc82 	bl	8002d96 <xQueueCreateCountingSemaphore>
 8002492:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	3303      	adds	r3, #3
 80024aa:	f023 0303 	bic.w	r3, r3, #3
 80024ae:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80024b0:	2014      	movs	r0, #20
 80024b2:	f002 f96b 	bl	800478c <pvPortMalloc>
 80024b6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d046      	beq.n	800254c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 f958 	bl	800478c <pvPortMalloc>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d02b      	beq.n	8002542 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 f949 	bl	800478c <pvPortMalloc>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d011      	beq.n	800252c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	e008      	b.n	8002520 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	3301      	adds	r3, #1
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3f1      	bcc.n	800250e <osPoolCreate+0x72>
 800252a:	e00f      	b.n	800254c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f002 f9ef 	bl	8004914 <vPortFree>
        vPortFree(thePool);
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f002 f9ec 	bl	8004914 <vPortFree>
        thePool = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e004      	b.n	800254c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f002 f9e6 	bl	8004914 <vPortFree>
      thePool = NULL;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800254c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b08a      	sub	sp, #40	; 0x28
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8002566:	f7ff fee2 	bl	800232e <inHandlerMode>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002570:	f3ef 8211 	mrs	r2, BASEPRI
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	617a      	str	r2, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002588:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	e001      	b.n	8002592 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800258e:	f001 fffd 	bl	800458c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e029      	b.n	80025ec <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6892      	ldr	r2, [r2, #8]
 80025a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80025a8:	fb02 f201 	mul.w	r2, r2, r1
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	440b      	add	r3, r1
 80025dc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	611a      	str	r2, [r3, #16]
      break;
 80025e4:	e007      	b.n	80025f6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3d0      	bcc.n	8002598 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80025f6:	f7ff fe9a 	bl	800232e <inHandlerMode>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800260a:	e001      	b.n	8002610 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800260c:	f001 ffee 	bl	80045ec <vPortExitCritical>
  }
  
  return p;
 8002610:	6a3b      	ldr	r3, [r7, #32]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <osPoolFree+0x14>
    return osErrorParameter;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	e030      	b.n	8002690 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <osPoolFree+0x1e>
    return osErrorParameter;
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	e02b      	b.n	8002690 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d201      	bcs.n	8002646 <osPoolFree+0x2c>
    return osErrorParameter;
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	e024      	b.n	8002690 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	fbb3 f1f2 	udiv	r1, r3, r2
 800265a:	fb02 f201 	mul.w	r2, r2, r1
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <osPoolFree+0x4e>
    return osErrorParameter;
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	e013      	b.n	8002690 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	429a      	cmp	r2, r3
 800267c:	d301      	bcc.n	8002682 <osPoolFree+0x68>
    return osErrorParameter;
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	e006      	b.n	8002690 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800269a:	b590      	push	{r4, r7, lr}
 800269c:	b085      	sub	sp, #20
 800269e:	af02      	add	r7, sp, #8
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d011      	beq.n	80026d0 <osMessageCreate+0x36>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2400      	movs	r4, #0
 80026c6:	9400      	str	r4, [sp, #0]
 80026c8:	f000 fa5a 	bl	8002b80 <xQueueGenericCreateStatic>
 80026cc:	4603      	mov	r3, r0
 80026ce:	e008      	b.n	80026e2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	4619      	mov	r1, r3
 80026dc:	f000 fac7 	bl	8002c6e <xQueueGenericCreate>
 80026e0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}

080026ea <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80026ea:	b590      	push	{r4, r7, lr}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689c      	ldr	r4, [r3, #8]
 8002708:	200c      	movs	r0, #12
 800270a:	f002 f83f 	bl	800478c <pvPortMalloc>
 800270e:	4603      	mov	r3, r0
 8002710:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <osMailCreate+0x36>
    return NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	e038      	b.n	8002792 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	681c      	ldr	r4, [r3, #0]
 8002734:	2200      	movs	r2, #0
 8002736:	2104      	movs	r1, #4
 8002738:	f000 fa99 	bl	8002c6e <xQueueGenericCreate>
 800273c:	4603      	mov	r3, r0
 800273e:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 f8de 	bl	8004914 <vPortFree>
    return NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	e01a      	b.n	8002792 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	681c      	ldr	r4, [r3, #0]
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fe98 	bl	800249c <osPoolCreate>
 800276c:	4603      	mov	r3, r0
 800276e:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f8c6 	bl	8004914 <vPortFree>
    return NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	e002      	b.n	8002792 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd90      	pop	{r4, r7, pc}

0800279a <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <osMailAlloc+0x14>
    return NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e006      	b.n	80027bc <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fecf 	bl	8002556 <osPoolAlloc>
 80027b8:	60f8      	str	r0, [r7, #12]
  
  return p;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <osMailPut+0x14>
    return osErrorParameter;
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	e02c      	b.n	8002832 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80027dc:	f7ff fda7 	bl	800232e <inHandlerMode>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d018      	beq.n	8002818 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6858      	ldr	r0, [r3, #4]
 80027ea:	f107 020c 	add.w	r2, r7, #12
 80027ee:	4639      	mov	r1, r7
 80027f0:	2300      	movs	r3, #0
 80027f2:	f000 fc01 	bl	8002ff8 <xQueueGenericSendFromISR>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d001      	beq.n	8002800 <osMailPut+0x3c>
      return osErrorOS;
 80027fc:	23ff      	movs	r3, #255	; 0xff
 80027fe:	e018      	b.n	8002832 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d014      	beq.n	8002830 <osMailPut+0x6c>
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <osMailPut+0x78>)
 8002808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	e00b      	b.n	8002830 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6858      	ldr	r0, [r3, #4]
 800281c:	4639      	mov	r1, r7
 800281e:	2300      	movs	r3, #0
 8002820:	2200      	movs	r2, #0
 8002822:	f000 faeb 	bl	8002dfc <xQueueGenericSend>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <osMailPut+0x6c>
      return osErrorOS;
 800282c:	23ff      	movs	r3, #255	; 0xff
 800282e:	e000      	b.n	8002832 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000ed04 	.word	0xe000ed04

08002840 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	617b      	str	r3, [r7, #20]
    return event;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	461c      	mov	r4, r3
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800286a:	e056      	b.n	800291a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d103      	bne.n	8002884 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
 8002882:	e009      	b.n	8002898 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <osMailGet+0x58>
      ticks = 1;
 8002894:	2301      	movs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002898:	f7ff fd49 	bl	800232e <inHandlerMode>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01d      	beq.n	80028de <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6858      	ldr	r0, [r3, #4]
 80028a6:	f107 0220 	add.w	r2, r7, #32
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	f000 fd19 	bl	80032e8 <xQueueReceiveFromISR>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 80028bc:	2320      	movs	r3, #32
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e001      	b.n	80028c6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01e      	beq.n	800290a <osMailGet+0xca>
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <osMailGet+0xe4>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	e015      	b.n	800290a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6858      	ldr	r0, [r3, #4]
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	3304      	adds	r3, #4
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	4619      	mov	r1, r3
 80028ec:	f000 fc1c 	bl	8003128 <xQueueReceive>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80028f6:	2320      	movs	r3, #32
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e006      	b.n	800290a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <osMailGet+0xc6>
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <osMailGet+0xc8>
 8002906:	2340      	movs	r3, #64	; 0x40
 8002908:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	461c      	mov	r4, r3
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	372c      	adds	r7, #44	; 0x2c
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <osMailFree+0x14>
    return osErrorParameter;
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	e006      	b.n	800294a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe69 	bl	800261a <osPoolFree>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f103 0208 	add.w	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f04f 32ff 	mov.w	r2, #4294967295
 800296a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0208 	add.w	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f103 0208 	add.w	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	601a      	str	r2, [r3, #0]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d103      	bne.n	8002a0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e00c      	b.n	8002a28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3308      	adds	r3, #8
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e002      	b.n	8002a1c <vListInsert+0x2e>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d2f6      	bcs.n	8002a16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6892      	ldr	r2, [r2, #8]
 8002a74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d103      	bne.n	8002a92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xQueueGenericReset+0x2a>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	60bb      	str	r3, [r7, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ada:	f001 fd57 	bl	800458c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	441a      	add	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	22ff      	movs	r2, #255	; 0xff
 8002b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d114      	bne.n	8002b5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01a      	beq.n	8002b6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 f967 	bl	8003e10 <xTaskRemoveFromEventList>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <xQueueGenericReset+0xcc>)
 8002b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	e009      	b.n	8002b6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3310      	adds	r3, #16
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fef7 	bl	8002952 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3324      	adds	r3, #36	; 0x24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fef2 	bl	8002952 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b6e:	f001 fd3d 	bl	80045ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08e      	sub	sp, #56	; 0x38
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <xQueueGenericCreateStatic+0x52>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <xQueueGenericCreateStatic+0x56>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueGenericCreateStatic+0x58>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	623b      	str	r3, [r7, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <xQueueGenericCreateStatic+0x7e>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <xQueueGenericCreateStatic+0x82>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <xQueueGenericCreateStatic+0x84>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	61fb      	str	r3, [r7, #28]
}
 8002c1a:	bf00      	nop
 8002c1c:	e7fe      	b.n	8002c1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c1e:	2348      	movs	r3, #72	; 0x48
 8002c20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b48      	cmp	r3, #72	; 0x48
 8002c26:	d00a      	beq.n	8002c3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	61bb      	str	r3, [r7, #24]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f843 	bl	8002cea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	; 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	; 0x28
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	613b      	str	r3, [r7, #16]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e004      	b.n	8002cae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3348      	adds	r3, #72	; 0x48
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 fd6a 	bl	800478c <pvPortMalloc>
 8002cb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00f      	beq.n	8002ce0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3348      	adds	r3, #72	; 0x48
 8002cc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cce:	79fa      	ldrb	r2, [r7, #7]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f805 	bl	8002cea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d18:	2101      	movs	r1, #1
 8002d1a:	69b8      	ldr	r0, [r7, #24]
 8002d1c:	f7ff fec8 	bl	8002ab0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	61bb      	str	r3, [r7, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d90a      	bls.n	8002d6e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	617b      	str	r3, [r7, #20]
}
 8002d6a:	bf00      	nop
 8002d6c:	e7fe      	b.n	8002d6c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d6e:	2302      	movs	r3, #2
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff ff01 	bl	8002b80 <xQueueGenericCreateStatic>
 8002d7e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
	}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	613b      	str	r3, [r7, #16]
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d90a      	bls.n	8002dda <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	60fb      	str	r3, [r7, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002dda:	2202      	movs	r2, #2
 8002ddc:	2100      	movs	r1, #0
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff45 	bl	8002c6e <xQueueGenericCreate>
 8002de4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002df2:	697b      	ldr	r3, [r7, #20]
	}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <xQueueGenericSend+0x32>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <xQueueGenericSend+0x40>
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <xQueueGenericSend+0x44>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <xQueueGenericSend+0x46>
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <xQueueGenericSend+0x60>
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x6e>
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <xQueueGenericSend+0x72>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <xQueueGenericSend+0x74>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <xQueueGenericSend+0x8e>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	623b      	str	r3, [r7, #32]
}
 8002e86:	bf00      	nop
 8002e88:	e7fe      	b.n	8002e88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e8a:	f001 f981 	bl	8004190 <xTaskGetSchedulerState>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <xQueueGenericSend+0x9e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <xQueueGenericSend+0xa2>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueGenericSend+0xa4>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <xQueueGenericSend+0xbe>
	__asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	61fb      	str	r3, [r7, #28]
}
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eba:	f001 fb67 	bl	800458c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <xQueueGenericSend+0xd4>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d129      	bne.n	8002f24 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fa87 	bl	80033e8 <prvCopyDataToQueue>
 8002eda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d010      	beq.n	8002f06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	3324      	adds	r3, #36	; 0x24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 ff91 	bl	8003e10 <xTaskRemoveFromEventList>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <xQueueGenericSend+0x1f8>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	e00a      	b.n	8002f1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <xQueueGenericSend+0x1f8>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f1c:	f001 fb66 	bl	80045ec <vPortExitCritical>
				return pdPASS;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e063      	b.n	8002fec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f2a:	f001 fb5f 	bl	80045ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e05c      	b.n	8002fec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ffc9 	bl	8003ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f46:	f001 fb51 	bl	80045ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f4a:	f000 fd7b 	bl	8003a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f4e:	f001 fb1d 	bl	800458c <vPortEnterCritical>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <xQueueGenericSend+0x16c>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d103      	bne.n	8002f7e <xQueueGenericSend+0x182>
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f7e:	f001 fb35 	bl	80045ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f82:	1d3a      	adds	r2, r7, #4
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 ffb8 	bl	8003f00 <xTaskCheckForTimeOut>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d124      	bne.n	8002fe0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f98:	f000 fb1e 	bl	80035d8 <prvIsQueueFull>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	3310      	adds	r3, #16
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 ff0c 	bl	8003dc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb2:	f000 faa9 	bl	8003508 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fb6:	f000 fd53 	bl	8003a60 <xTaskResumeAll>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f af7c 	bne.w	8002eba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <xQueueGenericSend+0x1f8>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	e772      	b.n	8002eba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd6:	f000 fa97 	bl	8003508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fda:	f000 fd41 	bl	8003a60 <xTaskResumeAll>
 8002fde:	e76c      	b.n	8002eba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe2:	f000 fa91 	bl	8003508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe6:	f000 fd3b 	bl	8003a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fea:	2300      	movs	r3, #0
		}
	}
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3738      	adds	r7, #56	; 0x38
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueGenericSendFromISR+0x3c>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueGenericSendFromISR+0x40>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueGenericSendFromISR+0x42>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	623b      	str	r3, [r7, #32]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d103      	bne.n	8003062 <xQueueGenericSendFromISR+0x6a>
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <xQueueGenericSendFromISR+0x6e>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <xQueueGenericSendFromISR+0x70>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	61fb      	str	r3, [r7, #28]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003082:	f001 fb45 	bl	8004710 <vPortValidateInterruptPriority>
	__asm volatile
 8003086:	f3ef 8211 	mrs	r2, BASEPRI
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61ba      	str	r2, [r7, #24]
 800309c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800309e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <xQueueGenericSendFromISR+0xbc>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d12c      	bne.n	800310e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c4:	f000 f990 	bl	80033e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d112      	bne.n	80030f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe96 	bl	8003e10 <xTaskRemoveFromEventList>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00e      	beq.n	8003108 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e007      	b.n	8003108 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	b25a      	sxtb	r2, r3
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003108:	2301      	movs	r3, #1
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800310c:	e001      	b.n	8003112 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800310e:	2300      	movs	r3, #0
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f383 8811 	msr	BASEPRI, r3
}
 800311c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003120:	4618      	mov	r0, r3
 8003122:	3738      	adds	r7, #56	; 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08c      	sub	sp, #48	; 0x30
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <xQueueReceive+0x30>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	623b      	str	r3, [r7, #32]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueReceive+0x3e>
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueReceive+0x42>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueReceive+0x44>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueReceive+0x5e>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	61fb      	str	r3, [r7, #28]
}
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003186:	f001 f803 	bl	8004190 <xTaskGetSchedulerState>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <xQueueReceive+0x6e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <xQueueReceive+0x72>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueReceive+0x74>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xQueueReceive+0x8e>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	61bb      	str	r3, [r7, #24]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031b6:	f001 f9e9 	bl	800458c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01f      	beq.n	8003206 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ca:	f000 f977 	bl	80034bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00f      	beq.n	80031fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	3310      	adds	r3, #16
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fe14 	bl	8003e10 <xTaskRemoveFromEventList>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <xQueueReceive+0x1bc>)
 80031f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031fe:	f001 f9f5 	bl	80045ec <vPortExitCritical>
				return pdPASS;
 8003202:	2301      	movs	r3, #1
 8003204:	e069      	b.n	80032da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800320c:	f001 f9ee 	bl	80045ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003210:	2300      	movs	r3, #0
 8003212:	e062      	b.n	80032da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fe58 	bl	8003ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003228:	f001 f9e0 	bl	80045ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800322c:	f000 fc0a 	bl	8003a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003230:	f001 f9ac 	bl	800458c <vPortEnterCritical>
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800323a:	b25b      	sxtb	r3, r3
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d103      	bne.n	800324a <xQueueReceive+0x122>
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003250:	b25b      	sxtb	r3, r3
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d103      	bne.n	8003260 <xQueueReceive+0x138>
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003260:	f001 f9c4 	bl	80045ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003264:	1d3a      	adds	r2, r7, #4
 8003266:	f107 0310 	add.w	r3, r7, #16
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe47 	bl	8003f00 <xTaskCheckForTimeOut>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d123      	bne.n	80032c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800327a:	f000 f997 	bl	80035ac <prvIsQueueEmpty>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd9b 	bl	8003dc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003294:	f000 f938 	bl	8003508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003298:	f000 fbe2 	bl	8003a60 <xTaskResumeAll>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d189      	bne.n	80031b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <xQueueReceive+0x1bc>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	e780      	b.n	80031b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b6:	f000 f927 	bl	8003508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ba:	f000 fbd1 	bl	8003a60 <xTaskResumeAll>
 80032be:	e77a      	b.n	80031b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c2:	f000 f921 	bl	8003508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032c6:	f000 fbcb 	bl	8003a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032cc:	f000 f96e 	bl	80035ac <prvIsQueueEmpty>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f af6f 	beq.w	80031b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3730      	adds	r7, #48	; 0x30
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	; 0x38
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	623b      	str	r3, [r7, #32]
}
 8003310:	bf00      	nop
 8003312:	e7fe      	b.n	8003312 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <xQueueReceiveFromISR+0x3a>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <xQueueReceiveFromISR+0x3e>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <xQueueReceiveFromISR+0x40>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61fb      	str	r3, [r7, #28]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003342:	f001 f9e5 	bl	8004710 <vPortValidateInterruptPriority>
	__asm volatile
 8003346:	f3ef 8211 	mrs	r2, BASEPRI
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	61ba      	str	r2, [r7, #24]
 800335c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800335e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02f      	beq.n	80033ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800337c:	f000 f89e 	bl	80034bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	1e5a      	subs	r2, r3, #1
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d112      	bne.n	80033b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	3310      	adds	r3, #16
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fd36 	bl	8003e10 <xTaskRemoveFromEventList>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00e      	beq.n	80033c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e007      	b.n	80033c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033bc:	3301      	adds	r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	b25a      	sxtb	r2, r3
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80033c8:	2301      	movs	r3, #1
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
 80033cc:	e001      	b.n	80033d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f383 8811 	msr	BASEPRI, r3
}
 80033dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3738      	adds	r7, #56	; 0x38
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10d      	bne.n	8003422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d14d      	bne.n	80034aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 feda 	bl	80041cc <xTaskPriorityDisinherit>
 8003418:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	e043      	b.n	80034aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d119      	bne.n	800345c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6898      	ldr	r0, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	461a      	mov	r2, r3
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	f001 fbac 	bl	8004b90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	441a      	add	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d32b      	bcc.n	80034aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	e026      	b.n	80034aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68d8      	ldr	r0, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	461a      	mov	r2, r3
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	f001 fb92 	bl	8004b90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	425b      	negs	r3, r3
 8003476:	441a      	add	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d207      	bcs.n	8003498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	425b      	negs	r3, r3
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d105      	bne.n	80034aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034b2:	697b      	ldr	r3, [r7, #20]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d018      	beq.n	8003500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	441a      	add	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d303      	bcc.n	80034f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68d9      	ldr	r1, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	461a      	mov	r2, r3
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f001 fb48 	bl	8004b90 <memcpy>
	}
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003510:	f001 f83c 	bl	800458c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800351c:	e011      	b.n	8003542 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d012      	beq.n	800354c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3324      	adds	r3, #36	; 0x24
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fc70 	bl	8003e10 <xTaskRemoveFromEventList>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003536:	f000 fd45 	bl	8003fc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	3b01      	subs	r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	dce9      	bgt.n	800351e <prvUnlockQueue+0x16>
 800354a:	e000      	b.n	800354e <prvUnlockQueue+0x46>
					break;
 800354c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003556:	f001 f849 	bl	80045ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800355a:	f001 f817 	bl	800458c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003564:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003566:	e011      	b.n	800358c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d012      	beq.n	8003596 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3310      	adds	r3, #16
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fc4b 	bl	8003e10 <xTaskRemoveFromEventList>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003580:	f000 fd20 	bl	8003fc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003584:	7bbb      	ldrb	r3, [r7, #14]
 8003586:	3b01      	subs	r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800358c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003590:	2b00      	cmp	r3, #0
 8003592:	dce9      	bgt.n	8003568 <prvUnlockQueue+0x60>
 8003594:	e000      	b.n	8003598 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003596:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035a0:	f001 f824 	bl	80045ec <vPortExitCritical>
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035b4:	f000 ffea 	bl	800458c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e001      	b.n	80035ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ca:	f001 f80f 	bl	80045ec <vPortExitCritical>

	return xReturn;
 80035ce:	68fb      	ldr	r3, [r7, #12]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035e0:	f000 ffd4 	bl	800458c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d102      	bne.n	80035f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e001      	b.n	80035fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035fa:	f000 fff7 	bl	80045ec <vPortExitCritical>

	return xReturn;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af04      	add	r7, sp, #16
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xTaskCreateStatic+0x2a>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	623b      	str	r3, [r7, #32]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xTaskCreateStatic+0x46>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	61fb      	str	r3, [r7, #28]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800364e:	2354      	movs	r3, #84	; 0x54
 8003650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b54      	cmp	r3, #84	; 0x54
 8003656:	d00a      	beq.n	800366e <xTaskCreateStatic+0x66>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	61bb      	str	r3, [r7, #24]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <xTaskCreateStatic+0xaa>
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01b      	beq.n	80036b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800368c:	2300      	movs	r3, #0
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f850 	bl	800374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ac:	f000 f8cc 	bl	8003848 <prvAddNewTaskToReadyList>
 80036b0:	e001      	b.n	80036b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036b6:	697b      	ldr	r3, [r7, #20]
	}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af04      	add	r7, sp, #16
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f859 	bl	800478c <pvPortMalloc>
 80036da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036e2:	2054      	movs	r0, #84	; 0x54
 80036e4:	f001 f852 	bl	800478c <pvPortMalloc>
 80036e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
 80036f6:	e005      	b.n	8003704 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036f8:	6978      	ldr	r0, [r7, #20]
 80036fa:	f001 f90b 	bl	8004914 <vPortFree>
 80036fe:	e001      	b.n	8003704 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d017      	beq.n	800373a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	2300      	movs	r3, #0
 8003716:	9303      	str	r3, [sp, #12]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f80e 	bl	800374a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372e:	69f8      	ldr	r0, [r7, #28]
 8003730:	f000 f88a 	bl	8003848 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003734:	2301      	movs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e002      	b.n	8003740 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003740:	69bb      	ldr	r3, [r7, #24]
	}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003762:	3b01      	subs	r3, #1
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <prvInitialiseNewTask+0x48>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	617b      	str	r3, [r7, #20]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e012      	b.n	80037be <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	7819      	ldrb	r1, [r3, #0]
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	3334      	adds	r3, #52	; 0x34
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d9e9      	bls.n	8003798 <prvInitialiseNewTask+0x4e>
 80037c4:	e000      	b.n	80037c8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80037c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d901      	bls.n	80037da <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d6:	2306      	movs	r3, #6
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	2200      	movs	r2, #0
 80037ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3304      	adds	r3, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff f8cd 	bl	8002990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3318      	adds	r3, #24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f8c8 	bl	8002990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003804:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	f1c3 0207 	rsb	r2, r3, #7
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	69b8      	ldr	r0, [r7, #24]
 800382a:	f000 fdbb 	bl	80043a4 <pxPortInitialiseStack>
 800382e:	4602      	mov	r2, r0
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003850:	f000 fe9c 	bl	800458c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <prvAddNewTaskToReadyList+0xb8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	4a29      	ldr	r2, [pc, #164]	; (8003900 <prvAddNewTaskToReadyList+0xb8>)
 800385c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003866:	4a27      	ldr	r2, [pc, #156]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <prvAddNewTaskToReadyList+0xb8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d110      	bne.n	8003896 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003874:	f000 fbca 	bl	800400c <prvInitialiseTaskLists>
 8003878:	e00d      	b.n	8003896 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <prvAddNewTaskToReadyList+0xc0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	429a      	cmp	r2, r3
 800388e:	d802      	bhi.n	8003896 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003890:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <prvAddNewTaskToReadyList+0xc4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <prvAddNewTaskToReadyList+0xc4>)
 800389e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	4b19      	ldr	r3, [pc, #100]	; (8003910 <prvAddNewTaskToReadyList+0xc8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <prvAddNewTaskToReadyList+0xc8>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4a15      	ldr	r2, [pc, #84]	; (8003914 <prvAddNewTaskToReadyList+0xcc>)
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7ff f86d 	bl	80029a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038ce:	f000 fe8d 	bl	80045ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <prvAddNewTaskToReadyList+0xc0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvAddNewTaskToReadyList+0xbc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <prvAddNewTaskToReadyList+0xd0>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200003e8 	.word	0x200003e8
 8003904:	200002e8 	.word	0x200002e8
 8003908:	200003f4 	.word	0x200003f4
 800390c:	20000404 	.word	0x20000404
 8003910:	200003f0 	.word	0x200003f0
 8003914:	200002ec 	.word	0x200002ec
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d017      	beq.n	800395e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <vTaskDelay+0x60>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <vTaskDelay+0x30>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60bb      	str	r3, [r7, #8]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800394c:	f000 f87a 	bl	8003a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003950:	2100      	movs	r1, #0
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fcc0 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003958:	f000 f882 	bl	8003a60 <xTaskResumeAll>
 800395c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d107      	bne.n	8003974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <vTaskDelay+0x64>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000410 	.word	0x20000410
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003992:	463a      	mov	r2, r7
 8003994:	1d39      	adds	r1, r7, #4
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	4618      	mov	r0, r3
 800399c:	f7fc fc50 	bl	8000240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039a0:	6839      	ldr	r1, [r7, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	9202      	str	r2, [sp, #8]
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	460a      	mov	r2, r1
 80039b2:	491e      	ldr	r1, [pc, #120]	; (8003a2c <vTaskStartScheduler+0xa8>)
 80039b4:	481e      	ldr	r0, [pc, #120]	; (8003a30 <vTaskStartScheduler+0xac>)
 80039b6:	f7ff fe27 	bl	8003608 <xTaskCreateStatic>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <vTaskStartScheduler+0xb0>)
 80039be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <vTaskStartScheduler+0xb0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e001      	b.n	80039d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d116      	bne.n	8003a06 <vTaskStartScheduler+0x82>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	613b      	str	r3, [r7, #16]
}
 80039ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <vTaskStartScheduler+0xb4>)
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <vTaskStartScheduler+0xb8>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <vTaskStartScheduler+0xbc>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a00:	f000 fd52 	bl	80044a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a04:	e00e      	b.n	8003a24 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d10a      	bne.n	8003a24 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	60fb      	str	r3, [r7, #12]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <vTaskStartScheduler+0x9e>
}
 8003a24:	bf00      	nop
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	080054d0 	.word	0x080054d0
 8003a30:	08003fdd 	.word	0x08003fdd
 8003a34:	2000040c 	.word	0x2000040c
 8003a38:	20000408 	.word	0x20000408
 8003a3c:	200003f4 	.word	0x200003f4
 8003a40:	200003ec 	.word	0x200003ec

08003a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <vTaskSuspendAll+0x18>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a03      	ldr	r2, [pc, #12]	; (8003a5c <vTaskSuspendAll+0x18>)
 8003a50:	6013      	str	r3, [r2, #0]
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000410 	.word	0x20000410

08003a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <xTaskResumeAll+0x114>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <xTaskResumeAll+0x2c>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	603b      	str	r3, [r7, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a8c:	f000 fd7e 	bl	800458c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a90:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <xTaskResumeAll+0x114>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	4a37      	ldr	r2, [pc, #220]	; (8003b74 <xTaskResumeAll+0x114>)
 8003a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <xTaskResumeAll+0x114>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d161      	bne.n	8003b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003aa2:	4b35      	ldr	r3, [pc, #212]	; (8003b78 <xTaskResumeAll+0x118>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d05d      	beq.n	8003b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aaa:	e02e      	b.n	8003b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <xTaskResumeAll+0x11c>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe ffd0 	bl	8002a5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe ffcb 	bl	8002a5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <xTaskResumeAll+0x120>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <xTaskResumeAll+0x120>)
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <xTaskResumeAll+0x124>)
 8003ae8:	441a      	add	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe ff59 	bl	80029a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <xTaskResumeAll+0x128>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <xTaskResumeAll+0x12c>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <xTaskResumeAll+0x11c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1cc      	bne.n	8003aac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b18:	f000 fb16 	bl	8004148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <xTaskResumeAll+0x130>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d010      	beq.n	8003b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b28:	f000 f836 	bl	8003b98 <xTaskIncrementTick>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <xTaskResumeAll+0x12c>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f1      	bne.n	8003b28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <xTaskResumeAll+0x130>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <xTaskResumeAll+0x12c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <xTaskResumeAll+0x134>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b66:	f000 fd41 	bl	80045ec <vPortExitCritical>

	return xAlreadyYielded;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000410 	.word	0x20000410
 8003b78:	200003e8 	.word	0x200003e8
 8003b7c:	200003a8 	.word	0x200003a8
 8003b80:	200003f0 	.word	0x200003f0
 8003b84:	200002ec 	.word	0x200002ec
 8003b88:	200002e8 	.word	0x200002e8
 8003b8c:	200003fc 	.word	0x200003fc
 8003b90:	200003f8 	.word	0x200003f8
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba2:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <xTaskIncrementTick+0x150>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 808d 	bne.w	8003cc6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <xTaskIncrementTick+0x154>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bb4:	4a4d      	ldr	r2, [pc, #308]	; (8003cec <xTaskIncrementTick+0x154>)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d120      	bne.n	8003c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <xTaskIncrementTick+0x158>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	603b      	str	r3, [r7, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xTaskIncrementTick+0x46>
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <xTaskIncrementTick+0x158>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <xTaskIncrementTick+0x15c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a41      	ldr	r2, [pc, #260]	; (8003cf0 <xTaskIncrementTick+0x158>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4a41      	ldr	r2, [pc, #260]	; (8003cf4 <xTaskIncrementTick+0x15c>)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <xTaskIncrementTick+0x160>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	; (8003cf8 <xTaskIncrementTick+0x160>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	f000 faa3 	bl	8004148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c02:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <xTaskIncrementTick+0x164>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d34d      	bcc.n	8003ca8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0c:	4b38      	ldr	r3, [pc, #224]	; (8003cf0 <xTaskIncrementTick+0x158>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <xTaskIncrementTick+0x82>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <xTaskIncrementTick+0x84>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <xTaskIncrementTick+0x164>)
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	601a      	str	r2, [r3, #0]
					break;
 8003c28:	e03e      	b.n	8003ca8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <xTaskIncrementTick+0x158>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d203      	bcs.n	8003c4a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <xTaskIncrementTick+0x164>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6013      	str	r3, [r2, #0]
						break;
 8003c48:	e02e      	b.n	8003ca8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ff05 	bl	8002a5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3318      	adds	r3, #24
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fefc 	bl	8002a5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <xTaskIncrementTick+0x168>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <xTaskIncrementTick+0x168>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <xTaskIncrementTick+0x16c>)
 8003c86:	441a      	add	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fe fe8a 	bl	80029a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <xTaskIncrementTick+0x170>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3b4      	bcc.n	8003c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca6:	e7b1      	b.n	8003c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ca8:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <xTaskIncrementTick+0x170>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	4915      	ldr	r1, [pc, #84]	; (8003d04 <xTaskIncrementTick+0x16c>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d907      	bls.n	8003cd0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	e004      	b.n	8003cd0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <xTaskIncrementTick+0x174>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <xTaskIncrementTick+0x174>)
 8003cce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <xTaskIncrementTick+0x178>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cdc:	697b      	ldr	r3, [r7, #20]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000410 	.word	0x20000410
 8003cec:	200003ec 	.word	0x200003ec
 8003cf0:	200003a0 	.word	0x200003a0
 8003cf4:	200003a4 	.word	0x200003a4
 8003cf8:	20000400 	.word	0x20000400
 8003cfc:	20000408 	.word	0x20000408
 8003d00:	200003f0 	.word	0x200003f0
 8003d04:	200002ec 	.word	0x200002ec
 8003d08:	200002e8 	.word	0x200002e8
 8003d0c:	200003f8 	.word	0x200003f8
 8003d10:	200003fc 	.word	0x200003fc

08003d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <vTaskSwitchContext+0xa0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <vTaskSwitchContext+0xa4>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d28:	e03f      	b.n	8003daa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003d2a:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <vTaskSwitchContext+0xa4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <vTaskSwitchContext+0xa8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	f1c3 031f 	rsb	r3, r3, #31
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	491e      	ldr	r1, [pc, #120]	; (8003dc0 <vTaskSwitchContext+0xac>)
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	607b      	str	r3, [r7, #4]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <vTaskSwitchContext+0x5a>
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <vTaskSwitchContext+0xac>)
 8003d7c:	4413      	add	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3308      	adds	r3, #8
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d104      	bne.n	8003da0 <vTaskSwitchContext+0x8c>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <vTaskSwitchContext+0xb0>)
 8003da8:	6013      	str	r3, [r2, #0]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	20000410 	.word	0x20000410
 8003db8:	200003fc 	.word	0x200003fc
 8003dbc:	200003f0 	.word	0x200003f0
 8003dc0:	200002ec 	.word	0x200002ec
 8003dc4:	200002e8 	.word	0x200002e8

08003dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <vTaskPlaceOnEventList+0x44>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3318      	adds	r3, #24
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe fdf9 	bl	80029ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	6838      	ldr	r0, [r7, #0]
 8003e00:	f000 fa6a 	bl	80042d8 <prvAddCurrentTaskToDelayedList>
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	200002e8 	.word	0x200002e8

08003e10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fe0c 	bl	8002a5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <xTaskRemoveFromEventList+0xac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11c      	bne.n	8003e88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fe03 	bl	8002a5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <xTaskRemoveFromEventList+0xb0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <xTaskRemoveFromEventList+0xb0>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <xTaskRemoveFromEventList+0xb4>)
 8003e78:	441a      	add	r2, r3
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7fe fd91 	bl	80029a8 <vListInsertEnd>
 8003e86:	e005      	b.n	8003e94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <xTaskRemoveFromEventList+0xb8>)
 8003e90:	f7fe fd8a 	bl	80029a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <xTaskRemoveFromEventList+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d905      	bls.n	8003eae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <xTaskRemoveFromEventList+0xc0>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e001      	b.n	8003eb2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000410 	.word	0x20000410
 8003ec0:	200003f0 	.word	0x200003f0
 8003ec4:	200002ec 	.word	0x200002ec
 8003ec8:	200003a8 	.word	0x200003a8
 8003ecc:	200002e8 	.word	0x200002e8
 8003ed0:	200003fc 	.word	0x200003fc

08003ed4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <vTaskInternalSetTimeOutState+0x24>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <vTaskInternalSetTimeOutState+0x28>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000400 	.word	0x20000400
 8003efc:	200003ec 	.word	0x200003ec

08003f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	613b      	str	r3, [r7, #16]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	60fb      	str	r3, [r7, #12]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f42:	f000 fb23 	bl	800458c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <xTaskCheckForTimeOut+0xbc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d102      	bne.n	8003f66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e023      	b.n	8003fae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <xTaskCheckForTimeOut+0xc0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d007      	beq.n	8003f82 <xTaskCheckForTimeOut+0x82>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	e015      	b.n	8003fae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d20b      	bcs.n	8003fa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ff9b 	bl	8003ed4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e004      	b.n	8003fae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fae:	f000 fb1d 	bl	80045ec <vPortExitCritical>

	return xReturn;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200003ec 	.word	0x200003ec
 8003fc0:	20000400 	.word	0x20000400

08003fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <vTaskMissedYield+0x14>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	200003fc 	.word	0x200003fc

08003fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fe4:	f000 f852 	bl	800408c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <prvIdleTask+0x28>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d9f9      	bls.n	8003fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <prvIdleTask+0x2c>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004000:	e7f0      	b.n	8003fe4 <prvIdleTask+0x8>
 8004002:	bf00      	nop
 8004004:	200002ec 	.word	0x200002ec
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	e00c      	b.n	8004032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <prvInitialiseTaskLists+0x60>)
 8004024:	4413      	add	r3, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fc93 	bl	8002952 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3301      	adds	r3, #1
 8004030:	607b      	str	r3, [r7, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d9ef      	bls.n	8004018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004038:	480d      	ldr	r0, [pc, #52]	; (8004070 <prvInitialiseTaskLists+0x64>)
 800403a:	f7fe fc8a 	bl	8002952 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800403e:	480d      	ldr	r0, [pc, #52]	; (8004074 <prvInitialiseTaskLists+0x68>)
 8004040:	f7fe fc87 	bl	8002952 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004044:	480c      	ldr	r0, [pc, #48]	; (8004078 <prvInitialiseTaskLists+0x6c>)
 8004046:	f7fe fc84 	bl	8002952 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800404a:	480c      	ldr	r0, [pc, #48]	; (800407c <prvInitialiseTaskLists+0x70>)
 800404c:	f7fe fc81 	bl	8002952 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004050:	480b      	ldr	r0, [pc, #44]	; (8004080 <prvInitialiseTaskLists+0x74>)
 8004052:	f7fe fc7e 	bl	8002952 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <prvInitialiseTaskLists+0x78>)
 8004058:	4a05      	ldr	r2, [pc, #20]	; (8004070 <prvInitialiseTaskLists+0x64>)
 800405a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <prvInitialiseTaskLists+0x7c>)
 800405e:	4a05      	ldr	r2, [pc, #20]	; (8004074 <prvInitialiseTaskLists+0x68>)
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200002ec 	.word	0x200002ec
 8004070:	20000378 	.word	0x20000378
 8004074:	2000038c 	.word	0x2000038c
 8004078:	200003a8 	.word	0x200003a8
 800407c:	200003bc 	.word	0x200003bc
 8004080:	200003d4 	.word	0x200003d4
 8004084:	200003a0 	.word	0x200003a0
 8004088:	200003a4 	.word	0x200003a4

0800408c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004092:	e019      	b.n	80040c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004094:	f000 fa7a 	bl	800458c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004098:	4b10      	ldr	r3, [pc, #64]	; (80040dc <prvCheckTasksWaitingTermination+0x50>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fcda 	bl	8002a5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <prvCheckTasksWaitingTermination+0x54>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <prvCheckTasksWaitingTermination+0x54>)
 80040b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <prvCheckTasksWaitingTermination+0x58>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <prvCheckTasksWaitingTermination+0x58>)
 80040bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040be:	f000 fa95 	bl	80045ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f810 	bl	80040e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <prvCheckTasksWaitingTermination+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e1      	bne.n	8004094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200003bc 	.word	0x200003bc
 80040e0:	200003e8 	.word	0x200003e8
 80040e4:	200003d0 	.word	0x200003d0

080040e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fc08 	bl	8004914 <vPortFree>
				vPortFree( pxTCB );
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fc05 	bl	8004914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800410a:	e018      	b.n	800413e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004112:	2b01      	cmp	r3, #1
 8004114:	d103      	bne.n	800411e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fbfc 	bl	8004914 <vPortFree>
	}
 800411c:	e00f      	b.n	800413e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004124:	2b02      	cmp	r3, #2
 8004126:	d00a      	beq.n	800413e <prvDeleteTCB+0x56>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <prvDeleteTCB+0x54>
	}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <prvResetNextTaskUnblockTime+0x40>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <prvResetNextTaskUnblockTime+0x14>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <prvResetNextTaskUnblockTime+0x16>
 800415c:	2300      	movs	r3, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d004      	beq.n	800416c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <prvResetNextTaskUnblockTime+0x44>)
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800416a:	e008      	b.n	800417e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <prvResetNextTaskUnblockTime+0x40>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <prvResetNextTaskUnblockTime+0x44>)
 800417c:	6013      	str	r3, [r2, #0]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	200003a0 	.word	0x200003a0
 800418c:	20000408 	.word	0x20000408

08004190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <xTaskGetSchedulerState+0x34>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800419e:	2301      	movs	r3, #1
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e008      	b.n	80041b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <xTaskGetSchedulerState+0x38>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041ac:	2302      	movs	r3, #2
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	e001      	b.n	80041b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041b6:	687b      	ldr	r3, [r7, #4]
	}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	200003f4 	.word	0x200003f4
 80041c8:	20000410 	.word	0x20000410

080041cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06e      	beq.n	80042c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041e2:	4b3a      	ldr	r3, [pc, #232]	; (80042cc <xTaskPriorityDisinherit+0x100>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d00a      	beq.n	8004202 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60fb      	str	r3, [r7, #12]
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60bb      	str	r3, [r7, #8]
}
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	429a      	cmp	r2, r3
 8004234:	d044      	beq.n	80042c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d140      	bne.n	80042c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fc0b 	bl	8002a5e <uxListRemove>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d115      	bne.n	800427a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	491f      	ldr	r1, [pc, #124]	; (80042d0 <xTaskPriorityDisinherit+0x104>)
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <xTaskPriorityDisinherit+0xae>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	2201      	movs	r2, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <xTaskPriorityDisinherit+0x108>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4013      	ands	r3, r2
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <xTaskPriorityDisinherit+0x108>)
 8004278:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f1c3 0207 	rsb	r2, r3, #7
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <xTaskPriorityDisinherit+0x108>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <xTaskPriorityDisinherit+0x108>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <xTaskPriorityDisinherit+0x104>)
 80042ae:	441a      	add	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe fb76 	bl	80029a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042c0:	697b      	ldr	r3, [r7, #20]
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200002e8 	.word	0x200002e8
 80042d0:	200002ec 	.word	0x200002ec
 80042d4:	200003f0 	.word	0x200003f0

080042d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042e8:	4b28      	ldr	r3, [pc, #160]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fbb5 	bl	8002a5e <uxListRemove>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	2201      	movs	r2, #1
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43da      	mvns	r2, r3
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4013      	ands	r3, r2
 800430e:	4a20      	ldr	r2, [pc, #128]	; (8004390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d10a      	bne.n	8004330 <prvAddCurrentTaskToDelayedList+0x58>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	481a      	ldr	r0, [pc, #104]	; (8004394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800432a:	f7fe fb3d 	bl	80029a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800432e:	e026      	b.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004338:	4b14      	ldr	r3, [pc, #80]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d209      	bcs.n	800435c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fe fb4a 	bl	80029ee <vListInsert>
}
 800435a:	e010      	b.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <prvAddCurrentTaskToDelayedList+0xc4>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	4619      	mov	r1, r3
 8004368:	4610      	mov	r0, r2
 800436a:	f7fe fb40 	bl	80029ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	429a      	cmp	r2, r3
 8004376:	d202      	bcs.n	800437e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6013      	str	r3, [r2, #0]
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200003ec 	.word	0x200003ec
 800438c:	200002e8 	.word	0x200002e8
 8004390:	200003f0 	.word	0x200003f0
 8004394:	200003d4 	.word	0x200003d4
 8004398:	200003a4 	.word	0x200003a4
 800439c:	200003a0 	.word	0x200003a0
 80043a0:	20000408 	.word	0x20000408

080043a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3b04      	subs	r3, #4
 80043d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043d4:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <pxPortInitialiseStack+0x54>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b14      	subs	r3, #20
 80043de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b20      	subs	r3, #32
 80043ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	080043fd 	.word	0x080043fd

080043fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004402:	2300      	movs	r3, #0
 8004404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <prvTaskExitError+0x54>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d00a      	beq.n	8004426 <prvTaskExitError+0x2a>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60fb      	str	r3, [r7, #12]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <prvTaskExitError+0x28>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
}
 8004438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800443a:	bf00      	nop
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0fc      	beq.n	800443c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	2000000c 	.word	0x2000000c
	...

08004460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <pxCurrentTCBConst2>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800446a:	f380 8809 	msr	PSP, r0
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	f04e 0e0d 	orr.w	lr, lr, #13
 800447e:	4770      	bx	lr

08004480 <pxCurrentTCBConst2>:
 8004480:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004488:	4806      	ldr	r0, [pc, #24]	; (80044a4 <prvPortStartFirstTask+0x1c>)
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f380 8808 	msr	MSP, r0
 8004492:	b662      	cpsie	i
 8004494:	b661      	cpsie	f
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	df00      	svc	0
 80044a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044a2:	bf00      	nop
 80044a4:	e000ed08 	.word	0xe000ed08

080044a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <xPortStartScheduler+0xd0>)
 80044b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <xPortStartScheduler+0xd4>)
 80044d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <xPortStartScheduler+0xd8>)
 80044d8:	2207      	movs	r2, #7
 80044da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044dc:	e009      	b.n	80044f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <xPortStartScheduler+0xd8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <xPortStartScheduler+0xd8>)
 80044e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d0ef      	beq.n	80044de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <xPortStartScheduler+0xd8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1c3 0307 	rsb	r3, r3, #7
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00a      	beq.n	8004520 <xPortStartScheduler+0x78>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <xPortStartScheduler+0xd8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <xPortStartScheduler+0xd8>)
 8004528:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <xPortStartScheduler+0xd8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <xPortStartScheduler+0xd8>)
 8004534:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <xPortStartScheduler+0xdc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <xPortStartScheduler+0xdc>)
 8004544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <xPortStartScheduler+0xdc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <xPortStartScheduler+0xdc>)
 8004550:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004554:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004556:	f000 f8b9 	bl	80046cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <xPortStartScheduler+0xe0>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004560:	f7ff ff92 	bl	8004488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004564:	f7ff fbd6 	bl	8003d14 <vTaskSwitchContext>
	prvTaskExitError();
 8004568:	f7ff ff48 	bl	80043fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000e400 	.word	0xe000e400
 800457c:	20000414 	.word	0x20000414
 8004580:	20000418 	.word	0x20000418
 8004584:	e000ed20 	.word	0xe000ed20
 8004588:	2000000c 	.word	0x2000000c

0800458c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	607b      	str	r3, [r7, #4]
}
 80045a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <vPortEnterCritical+0x58>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <vPortEnterCritical+0x58>)
 80045ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <vPortEnterCritical+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10f      	bne.n	80045d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <vPortEnterCritical+0x5c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	603b      	str	r3, [r7, #0]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vPortEnterCritical+0x4a>
	}
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <vPortExitCritical+0x4c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <vPortExitCritical+0x24>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	607b      	str	r3, [r7, #4]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <vPortExitCritical+0x4c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <vPortExitCritical+0x4c>)
 8004618:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <vPortExitCritical+0x4c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <vPortExitCritical+0x42>
 8004622:	2300      	movs	r3, #0
 8004624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f383 8811 	msr	BASEPRI, r3
}
 800462c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	2000000c 	.word	0x2000000c
 800463c:	00000000 	.word	0x00000000

08004640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004640:	f3ef 8009 	mrs	r0, PSP
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <pxCurrentTCBConst>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004650:	6010      	str	r0, [r2, #0]
 8004652:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004656:	f04f 0050 	mov.w	r0, #80	; 0x50
 800465a:	f380 8811 	msr	BASEPRI, r0
 800465e:	f7ff fb59 	bl	8003d14 <vTaskSwitchContext>
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004676:	f380 8809 	msr	PSP, r0
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	4770      	bx	lr

08004680 <pxCurrentTCBConst>:
 8004680:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f7ff fa79 	bl	8003b98 <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <xPortSysTickHandler+0x40>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f383 8811 	msr	BASEPRI, r3
}
 80046be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <vPortSetupTimerInterrupt+0x30>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <vPortSetupTimerInterrupt+0x38>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <vPortSetupTimerInterrupt+0x3c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	4a08      	ldr	r2, [pc, #32]	; (800470c <vPortSetupTimerInterrupt+0x40>)
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ee:	4b03      	ldr	r3, [pc, #12]	; (80046fc <vPortSetupTimerInterrupt+0x30>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	e000e010 	.word	0xe000e010
 8004700:	e000e018 	.word	0xe000e018
 8004704:	20000000 	.word	0x20000000
 8004708:	10624dd3 	.word	0x10624dd3
 800470c:	e000e014 	.word	0xe000e014

08004710 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d914      	bls.n	800474c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004722:	4a16      	ldr	r2, [pc, #88]	; (800477c <vPortValidateInterruptPriority+0x6c>)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <vPortValidateInterruptPriority+0x70>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	7afa      	ldrb	r2, [r7, #11]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20a      	bcs.n	800474c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	607b      	str	r3, [r7, #4]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <vPortValidateInterruptPriority+0x74>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <vPortValidateInterruptPriority+0x78>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d90a      	bls.n	8004772 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	603b      	str	r3, [r7, #0]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <vPortValidateInterruptPriority+0x60>
	}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	e000e3f0 	.word	0xe000e3f0
 8004780:	20000414 	.word	0x20000414
 8004784:	e000ed0c 	.word	0xe000ed0c
 8004788:	20000418 	.word	0x20000418

0800478c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004798:	f7ff f954 	bl	8003a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800479c:	4b58      	ldr	r3, [pc, #352]	; (8004900 <pvPortMalloc+0x174>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047a4:	f000 f910 	bl	80049c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047a8:	4b56      	ldr	r3, [pc, #344]	; (8004904 <pvPortMalloc+0x178>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f040 808e 	bne.w	80048d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01d      	beq.n	80047f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047bc:	2208      	movs	r2, #8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d014      	beq.n	80047f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f023 0307 	bic.w	r3, r3, #7
 80047d4:	3308      	adds	r3, #8
 80047d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <pvPortMalloc+0x6c>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	617b      	str	r3, [r7, #20]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d069      	beq.n	80048d2 <pvPortMalloc+0x146>
 80047fe:	4b42      	ldr	r3, [pc, #264]	; (8004908 <pvPortMalloc+0x17c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d864      	bhi.n	80048d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004808:	4b40      	ldr	r3, [pc, #256]	; (800490c <pvPortMalloc+0x180>)
 800480a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800480c:	4b3f      	ldr	r3, [pc, #252]	; (800490c <pvPortMalloc+0x180>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004812:	e004      	b.n	800481e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d903      	bls.n	8004830 <pvPortMalloc+0xa4>
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f1      	bne.n	8004814 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004830:	4b33      	ldr	r3, [pc, #204]	; (8004900 <pvPortMalloc+0x174>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	429a      	cmp	r2, r3
 8004838:	d04b      	beq.n	80048d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2208      	movs	r2, #8
 8004840:	4413      	add	r3, r2
 8004842:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	1ad2      	subs	r2, r2, r3
 8004854:	2308      	movs	r3, #8
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	429a      	cmp	r2, r3
 800485a:	d91f      	bls.n	800489c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800485c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <pvPortMalloc+0xf8>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	613b      	str	r3, [r7, #16]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004896:	69b8      	ldr	r0, [r7, #24]
 8004898:	f000 f8f8 	bl	8004a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <pvPortMalloc+0x17c>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <pvPortMalloc+0x17c>)
 80048a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <pvPortMalloc+0x17c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <pvPortMalloc+0x184>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d203      	bcs.n	80048be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <pvPortMalloc+0x17c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a15      	ldr	r2, [pc, #84]	; (8004910 <pvPortMalloc+0x184>)
 80048bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <pvPortMalloc+0x178>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048d2:	f7ff f8c5 	bl	8003a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <pvPortMalloc+0x16a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <pvPortMalloc+0x168>
	return pvReturn;
 80048f6:	69fb      	ldr	r3, [r7, #28]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20005244 	.word	0x20005244
 8004904:	20005250 	.word	0x20005250
 8004908:	20005248 	.word	0x20005248
 800490c:	2000523c 	.word	0x2000523c
 8004910:	2000524c 	.word	0x2000524c

08004914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d048      	beq.n	80049b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004926:	2308      	movs	r3, #8
 8004928:	425b      	negs	r3, r3
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4413      	add	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <vPortFree+0xac>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <vPortFree+0x44>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <vPortFree+0x62>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60bb      	str	r3, [r7, #8]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <vPortFree+0xac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d019      	beq.n	80049b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d115      	bne.n	80049b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <vPortFree+0xac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800499c:	f7ff f852 	bl	8003a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <vPortFree+0xb0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <vPortFree+0xb0>)
 80049ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ae:	6938      	ldr	r0, [r7, #16]
 80049b0:	f000 f86c 	bl	8004a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049b4:	f7ff f854 	bl	8003a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20005250 	.word	0x20005250
 80049c4:	20005248 	.word	0x20005248

080049c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80049d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <prvHeapInit+0xac>)
 80049d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3307      	adds	r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0307 	bic.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <prvHeapInit+0xac>)
 80049f8:	4413      	add	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a00:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <prvHeapInit+0xb0>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a06:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <prvHeapInit+0xb0>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4413      	add	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a14:	2208      	movs	r2, #8
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <prvHeapInit+0xb4>)
 8004a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <prvHeapInit+0xb4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <prvHeapInit+0xb4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <prvHeapInit+0xb4>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <prvHeapInit+0xb8>)
 8004a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <prvHeapInit+0xbc>)
 8004a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <prvHeapInit+0xc0>)
 8004a62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000041c 	.word	0x2000041c
 8004a78:	2000523c 	.word	0x2000523c
 8004a7c:	20005244 	.word	0x20005244
 8004a80:	2000524c 	.word	0x2000524c
 8004a84:	20005248 	.word	0x20005248
 8004a88:	20005250 	.word	0x20005250

08004a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a94:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <prvInsertBlockIntoFreeList+0xa8>)
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e002      	b.n	8004aa0 <prvInsertBlockIntoFreeList+0x14>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d8f7      	bhi.n	8004a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d108      	bne.n	8004ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	441a      	add	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d118      	bne.n	8004b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvInsertBlockIntoFreeList+0xac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d00d      	beq.n	8004b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	441a      	add	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e008      	b.n	8004b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <prvInsertBlockIntoFreeList+0xac>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e003      	b.n	8004b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d002      	beq.n	8004b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	2000523c 	.word	0x2000523c
 8004b38:	20005244 	.word	0x20005244

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000010 	.word	0x20000010

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	2600      	movs	r6, #0
 8004b4c:	4d0c      	ldr	r5, [pc, #48]	; (8004b80 <__libc_init_array+0x38>)
 8004b4e:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	f000 fc5c 	bl	8005414 <_init>
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	4d0a      	ldr	r5, [pc, #40]	; (8004b88 <__libc_init_array+0x40>)
 8004b60:	4c0a      	ldr	r4, [pc, #40]	; (8004b8c <__libc_init_array+0x44>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	42a6      	cmp	r6, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b70:	4798      	blx	r3
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7a:	4798      	blx	r3
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	08005524 	.word	0x08005524
 8004b84:	08005524 	.word	0x08005524
 8004b88:	08005524 	.word	0x08005524
 8004b8c:	08005528 	.word	0x08005528

08004b90 <memcpy>:
 8004b90:	440a      	add	r2, r1
 8004b92:	4291      	cmp	r1, r2
 8004b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b98:	d100      	bne.n	8004b9c <memcpy+0xc>
 8004b9a:	4770      	bx	lr
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba2:	4291      	cmp	r1, r2
 8004ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ba8:	d1f9      	bne.n	8004b9e <memcpy+0xe>
 8004baa:	bd10      	pop	{r4, pc}

08004bac <memset>:
 8004bac:	4603      	mov	r3, r0
 8004bae:	4402      	add	r2, r0
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <memset+0xa>
 8004bb4:	4770      	bx	lr
 8004bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bba:	e7f9      	b.n	8004bb0 <memset+0x4>

08004bbc <siprintf>:
 8004bbc:	b40e      	push	{r1, r2, r3}
 8004bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc2:	b500      	push	{lr}
 8004bc4:	b09c      	sub	sp, #112	; 0x70
 8004bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc8:	9002      	str	r0, [sp, #8]
 8004bca:	9006      	str	r0, [sp, #24]
 8004bcc:	9107      	str	r1, [sp, #28]
 8004bce:	9104      	str	r1, [sp, #16]
 8004bd0:	4808      	ldr	r0, [pc, #32]	; (8004bf4 <siprintf+0x38>)
 8004bd2:	4909      	ldr	r1, [pc, #36]	; (8004bf8 <siprintf+0x3c>)
 8004bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd8:	9105      	str	r1, [sp, #20]
 8004bda:	6800      	ldr	r0, [r0, #0]
 8004bdc:	a902      	add	r1, sp, #8
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	f000 f868 	bl	8004cb4 <_svfiprintf_r>
 8004be4:	2200      	movs	r2, #0
 8004be6:	9b02      	ldr	r3, [sp, #8]
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	b01c      	add	sp, #112	; 0x70
 8004bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bf0:	b003      	add	sp, #12
 8004bf2:	4770      	bx	lr
 8004bf4:	20000010 	.word	0x20000010
 8004bf8:	ffff0208 	.word	0xffff0208

08004bfc <__ssputs_r>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	688e      	ldr	r6, [r1, #8]
 8004c02:	4682      	mov	sl, r0
 8004c04:	429e      	cmp	r6, r3
 8004c06:	460c      	mov	r4, r1
 8004c08:	4690      	mov	r8, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	d838      	bhi.n	8004c80 <__ssputs_r+0x84>
 8004c0e:	898a      	ldrh	r2, [r1, #12]
 8004c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c14:	d032      	beq.n	8004c7c <__ssputs_r+0x80>
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	6909      	ldr	r1, [r1, #16]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	eba5 0901 	sub.w	r9, r5, r1
 8004c20:	6965      	ldr	r5, [r4, #20]
 8004c22:	444b      	add	r3, r9
 8004c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c2c:	106d      	asrs	r5, r5, #1
 8004c2e:	429d      	cmp	r5, r3
 8004c30:	bf38      	it	cc
 8004c32:	461d      	movcc	r5, r3
 8004c34:	0553      	lsls	r3, r2, #21
 8004c36:	d531      	bpl.n	8004c9c <__ssputs_r+0xa0>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f000 fb45 	bl	80052c8 <_malloc_r>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	b950      	cbnz	r0, 8004c58 <__ssputs_r+0x5c>
 8004c42:	230c      	movs	r3, #12
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	f8ca 3000 	str.w	r3, [sl]
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	464a      	mov	r2, r9
 8004c5a:	6921      	ldr	r1, [r4, #16]
 8004c5c:	f7ff ff98 	bl	8004b90 <memcpy>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	6126      	str	r6, [r4, #16]
 8004c6e:	444e      	add	r6, r9
 8004c70:	6026      	str	r6, [r4, #0]
 8004c72:	463e      	mov	r6, r7
 8004c74:	6165      	str	r5, [r4, #20]
 8004c76:	eba5 0509 	sub.w	r5, r5, r9
 8004c7a:	60a5      	str	r5, [r4, #8]
 8004c7c:	42be      	cmp	r6, r7
 8004c7e:	d900      	bls.n	8004c82 <__ssputs_r+0x86>
 8004c80:	463e      	mov	r6, r7
 8004c82:	4632      	mov	r2, r6
 8004c84:	4641      	mov	r1, r8
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	f000 fab8 	bl	80051fc <memmove>
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	1b9b      	subs	r3, r3, r6
 8004c92:	4432      	add	r2, r6
 8004c94:	2000      	movs	r0, #0
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	e7db      	b.n	8004c54 <__ssputs_r+0x58>
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	f000 fb6d 	bl	800537c <_realloc_r>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d1e1      	bne.n	8004c6c <__ssputs_r+0x70>
 8004ca8:	4650      	mov	r0, sl
 8004caa:	6921      	ldr	r1, [r4, #16]
 8004cac:	f000 fac0 	bl	8005230 <_free_r>
 8004cb0:	e7c7      	b.n	8004c42 <__ssputs_r+0x46>
	...

08004cb4 <_svfiprintf_r>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4698      	mov	r8, r3
 8004cba:	898b      	ldrh	r3, [r1, #12]
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	b09d      	sub	sp, #116	; 0x74
 8004cc6:	d50e      	bpl.n	8004ce6 <_svfiprintf_r+0x32>
 8004cc8:	690b      	ldr	r3, [r1, #16]
 8004cca:	b963      	cbnz	r3, 8004ce6 <_svfiprintf_r+0x32>
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	f000 fafb 	bl	80052c8 <_malloc_r>
 8004cd2:	6028      	str	r0, [r5, #0]
 8004cd4:	6128      	str	r0, [r5, #16]
 8004cd6:	b920      	cbnz	r0, 8004ce2 <_svfiprintf_r+0x2e>
 8004cd8:	230c      	movs	r3, #12
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e0d1      	b.n	8004e86 <_svfiprintf_r+0x1d2>
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	616b      	str	r3, [r5, #20]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cea:	2320      	movs	r3, #32
 8004cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf0:	2330      	movs	r3, #48	; 0x30
 8004cf2:	f04f 0901 	mov.w	r9, #1
 8004cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ea0 <_svfiprintf_r+0x1ec>
 8004cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d02:	4623      	mov	r3, r4
 8004d04:	469a      	mov	sl, r3
 8004d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0a:	b10a      	cbz	r2, 8004d10 <_svfiprintf_r+0x5c>
 8004d0c:	2a25      	cmp	r2, #37	; 0x25
 8004d0e:	d1f9      	bne.n	8004d04 <_svfiprintf_r+0x50>
 8004d10:	ebba 0b04 	subs.w	fp, sl, r4
 8004d14:	d00b      	beq.n	8004d2e <_svfiprintf_r+0x7a>
 8004d16:	465b      	mov	r3, fp
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ff6d 	bl	8004bfc <__ssputs_r>
 8004d22:	3001      	adds	r0, #1
 8004d24:	f000 80aa 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d2a:	445a      	add	r2, fp
 8004d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a2 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d42:	f10a 0a01 	add.w	sl, sl, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	9307      	str	r3, [sp, #28]
 8004d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d50:	4654      	mov	r4, sl
 8004d52:	2205      	movs	r2, #5
 8004d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d58:	4851      	ldr	r0, [pc, #324]	; (8004ea0 <_svfiprintf_r+0x1ec>)
 8004d5a:	f000 fa41 	bl	80051e0 <memchr>
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	b9d8      	cbnz	r0, 8004d9a <_svfiprintf_r+0xe6>
 8004d62:	06d0      	lsls	r0, r2, #27
 8004d64:	bf44      	itt	mi
 8004d66:	2320      	movmi	r3, #32
 8004d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6c:	0711      	lsls	r1, r2, #28
 8004d6e:	bf44      	itt	mi
 8004d70:	232b      	movmi	r3, #43	; 0x2b
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d76:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7c:	d015      	beq.n	8004daa <_svfiprintf_r+0xf6>
 8004d7e:	4654      	mov	r4, sl
 8004d80:	2000      	movs	r0, #0
 8004d82:	f04f 0c0a 	mov.w	ip, #10
 8004d86:	9a07      	ldr	r2, [sp, #28]
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d8e:	3b30      	subs	r3, #48	; 0x30
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	d94e      	bls.n	8004e32 <_svfiprintf_r+0x17e>
 8004d94:	b1b0      	cbz	r0, 8004dc4 <_svfiprintf_r+0x110>
 8004d96:	9207      	str	r2, [sp, #28]
 8004d98:	e014      	b.n	8004dc4 <_svfiprintf_r+0x110>
 8004d9a:	eba0 0308 	sub.w	r3, r0, r8
 8004d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	46a2      	mov	sl, r4
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	e7d2      	b.n	8004d50 <_svfiprintf_r+0x9c>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	9103      	str	r1, [sp, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfbb      	ittet	lt
 8004db6:	425b      	neglt	r3, r3
 8004db8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dbc:	9307      	strge	r3, [sp, #28]
 8004dbe:	9307      	strlt	r3, [sp, #28]
 8004dc0:	bfb8      	it	lt
 8004dc2:	9204      	strlt	r2, [sp, #16]
 8004dc4:	7823      	ldrb	r3, [r4, #0]
 8004dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc8:	d10c      	bne.n	8004de4 <_svfiprintf_r+0x130>
 8004dca:	7863      	ldrb	r3, [r4, #1]
 8004dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dce:	d135      	bne.n	8004e3c <_svfiprintf_r+0x188>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	3402      	adds	r4, #2
 8004dd4:	1d1a      	adds	r2, r3, #4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	9203      	str	r2, [sp, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bfb8      	it	lt
 8004dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eb0 <_svfiprintf_r+0x1fc>
 8004de8:	2203      	movs	r2, #3
 8004dea:	4650      	mov	r0, sl
 8004dec:	7821      	ldrb	r1, [r4, #0]
 8004dee:	f000 f9f7 	bl	80051e0 <memchr>
 8004df2:	b140      	cbz	r0, 8004e06 <_svfiprintf_r+0x152>
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	eba0 000a 	sub.w	r0, r0, sl
 8004dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	3401      	adds	r4, #1
 8004e02:	4303      	orrs	r3, r0
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	2206      	movs	r2, #6
 8004e0c:	4825      	ldr	r0, [pc, #148]	; (8004ea4 <_svfiprintf_r+0x1f0>)
 8004e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e12:	f000 f9e5 	bl	80051e0 <memchr>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d038      	beq.n	8004e8c <_svfiprintf_r+0x1d8>
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <_svfiprintf_r+0x1f4>)
 8004e1c:	bb1b      	cbnz	r3, 8004e66 <_svfiprintf_r+0x1b2>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	3308      	adds	r3, #8
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	4433      	add	r3, r6
 8004e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e30:	e767      	b.n	8004d02 <_svfiprintf_r+0x4e>
 8004e32:	460c      	mov	r4, r1
 8004e34:	2001      	movs	r0, #1
 8004e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3a:	e7a5      	b.n	8004d88 <_svfiprintf_r+0xd4>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f04f 0c0a 	mov.w	ip, #10
 8004e42:	4619      	mov	r1, r3
 8004e44:	3401      	adds	r4, #1
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4e:	3a30      	subs	r2, #48	; 0x30
 8004e50:	2a09      	cmp	r2, #9
 8004e52:	d903      	bls.n	8004e5c <_svfiprintf_r+0x1a8>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0c5      	beq.n	8004de4 <_svfiprintf_r+0x130>
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	e7c3      	b.n	8004de4 <_svfiprintf_r+0x130>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	2301      	movs	r3, #1
 8004e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e64:	e7f0      	b.n	8004e48 <_svfiprintf_r+0x194>
 8004e66:	ab03      	add	r3, sp, #12
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e70:	a904      	add	r1, sp, #16
 8004e72:	f3af 8000 	nop.w
 8004e76:	1c42      	adds	r2, r0, #1
 8004e78:	4606      	mov	r6, r0
 8004e7a:	d1d6      	bne.n	8004e2a <_svfiprintf_r+0x176>
 8004e7c:	89ab      	ldrh	r3, [r5, #12]
 8004e7e:	065b      	lsls	r3, r3, #25
 8004e80:	f53f af2c 	bmi.w	8004cdc <_svfiprintf_r+0x28>
 8004e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e86:	b01d      	add	sp, #116	; 0x74
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4638      	mov	r0, r7
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e96:	a904      	add	r1, sp, #16
 8004e98:	f000 f87c 	bl	8004f94 <_printf_i>
 8004e9c:	e7eb      	b.n	8004e76 <_svfiprintf_r+0x1c2>
 8004e9e:	bf00      	nop
 8004ea0:	080054f0 	.word	0x080054f0
 8004ea4:	080054fa 	.word	0x080054fa
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004bfd 	.word	0x08004bfd
 8004eb0:	080054f6 	.word	0x080054f6

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4699      	mov	r9, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bfb8      	it	lt
 8004ec6:	4613      	movlt	r3, r2
 8004ec8:	6033      	str	r3, [r6, #0]
 8004eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ece:	460c      	mov	r4, r1
 8004ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc28      	bgt.n	8004f4e <_printf_common+0x9a>
 8004efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f00:	1e13      	subs	r3, r2, #0
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42d      	bmi.n	8004f68 <_printf_common+0xb4>
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4638      	mov	r0, r7
 8004f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d020      	beq.n	8004f5c <_printf_common+0xa8>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	68e5      	ldr	r5, [r4, #12]
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	bf18      	it	ne
 8004f26:	2500      	movne	r5, #0
 8004f28:	6832      	ldr	r2, [r6, #0]
 8004f2a:	f04f 0600 	mov.w	r6, #0
 8004f2e:	68a3      	ldr	r3, [r4, #8]
 8004f30:	bf08      	it	eq
 8004f32:	1aad      	subeq	r5, r5, r2
 8004f34:	6922      	ldr	r2, [r4, #16]
 8004f36:	bf08      	it	eq
 8004f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bfc4      	itt	gt
 8004f40:	1a9b      	subgt	r3, r3, r2
 8004f42:	18ed      	addgt	r5, r5, r3
 8004f44:	341a      	adds	r4, #26
 8004f46:	42b5      	cmp	r5, r6
 8004f48:	d11a      	bne.n	8004f80 <_printf_common+0xcc>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e008      	b.n	8004f60 <_printf_common+0xac>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4652      	mov	r2, sl
 8004f52:	4649      	mov	r1, r9
 8004f54:	4638      	mov	r0, r7
 8004f56:	47c0      	blx	r8
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d103      	bne.n	8004f64 <_printf_common+0xb0>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f64:	3501      	adds	r5, #1
 8004f66:	e7c4      	b.n	8004ef2 <_printf_common+0x3e>
 8004f68:	2030      	movs	r0, #48	; 0x30
 8004f6a:	18e1      	adds	r1, r4, r3
 8004f6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f76:	4422      	add	r2, r4
 8004f78:	3302      	adds	r3, #2
 8004f7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f7e:	e7c5      	b.n	8004f0c <_printf_common+0x58>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4622      	mov	r2, r4
 8004f84:	4649      	mov	r1, r9
 8004f86:	4638      	mov	r0, r7
 8004f88:	47c0      	blx	r8
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d0e6      	beq.n	8004f5c <_printf_common+0xa8>
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7d9      	b.n	8004f46 <_printf_common+0x92>
	...

08004f94 <_printf_i>:
 8004f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	460c      	mov	r4, r1
 8004f9a:	7e27      	ldrb	r7, [r4, #24]
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	2f78      	cmp	r7, #120	; 0x78
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	469a      	mov	sl, r3
 8004fa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004faa:	d807      	bhi.n	8004fbc <_printf_i+0x28>
 8004fac:	2f62      	cmp	r7, #98	; 0x62
 8004fae:	d80a      	bhi.n	8004fc6 <_printf_i+0x32>
 8004fb0:	2f00      	cmp	r7, #0
 8004fb2:	f000 80d9 	beq.w	8005168 <_printf_i+0x1d4>
 8004fb6:	2f58      	cmp	r7, #88	; 0x58
 8004fb8:	f000 80a4 	beq.w	8005104 <_printf_i+0x170>
 8004fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc4:	e03a      	b.n	800503c <_printf_i+0xa8>
 8004fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fca:	2b15      	cmp	r3, #21
 8004fcc:	d8f6      	bhi.n	8004fbc <_printf_i+0x28>
 8004fce:	a001      	add	r0, pc, #4	; (adr r0, 8004fd4 <_printf_i+0x40>)
 8004fd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	08005041 	.word	0x08005041
 8004fdc:	08004fbd 	.word	0x08004fbd
 8004fe0:	08004fbd 	.word	0x08004fbd
 8004fe4:	08004fbd 	.word	0x08004fbd
 8004fe8:	08004fbd 	.word	0x08004fbd
 8004fec:	08005041 	.word	0x08005041
 8004ff0:	08004fbd 	.word	0x08004fbd
 8004ff4:	08004fbd 	.word	0x08004fbd
 8004ff8:	08004fbd 	.word	0x08004fbd
 8004ffc:	08004fbd 	.word	0x08004fbd
 8005000:	0800514f 	.word	0x0800514f
 8005004:	08005071 	.word	0x08005071
 8005008:	08005131 	.word	0x08005131
 800500c:	08004fbd 	.word	0x08004fbd
 8005010:	08004fbd 	.word	0x08004fbd
 8005014:	08005171 	.word	0x08005171
 8005018:	08004fbd 	.word	0x08004fbd
 800501c:	08005071 	.word	0x08005071
 8005020:	08004fbd 	.word	0x08004fbd
 8005024:	08004fbd 	.word	0x08004fbd
 8005028:	08005139 	.word	0x08005139
 800502c:	680b      	ldr	r3, [r1, #0]
 800502e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	600a      	str	r2, [r1, #0]
 8005038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800503c:	2301      	movs	r3, #1
 800503e:	e0a4      	b.n	800518a <_printf_i+0x1f6>
 8005040:	6825      	ldr	r5, [r4, #0]
 8005042:	6808      	ldr	r0, [r1, #0]
 8005044:	062e      	lsls	r6, r5, #24
 8005046:	f100 0304 	add.w	r3, r0, #4
 800504a:	d50a      	bpl.n	8005062 <_printf_i+0xce>
 800504c:	6805      	ldr	r5, [r0, #0]
 800504e:	600b      	str	r3, [r1, #0]
 8005050:	2d00      	cmp	r5, #0
 8005052:	da03      	bge.n	800505c <_printf_i+0xc8>
 8005054:	232d      	movs	r3, #45	; 0x2d
 8005056:	426d      	negs	r5, r5
 8005058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505c:	230a      	movs	r3, #10
 800505e:	485e      	ldr	r0, [pc, #376]	; (80051d8 <_printf_i+0x244>)
 8005060:	e019      	b.n	8005096 <_printf_i+0x102>
 8005062:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005066:	6805      	ldr	r5, [r0, #0]
 8005068:	600b      	str	r3, [r1, #0]
 800506a:	bf18      	it	ne
 800506c:	b22d      	sxthne	r5, r5
 800506e:	e7ef      	b.n	8005050 <_printf_i+0xbc>
 8005070:	680b      	ldr	r3, [r1, #0]
 8005072:	6825      	ldr	r5, [r4, #0]
 8005074:	1d18      	adds	r0, r3, #4
 8005076:	6008      	str	r0, [r1, #0]
 8005078:	0628      	lsls	r0, r5, #24
 800507a:	d501      	bpl.n	8005080 <_printf_i+0xec>
 800507c:	681d      	ldr	r5, [r3, #0]
 800507e:	e002      	b.n	8005086 <_printf_i+0xf2>
 8005080:	0669      	lsls	r1, r5, #25
 8005082:	d5fb      	bpl.n	800507c <_printf_i+0xe8>
 8005084:	881d      	ldrh	r5, [r3, #0]
 8005086:	2f6f      	cmp	r7, #111	; 0x6f
 8005088:	bf0c      	ite	eq
 800508a:	2308      	moveq	r3, #8
 800508c:	230a      	movne	r3, #10
 800508e:	4852      	ldr	r0, [pc, #328]	; (80051d8 <_printf_i+0x244>)
 8005090:	2100      	movs	r1, #0
 8005092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005096:	6866      	ldr	r6, [r4, #4]
 8005098:	2e00      	cmp	r6, #0
 800509a:	bfa8      	it	ge
 800509c:	6821      	ldrge	r1, [r4, #0]
 800509e:	60a6      	str	r6, [r4, #8]
 80050a0:	bfa4      	itt	ge
 80050a2:	f021 0104 	bicge.w	r1, r1, #4
 80050a6:	6021      	strge	r1, [r4, #0]
 80050a8:	b90d      	cbnz	r5, 80050ae <_printf_i+0x11a>
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	d04d      	beq.n	800514a <_printf_i+0x1b6>
 80050ae:	4616      	mov	r6, r2
 80050b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80050b4:	fb03 5711 	mls	r7, r3, r1, r5
 80050b8:	5dc7      	ldrb	r7, [r0, r7]
 80050ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050be:	462f      	mov	r7, r5
 80050c0:	42bb      	cmp	r3, r7
 80050c2:	460d      	mov	r5, r1
 80050c4:	d9f4      	bls.n	80050b0 <_printf_i+0x11c>
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d10b      	bne.n	80050e2 <_printf_i+0x14e>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	07df      	lsls	r7, r3, #31
 80050ce:	d508      	bpl.n	80050e2 <_printf_i+0x14e>
 80050d0:	6923      	ldr	r3, [r4, #16]
 80050d2:	6861      	ldr	r1, [r4, #4]
 80050d4:	4299      	cmp	r1, r3
 80050d6:	bfde      	ittt	le
 80050d8:	2330      	movle	r3, #48	; 0x30
 80050da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050e2:	1b92      	subs	r2, r2, r6
 80050e4:	6122      	str	r2, [r4, #16]
 80050e6:	464b      	mov	r3, r9
 80050e8:	4621      	mov	r1, r4
 80050ea:	4640      	mov	r0, r8
 80050ec:	f8cd a000 	str.w	sl, [sp]
 80050f0:	aa03      	add	r2, sp, #12
 80050f2:	f7ff fedf 	bl	8004eb4 <_printf_common>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d14c      	bne.n	8005194 <_printf_i+0x200>
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	b004      	add	sp, #16
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005104:	4834      	ldr	r0, [pc, #208]	; (80051d8 <_printf_i+0x244>)
 8005106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800510a:	680e      	ldr	r6, [r1, #0]
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005112:	061f      	lsls	r7, r3, #24
 8005114:	600e      	str	r6, [r1, #0]
 8005116:	d514      	bpl.n	8005142 <_printf_i+0x1ae>
 8005118:	07d9      	lsls	r1, r3, #31
 800511a:	bf44      	itt	mi
 800511c:	f043 0320 	orrmi.w	r3, r3, #32
 8005120:	6023      	strmi	r3, [r4, #0]
 8005122:	b91d      	cbnz	r5, 800512c <_printf_i+0x198>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	2310      	movs	r3, #16
 800512e:	e7af      	b.n	8005090 <_printf_i+0xfc>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	f043 0320 	orr.w	r3, r3, #32
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	2378      	movs	r3, #120	; 0x78
 800513a:	4828      	ldr	r0, [pc, #160]	; (80051dc <_printf_i+0x248>)
 800513c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005140:	e7e3      	b.n	800510a <_printf_i+0x176>
 8005142:	065e      	lsls	r6, r3, #25
 8005144:	bf48      	it	mi
 8005146:	b2ad      	uxthmi	r5, r5
 8005148:	e7e6      	b.n	8005118 <_printf_i+0x184>
 800514a:	4616      	mov	r6, r2
 800514c:	e7bb      	b.n	80050c6 <_printf_i+0x132>
 800514e:	680b      	ldr	r3, [r1, #0]
 8005150:	6826      	ldr	r6, [r4, #0]
 8005152:	1d1d      	adds	r5, r3, #4
 8005154:	6960      	ldr	r0, [r4, #20]
 8005156:	600d      	str	r5, [r1, #0]
 8005158:	0635      	lsls	r5, r6, #24
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	d501      	bpl.n	8005162 <_printf_i+0x1ce>
 800515e:	6018      	str	r0, [r3, #0]
 8005160:	e002      	b.n	8005168 <_printf_i+0x1d4>
 8005162:	0671      	lsls	r1, r6, #25
 8005164:	d5fb      	bpl.n	800515e <_printf_i+0x1ca>
 8005166:	8018      	strh	r0, [r3, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	4616      	mov	r6, r2
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	e7ba      	b.n	80050e6 <_printf_i+0x152>
 8005170:	680b      	ldr	r3, [r1, #0]
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	600a      	str	r2, [r1, #0]
 8005176:	681e      	ldr	r6, [r3, #0]
 8005178:	2100      	movs	r1, #0
 800517a:	4630      	mov	r0, r6
 800517c:	6862      	ldr	r2, [r4, #4]
 800517e:	f000 f82f 	bl	80051e0 <memchr>
 8005182:	b108      	cbz	r0, 8005188 <_printf_i+0x1f4>
 8005184:	1b80      	subs	r0, r0, r6
 8005186:	6060      	str	r0, [r4, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	2300      	movs	r3, #0
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005192:	e7a8      	b.n	80050e6 <_printf_i+0x152>
 8005194:	4632      	mov	r2, r6
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	47d0      	blx	sl
 800519e:	3001      	adds	r0, #1
 80051a0:	d0ab      	beq.n	80050fa <_printf_i+0x166>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	079b      	lsls	r3, r3, #30
 80051a6:	d413      	bmi.n	80051d0 <_printf_i+0x23c>
 80051a8:	68e0      	ldr	r0, [r4, #12]
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	4298      	cmp	r0, r3
 80051ae:	bfb8      	it	lt
 80051b0:	4618      	movlt	r0, r3
 80051b2:	e7a4      	b.n	80050fe <_printf_i+0x16a>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4632      	mov	r2, r6
 80051b8:	4649      	mov	r1, r9
 80051ba:	4640      	mov	r0, r8
 80051bc:	47d0      	blx	sl
 80051be:	3001      	adds	r0, #1
 80051c0:	d09b      	beq.n	80050fa <_printf_i+0x166>
 80051c2:	3501      	adds	r5, #1
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	9903      	ldr	r1, [sp, #12]
 80051c8:	1a5b      	subs	r3, r3, r1
 80051ca:	42ab      	cmp	r3, r5
 80051cc:	dcf2      	bgt.n	80051b4 <_printf_i+0x220>
 80051ce:	e7eb      	b.n	80051a8 <_printf_i+0x214>
 80051d0:	2500      	movs	r5, #0
 80051d2:	f104 0619 	add.w	r6, r4, #25
 80051d6:	e7f5      	b.n	80051c4 <_printf_i+0x230>
 80051d8:	08005501 	.word	0x08005501
 80051dc:	08005512 	.word	0x08005512

080051e0 <memchr>:
 80051e0:	4603      	mov	r3, r0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	b2c9      	uxtb	r1, r1
 80051e6:	4402      	add	r2, r0
 80051e8:	4293      	cmp	r3, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	d101      	bne.n	80051f2 <memchr+0x12>
 80051ee:	2000      	movs	r0, #0
 80051f0:	e003      	b.n	80051fa <memchr+0x1a>
 80051f2:	7804      	ldrb	r4, [r0, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	428c      	cmp	r4, r1
 80051f8:	d1f6      	bne.n	80051e8 <memchr+0x8>
 80051fa:	bd10      	pop	{r4, pc}

080051fc <memmove>:
 80051fc:	4288      	cmp	r0, r1
 80051fe:	b510      	push	{r4, lr}
 8005200:	eb01 0402 	add.w	r4, r1, r2
 8005204:	d902      	bls.n	800520c <memmove+0x10>
 8005206:	4284      	cmp	r4, r0
 8005208:	4623      	mov	r3, r4
 800520a:	d807      	bhi.n	800521c <memmove+0x20>
 800520c:	1e43      	subs	r3, r0, #1
 800520e:	42a1      	cmp	r1, r4
 8005210:	d008      	beq.n	8005224 <memmove+0x28>
 8005212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800521a:	e7f8      	b.n	800520e <memmove+0x12>
 800521c:	4601      	mov	r1, r0
 800521e:	4402      	add	r2, r0
 8005220:	428a      	cmp	r2, r1
 8005222:	d100      	bne.n	8005226 <memmove+0x2a>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800522a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522e:	e7f7      	b.n	8005220 <memmove+0x24>

08005230 <_free_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4605      	mov	r5, r0
 8005234:	2900      	cmp	r1, #0
 8005236:	d043      	beq.n	80052c0 <_free_r+0x90>
 8005238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523c:	1f0c      	subs	r4, r1, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfb8      	it	lt
 8005242:	18e4      	addlt	r4, r4, r3
 8005244:	f000 f8d0 	bl	80053e8 <__malloc_lock>
 8005248:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <_free_r+0x94>)
 800524a:	6813      	ldr	r3, [r2, #0]
 800524c:	4610      	mov	r0, r2
 800524e:	b933      	cbnz	r3, 800525e <_free_r+0x2e>
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	6014      	str	r4, [r2, #0]
 8005254:	4628      	mov	r0, r5
 8005256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525a:	f000 b8cb 	b.w	80053f4 <__malloc_unlock>
 800525e:	42a3      	cmp	r3, r4
 8005260:	d90a      	bls.n	8005278 <_free_r+0x48>
 8005262:	6821      	ldr	r1, [r4, #0]
 8005264:	1862      	adds	r2, r4, r1
 8005266:	4293      	cmp	r3, r2
 8005268:	bf01      	itttt	eq
 800526a:	681a      	ldreq	r2, [r3, #0]
 800526c:	685b      	ldreq	r3, [r3, #4]
 800526e:	1852      	addeq	r2, r2, r1
 8005270:	6022      	streq	r2, [r4, #0]
 8005272:	6063      	str	r3, [r4, #4]
 8005274:	6004      	str	r4, [r0, #0]
 8005276:	e7ed      	b.n	8005254 <_free_r+0x24>
 8005278:	461a      	mov	r2, r3
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	b10b      	cbz	r3, 8005282 <_free_r+0x52>
 800527e:	42a3      	cmp	r3, r4
 8005280:	d9fa      	bls.n	8005278 <_free_r+0x48>
 8005282:	6811      	ldr	r1, [r2, #0]
 8005284:	1850      	adds	r0, r2, r1
 8005286:	42a0      	cmp	r0, r4
 8005288:	d10b      	bne.n	80052a2 <_free_r+0x72>
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	4401      	add	r1, r0
 800528e:	1850      	adds	r0, r2, r1
 8005290:	4283      	cmp	r3, r0
 8005292:	6011      	str	r1, [r2, #0]
 8005294:	d1de      	bne.n	8005254 <_free_r+0x24>
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4401      	add	r1, r0
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	6053      	str	r3, [r2, #4]
 80052a0:	e7d8      	b.n	8005254 <_free_r+0x24>
 80052a2:	d902      	bls.n	80052aa <_free_r+0x7a>
 80052a4:	230c      	movs	r3, #12
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	e7d4      	b.n	8005254 <_free_r+0x24>
 80052aa:	6820      	ldr	r0, [r4, #0]
 80052ac:	1821      	adds	r1, r4, r0
 80052ae:	428b      	cmp	r3, r1
 80052b0:	bf01      	itttt	eq
 80052b2:	6819      	ldreq	r1, [r3, #0]
 80052b4:	685b      	ldreq	r3, [r3, #4]
 80052b6:	1809      	addeq	r1, r1, r0
 80052b8:	6021      	streq	r1, [r4, #0]
 80052ba:	6063      	str	r3, [r4, #4]
 80052bc:	6054      	str	r4, [r2, #4]
 80052be:	e7c9      	b.n	8005254 <_free_r+0x24>
 80052c0:	bd38      	pop	{r3, r4, r5, pc}
 80052c2:	bf00      	nop
 80052c4:	20005254 	.word	0x20005254

080052c8 <_malloc_r>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	1ccd      	adds	r5, r1, #3
 80052cc:	f025 0503 	bic.w	r5, r5, #3
 80052d0:	3508      	adds	r5, #8
 80052d2:	2d0c      	cmp	r5, #12
 80052d4:	bf38      	it	cc
 80052d6:	250c      	movcc	r5, #12
 80052d8:	2d00      	cmp	r5, #0
 80052da:	4606      	mov	r6, r0
 80052dc:	db01      	blt.n	80052e2 <_malloc_r+0x1a>
 80052de:	42a9      	cmp	r1, r5
 80052e0:	d903      	bls.n	80052ea <_malloc_r+0x22>
 80052e2:	230c      	movs	r3, #12
 80052e4:	6033      	str	r3, [r6, #0]
 80052e6:	2000      	movs	r0, #0
 80052e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ea:	f000 f87d 	bl	80053e8 <__malloc_lock>
 80052ee:	4921      	ldr	r1, [pc, #132]	; (8005374 <_malloc_r+0xac>)
 80052f0:	680a      	ldr	r2, [r1, #0]
 80052f2:	4614      	mov	r4, r2
 80052f4:	b99c      	cbnz	r4, 800531e <_malloc_r+0x56>
 80052f6:	4f20      	ldr	r7, [pc, #128]	; (8005378 <_malloc_r+0xb0>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	b923      	cbnz	r3, 8005306 <_malloc_r+0x3e>
 80052fc:	4621      	mov	r1, r4
 80052fe:	4630      	mov	r0, r6
 8005300:	f000 f862 	bl	80053c8 <_sbrk_r>
 8005304:	6038      	str	r0, [r7, #0]
 8005306:	4629      	mov	r1, r5
 8005308:	4630      	mov	r0, r6
 800530a:	f000 f85d 	bl	80053c8 <_sbrk_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d123      	bne.n	800535a <_malloc_r+0x92>
 8005312:	230c      	movs	r3, #12
 8005314:	4630      	mov	r0, r6
 8005316:	6033      	str	r3, [r6, #0]
 8005318:	f000 f86c 	bl	80053f4 <__malloc_unlock>
 800531c:	e7e3      	b.n	80052e6 <_malloc_r+0x1e>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	1b5b      	subs	r3, r3, r5
 8005322:	d417      	bmi.n	8005354 <_malloc_r+0x8c>
 8005324:	2b0b      	cmp	r3, #11
 8005326:	d903      	bls.n	8005330 <_malloc_r+0x68>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	441c      	add	r4, r3
 800532c:	6025      	str	r5, [r4, #0]
 800532e:	e004      	b.n	800533a <_malloc_r+0x72>
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	42a2      	cmp	r2, r4
 8005334:	bf0c      	ite	eq
 8005336:	600b      	streq	r3, [r1, #0]
 8005338:	6053      	strne	r3, [r2, #4]
 800533a:	4630      	mov	r0, r6
 800533c:	f000 f85a 	bl	80053f4 <__malloc_unlock>
 8005340:	f104 000b 	add.w	r0, r4, #11
 8005344:	1d23      	adds	r3, r4, #4
 8005346:	f020 0007 	bic.w	r0, r0, #7
 800534a:	1ac2      	subs	r2, r0, r3
 800534c:	d0cc      	beq.n	80052e8 <_malloc_r+0x20>
 800534e:	1a1b      	subs	r3, r3, r0
 8005350:	50a3      	str	r3, [r4, r2]
 8005352:	e7c9      	b.n	80052e8 <_malloc_r+0x20>
 8005354:	4622      	mov	r2, r4
 8005356:	6864      	ldr	r4, [r4, #4]
 8005358:	e7cc      	b.n	80052f4 <_malloc_r+0x2c>
 800535a:	1cc4      	adds	r4, r0, #3
 800535c:	f024 0403 	bic.w	r4, r4, #3
 8005360:	42a0      	cmp	r0, r4
 8005362:	d0e3      	beq.n	800532c <_malloc_r+0x64>
 8005364:	1a21      	subs	r1, r4, r0
 8005366:	4630      	mov	r0, r6
 8005368:	f000 f82e 	bl	80053c8 <_sbrk_r>
 800536c:	3001      	adds	r0, #1
 800536e:	d1dd      	bne.n	800532c <_malloc_r+0x64>
 8005370:	e7cf      	b.n	8005312 <_malloc_r+0x4a>
 8005372:	bf00      	nop
 8005374:	20005254 	.word	0x20005254
 8005378:	20005258 	.word	0x20005258

0800537c <_realloc_r>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	4607      	mov	r7, r0
 8005380:	4614      	mov	r4, r2
 8005382:	460e      	mov	r6, r1
 8005384:	b921      	cbnz	r1, 8005390 <_realloc_r+0x14>
 8005386:	4611      	mov	r1, r2
 8005388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800538c:	f7ff bf9c 	b.w	80052c8 <_malloc_r>
 8005390:	b922      	cbnz	r2, 800539c <_realloc_r+0x20>
 8005392:	f7ff ff4d 	bl	8005230 <_free_r>
 8005396:	4625      	mov	r5, r4
 8005398:	4628      	mov	r0, r5
 800539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539c:	f000 f830 	bl	8005400 <_malloc_usable_size_r>
 80053a0:	42a0      	cmp	r0, r4
 80053a2:	d20f      	bcs.n	80053c4 <_realloc_r+0x48>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4638      	mov	r0, r7
 80053a8:	f7ff ff8e 	bl	80052c8 <_malloc_r>
 80053ac:	4605      	mov	r5, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d0f2      	beq.n	8005398 <_realloc_r+0x1c>
 80053b2:	4631      	mov	r1, r6
 80053b4:	4622      	mov	r2, r4
 80053b6:	f7ff fbeb 	bl	8004b90 <memcpy>
 80053ba:	4631      	mov	r1, r6
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff ff37 	bl	8005230 <_free_r>
 80053c2:	e7e9      	b.n	8005398 <_realloc_r+0x1c>
 80053c4:	4635      	mov	r5, r6
 80053c6:	e7e7      	b.n	8005398 <_realloc_r+0x1c>

080053c8 <_sbrk_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	2300      	movs	r3, #0
 80053cc:	4d05      	ldr	r5, [pc, #20]	; (80053e4 <_sbrk_r+0x1c>)
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	f7fb f9e2 	bl	800079c <_sbrk>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_sbrk_r+0x1a>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_sbrk_r+0x1a>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200052c4 	.word	0x200052c4

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_lock+0x8>)
 80053ea:	f000 b811 	b.w	8005410 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	200052cc 	.word	0x200052cc

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__malloc_unlock+0x8>)
 80053f6:	f000 b80c 	b.w	8005412 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	200052cc 	.word	0x200052cc

08005400 <_malloc_usable_size_r>:
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f18      	subs	r0, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfbc      	itt	lt
 800540a:	580b      	ldrlt	r3, [r1, r0]
 800540c:	18c0      	addlt	r0, r0, r3
 800540e:	4770      	bx	lr

08005410 <__retarget_lock_acquire_recursive>:
 8005410:	4770      	bx	lr

08005412 <__retarget_lock_release_recursive>:
 8005412:	4770      	bx	lr

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
