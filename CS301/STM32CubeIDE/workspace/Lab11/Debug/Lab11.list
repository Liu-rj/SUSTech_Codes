
Lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800516c  0800516c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800516c  0800516c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800516c  0800516c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  20000074  080051e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001550  080051e8  00021550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154c1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e5  00000000  00000000  0003555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000397f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af12  00000000  00000000  0003a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130e8  00000000  00000000  000557a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a067c  00000000  00000000  0006888a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c5c  00000000  00000000  00108f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08005028 	.word	0x08005028

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08005028 	.word	0x08005028

08000230 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <vApplicationGetIdleTaskMemory+0x28>)
 8000240:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <vApplicationGetIdleTaskMemory+0x2c>)
 8000246:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2280      	movs	r2, #128	; 0x80
 800024c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000090 	.word	0x20000090
 800025c:	20000144 	.word	0x20000144

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b0a2      	sub	sp, #136	; 0x88
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fb09 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f891 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f8ff 	bl	8000470 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000272:	f000 f8d3 	bl	800041c <MX_USART1_UART_Init>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of bSem01 */
  osSemaphoreDef(bSem01);
 8000276:	2300      	movs	r3, #0
 8000278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800027c:	2300      	movs	r3, #0
 800027e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  bSem01Handle = osSemaphoreCreate(osSemaphore(bSem01), 1);
 8000282:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000286:	2101      	movs	r1, #1
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fa7a 	bl	8002782 <osSemaphoreCreate>
 800028e:	4603      	mov	r3, r0
 8000290:	4a34      	ldr	r2, [pc, #208]	; (8000364 <main+0x104>)
 8000292:	6013      	str	r3, [r2, #0]

  /* definition and creation of bSemEmpty */
  osSemaphoreDef(bSemEmpty);
 8000294:	2300      	movs	r3, #0
 8000296:	67bb      	str	r3, [r7, #120]	; 0x78
 8000298:	2300      	movs	r3, #0
 800029a:	67fb      	str	r3, [r7, #124]	; 0x7c
  bSemEmptyHandle = osSemaphoreCreate(osSemaphore(bSemEmpty), 1);
 800029c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80002a0:	2101      	movs	r1, #1
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fa6d 	bl	8002782 <osSemaphoreCreate>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4a2f      	ldr	r2, [pc, #188]	; (8000368 <main+0x108>)
 80002ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of bSemFilled */
  osSemaphoreDef(bSemFilled);
 80002ae:	2300      	movs	r3, #0
 80002b0:	673b      	str	r3, [r7, #112]	; 0x70
 80002b2:	2300      	movs	r3, #0
 80002b4:	677b      	str	r3, [r7, #116]	; 0x74
  bSemFilledHandle = osSemaphoreCreate(osSemaphore(bSemFilled), 1);
 80002b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ba:	2101      	movs	r1, #1
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 fa60 	bl	8002782 <osSemaphoreCreate>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a29      	ldr	r2, [pc, #164]	; (800036c <main+0x10c>)
 80002c6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Periodic */
  osThreadDef(Periodic, PeriodicTask, osPriorityNormal, 0, 128);
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <main+0x110>)
 80002ca:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80002ce:	461d      	mov	r5, r3
 80002d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeriodicHandle = osThreadCreate(osThread(Periodic), NULL);
 80002dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f9ed 	bl	80026c2 <osThreadCreate>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a22      	ldr	r2, [pc, #136]	; (8000374 <main+0x114>)
 80002ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of Handle */
  osThreadDef(Handle, HandleTask, osPriorityNormal, 0, 128);
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <main+0x118>)
 80002f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002f4:	461d      	mov	r5, r3
 80002f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HandleHandle = osThreadCreate(osThread(Handle), NULL);
 8000302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f002 f9da 	bl	80026c2 <osThreadCreate>
 800030e:	4603      	mov	r3, r0
 8000310:	4a1a      	ldr	r2, [pc, #104]	; (800037c <main+0x11c>)
 8000312:	6013      	str	r3, [r2, #0]

  /* definition and creation of Producer */
  osThreadDef(Producer, FuncProducer, osPriorityNormal, 0, 128);
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <main+0x120>)
 8000316:	f107 041c 	add.w	r4, r7, #28
 800031a:	461d      	mov	r5, r3
 800031c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ProducerHandle = osThreadCreate(osThread(Producer), NULL);
 8000328:	f107 031c 	add.w	r3, r7, #28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f002 f9c7 	bl	80026c2 <osThreadCreate>
 8000334:	4603      	mov	r3, r0
 8000336:	4a13      	ldr	r2, [pc, #76]	; (8000384 <main+0x124>)
 8000338:	6013      	str	r3, [r2, #0]

  /* definition and creation of Consumer */
  osThreadDef(Consumer, FuncConsumer, osPriorityBelowNormal, 0, 128);
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <main+0x128>)
 800033c:	463c      	mov	r4, r7
 800033e:	461d      	mov	r5, r3
 8000340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ConsumerHandle = osThreadCreate(osThread(Consumer), NULL);
 800034c:	463b      	mov	r3, r7
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f002 f9b6 	bl	80026c2 <osThreadCreate>
 8000356:	4603      	mov	r3, r0
 8000358:	4a0c      	ldr	r2, [pc, #48]	; (800038c <main+0x12c>)
 800035a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800035c:	f002 f9aa 	bl	80026b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000360:	e7fe      	b.n	8000360 <main+0x100>
 8000362:	bf00      	nop
 8000364:	200014a8 	.word	0x200014a8
 8000368:	200014a0 	.word	0x200014a0
 800036c:	200014f4 	.word	0x200014f4
 8000370:	0800506c 	.word	0x0800506c
 8000374:	20001498 	.word	0x20001498
 8000378:	08005088 	.word	0x08005088
 800037c:	200014a4 	.word	0x200014a4
 8000380:	080050a4 	.word	0x080050a4
 8000384:	20001494 	.word	0x20001494
 8000388:	080050c0 	.word	0x080050c0
 800038c:	200014f0 	.word	0x200014f0

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	; 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 fd78 	bl	8004e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fe8d 	bl	80010f8 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e4:	f000 f90a 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	230f      	movs	r3, #15
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f8f8 	bl	80015f8 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040e:	f000 f8f5 	bl	80005fc <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	; 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <MX_USART1_UART_Init+0x50>)
 8000424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800042c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000436:	2200      	movs	r2, #0
 8000438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000442:	220c      	movs	r2, #12
 8000444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_USART1_UART_Init+0x4c>)
 8000454:	f001 fd0a 	bl	8001e6c <HAL_UART_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800045e:	f000 f8cd 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200014ac 	.word	0x200014ac
 800046c:	40013800 	.word	0x40013800

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b21      	ldr	r3, [pc, #132]	; (800050c <MX_GPIO_Init+0x9c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <MX_GPIO_Init+0x9c>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_GPIO_Init+0x9c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_GPIO_Init+0x9c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1a      	ldr	r2, [pc, #104]	; (800050c <MX_GPIO_Init+0x9c>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_GPIO_Init+0x9c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4815      	ldr	r0, [pc, #84]	; (8000510 <MX_GPIO_Init+0xa0>)
 80004bc:	f000 fdea 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2104      	movs	r1, #4
 80004c4:	4813      	ldr	r0, [pc, #76]	; (8000514 <MX_GPIO_Init+0xa4>)
 80004c6:	f000 fde5 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80004ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2302      	movs	r3, #2
 80004da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	4619      	mov	r1, r3
 80004e2:	480b      	ldr	r0, [pc, #44]	; (8000510 <MX_GPIO_Init+0xa0>)
 80004e4:	f000 fc42 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80004e8:	2304      	movs	r3, #4
 80004ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_GPIO_Init+0xa4>)
 8000500:	f000 fc34 	bl	8000d6c <HAL_GPIO_Init>

}
 8000504:	bf00      	nop
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800
 8000514:	40011400 	.word	0x40011400

08000518 <PeriodicTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PeriodicTask */
void PeriodicTask(void const * argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8000520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000524:	f002 f919 	bl	800275a <osDelay>
		osSemaphoreRelease(bSem01Handle);
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <PeriodicTask+0x1c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f002 f9b5 	bl	800289c <osSemaphoreRelease>
		osDelay(1000);
 8000532:	e7f5      	b.n	8000520 <PeriodicTask+0x8>
 8000534:	200014a8 	.word	0x200014a8

08000538 <HandleTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HandleTask */
void HandleTask(void const * argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandleTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(bSem01Handle, osWaitForever);
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HandleTask+0x2c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f04f 31ff 	mov.w	r1, #4294967295
 8000548:	4618      	mov	r0, r3
 800054a:	f002 f959 	bl	8002800 <osSemaphoreWait>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <HandleTask+0x30>)
 8000554:	f000 fdb6 	bl	80010c4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000558:	2104      	movs	r1, #4
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <HandleTask+0x34>)
 800055c:	f000 fdb2 	bl	80010c4 <HAL_GPIO_TogglePin>
		osSemaphoreWait(bSem01Handle, osWaitForever);
 8000560:	e7ee      	b.n	8000540 <HandleTask+0x8>
 8000562:	bf00      	nop
 8000564:	200014a8 	.word	0x200014a8
 8000568:	40010800 	.word	0x40010800
 800056c:	40011400 	.word	0x40011400

08000570 <FuncProducer>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FuncProducer */
void FuncProducer(void const * argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncProducer */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(bSemEmptyHandle, osWaitForever);
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <FuncProducer+0x2c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f04f 31ff 	mov.w	r1, #4294967295
 8000580:	4618      	mov	r0, r3
 8000582:	f002 f93d 	bl	8002800 <osSemaphoreWait>
//		sprintf(msg, "Producer produce data\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		HAL_Delay(500);
 8000586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058a:	f000 f9a9 	bl	80008e0 <HAL_Delay>
		osSemaphoreRelease(bSemFilledHandle);
 800058e:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <FuncProducer+0x30>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f002 f982 	bl	800289c <osSemaphoreRelease>
		osSemaphoreWait(bSemEmptyHandle, osWaitForever);
 8000598:	e7ee      	b.n	8000578 <FuncProducer+0x8>
 800059a:	bf00      	nop
 800059c:	200014a0 	.word	0x200014a0
 80005a0:	200014f4 	.word	0x200014f4

080005a4 <FuncConsumer>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FuncConsumer */
void FuncConsumer(void const * argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncConsumer */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(bSemFilledHandle, osWaitForever);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <FuncConsumer+0x2c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 f923 	bl	8002800 <osSemaphoreWait>
//		sprintf(msg, "Consumer consume data\r\n");
//		HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		HAL_Delay(500);
 80005ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005be:	f000 f98f 	bl	80008e0 <HAL_Delay>
		osSemaphoreRelease(bSemEmptyHandle);
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <FuncConsumer+0x30>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f968 	bl	800289c <osSemaphoreRelease>
		osSemaphoreWait(bSemFilledHandle, osWaitForever);
 80005cc:	e7ee      	b.n	80005ac <FuncConsumer+0x8>
 80005ce:	bf00      	nop
 80005d0:	200014f4 	.word	0x200014f4
 80005d4:	200014a0 	.word	0x200014a0

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ea:	f000 f95d 	bl	80008a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40000400 	.word	0x40000400

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_MspInit+0x68>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a17      	ldr	r2, [pc, #92]	; (8000670 <HAL_MspInit+0x68>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_MspInit+0x68>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_MspInit+0x68>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <HAL_MspInit+0x68>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_MspInit+0x68>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	210f      	movs	r1, #15
 8000642:	f06f 0001 	mvn.w	r0, #1
 8000646:	f000 fa24 	bl	8000a92 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_MspInit+0x6c>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_MspInit+0x6c>)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40010000 	.word	0x40010000

08000678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <HAL_UART_MspInit+0x9c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d139      	bne.n	800070c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <HAL_UART_MspInit+0xa0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <HAL_UART_MspInit+0xa0>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_UART_MspInit+0xa0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_UART_MspInit+0xa0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a18      	ldr	r2, [pc, #96]	; (8000718 <HAL_UART_MspInit+0xa0>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_UART_MspInit+0xa0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <HAL_UART_MspInit+0xa4>)
 80006de:	f000 fb45 	bl	8000d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <HAL_UART_MspInit+0xa4>)
 80006f8:	f000 fb38 	bl	8000d6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2105      	movs	r1, #5
 8000700:	2025      	movs	r0, #37	; 0x25
 8000702:	f000 f9c6 	bl	8000a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000706:	2025      	movs	r0, #37	; 0x25
 8000708:	f000 f9df 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40013800 	.word	0x40013800
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	201d      	movs	r0, #29
 8000736:	f000 f9ac 	bl	8000a92 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800073a:	201d      	movs	r0, #29
 800073c:	f000 f9c5 	bl	8000aca <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_InitTick+0xa0>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <HAL_InitTick+0xa0>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	61d3      	str	r3, [r2, #28]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_InitTick+0xa0>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000758:	f107 0210 	add.w	r2, r7, #16
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f8c4 	bl	80018f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000768:	f001 f89a 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 800076c:	4603      	mov	r3, r0
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <HAL_InitTick+0xa4>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9b      	lsrs	r3, r3, #18
 800077c:	3b01      	subs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_InitTick+0xa8>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <HAL_InitTick+0xac>)
 8000784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_InitTick+0xa8>)
 8000788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800078c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_InitTick+0xa8>)
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_InitTick+0xa8>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_InitTick+0xa8>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <HAL_InitTick+0xa8>)
 80007a2:	f001 f8f3 	bl	800198c <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d104      	bne.n	80007b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <HAL_InitTick+0xa8>)
 80007ae:	f001 f945 	bl	8001a3c <HAL_TIM_Base_Start_IT>
 80007b2:	4603      	mov	r3, r0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3730      	adds	r7, #48	; 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	431bde83 	.word	0x431bde83
 80007c8:	200014f8 	.word	0x200014f8
 80007cc:	40000400 	.word	0x40000400

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
	...

080007fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM3_IRQHandler+0x10>)
 8000802:	f001 f97b 	bl	8001afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200014f8 	.word	0x200014f8

08000810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <USART1_IRQHandler+0x10>)
 8000816:	f001 fb77 	bl	8001f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200014ac 	.word	0x200014ac

08000824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000856:	f7ff ffe5 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f004 fae7 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fcff 	bl	8000260 <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800086c:	08005174 	.word	0x08005174
  ldr r2, =_sbss
 8000870:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000874:	20001550 	.word	0x20001550

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f8f5 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f7ff ff44 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff feb6 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20001540 	.word	0x20001540

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20001540 	.word	0x20001540

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff0 	bl	80008cc <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffe0 	bl	80008cc <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db0b      	blt.n	80009b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 021f 	and.w	r2, r3, #31
 80009a4:	4906      	ldr	r1, [pc, #24]	; (80009c0 <__NVIC_EnableIRQ+0x34>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	095b      	lsrs	r3, r3, #5
 80009ac:	2001      	movs	r0, #1
 80009ae:	fa00 f202 	lsl.w	r2, r0, r2
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff4f 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff64 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ffb2 	bl	8000a18 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff81 	bl	80009c4 <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff57 	bl	800098c <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d008      	beq.n	8000b0e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2204      	movs	r2, #4
 8000b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e020      	b.n	8000b50 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 020e 	bic.w	r2, r2, #14
 8000b1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 0201 	bic.w	r2, r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	2101      	movs	r1, #1
 8000b38:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d005      	beq.n	8000b7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2204      	movs	r2, #4
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e0d6      	b.n	8000d2c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 020e 	bic.w	r2, r2, #14
 8000b8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0201 	bic.w	r2, r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b64      	ldr	r3, [pc, #400]	; (8000d38 <HAL_DMA_Abort_IT+0x1dc>)
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d958      	bls.n	8000c5c <HAL_DMA_Abort_IT+0x100>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a63      	ldr	r2, [pc, #396]	; (8000d3c <HAL_DMA_Abort_IT+0x1e0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d04f      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xf8>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a61      	ldr	r2, [pc, #388]	; (8000d40 <HAL_DMA_Abort_IT+0x1e4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d048      	beq.n	8000c50 <HAL_DMA_Abort_IT+0xf4>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a60      	ldr	r2, [pc, #384]	; (8000d44 <HAL_DMA_Abort_IT+0x1e8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d040      	beq.n	8000c4a <HAL_DMA_Abort_IT+0xee>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a5e      	ldr	r2, [pc, #376]	; (8000d48 <HAL_DMA_Abort_IT+0x1ec>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d038      	beq.n	8000c44 <HAL_DMA_Abort_IT+0xe8>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a5d      	ldr	r2, [pc, #372]	; (8000d4c <HAL_DMA_Abort_IT+0x1f0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d030      	beq.n	8000c3e <HAL_DMA_Abort_IT+0xe2>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a5b      	ldr	r2, [pc, #364]	; (8000d50 <HAL_DMA_Abort_IT+0x1f4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d028      	beq.n	8000c38 <HAL_DMA_Abort_IT+0xdc>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a53      	ldr	r2, [pc, #332]	; (8000d38 <HAL_DMA_Abort_IT+0x1dc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d020      	beq.n	8000c32 <HAL_DMA_Abort_IT+0xd6>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a57      	ldr	r2, [pc, #348]	; (8000d54 <HAL_DMA_Abort_IT+0x1f8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d019      	beq.n	8000c2e <HAL_DMA_Abort_IT+0xd2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a56      	ldr	r2, [pc, #344]	; (8000d58 <HAL_DMA_Abort_IT+0x1fc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d012      	beq.n	8000c2a <HAL_DMA_Abort_IT+0xce>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a54      	ldr	r2, [pc, #336]	; (8000d5c <HAL_DMA_Abort_IT+0x200>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00a      	beq.n	8000c24 <HAL_DMA_Abort_IT+0xc8>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a53      	ldr	r2, [pc, #332]	; (8000d60 <HAL_DMA_Abort_IT+0x204>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_DMA_Abort_IT+0xc2>
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	e01b      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	e018      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	e015      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	e013      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e011      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c36:	e00e      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c3c:	e00b      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c42:	e008      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	e005      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4e:	e002      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c50:	2310      	movs	r3, #16
 8000c52:	e000      	b.n	8000c56 <HAL_DMA_Abort_IT+0xfa>
 8000c54:	2301      	movs	r3, #1
 8000c56:	4a43      	ldr	r2, [pc, #268]	; (8000d64 <HAL_DMA_Abort_IT+0x208>)
 8000c58:	6053      	str	r3, [r2, #4]
 8000c5a:	e057      	b.n	8000d0c <HAL_DMA_Abort_IT+0x1b0>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <HAL_DMA_Abort_IT+0x1e0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d04f      	beq.n	8000d06 <HAL_DMA_Abort_IT+0x1aa>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <HAL_DMA_Abort_IT+0x1e4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d048      	beq.n	8000d02 <HAL_DMA_Abort_IT+0x1a6>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <HAL_DMA_Abort_IT+0x1e8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d040      	beq.n	8000cfc <HAL_DMA_Abort_IT+0x1a0>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a32      	ldr	r2, [pc, #200]	; (8000d48 <HAL_DMA_Abort_IT+0x1ec>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d038      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0x19a>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <HAL_DMA_Abort_IT+0x1f0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d030      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0x194>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a2f      	ldr	r2, [pc, #188]	; (8000d50 <HAL_DMA_Abort_IT+0x1f4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d028      	beq.n	8000cea <HAL_DMA_Abort_IT+0x18e>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <HAL_DMA_Abort_IT+0x1dc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d020      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x188>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <HAL_DMA_Abort_IT+0x1f8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d019      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0x184>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a29      	ldr	r2, [pc, #164]	; (8000d58 <HAL_DMA_Abort_IT+0x1fc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d012      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x180>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a28      	ldr	r2, [pc, #160]	; (8000d5c <HAL_DMA_Abort_IT+0x200>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00a      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x17a>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <HAL_DMA_Abort_IT+0x204>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d102      	bne.n	8000cd0 <HAL_DMA_Abort_IT+0x174>
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	e01b      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	e018      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	e015      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cdc:	2310      	movs	r3, #16
 8000cde:	e013      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e011      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce8:	e00e      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cee:	e00b      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf4:	e008      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfa:	e005      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	e002      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000d02:	2310      	movs	r3, #16
 8000d04:	e000      	b.n	8000d08 <HAL_DMA_Abort_IT+0x1ac>
 8000d06:	2301      	movs	r3, #1
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_DMA_Abort_IT+0x20c>)
 8000d0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	4798      	blx	r3
    } 
  }
  return status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40020080 	.word	0x40020080
 8000d3c:	40020008 	.word	0x40020008
 8000d40:	4002001c 	.word	0x4002001c
 8000d44:	40020030 	.word	0x40020030
 8000d48:	40020044 	.word	0x40020044
 8000d4c:	40020058 	.word	0x40020058
 8000d50:	4002006c 	.word	0x4002006c
 8000d54:	40020408 	.word	0x40020408
 8000d58:	4002041c 	.word	0x4002041c
 8000d5c:	40020430 	.word	0x40020430
 8000d60:	40020444 	.word	0x40020444
 8000d64:	40020400 	.word	0x40020400
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08b      	sub	sp, #44	; 0x2c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	e179      	b.n	8001074 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d80:	2201      	movs	r2, #1
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8168 	bne.w	800106e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4aa0      	ldr	r2, [pc, #640]	; (8001024 <HAL_GPIO_Init+0x2b8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d05e      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000da8:	4a9e      	ldr	r2, [pc, #632]	; (8001024 <HAL_GPIO_Init+0x2b8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d875      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dae:	4a9e      	ldr	r2, [pc, #632]	; (8001028 <HAL_GPIO_Init+0x2bc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d058      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000db4:	4a9c      	ldr	r2, [pc, #624]	; (8001028 <HAL_GPIO_Init+0x2bc>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d86f      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dba:	4a9c      	ldr	r2, [pc, #624]	; (800102c <HAL_GPIO_Init+0x2c0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d052      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000dc0:	4a9a      	ldr	r2, [pc, #616]	; (800102c <HAL_GPIO_Init+0x2c0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d869      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dc6:	4a9a      	ldr	r2, [pc, #616]	; (8001030 <HAL_GPIO_Init+0x2c4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d04c      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000dcc:	4a98      	ldr	r2, [pc, #608]	; (8001030 <HAL_GPIO_Init+0x2c4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d863      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dd2:	4a98      	ldr	r2, [pc, #608]	; (8001034 <HAL_GPIO_Init+0x2c8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d046      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000dd8:	4a96      	ldr	r2, [pc, #600]	; (8001034 <HAL_GPIO_Init+0x2c8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d85d      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dde:	2b12      	cmp	r3, #18
 8000de0:	d82a      	bhi.n	8000e38 <HAL_GPIO_Init+0xcc>
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d859      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000de6:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <HAL_GPIO_Init+0x80>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e41 	.word	0x08000e41
 8000df4:	08000e53 	.word	0x08000e53
 8000df8:	08000e95 	.word	0x08000e95
 8000dfc:	08000e9b 	.word	0x08000e9b
 8000e00:	08000e9b 	.word	0x08000e9b
 8000e04:	08000e9b 	.word	0x08000e9b
 8000e08:	08000e9b 	.word	0x08000e9b
 8000e0c:	08000e9b 	.word	0x08000e9b
 8000e10:	08000e9b 	.word	0x08000e9b
 8000e14:	08000e9b 	.word	0x08000e9b
 8000e18:	08000e9b 	.word	0x08000e9b
 8000e1c:	08000e9b 	.word	0x08000e9b
 8000e20:	08000e9b 	.word	0x08000e9b
 8000e24:	08000e9b 	.word	0x08000e9b
 8000e28:	08000e9b 	.word	0x08000e9b
 8000e2c:	08000e9b 	.word	0x08000e9b
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e5d 	.word	0x08000e5d
 8000e38:	4a7f      	ldr	r2, [pc, #508]	; (8001038 <HAL_GPIO_Init+0x2cc>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e3e:	e02c      	b.n	8000e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e029      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e024      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	3308      	adds	r3, #8
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e01f      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	330c      	adds	r3, #12
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e01a      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e013      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d105      	bne.n	8000e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	611a      	str	r2, [r3, #16]
          break;
 8000e86:	e009      	b.n	8000e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	615a      	str	r2, [r3, #20]
          break;
 8000e92:	e003      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          break;
 8000e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d801      	bhi.n	8000ea6 <HAL_GPIO_Init+0x13a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	e001      	b.n	8000eaa <HAL_GPIO_Init+0x13e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2bff      	cmp	r3, #255	; 0xff
 8000eb0:	d802      	bhi.n	8000eb8 <HAL_GPIO_Init+0x14c>
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	e002      	b.n	8000ebe <HAL_GPIO_Init+0x152>
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	3b08      	subs	r3, #8
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	6a39      	ldr	r1, [r7, #32]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80c1 	beq.w	800106e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eec:	4b53      	ldr	r3, [pc, #332]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b50      	ldr	r3, [pc, #320]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_GPIO_Init+0x2d4>)
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a46      	ldr	r2, [pc, #280]	; (8001044 <HAL_GPIO_Init+0x2d8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d01f      	beq.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a45      	ldr	r2, [pc, #276]	; (8001048 <HAL_GPIO_Init+0x2dc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d019      	beq.n	8000f6c <HAL_GPIO_Init+0x200>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a44      	ldr	r2, [pc, #272]	; (800104c <HAL_GPIO_Init+0x2e0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d013      	beq.n	8000f68 <HAL_GPIO_Init+0x1fc>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a43      	ldr	r2, [pc, #268]	; (8001050 <HAL_GPIO_Init+0x2e4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d00d      	beq.n	8000f64 <HAL_GPIO_Init+0x1f8>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a42      	ldr	r2, [pc, #264]	; (8001054 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d007      	beq.n	8000f60 <HAL_GPIO_Init+0x1f4>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a41      	ldr	r2, [pc, #260]	; (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d101      	bne.n	8000f5c <HAL_GPIO_Init+0x1f0>
 8000f58:	2305      	movs	r3, #5
 8000f5a:	e00a      	b.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	e008      	b.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e004      	b.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_GPIO_Init+0x206>
 8000f70:	2300      	movs	r3, #0
 8000f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f74:	f002 0203 	and.w	r2, r2, #3
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	4093      	lsls	r3, r2
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f82:	492f      	ldr	r1, [pc, #188]	; (8001040 <HAL_GPIO_Init+0x2d4>)
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	492e      	ldr	r1, [pc, #184]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000faa:	4b2c      	ldr	r3, [pc, #176]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	492a      	ldr	r1, [pc, #168]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	4924      	ldr	r1, [pc, #144]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4920      	ldr	r1, [pc, #128]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	491a      	ldr	r1, [pc, #104]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	4916      	ldr	r1, [pc, #88]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8001004:	4013      	ands	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d025      	beq.n	8001060 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_GPIO_Init+0x2f0>)
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	4910      	ldr	r1, [pc, #64]	; (800105c <HAL_GPIO_Init+0x2f0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	60cb      	str	r3, [r1, #12]
 8001020:	e025      	b.n	800106e <HAL_GPIO_Init+0x302>
 8001022:	bf00      	nop
 8001024:	10320000 	.word	0x10320000
 8001028:	10310000 	.word	0x10310000
 800102c:	10220000 	.word	0x10220000
 8001030:	10210000 	.word	0x10210000
 8001034:	10120000 	.word	0x10120000
 8001038:	10110000 	.word	0x10110000
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	40010800 	.word	0x40010800
 8001048:	40010c00 	.word	0x40010c00
 800104c:	40011000 	.word	0x40011000
 8001050:	40011400 	.word	0x40011400
 8001054:	40011800 	.word	0x40011800
 8001058:	40011c00 	.word	0x40011c00
 800105c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_GPIO_Init+0x324>)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	43db      	mvns	r3, r3
 8001068:	4909      	ldr	r1, [pc, #36]	; (8001090 <HAL_GPIO_Init+0x324>)
 800106a:	4013      	ands	r3, r2
 800106c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f ae7e 	bne.w	8000d80 <HAL_GPIO_Init+0x14>
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	372c      	adds	r7, #44	; 0x2c
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	041a      	lsls	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	611a      	str	r2, [r3, #16]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	041a      	lsls	r2, r3, #16
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43d9      	mvns	r1, r3
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	400b      	ands	r3, r1
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e26c      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8087 	beq.w	8001226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001118:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b04      	cmp	r3, #4
 8001122:	d00c      	beq.n	800113e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001124:	4b8f      	ldr	r3, [pc, #572]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 030c 	and.w	r3, r3, #12
 800112c:	2b08      	cmp	r3, #8
 800112e:	d112      	bne.n	8001156 <HAL_RCC_OscConfig+0x5e>
 8001130:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d10b      	bne.n	8001156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113e:	4b89      	ldr	r3, [pc, #548]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d06c      	beq.n	8001224 <HAL_RCC_OscConfig+0x12c>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d168      	bne.n	8001224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e246      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115e:	d106      	bne.n	800116e <HAL_RCC_OscConfig+0x76>
 8001160:	4b80      	ldr	r3, [pc, #512]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a7f      	ldr	r2, [pc, #508]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e02e      	b.n	80011cc <HAL_RCC_OscConfig+0xd4>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10c      	bne.n	8001190 <HAL_RCC_OscConfig+0x98>
 8001176:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a7a      	ldr	r2, [pc, #488]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 800117c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b78      	ldr	r3, [pc, #480]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a77      	ldr	r2, [pc, #476]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e01d      	b.n	80011cc <HAL_RCC_OscConfig+0xd4>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0xbc>
 800119a:	4b72      	ldr	r3, [pc, #456]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a71      	ldr	r2, [pc, #452]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b6f      	ldr	r3, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6e      	ldr	r2, [pc, #440]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e00b      	b.n	80011cc <HAL_RCC_OscConfig+0xd4>
 80011b4:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a67      	ldr	r2, [pc, #412]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb7a 	bl	80008cc <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fb76 	bl	80008cc <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1fa      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0xe4>
 80011fa:	e014      	b.n	8001226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fb66 	bl	80008cc <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fb62 	bl	80008cc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1e6      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x10c>
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d063      	beq.n	80012fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001232:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800123e:	4b49      	ldr	r3, [pc, #292]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b08      	cmp	r3, #8
 8001248:	d11c      	bne.n	8001284 <HAL_RCC_OscConfig+0x18c>
 800124a:	4b46      	ldr	r3, [pc, #280]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d116      	bne.n	8001284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x176>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d001      	beq.n	800126e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e1ba      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4939      	ldr	r1, [pc, #228]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	e03a      	b.n	80012fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d020      	beq.n	80012ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fb1b 	bl	80008cc <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129a:	f7ff fb17 	bl	80008cc <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e19b      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4927      	ldr	r1, [pc, #156]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]
 80012cc:	e015      	b.n	80012fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fafa 	bl	80008cc <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff faf6 	bl	80008cc <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e17a      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d03a      	beq.n	800137c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d019      	beq.n	8001342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_RCC_OscConfig+0x274>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fada 	bl	80008cc <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fad6 	bl	80008cc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e15a      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_RCC_OscConfig+0x26c>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800133a:	2001      	movs	r0, #1
 800133c:	f000 fb08 	bl	8001950 <RCC_Delay>
 8001340:	e01c      	b.n	800137c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_RCC_OscConfig+0x274>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fac0 	bl	80008cc <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134e:	e00f      	b.n	8001370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fabc 	bl	80008cc <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d908      	bls.n	8001370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e140      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	42420000 	.word	0x42420000
 800136c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	4b9e      	ldr	r3, [pc, #632]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e9      	bne.n	8001350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a6 	beq.w	80014d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138e:	4b97      	ldr	r3, [pc, #604]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10d      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b94      	ldr	r3, [pc, #592]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a93      	ldr	r2, [pc, #588]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b91      	ldr	r3, [pc, #580]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b8e      	ldr	r3, [pc, #568]	; (80015f0 <HAL_RCC_OscConfig+0x4f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d118      	bne.n	80013f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_RCC_OscConfig+0x4f8>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fa7d 	bl	80008cc <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d6:	f7ff fa79 	bl	80008cc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b64      	cmp	r3, #100	; 0x64
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0fd      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x312>
 80013fc:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4a7a      	ldr	r2, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6213      	str	r3, [r2, #32]
 8001408:	e02d      	b.n	8001466 <HAL_RCC_OscConfig+0x36e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x334>
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a75      	ldr	r2, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6213      	str	r3, [r2, #32]
 800141e:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a72      	ldr	r2, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	6213      	str	r3, [r2, #32]
 800142a:	e01c      	b.n	8001466 <HAL_RCC_OscConfig+0x36e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d10c      	bne.n	800144e <HAL_RCC_OscConfig+0x356>
 8001434:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a6c      	ldr	r2, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6213      	str	r3, [r2, #32]
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6213      	str	r3, [r2, #32]
 800144c:	e00b      	b.n	8001466 <HAL_RCC_OscConfig+0x36e>
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a66      	ldr	r2, [pc, #408]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a63      	ldr	r2, [pc, #396]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d015      	beq.n	800149a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fa2d 	bl	80008cc <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fa29 	bl	80008cc <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0ab      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148c:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0ee      	beq.n	8001476 <HAL_RCC_OscConfig+0x37e>
 8001498:	e014      	b.n	80014c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fa17 	bl	80008cc <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fa13 	bl	80008cc <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e095      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1ee      	bne.n	80014a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d105      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ca:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a47      	ldr	r2, [pc, #284]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8081 	beq.w	80015e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e0:	4b42      	ldr	r3, [pc, #264]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d061      	beq.n	80015b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d146      	bne.n	8001582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f4:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_OscConfig+0x4fc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff f9e7 	bl	80008cc <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f9e3 	bl	80008cc <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e067      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d108      	bne.n	800153c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	492d      	ldr	r1, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a19      	ldr	r1, [r3, #32]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	430b      	orrs	r3, r1
 800154e:	4927      	ldr	r1, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x4fc>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff f9b7 	bl	80008cc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff f9b3 	bl	80008cc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e037      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x46a>
 8001580:	e02f      	b.n	80015e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_RCC_OscConfig+0x4fc>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff f9a0 	bl	80008cc <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff f99c 	bl	80008cc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e020      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x498>
 80015ae:	e018      	b.n	80015e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e013      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_OscConfig+0x4f4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40007000 	.word	0x40007000
 80015f4:	42420060 	.word	0x42420060

080015f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0d0      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d910      	bls.n	800163c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 0207 	bic.w	r2, r3, #7
 8001622:	4965      	ldr	r1, [pc, #404]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0b8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a58      	ldr	r2, [pc, #352]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800165e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	494d      	ldr	r1, [pc, #308]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d040      	beq.n	8001718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d115      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e073      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06b      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f023 0203 	bic.w	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4936      	ldr	r1, [pc, #216]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f8f0 	bl	80008cc <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	f7ff f8ec 	bl	80008cc <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e053      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 020c 	and.w	r2, r3, #12
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d1eb      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d210      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 0207 	bic.w	r2, r3, #7
 800172e:	4922      	ldr	r1, [pc, #136]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e032      	b.n	80017ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001786:	f000 f821 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 800178a:	4602      	mov	r2, r0
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	490a      	ldr	r1, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1cc>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1d0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe ffba 	bl	8000720 <HAL_InitTick>

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	080050f4 	.word	0x080050f4
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	b490      	push	{r4, r7}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017d4:	1d3c      	adds	r4, r7, #4
 80017d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017dc:	f240 2301 	movw	r3, #513	; 0x201
 80017e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b04      	cmp	r3, #4
 8001804:	d002      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x40>
 8001806:	2b08      	cmp	r3, #8
 8001808:	d003      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x46>
 800180a:	e02d      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800180e:	623b      	str	r3, [r7, #32]
      break;
 8001810:	e02d      	b.n	800186e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800181e:	4413      	add	r3, r2
 8001820:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001824:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	0c5b      	lsrs	r3, r3, #17
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800183e:	4413      	add	r3, r2
 8001840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001844:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800184a:	fb02 f203 	mul.w	r2, r2, r3
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	e004      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	623b      	str	r3, [r7, #32]
      break;
 8001866:	e002      	b.n	800186e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186a:	623b      	str	r3, [r7, #32]
      break;
 800186c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186e:	6a3b      	ldr	r3, [r7, #32]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bc90      	pop	{r4, r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	080050dc 	.word	0x080050dc
 8001880:	40021000 	.word	0x40021000
 8001884:	007a1200 	.word	0x007a1200
 8001888:	003d0900 	.word	0x003d0900

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08005104 	.word	0x08005104

080018c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018cc:	f7ff ffde 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0adb      	lsrs	r3, r3, #11
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	08005104 	.word	0x08005104

080018f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	220f      	movs	r2, #15
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_RCC_GetClockConfig+0x58>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_RCC_GetClockConfig+0x58>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_GetClockConfig+0x58>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_RCC_GetClockConfig+0x58>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_RCC_GetClockConfig+0x5c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0207 	and.w	r2, r3, #7
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000
 800194c:	40022000 	.word	0x40022000

08001950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <RCC_Delay+0x34>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <RCC_Delay+0x38>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0a5b      	lsrs	r3, r3, #9
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800196c:	bf00      	nop
  }
  while (Delay --);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	60fa      	str	r2, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f9      	bne.n	800196c <RCC_Delay+0x1c>
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000
 8001988:	10624dd3 	.word	0x10624dd3

0800198c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e041      	b.n	8001a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f839 	bl	8001a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 f9c2 	bl	8001d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e044      	b.n	8001ade <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_TIM_Base_Start_IT+0xac>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d018      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_TIM_Base_Start_IT+0xb0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d00e      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d111      	bne.n	8001acc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d010      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aca:	e007      	b.n	8001adc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40012c00 	.word	0x40012c00
 8001aec:	40013400 	.word	0x40013400
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40000800 	.word	0x40000800
 8001af8:	40000c00 	.word	0x40000c00

08001afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0202 	mvn.w	r2, #2
 8001b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8ed 	bl	8001d1e <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f8e0 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f8ef 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d122      	bne.n	8001bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d11b      	bne.n	8001bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0204 	mvn.w	r2, #4
 8001b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8c3 	bl	8001d1e <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8b6 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8c5 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d122      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d11b      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0208 	mvn.w	r2, #8
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f899 	bl	8001d1e <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f88c 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f89b 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d122      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d11b      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0210 	mvn.w	r2, #16
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f86f 	bl	8001d1e <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f862 	bl	8001d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f871 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0201 	mvn.w	r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fcac 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b80      	cmp	r3, #128	; 0x80
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8d7 	bl	8001e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc4:	2b40      	cmp	r3, #64	; 0x40
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f835 	bl	8001d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d10e      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d107      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0220 	mvn.w	r2, #32
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8a2 	bl	8001e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <TIM_Base_SetConfig+0xe0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <TIM_Base_SetConfig+0xe4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00f      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7a:	d00b      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <TIM_Base_SetConfig+0xe8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a2e      	ldr	r2, [pc, #184]	; (8001e40 <TIM_Base_SetConfig+0xec>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <TIM_Base_SetConfig+0x40>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <TIM_Base_SetConfig+0xf0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <TIM_Base_SetConfig+0xe0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <TIM_Base_SetConfig+0x82>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <TIM_Base_SetConfig+0xe4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00f      	beq.n	8001dd6 <TIM_Base_SetConfig+0x82>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d00b      	beq.n	8001dd6 <TIM_Base_SetConfig+0x82>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <TIM_Base_SetConfig+0xe8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <TIM_Base_SetConfig+0x82>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <TIM_Base_SetConfig+0xec>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <TIM_Base_SetConfig+0x82>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <TIM_Base_SetConfig+0xf0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d108      	bne.n	8001de8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <TIM_Base_SetConfig+0xe0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d003      	beq.n	8001e1c <TIM_Base_SetConfig+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <TIM_Base_SetConfig+0xe4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d103      	bne.n	8001e24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	615a      	str	r2, [r3, #20]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40013400 	.word	0x40013400
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00

08001e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e03f      	b.n	8001efe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fbf0 	bl	8000678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb49 	bl	8002548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_UART_IRQHandler+0x52>
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa4f 	bl	80023f6 <UART_Receive_IT>
      return;
 8001f58:	e17b      	b.n	8002252 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80b1 	beq.w	80020c4 <HAL_UART_IRQHandler+0x1bc>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_UART_IRQHandler+0x70>
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80a6 	beq.w	80020c4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_UART_IRQHandler+0x90>
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_UART_IRQHandler+0xb0>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f043 0202 	orr.w	r2, r3, #2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_UART_IRQHandler+0xd0>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f043 0204 	orr.w	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00f      	beq.n	8002002 <HAL_UART_IRQHandler+0xfa>
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d104      	bne.n	8001ff6 <HAL_UART_IRQHandler+0xee>
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f043 0208 	orr.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 811e 	beq.w	8002248 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_UART_IRQHandler+0x11e>
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f9e8 	bl	80023f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <HAL_UART_IRQHandler+0x146>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d031      	beq.n	80020b2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f92a 	bl	80022a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d023      	beq.n	80020aa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002070:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	2b00      	cmp	r3, #0
 8002078:	d013      	beq.n	80020a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	4a76      	ldr	r2, [pc, #472]	; (8002258 <HAL_UART_IRQHandler+0x350>)
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fd68 	bl	8000b5c <HAL_DMA_Abort_IT>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800209c:	4610      	mov	r0, r2
 800209e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	e00e      	b.n	80020c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8ec 	bl	8002280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a8:	e00a      	b.n	80020c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8e8 	bl	8002280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	e006      	b.n	80020c0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8e4 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020be:	e0c3      	b.n	8002248 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c0:	bf00      	nop
    return;
 80020c2:	e0c1      	b.n	8002248 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 80a1 	bne.w	8002210 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 809b 	beq.w	8002210 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8095 	beq.w	8002210 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d04e      	beq.n	80021a8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002114:	8a3b      	ldrh	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8098 	beq.w	800224c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002120:	8a3a      	ldrh	r2, [r7, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	f080 8092 	bcs.w	800224c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8a3a      	ldrh	r2, [r7, #16]
 800212c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b20      	cmp	r3, #32
 8002136:	d02b      	beq.n	8002190 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002146:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002166:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0210 	bic.w	r2, r2, #16
 8002184:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fcab 	bl	8000ae6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002198:	b29b      	uxth	r3, r3
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	b29b      	uxth	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f876 	bl	8002292 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021a6:	e051      	b.n	800224c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d047      	beq.n	8002250 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80021c0:	8a7b      	ldrh	r3, [r7, #18]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d044      	beq.n	8002250 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021d4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0210 	bic.w	r2, r2, #16
 8002202:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002204:	8a7b      	ldrh	r3, [r7, #18]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f842 	bl	8002292 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800220e:	e01f      	b.n	8002250 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_UART_IRQHandler+0x324>
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f87f 	bl	8002328 <UART_Transmit_IT>
    return;
 800222a:	e012      	b.n	8002252 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <HAL_UART_IRQHandler+0x34a>
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f8c0 	bl	80023c6 <UART_EndTransmit_IT>
    return;
 8002246:	e004      	b.n	8002252 <HAL_UART_IRQHandler+0x34a>
    return;
 8002248:	bf00      	nop
 800224a:	e002      	b.n	8002252 <HAL_UART_IRQHandler+0x34a>
      return;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <HAL_UART_IRQHandler+0x34a>
      return;
 8002250:	bf00      	nop
  }
}
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	08002301 	.word	0x08002301

0800225c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0210 	bic.w	r2, r2, #16
 80022e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff ffb0 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b21      	cmp	r3, #33	; 0x21
 800233a:	d13e      	bne.n	80023ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002344:	d114      	bne.n	8002370 <UART_Transmit_IT+0x48>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d110      	bne.n	8002370 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002362:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	1c9a      	adds	r2, r3, #2
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	621a      	str	r2, [r3, #32]
 800236e:	e008      	b.n	8002382 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6211      	str	r1, [r2, #32]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4619      	mov	r1, r3
 8002390:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ff38 	bl	800225c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b22      	cmp	r3, #34	; 0x22
 8002408:	f040 8099 	bne.w	800253e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002414:	d117      	bne.n	8002446 <UART_Receive_IT+0x50>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d113      	bne.n	8002446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	b29b      	uxth	r3, r3
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	b29a      	uxth	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
 8002444:	e026      	b.n	8002494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d007      	beq.n	800246a <UART_Receive_IT+0x74>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <UART_Receive_IT+0x82>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e008      	b.n	800248a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002484:	b2da      	uxtb	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29b      	uxth	r3, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4619      	mov	r1, r3
 80024a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d148      	bne.n	800253a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0220 	bic.w	r2, r2, #32
 80024b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d123      	bne.n	8002530 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0210 	bic.w	r2, r2, #16
 80024fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	d10a      	bne.n	8002522 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff feb2 	bl	8002292 <HAL_UARTEx_RxEventCallback>
 800252e:	e002      	b.n	8002536 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fe9c 	bl	800226e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e002      	b.n	8002540 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002582:	f023 030c 	bic.w	r3, r3, #12
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	430b      	orrs	r3, r1
 800258e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2c      	ldr	r2, [pc, #176]	; (800265c <UART_SetConfig+0x114>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d103      	bne.n	80025b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025b0:	f7ff f98a 	bl	80018c8 <HAL_RCC_GetPCLK2Freq>
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	e002      	b.n	80025be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025b8:	f7ff f972 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 80025bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009a      	lsls	r2, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	4a22      	ldr	r2, [pc, #136]	; (8002660 <UART_SetConfig+0x118>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	0119      	lsls	r1, r3, #4
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009a      	lsls	r2, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <UART_SetConfig+0x118>)
 80025f6:	fba3 0302 	umull	r0, r3, r3, r2
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2064      	movs	r0, #100	; 0x64
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	3332      	adds	r3, #50	; 0x32
 8002608:	4a15      	ldr	r2, [pc, #84]	; (8002660 <UART_SetConfig+0x118>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002614:	4419      	add	r1, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fbb2 f2f3 	udiv	r2, r2, r3
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <UART_SetConfig+0x118>)
 800262e:	fba3 0302 	umull	r0, r3, r3, r2
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2064      	movs	r0, #100	; 0x64
 8002636:	fb00 f303 	mul.w	r3, r0, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	; 0x32
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <UART_SetConfig+0x118>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	f003 020f 	and.w	r2, r3, #15
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	440a      	add	r2, r1
 8002652:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40013800 	.word	0x40013800
 8002660:	51eb851f 	.word	0x51eb851f

08002664 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002676:	2b84      	cmp	r3, #132	; 0x84
 8002678:	d005      	beq.n	8002686 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800267a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	3303      	adds	r3, #3
 8002684:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002698:	f3ef 8305 	mrs	r3, IPSR
 800269c:	607b      	str	r3, [r7, #4]
  return(result);
 800269e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026b8:	f001 f990 	bl	80039dc <vTaskStartScheduler>
  
  return osOK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c4:	b089      	sub	sp, #36	; 0x24
 80026c6:	af04      	add	r7, sp, #16
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <osThreadCreate+0x54>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685c      	ldr	r4, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681d      	ldr	r5, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691e      	ldr	r6, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ffb8 	bl	8002664 <makeFreeRtosPriority>
 80026f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026fe:	9202      	str	r2, [sp, #8]
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	9100      	str	r1, [sp, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4632      	mov	r2, r6
 8002708:	4629      	mov	r1, r5
 800270a:	4620      	mov	r0, r4
 800270c:	f000 ff91 	bl	8003632 <xTaskCreateStatic>
 8002710:	4603      	mov	r3, r0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e01c      	b.n	8002750 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685c      	ldr	r4, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002722:	b29e      	uxth	r6, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff9a 	bl	8002664 <makeFreeRtosPriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	9200      	str	r2, [sp, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	4632      	mov	r2, r6
 800273e:	4629      	mov	r1, r5
 8002740:	4620      	mov	r0, r4
 8002742:	f000 ffd2 	bl	80036ea <xTaskCreate>
 8002746:	4603      	mov	r3, r0
 8002748:	2b01      	cmp	r3, #1
 800274a:	d001      	beq.n	8002750 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	e000      	b.n	8002752 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800275a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <osDelay+0x16>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	e000      	b.n	8002772 <osDelay+0x18>
 8002770:	2301      	movs	r3, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f8fe 	bl	8003974 <vTaskDelay>
  
  return osOK;
 8002778:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af02      	add	r7, sp, #8
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10a      	bne.n	80027b0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2203      	movs	r2, #3
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2001      	movs	r0, #1
 80027a8:	f000 f9c6 	bl	8002b38 <xQueueGenericCreateStatic>
 80027ac:	4603      	mov	r3, r0
 80027ae:	e023      	b.n	80027f8 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f000 fa91 	bl	8002ce0 <xQueueCreateCountingSemaphoreStatic>
 80027be:	4603      	mov	r3, r0
 80027c0:	e01a      	b.n	80027f8 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d110      	bne.n	80027ea <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80027c8:	2203      	movs	r2, #3
 80027ca:	2100      	movs	r1, #0
 80027cc:	2001      	movs	r0, #1
 80027ce:	f000 fa2a 	bl	8002c26 <xQueueGenericCreate>
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <osSemaphoreCreate+0x64>
 80027da:	2300      	movs	r3, #0
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fae7 	bl	8002db4 <xQueueGenericSend>
      return sema;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	e006      	b.n	80027f8 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 faac 	bl	8002d4e <xQueueCreateCountingSemaphore>
 80027f6:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	e03a      	b.n	800288e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d103      	bne.n	800282c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e009      	b.n	8002840 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <osSemaphoreWait+0x40>
      ticks = 1;
 800283c:	2301      	movs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002840:	f7ff ff27 	bl	8002692 <inHandlerMode>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	461a      	mov	r2, r3
 8002850:	2100      	movs	r1, #0
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fd46 	bl	80032e4 <xQueueReceiveFromISR>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d001      	beq.n	8002862 <osSemaphoreWait+0x62>
      return osErrorOS;
 800285e:	23ff      	movs	r3, #255	; 0xff
 8002860:	e015      	b.n	800288e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d011      	beq.n	800288c <osSemaphoreWait+0x8c>
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <osSemaphoreWait+0x98>)
 800286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	e008      	b.n	800288c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fc25 	bl	80030cc <xQueueSemaphoreTake>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002888:	23ff      	movs	r3, #255	; 0xff
 800288a:	e000      	b.n	800288e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80028ac:	f7ff fef1 	bl	8002692 <inHandlerMode>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb77 	bl	8002fb0 <xQueueGiveFromISR>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80028c8:	23ff      	movs	r3, #255	; 0xff
 80028ca:	e017      	b.n	80028fc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d013      	beq.n	80028fa <osSemaphoreRelease+0x5e>
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <osSemaphoreRelease+0x68>)
 80028d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	e00a      	b.n	80028fa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80028e4:	2300      	movs	r3, #0
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa62 	bl	8002db4 <xQueueGenericSend>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80028f6:	23ff      	movs	r3, #255	; 0xff
 80028f8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0208 	add.w	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f103 0208 	add.w	r2, r3, #8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f103 0208 	add.w	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ba:	d103      	bne.n	80029c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e00c      	b.n	80029de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3308      	adds	r3, #8
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e002      	b.n	80029d2 <vListInsert+0x2e>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d2f6      	bcs.n	80029cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6892      	ldr	r2, [r2, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6852      	ldr	r2, [r2, #4]
 8002a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d103      	bne.n	8002a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a92:	f001 fef3 	bl	800487c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	441a      	add	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	441a      	add	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d114      	bne.n	8002b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01a      	beq.n	8002b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3310      	adds	r3, #16
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 f9c9 	bl	8003e8c <xTaskRemoveFromEventList>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d012      	beq.n	8002b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <xQueueGenericReset+0xcc>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	e009      	b.n	8002b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3310      	adds	r3, #16
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fef6 	bl	8002908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3324      	adds	r3, #36	; 0x24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fef1 	bl	8002908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b26:	f001 fed9 	bl	80048dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <xQueueGenericCreateStatic+0x52>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <xQueueGenericCreateStatic+0x56>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <xQueueGenericCreateStatic+0x58>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	623b      	str	r3, [r7, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <xQueueGenericCreateStatic+0x7e>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <xQueueGenericCreateStatic+0x82>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueGenericCreateStatic+0x84>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61fb      	str	r3, [r7, #28]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bd6:	2348      	movs	r3, #72	; 0x48
 8002bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b48      	cmp	r3, #72	; 0x48
 8002bde:	d00a      	beq.n	8002bf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	61bb      	str	r3, [r7, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f843 	bl	8002ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3730      	adds	r7, #48	; 0x30
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08a      	sub	sp, #40	; 0x28
 8002c2a:	af02      	add	r7, sp, #8
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	4613      	mov	r3, r2
 8002c32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	613b      	str	r3, [r7, #16]
}
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e004      	b.n	8002c66 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3348      	adds	r3, #72	; 0x48
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 ff06 	bl	8004a7c <pvPortMalloc>
 8002c70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00f      	beq.n	8002c98 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	3348      	adds	r3, #72	; 0x48
 8002c7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c86:	79fa      	ldrb	r2, [r7, #7]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f805 	bl	8002ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c98:	69bb      	ldr	r3, [r7, #24]
	}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e002      	b.n	8002cc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	69b8      	ldr	r0, [r7, #24]
 8002cd4:	f7ff fec8 	bl	8002a68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	61bb      	str	r3, [r7, #24]
}
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d90a      	bls.n	8002d26 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	617b      	str	r3, [r7, #20]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d26:	2302      	movs	r3, #2
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff ff01 	bl	8002b38 <xQueueGenericCreateStatic>
 8002d36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d44:	69fb      	ldr	r3, [r7, #28]
	}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	613b      	str	r3, [r7, #16]
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d90a      	bls.n	8002d92 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60fb      	str	r3, [r7, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d92:	2202      	movs	r2, #2
 8002d94:	2100      	movs	r1, #0
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ff45 	bl	8002c26 <xQueueGenericCreate>
 8002d9c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002daa:	697b      	ldr	r3, [r7, #20]
	}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xQueueGenericSend+0x32>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <xQueueGenericSend+0x40>
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <xQueueGenericSend+0x44>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <xQueueGenericSend+0x46>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <xQueueGenericSend+0x60>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e10:	bf00      	nop
 8002e12:	e7fe      	b.n	8002e12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d103      	bne.n	8002e22 <xQueueGenericSend+0x6e>
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <xQueueGenericSend+0x72>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <xQueueGenericSend+0x74>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	623b      	str	r3, [r7, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e42:	f001 f9e7 	bl	8004214 <xTaskGetSchedulerState>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <xQueueGenericSend+0x9e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueGenericSend+0xa2>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueGenericSend+0xa4>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueGenericSend+0xbe>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61fb      	str	r3, [r7, #28]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e72:	f001 fd03 	bl	800487c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <xQueueGenericSend+0xd4>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d129      	bne.n	8002edc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8e:	f000 fac0 	bl	8003412 <prvCopyDataToQueue>
 8002e92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fff3 	bl	8003e8c <xTaskRemoveFromEventList>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <xQueueGenericSend+0x1f8>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	e00a      	b.n	8002ed4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ec4:	4b39      	ldr	r3, [pc, #228]	; (8002fac <xQueueGenericSend+0x1f8>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ed4:	f001 fd02 	bl	80048dc <vPortExitCritical>
				return pdPASS;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e063      	b.n	8002fa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ee2:	f001 fcfb 	bl	80048dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e05c      	b.n	8002fa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 f82b 	bl	8003f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002efe:	f001 fced 	bl	80048dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f02:	f000 fdd5 	bl	8003ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f06:	f001 fcb9 	bl	800487c <vPortEnterCritical>
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d103      	bne.n	8002f20 <xQueueGenericSend+0x16c>
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSend+0x182>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f36:	f001 fcd1 	bl	80048dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f3a:	1d3a      	adds	r2, r7, #4
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f81a 	bl	8003f7c <xTaskCheckForTimeOut>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d124      	bne.n	8002f98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f50:	f000 fb57 	bl	8003602 <prvIsQueueFull>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	3310      	adds	r3, #16
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 ff6e 	bl	8003e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6a:	f000 fae2 	bl	8003532 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f6e:	f000 fdad 	bl	8003acc <xTaskResumeAll>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f af7c 	bne.w	8002e72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <xQueueGenericSend+0x1f8>)
 8002f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	e772      	b.n	8002e72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8e:	f000 fad0 	bl	8003532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f92:	f000 fd9b 	bl	8003acc <xTaskResumeAll>
 8002f96:	e76c      	b.n	8002e72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f9a:	f000 faca 	bl	8003532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f9e:	f000 fd95 	bl	8003acc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fa2:	2300      	movs	r3, #0
		}
	}
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3738      	adds	r7, #56	; 0x38
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	623b      	str	r3, [r7, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	61fb      	str	r3, [r7, #28]
}
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <xQueueGiveFromISR+0x58>
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <xQueueGiveFromISR+0x5c>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <xQueueGiveFromISR+0x5e>
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	61bb      	str	r3, [r7, #24]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003028:	f001 fcea 	bl	8004a00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800302c:	f3ef 8211 	mrs	r2, BASEPRI
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	617a      	str	r2, [r7, #20]
 8003042:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003044:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003054:	429a      	cmp	r2, r3
 8003056:	d22b      	bcs.n	80030b0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800306a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d112      	bne.n	800309a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d016      	beq.n	80030aa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	3324      	adds	r3, #36	; 0x24
 8003080:	4618      	mov	r0, r3
 8003082:	f000 ff03 	bl	8003e8c <xTaskRemoveFromEventList>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e007      	b.n	80030aa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800309a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800309e:	3301      	adds	r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	b25a      	sxtb	r2, r3
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80030aa:	2301      	movs	r3, #1
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
 80030ae:	e001      	b.n	80030b4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3738      	adds	r7, #56	; 0x38
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08e      	sub	sp, #56	; 0x38
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	623b      	str	r3, [r7, #32]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	61fb      	str	r3, [r7, #28]
}
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800311c:	f001 f87a 	bl	8004214 <xTaskGetSchedulerState>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <xQueueSemaphoreTake+0x60>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <xQueueSemaphoreTake+0x64>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <xQueueSemaphoreTake+0x66>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	61bb      	str	r3, [r7, #24]
}
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800314c:	f001 fb96 	bl	800487c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d024      	beq.n	80031a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800316c:	f001 fa1c 	bl	80045a8 <pvTaskIncrementMutexHeldCount>
 8003170:	4602      	mov	r2, r0
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00f      	beq.n	800319e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	3310      	adds	r3, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fe82 	bl	8003e8c <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <xQueueSemaphoreTake+0x214>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800319e:	f001 fb9d 	bl	80048dc <vPortExitCritical>
				return pdPASS;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e097      	b.n	80032d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	617b      	str	r3, [r7, #20]
}
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031c8:	f001 fb88 	bl	80048dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e082      	b.n	80032d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 feb8 	bl	8003f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031e4:	f001 fb7a 	bl	80048dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031e8:	f000 fc62 	bl	8003ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ec:	f001 fb46 	bl	800487c <vPortEnterCritical>
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d103      	bne.n	8003206 <xQueueSemaphoreTake+0x13a>
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d103      	bne.n	800321c <xQueueSemaphoreTake+0x150>
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800321c:	f001 fb5e 	bl	80048dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003220:	463a      	mov	r2, r7
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fea7 	bl	8003f7c <xTaskCheckForTimeOut>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d132      	bne.n	800329a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003236:	f000 f9ce 	bl	80035d6 <prvIsQueueEmpty>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d026      	beq.n	800328e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003248:	f001 fb18 	bl	800487c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fffd 	bl	8004250 <xTaskPriorityInherit>
 8003256:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003258:	f001 fb40 	bl	80048dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fded 	bl	8003e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800326a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800326c:	f000 f961 	bl	8003532 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003270:	f000 fc2c 	bl	8003acc <xTaskResumeAll>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f af68 	bne.w	800314c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <xQueueSemaphoreTake+0x214>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	e75e      	b.n	800314c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800328e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003290:	f000 f94f 	bl	8003532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003294:	f000 fc1a 	bl	8003acc <xTaskResumeAll>
 8003298:	e758      	b.n	800314c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800329a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800329c:	f000 f949 	bl	8003532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032a0:	f000 fc14 	bl	8003acc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a6:	f000 f996 	bl	80035d6 <prvIsQueueEmpty>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f43f af4d 	beq.w	800314c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032b8:	f001 fae0 	bl	800487c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032be:	f000 f891 	bl	80033e4 <prvGetDisinheritPriorityAfterTimeout>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 f8cc 	bl	8004468 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032d0:	f001 fb04 	bl	80048dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3738      	adds	r7, #56	; 0x38
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	623b      	str	r3, [r7, #32]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <xQueueReceiveFromISR+0x3a>
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <xQueueReceiveFromISR+0x3e>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <xQueueReceiveFromISR+0x40>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	61fb      	str	r3, [r7, #28]
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800333e:	f001 fb5f 	bl	8004a00 <vPortValidateInterruptPriority>
	__asm volatile
 8003342:	f3ef 8211 	mrs	r2, BASEPRI
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	61ba      	str	r2, [r7, #24]
 8003358:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800335a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d02f      	beq.n	80033ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003378:	f000 f8b5 	bl	80034e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d112      	bne.n	80033b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	3310      	adds	r3, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd76 	bl	8003e8c <xTaskRemoveFromEventList>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e007      	b.n	80033c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b8:	3301      	adds	r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	b25a      	sxtb	r2, r3
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80033c4:	2301      	movs	r3, #1
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
 80033c8:	e001      	b.n	80033ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f383 8811 	msr	BASEPRI, r3
}
 80033d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3738      	adds	r7, #56	; 0x38
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d006      	beq.n	8003402 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e001      	b.n	8003406 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003406:	68fb      	ldr	r3, [r7, #12]
	}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d14d      	bne.n	80034d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 ff8d 	bl	800435c <xTaskPriorityDisinherit>
 8003442:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	e043      	b.n	80034d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d119      	bne.n	8003486 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6898      	ldr	r0, [r3, #8]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	461a      	mov	r2, r3
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	f001 fd0b 	bl	8004e78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	441a      	add	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d32b      	bcc.n	80034d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e026      	b.n	80034d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	68d8      	ldr	r0, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	461a      	mov	r2, r3
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	f001 fcf1 	bl	8004e78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	425b      	negs	r3, r3
 80034a0:	441a      	add	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d207      	bcs.n	80034c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	425b      	negs	r3, r3
 80034bc:	441a      	add	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d105      	bne.n	80034d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034dc:	697b      	ldr	r3, [r7, #20]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d018      	beq.n	800352a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d303      	bcc.n	800351a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	461a      	mov	r2, r3
 8003524:	6838      	ldr	r0, [r7, #0]
 8003526:	f001 fca7 	bl	8004e78 <memcpy>
	}
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800353a:	f001 f99f 	bl	800487c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003544:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003546:	e011      	b.n	800356c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3324      	adds	r3, #36	; 0x24
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fc99 	bl	8003e8c <xTaskRemoveFromEventList>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003560:	f000 fd6e 	bl	8004040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3b01      	subs	r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800356c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	dce9      	bgt.n	8003548 <prvUnlockQueue+0x16>
 8003574:	e000      	b.n	8003578 <prvUnlockQueue+0x46>
					break;
 8003576:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	22ff      	movs	r2, #255	; 0xff
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003580:	f001 f9ac 	bl	80048dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003584:	f001 f97a 	bl	800487c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800358e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003590:	e011      	b.n	80035b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d012      	beq.n	80035c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3310      	adds	r3, #16
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fc74 	bl	8003e8c <xTaskRemoveFromEventList>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035aa:	f000 fd49 	bl	8004040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035ae:	7bbb      	ldrb	r3, [r7, #14]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	dce9      	bgt.n	8003592 <prvUnlockQueue+0x60>
 80035be:	e000      	b.n	80035c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	22ff      	movs	r2, #255	; 0xff
 80035c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80035ca:	f001 f987 	bl	80048dc <vPortExitCritical>
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035de:	f001 f94d 	bl	800487c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035ea:	2301      	movs	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e001      	b.n	80035f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035f4:	f001 f972 	bl	80048dc <vPortExitCritical>

	return xReturn;
 80035f8:	68fb      	ldr	r3, [r7, #12]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800360a:	f001 f937 	bl	800487c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	429a      	cmp	r2, r3
 8003618:	d102      	bne.n	8003620 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800361a:	2301      	movs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e001      	b.n	8003624 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003624:	f001 f95a 	bl	80048dc <vPortExitCritical>

	return xReturn;
 8003628:	68fb      	ldr	r3, [r7, #12]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003632:	b580      	push	{r7, lr}
 8003634:	b08e      	sub	sp, #56	; 0x38
 8003636:	af04      	add	r7, sp, #16
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <xTaskCreateStatic+0x2a>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	623b      	str	r3, [r7, #32]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <xTaskCreateStatic+0x46>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61fb      	str	r3, [r7, #28]
}
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003678:	23b4      	movs	r3, #180	; 0xb4
 800367a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2bb4      	cmp	r3, #180	; 0xb4
 8003680:	d00a      	beq.n	8003698 <xTaskCreateStatic+0x66>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	61bb      	str	r3, [r7, #24]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01e      	beq.n	80036dc <xTaskCreateStatic+0xaa>
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036b6:	2300      	movs	r3, #0
 80036b8:	9303      	str	r3, [sp, #12]
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f850 	bl	8003774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d6:	f000 f8e3 	bl	80038a0 <prvAddNewTaskToReadyList>
 80036da:	e001      	b.n	80036e0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036e0:	697b      	ldr	r3, [r7, #20]
	}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3728      	adds	r7, #40	; 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b08c      	sub	sp, #48	; 0x30
 80036ee:	af04      	add	r7, sp, #16
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f9bc 	bl	8004a7c <pvPortMalloc>
 8003704:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800370c:	20b4      	movs	r0, #180	; 0xb4
 800370e:	f001 f9b5 	bl	8004a7c <pvPortMalloc>
 8003712:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
 8003720:	e005      	b.n	800372e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f001 fa6e 	bl	8004c04 <vPortFree>
 8003728:	e001      	b.n	800372e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d017      	beq.n	8003764 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800373c:	88fa      	ldrh	r2, [r7, #6]
 800373e:	2300      	movs	r3, #0
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	9302      	str	r3, [sp, #8]
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f80e 	bl	8003774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003758:	69f8      	ldr	r0, [r7, #28]
 800375a:	f000 f8a1 	bl	80038a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e002      	b.n	800376a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800376a:	69bb      	ldr	r3, [r7, #24]
	}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800378c:	3b01      	subs	r3, #1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f023 0307 	bic.w	r3, r3, #7
 800379a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	617b      	str	r3, [r7, #20]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e012      	b.n	80037e8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	7819      	ldrb	r1, [r3, #0]
 80037ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	3334      	adds	r3, #52	; 0x34
 80037d2:	460a      	mov	r2, r1
 80037d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d9e9      	bls.n	80037c2 <prvInitialiseNewTask+0x4e>
 80037ee:	e000      	b.n	80037f2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80037f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	2b06      	cmp	r3, #6
 80037fe:	d901      	bls.n	8003804 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003800:	2306      	movs	r3, #6
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	2200      	movs	r2, #0
 8003814:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f893 	bl	8002946 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	3318      	adds	r3, #24
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f88e 	bl	8002946 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	f1c3 0207 	rsb	r2, r3, #7
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	2200      	movs	r2, #0
 8003844:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	334c      	adds	r3, #76	; 0x4c
 8003854:	2260      	movs	r2, #96	; 0x60
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fb1b 	bl	8004e94 <memset>
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <prvInitialiseNewTask+0x120>)
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <prvInitialiseNewTask+0x124>)
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <prvInitialiseNewTask+0x128>)
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	69b8      	ldr	r0, [r7, #24]
 8003876:	f000 ff11 	bl	800469c <pxPortInitialiseStack>
 800387a:	4602      	mov	r2, r0
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800388c:	bf00      	nop
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	0800512c 	.word	0x0800512c
 8003898:	0800514c 	.word	0x0800514c
 800389c:	0800510c 	.word	0x0800510c

080038a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038a8:	f000 ffe8 	bl	800487c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <prvAddNewTaskToReadyList+0xb8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a29      	ldr	r2, [pc, #164]	; (8003958 <prvAddNewTaskToReadyList+0xb8>)
 80038b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038b6:	4b29      	ldr	r3, [pc, #164]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038be:	4a27      	ldr	r2, [pc, #156]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <prvAddNewTaskToReadyList+0xb8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d110      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038cc:	f000 fbdc 	bl	8004088 <prvInitialiseTaskLists>
 80038d0:	e00d      	b.n	80038ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <prvAddNewTaskToReadyList+0xc0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d802      	bhi.n	80038ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <prvAddNewTaskToReadyList+0xc4>)
 80038f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4313      	orrs	r3, r2
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <prvAddNewTaskToReadyList+0xc8>)
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <prvAddNewTaskToReadyList+0xcc>)
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7ff f81c 	bl	800295e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003926:	f000 ffd9 	bl	80048dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <prvAddNewTaskToReadyList+0xc0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <prvAddNewTaskToReadyList+0xbc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	429a      	cmp	r2, r3
 800393e:	d207      	bcs.n	8003950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <prvAddNewTaskToReadyList+0xd0>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000444 	.word	0x20000444
 800395c:	20000344 	.word	0x20000344
 8003960:	20000450 	.word	0x20000450
 8003964:	20000460 	.word	0x20000460
 8003968:	2000044c 	.word	0x2000044c
 800396c:	20000348 	.word	0x20000348
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <vTaskDelay+0x60>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <vTaskDelay+0x30>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	60bb      	str	r3, [r7, #8]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039a4:	f000 f884 	bl	8003ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039a8:	2100      	movs	r1, #0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fe10 	bl	80045d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039b0:	f000 f88c 	bl	8003acc <xTaskResumeAll>
 80039b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <vTaskDelay+0x64>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	2000046c 	.word	0x2000046c
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ea:	463a      	mov	r2, r7
 80039ec:	1d39      	adds	r1, r7, #4
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fc1c 	bl	8000230 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	9202      	str	r2, [sp, #8]
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2300      	movs	r3, #0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	4921      	ldr	r1, [pc, #132]	; (8003a90 <vTaskStartScheduler+0xb4>)
 8003a0c:	4821      	ldr	r0, [pc, #132]	; (8003a94 <vTaskStartScheduler+0xb8>)
 8003a0e:	f7ff fe10 	bl	8003632 <xTaskCreateStatic>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4a20      	ldr	r2, [pc, #128]	; (8003a98 <vTaskStartScheduler+0xbc>)
 8003a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <vTaskStartScheduler+0xbc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e001      	b.n	8003a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d11b      	bne.n	8003a68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	613b      	str	r3, [r7, #16]
}
 8003a42:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a44:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <vTaskStartScheduler+0xc0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	334c      	adds	r3, #76	; 0x4c
 8003a4a:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <vTaskStartScheduler+0xc4>)
 8003a4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <vTaskStartScheduler+0xc8>)
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <vTaskStartScheduler+0xcc>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <vTaskStartScheduler+0xd0>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a62:	f000 fe99 	bl	8004798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a66:	e00e      	b.n	8003a86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d10a      	bne.n	8003a86 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	60fb      	str	r3, [r7, #12]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <vTaskStartScheduler+0xa8>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	080050ec 	.word	0x080050ec
 8003a94:	08004059 	.word	0x08004059
 8003a98:	20000468 	.word	0x20000468
 8003a9c:	20000344 	.word	0x20000344
 8003aa0:	20000010 	.word	0x20000010
 8003aa4:	20000464 	.word	0x20000464
 8003aa8:	20000450 	.word	0x20000450
 8003aac:	20000448 	.word	0x20000448

08003ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <vTaskSuspendAll+0x18>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <vTaskSuspendAll+0x18>)
 8003abc:	6013      	str	r3, [r2, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	2000046c 	.word	0x2000046c

08003acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <xTaskResumeAll+0x114>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	603b      	str	r3, [r7, #0]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003af8:	f000 fec0 	bl	800487c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <xTaskResumeAll+0x114>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	4a37      	ldr	r2, [pc, #220]	; (8003be0 <xTaskResumeAll+0x114>)
 8003b04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b06:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <xTaskResumeAll+0x114>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d161      	bne.n	8003bd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b0e:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <xTaskResumeAll+0x118>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d05d      	beq.n	8003bd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b16:	e02e      	b.n	8003b76 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <xTaskResumeAll+0x11c>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3318      	adds	r3, #24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe ff75 	bl	8002a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe ff70 	bl	8002a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <xTaskResumeAll+0x120>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <xTaskResumeAll+0x120>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <xTaskResumeAll+0x124>)
 8003b54:	441a      	add	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f7fe fefe 	bl	800295e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <xTaskResumeAll+0x128>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <xTaskResumeAll+0x12c>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <xTaskResumeAll+0x11c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1cc      	bne.n	8003b18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b84:	f000 fb22 	bl	80041cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <xTaskResumeAll+0x130>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d010      	beq.n	8003bb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b94:	f000 f836 	bl	8003c04 <xTaskIncrementTick>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <xTaskResumeAll+0x12c>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f1      	bne.n	8003b94 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <xTaskResumeAll+0x130>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <xTaskResumeAll+0x12c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <xTaskResumeAll+0x134>)
 8003bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bd2:	f000 fe83 	bl	80048dc <vPortExitCritical>

	return xAlreadyYielded;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2000046c 	.word	0x2000046c
 8003be4:	20000444 	.word	0x20000444
 8003be8:	20000404 	.word	0x20000404
 8003bec:	2000044c 	.word	0x2000044c
 8003bf0:	20000348 	.word	0x20000348
 8003bf4:	20000344 	.word	0x20000344
 8003bf8:	20000458 	.word	0x20000458
 8003bfc:	20000454 	.word	0x20000454
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <xTaskIncrementTick+0x150>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 808d 	bne.w	8003d32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c18:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <xTaskIncrementTick+0x154>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c20:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <xTaskIncrementTick+0x154>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d120      	bne.n	8003c6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c2c:	4b4b      	ldr	r3, [pc, #300]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	603b      	str	r3, [r7, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xTaskIncrementTick+0x46>
 8003c4c:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <xTaskIncrementTick+0x15c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a41      	ldr	r2, [pc, #260]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4a41      	ldr	r2, [pc, #260]	; (8003d60 <xTaskIncrementTick+0x15c>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <xTaskIncrementTick+0x160>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a3f      	ldr	r2, [pc, #252]	; (8003d64 <xTaskIncrementTick+0x160>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	f000 faaf 	bl	80041cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <xTaskIncrementTick+0x164>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d34d      	bcc.n	8003d14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c78:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <xTaskIncrementTick+0x82>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <xTaskIncrementTick+0x84>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <xTaskIncrementTick+0x164>)
 8003c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c92:	601a      	str	r2, [r3, #0]
					break;
 8003c94:	e03e      	b.n	8003d14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <xTaskIncrementTick+0x158>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d203      	bcs.n	8003cb6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cae:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <xTaskIncrementTick+0x164>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]
						break;
 8003cb4:	e02e      	b.n	8003d14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe feaa 	bl	8002a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3318      	adds	r3, #24
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fea1 	bl	8002a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <xTaskIncrementTick+0x168>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <xTaskIncrementTick+0x168>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <xTaskIncrementTick+0x16c>)
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f7fe fe2f 	bl	800295e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <xTaskIncrementTick+0x170>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3b4      	bcc.n	8003c78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d12:	e7b1      	b.n	8003c78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d14:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <xTaskIncrementTick+0x170>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	4915      	ldr	r1, [pc, #84]	; (8003d70 <xTaskIncrementTick+0x16c>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d907      	bls.n	8003d3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	e004      	b.n	8003d3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <xTaskIncrementTick+0x174>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <xTaskIncrementTick+0x174>)
 8003d3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <xTaskIncrementTick+0x178>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d48:	697b      	ldr	r3, [r7, #20]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	2000046c 	.word	0x2000046c
 8003d58:	20000448 	.word	0x20000448
 8003d5c:	200003fc 	.word	0x200003fc
 8003d60:	20000400 	.word	0x20000400
 8003d64:	2000045c 	.word	0x2000045c
 8003d68:	20000464 	.word	0x20000464
 8003d6c:	2000044c 	.word	0x2000044c
 8003d70:	20000348 	.word	0x20000348
 8003d74:	20000344 	.word	0x20000344
 8003d78:	20000454 	.word	0x20000454
 8003d7c:	20000458 	.word	0x20000458

08003d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <vTaskSwitchContext+0xac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d8e:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <vTaskSwitchContext+0xb0>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d94:	e044      	b.n	8003e20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <vTaskSwitchContext+0xb0>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <vTaskSwitchContext+0xb4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003daa:	7afb      	ldrb	r3, [r7, #11]
 8003dac:	f1c3 031f 	rsb	r3, r3, #31
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	4921      	ldr	r1, [pc, #132]	; (8003e38 <vTaskSwitchContext+0xb8>)
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <vTaskSwitchContext+0x5c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	607b      	str	r3, [r7, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <vTaskSwitchContext+0x5a>
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <vTaskSwitchContext+0xb8>)
 8003de8:	4413      	add	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d104      	bne.n	8003e0c <vTaskSwitchContext+0x8c>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <vTaskSwitchContext+0xbc>)
 8003e14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <vTaskSwitchContext+0xbc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	334c      	adds	r3, #76	; 0x4c
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <vTaskSwitchContext+0xc0>)
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000046c 	.word	0x2000046c
 8003e30:	20000458 	.word	0x20000458
 8003e34:	2000044c 	.word	0x2000044c
 8003e38:	20000348 	.word	0x20000348
 8003e3c:	20000344 	.word	0x20000344
 8003e40:	20000010 	.word	0x20000010

08003e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60fb      	str	r3, [r7, #12]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <vTaskPlaceOnEventList+0x44>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fe fd96 	bl	80029a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e78:	2101      	movs	r1, #1
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	f000 fba8 	bl	80045d0 <prvAddCurrentTaskToDelayedList>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000344 	.word	0x20000344

08003e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	60fb      	str	r3, [r7, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	3318      	adds	r3, #24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fda9 	bl	8002a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <xTaskRemoveFromEventList+0xac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11c      	bne.n	8003f04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fda0 	bl	8002a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <xTaskRemoveFromEventList+0xb0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <xTaskRemoveFromEventList+0xb0>)
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <xTaskRemoveFromEventList+0xb4>)
 8003ef4:	441a      	add	r2, r3
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f7fe fd2e 	bl	800295e <vListInsertEnd>
 8003f02:	e005      	b.n	8003f10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3318      	adds	r3, #24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480e      	ldr	r0, [pc, #56]	; (8003f44 <xTaskRemoveFromEventList+0xb8>)
 8003f0c:	f7fe fd27 	bl	800295e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <xTaskRemoveFromEventList+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d905      	bls.n	8003f2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <xTaskRemoveFromEventList+0xc0>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e001      	b.n	8003f2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003f2e:	697b      	ldr	r3, [r7, #20]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000046c 	.word	0x2000046c
 8003f3c:	2000044c 	.word	0x2000044c
 8003f40:	20000348 	.word	0x20000348
 8003f44:	20000404 	.word	0x20000404
 8003f48:	20000344 	.word	0x20000344
 8003f4c:	20000458 	.word	0x20000458

08003f50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <vTaskInternalSetTimeOutState+0x24>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <vTaskInternalSetTimeOutState+0x28>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	605a      	str	r2, [r3, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000045c 	.word	0x2000045c
 8003f78:	20000448 	.word	0x20000448

08003f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	613b      	str	r3, [r7, #16]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003fbe:	f000 fc5d 	bl	800487c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <xTaskCheckForTimeOut+0xbc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d102      	bne.n	8003fe2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	e023      	b.n	800402a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <xTaskCheckForTimeOut+0xc0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d007      	beq.n	8003ffe <xTaskCheckForTimeOut+0x82>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e015      	b.n	800402a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d20b      	bcs.n	8004020 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ff9b 	bl	8003f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	e004      	b.n	800402a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800402a:	f000 fc57 	bl	80048dc <vPortExitCritical>

	return xReturn;
 800402e:	69fb      	ldr	r3, [r7, #28]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000448 	.word	0x20000448
 800403c:	2000045c 	.word	0x2000045c

08004040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <vTaskMissedYield+0x14>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000458 	.word	0x20000458

08004058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004060:	f000 f852 	bl	8004108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <prvIdleTask+0x28>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d9f9      	bls.n	8004060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <prvIdleTask+0x2c>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800407c:	e7f0      	b.n	8004060 <prvIdleTask+0x8>
 800407e:	bf00      	nop
 8004080:	20000348 	.word	0x20000348
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	e00c      	b.n	80040ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <prvInitialiseTaskLists+0x60>)
 80040a0:	4413      	add	r3, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fc30 	bl	8002908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3301      	adds	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d9ef      	bls.n	8004094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040b4:	480d      	ldr	r0, [pc, #52]	; (80040ec <prvInitialiseTaskLists+0x64>)
 80040b6:	f7fe fc27 	bl	8002908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040ba:	480d      	ldr	r0, [pc, #52]	; (80040f0 <prvInitialiseTaskLists+0x68>)
 80040bc:	f7fe fc24 	bl	8002908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040c0:	480c      	ldr	r0, [pc, #48]	; (80040f4 <prvInitialiseTaskLists+0x6c>)
 80040c2:	f7fe fc21 	bl	8002908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040c6:	480c      	ldr	r0, [pc, #48]	; (80040f8 <prvInitialiseTaskLists+0x70>)
 80040c8:	f7fe fc1e 	bl	8002908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040cc:	480b      	ldr	r0, [pc, #44]	; (80040fc <prvInitialiseTaskLists+0x74>)
 80040ce:	f7fe fc1b 	bl	8002908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <prvInitialiseTaskLists+0x78>)
 80040d4:	4a05      	ldr	r2, [pc, #20]	; (80040ec <prvInitialiseTaskLists+0x64>)
 80040d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <prvInitialiseTaskLists+0x7c>)
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <prvInitialiseTaskLists+0x68>)
 80040dc:	601a      	str	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000348 	.word	0x20000348
 80040ec:	200003d4 	.word	0x200003d4
 80040f0:	200003e8 	.word	0x200003e8
 80040f4:	20000404 	.word	0x20000404
 80040f8:	20000418 	.word	0x20000418
 80040fc:	20000430 	.word	0x20000430
 8004100:	200003fc 	.word	0x200003fc
 8004104:	20000400 	.word	0x20000400

08004108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800410e:	e019      	b.n	8004144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004110:	f000 fbb4 	bl	800487c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <prvCheckTasksWaitingTermination+0x50>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe fc77 	bl	8002a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <prvCheckTasksWaitingTermination+0x54>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	4a0b      	ldr	r2, [pc, #44]	; (800415c <prvCheckTasksWaitingTermination+0x54>)
 800412e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3b01      	subs	r3, #1
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800413a:	f000 fbcf 	bl	80048dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f810 	bl	8004164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <prvCheckTasksWaitingTermination+0x58>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e1      	bne.n	8004110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000418 	.word	0x20000418
 800415c:	20000444 	.word	0x20000444
 8004160:	2000042c 	.word	0x2000042c

08004164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	334c      	adds	r3, #76	; 0x4c
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fea5 	bl	8004ec0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fd3d 	bl	8004c04 <vPortFree>
				vPortFree( pxTCB );
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd3a 	bl	8004c04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004190:	e018      	b.n	80041c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d103      	bne.n	80041a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fd31 	bl	8004c04 <vPortFree>
	}
 80041a2:	e00f      	b.n	80041c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d00a      	beq.n	80041c4 <prvDeleteTCB+0x60>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60fb      	str	r3, [r7, #12]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <prvDeleteTCB+0x5e>
	}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <prvResetNextTaskUnblockTime+0x40>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <prvResetNextTaskUnblockTime+0x14>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <prvResetNextTaskUnblockTime+0x16>
 80041e0:	2300      	movs	r3, #0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <prvResetNextTaskUnblockTime+0x44>)
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041ee:	e008      	b.n	8004202 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <prvResetNextTaskUnblockTime+0x40>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <prvResetNextTaskUnblockTime+0x44>)
 8004200:	6013      	str	r3, [r2, #0]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	200003fc 	.word	0x200003fc
 8004210:	20000464 	.word	0x20000464

08004214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <xTaskGetSchedulerState+0x34>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004222:	2301      	movs	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	e008      	b.n	800423a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <xTaskGetSchedulerState+0x38>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004230:	2302      	movs	r3, #2
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	e001      	b.n	800423a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800423a:	687b      	ldr	r3, [r7, #4]
	}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000450 	.word	0x20000450
 800424c:	2000046c 	.word	0x2000046c

08004250 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d06e      	beq.n	8004344 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <xTaskPriorityInherit+0x100>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	429a      	cmp	r2, r3
 8004272:	d25e      	bcs.n	8004332 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db06      	blt.n	800428a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427c:	4b34      	ldr	r3, [pc, #208]	; (8004350 <xTaskPriorityInherit+0x100>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	f1c3 0207 	rsb	r2, r3, #7
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6959      	ldr	r1, [r3, #20]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a2e      	ldr	r2, [pc, #184]	; (8004354 <xTaskPriorityInherit+0x104>)
 800429c:	4413      	add	r3, r2
 800429e:	4299      	cmp	r1, r3
 80042a0:	d101      	bne.n	80042a6 <xTaskPriorityInherit+0x56>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <xTaskPriorityInherit+0x58>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03a      	beq.n	8004322 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fbaf 	bl	8002a14 <uxListRemove>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d115      	bne.n	80042e8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4924      	ldr	r1, [pc, #144]	; (8004354 <xTaskPriorityInherit+0x104>)
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <xTaskPriorityInherit+0x98>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43da      	mvns	r2, r3
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <xTaskPriorityInherit+0x108>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4013      	ands	r3, r2
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <xTaskPriorityInherit+0x108>)
 80042e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <xTaskPriorityInherit+0x100>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	2201      	movs	r2, #1
 80042f8:	409a      	lsls	r2, r3
 80042fa:	4b17      	ldr	r3, [pc, #92]	; (8004358 <xTaskPriorityInherit+0x108>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <xTaskPriorityInherit+0x108>)
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4a10      	ldr	r2, [pc, #64]	; (8004354 <xTaskPriorityInherit+0x104>)
 8004312:	441a      	add	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f7fe fb1f 	bl	800295e <vListInsertEnd>
 8004320:	e004      	b.n	800432c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <xTaskPriorityInherit+0x100>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e008      	b.n	8004344 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <xTaskPriorityInherit+0x100>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	429a      	cmp	r2, r3
 800433e:	d201      	bcs.n	8004344 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004344:	68fb      	ldr	r3, [r7, #12]
	}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000344 	.word	0x20000344
 8004354:	20000348 	.word	0x20000348
 8004358:	2000044c 	.word	0x2000044c

0800435c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d06e      	beq.n	8004450 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <xTaskPriorityDisinherit+0x100>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d00a      	beq.n	8004392 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d044      	beq.n	8004450 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d140      	bne.n	8004450 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fb1e 	bl	8002a14 <uxListRemove>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d115      	bne.n	800440a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	491f      	ldr	r1, [pc, #124]	; (8004460 <xTaskPriorityDisinherit+0x104>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xTaskPriorityDisinherit+0xae>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	2201      	movs	r2, #1
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43da      	mvns	r2, r3
 8004400:	4b18      	ldr	r3, [pc, #96]	; (8004464 <xTaskPriorityDisinherit+0x108>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4013      	ands	r3, r2
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <xTaskPriorityDisinherit+0x108>)
 8004408:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f1c3 0207 	rsb	r2, r3, #7
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	2201      	movs	r2, #1
 8004424:	409a      	lsls	r2, r3
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <xTaskPriorityDisinherit+0x108>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <xTaskPriorityDisinherit+0x108>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4a08      	ldr	r2, [pc, #32]	; (8004460 <xTaskPriorityDisinherit+0x104>)
 800443e:	441a      	add	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f7fe fa89 	bl	800295e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004450:	697b      	ldr	r3, [r7, #20]
	}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000344 	.word	0x20000344
 8004460:	20000348 	.word	0x20000348
 8004464:	2000044c 	.word	0x2000044c

08004468 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004476:	2301      	movs	r3, #1
 8004478:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8088 	beq.w	8004592 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60fb      	str	r3, [r7, #12]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d902      	bls.n	80044b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e002      	b.n	80044b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d068      	beq.n	8004592 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d163      	bne.n	8004592 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044ca:	4b34      	ldr	r3, [pc, #208]	; (800459c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d10a      	bne.n	80044ea <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	60bb      	str	r3, [r7, #8]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db04      	blt.n	8004508 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f1c3 0207 	rsb	r2, r3, #7
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6959      	ldr	r1, [r3, #20]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004518:	4413      	add	r3, r2
 800451a:	4299      	cmp	r1, r3
 800451c:	d101      	bne.n	8004522 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d034      	beq.n	8004592 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	3304      	adds	r3, #4
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fa71 	bl	8002a14 <uxListRemove>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	4918      	ldr	r1, [pc, #96]	; (80045a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	2201      	movs	r2, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43da      	mvns	r2, r3
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4013      	ands	r3, r2
 8004560:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004562:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	2201      	movs	r2, #1
 800456a:	409a      	lsls	r2, r3
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004584:	441a      	add	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7fe f9e6 	bl	800295e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004592:	bf00      	nop
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000344 	.word	0x20000344
 80045a0:	20000348 	.word	0x20000348
 80045a4:	2000044c 	.word	0x2000044c

080045a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <pvTaskIncrementMutexHeldCount+0x24>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <pvTaskIncrementMutexHeldCount+0x24>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ba:	3201      	adds	r2, #1
 80045bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80045be:	4b03      	ldr	r3, [pc, #12]	; (80045cc <pvTaskIncrementMutexHeldCount+0x24>)
 80045c0:	681b      	ldr	r3, [r3, #0]
	}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000344 	.word	0x20000344

080045d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045da:	4b29      	ldr	r3, [pc, #164]	; (8004680 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e0:	4b28      	ldr	r3, [pc, #160]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fa14 	bl	8002a14 <uxListRemove>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	2201      	movs	r2, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	4b21      	ldr	r3, [pc, #132]	; (8004688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4013      	ands	r3, r2
 8004606:	4a20      	ldr	r2, [pc, #128]	; (8004688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004608:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d10a      	bne.n	8004628 <prvAddCurrentTaskToDelayedList+0x58>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	481a      	ldr	r0, [pc, #104]	; (800468c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004622:	f7fe f99c 	bl	800295e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004626:	e026      	b.n	8004676 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d209      	bcs.n	8004654 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f7fe f9a9 	bl	80029a4 <vListInsert>
}
 8004652:	e010      	b.n	8004676 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7fe f99f 	bl	80029a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d202      	bcs.n	8004676 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6013      	str	r3, [r2, #0]
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000448 	.word	0x20000448
 8004684:	20000344 	.word	0x20000344
 8004688:	2000044c 	.word	0x2000044c
 800468c:	20000430 	.word	0x20000430
 8004690:	20000400 	.word	0x20000400
 8004694:	200003fc 	.word	0x200003fc
 8004698:	20000464 	.word	0x20000464

0800469c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b04      	subs	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b04      	subs	r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046cc:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <pxPortInitialiseStack+0x54>)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b14      	subs	r3, #20
 80046d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b20      	subs	r3, #32
 80046e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046e4:	68fb      	ldr	r3, [r7, #12]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	080046f5 	.word	0x080046f5

080046f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <prvTaskExitError+0x54>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d00a      	beq.n	800471e <prvTaskExitError+0x2a>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <prvTaskExitError+0x28>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60bb      	str	r3, [r7, #8]
}
 8004730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004732:	bf00      	nop
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0fc      	beq.n	8004734 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000000c 	.word	0x2000000c
 800474c:	00000000 	.word	0x00000000

08004750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <pxCurrentTCBConst2>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6808      	ldr	r0, [r1, #0]
 8004756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800475a:	f380 8809 	msr	PSP, r0
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	f04e 0e0d 	orr.w	lr, lr, #13
 800476e:	4770      	bx	lr

08004770 <pxCurrentTCBConst2>:
 8004770:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004778:	4806      	ldr	r0, [pc, #24]	; (8004794 <prvPortStartFirstTask+0x1c>)
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f380 8808 	msr	MSP, r0
 8004782:	b662      	cpsie	i
 8004784:	b661      	cpsie	f
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	df00      	svc	0
 8004790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004792:	bf00      	nop
 8004794:	e000ed08 	.word	0xe000ed08

08004798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479e:	4b32      	ldr	r3, [pc, #200]	; (8004868 <xPortStartScheduler+0xd0>)
 80047a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b2a      	ldr	r3, [pc, #168]	; (800486c <xPortStartScheduler+0xd4>)
 80047c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <xPortStartScheduler+0xd8>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047cc:	e009      	b.n	80047e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80047ce:	4b28      	ldr	r3, [pc, #160]	; (8004870 <xPortStartScheduler+0xd8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <xPortStartScheduler+0xd8>)
 80047d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d0ef      	beq.n	80047ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <xPortStartScheduler+0xd8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d00a      	beq.n	8004810 <xPortStartScheduler+0x78>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60bb      	str	r3, [r7, #8]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <xPortStartScheduler+0xd8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	4a16      	ldr	r2, [pc, #88]	; (8004870 <xPortStartScheduler+0xd8>)
 8004818:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <xPortStartScheduler+0xd8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <xPortStartScheduler+0xd8>)
 8004824:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <xPortStartScheduler+0xdc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <xPortStartScheduler+0xdc>)
 8004834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <xPortStartScheduler+0xdc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a0d      	ldr	r2, [pc, #52]	; (8004874 <xPortStartScheduler+0xdc>)
 8004840:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004844:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004846:	f000 f8b9 	bl	80049bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <xPortStartScheduler+0xe0>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004850:	f7ff ff92 	bl	8004778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004854:	f7ff fa94 	bl	8003d80 <vTaskSwitchContext>
	prvTaskExitError();
 8004858:	f7ff ff4c 	bl	80046f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000e400 	.word	0xe000e400
 800486c:	20000470 	.word	0x20000470
 8004870:	20000474 	.word	0x20000474
 8004874:	e000ed20 	.word	0xe000ed20
 8004878:	2000000c 	.word	0x2000000c

0800487c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
}
 8004894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <vPortEnterCritical+0x58>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <vPortEnterCritical+0x58>)
 800489e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <vPortEnterCritical+0x58>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10f      	bne.n	80048c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <vPortEnterCritical+0x5c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	603b      	str	r3, [r7, #0]
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <vPortEnterCritical+0x4a>
	}
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <vPortExitCritical+0x4c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <vPortExitCritical+0x24>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	607b      	str	r3, [r7, #4]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <vPortExitCritical+0x4c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <vPortExitCritical+0x4c>)
 8004908:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800490a:	4b07      	ldr	r3, [pc, #28]	; (8004928 <vPortExitCritical+0x4c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <vPortExitCritical+0x42>
 8004912:	2300      	movs	r3, #0
 8004914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f383 8811 	msr	BASEPRI, r3
}
 800491c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	2000000c 	.word	0x2000000c
 800492c:	00000000 	.word	0x00000000

08004930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004930:	f3ef 8009 	mrs	r0, PSP
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <pxCurrentTCBConst>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004940:	6010      	str	r0, [r2, #0]
 8004942:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004946:	f04f 0050 	mov.w	r0, #80	; 0x50
 800494a:	f380 8811 	msr	BASEPRI, r0
 800494e:	f7ff fa17 	bl	8003d80 <vTaskSwitchContext>
 8004952:	f04f 0000 	mov.w	r0, #0
 8004956:	f380 8811 	msr	BASEPRI, r0
 800495a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	6808      	ldr	r0, [r1, #0]
 8004962:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004966:	f380 8809 	msr	PSP, r0
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	4770      	bx	lr

08004970 <pxCurrentTCBConst>:
 8004970:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
}
 8004990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004992:	f7ff f937 	bl	8003c04 <xTaskIncrementTick>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <SysTick_Handler+0x40>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f383 8811 	msr	BASEPRI, r3
}
 80049ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <vPortSetupTimerInterrupt+0x30>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <vPortSetupTimerInterrupt+0x34>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <vPortSetupTimerInterrupt+0x38>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <vPortSetupTimerInterrupt+0x3c>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	4a08      	ldr	r2, [pc, #32]	; (80049fc <vPortSetupTimerInterrupt+0x40>)
 80049da:	3b01      	subs	r3, #1
 80049dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <vPortSetupTimerInterrupt+0x30>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	e000e010 	.word	0xe000e010
 80049f0:	e000e018 	.word	0xe000e018
 80049f4:	20000000 	.word	0x20000000
 80049f8:	10624dd3 	.word	0x10624dd3
 80049fc:	e000e014 	.word	0xe000e014

08004a00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a06:	f3ef 8305 	mrs	r3, IPSR
 8004a0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	d914      	bls.n	8004a3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <vPortValidateInterruptPriority+0x6c>)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a1c:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <vPortValidateInterruptPriority+0x70>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	7afa      	ldrb	r2, [r7, #11]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d20a      	bcs.n	8004a3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	607b      	str	r3, [r7, #4]
}
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <vPortValidateInterruptPriority+0x74>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <vPortValidateInterruptPriority+0x78>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d90a      	bls.n	8004a62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	603b      	str	r3, [r7, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <vPortValidateInterruptPriority+0x60>
	}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e3f0 	.word	0xe000e3f0
 8004a70:	20000470 	.word	0x20000470
 8004a74:	e000ed0c 	.word	0xe000ed0c
 8004a78:	20000474 	.word	0x20000474

08004a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a88:	f7ff f812 	bl	8003ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a8c:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <pvPortMalloc+0x174>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a94:	f000 f910 	bl	8004cb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a98:	4b56      	ldr	r3, [pc, #344]	; (8004bf4 <pvPortMalloc+0x178>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 808e 	bne.w	8004bc2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01d      	beq.n	8004ae8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004aac:	2208      	movs	r2, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d014      	beq.n	8004ae8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f023 0307 	bic.w	r3, r3, #7
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <pvPortMalloc+0x6c>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	617b      	str	r3, [r7, #20]
}
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d069      	beq.n	8004bc2 <pvPortMalloc+0x146>
 8004aee:	4b42      	ldr	r3, [pc, #264]	; (8004bf8 <pvPortMalloc+0x17c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d864      	bhi.n	8004bc2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004af8:	4b40      	ldr	r3, [pc, #256]	; (8004bfc <pvPortMalloc+0x180>)
 8004afa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004afc:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <pvPortMalloc+0x180>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b02:	e004      	b.n	8004b0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d903      	bls.n	8004b20 <pvPortMalloc+0xa4>
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f1      	bne.n	8004b04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b20:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <pvPortMalloc+0x174>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d04b      	beq.n	8004bc2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2208      	movs	r2, #8
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	1ad2      	subs	r2, r2, r3
 8004b44:	2308      	movs	r3, #8
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d91f      	bls.n	8004b8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <pvPortMalloc+0xf8>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	613b      	str	r3, [r7, #16]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b86:	69b8      	ldr	r0, [r7, #24]
 8004b88:	f000 f8f8 	bl	8004d7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <pvPortMalloc+0x17c>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <pvPortMalloc+0x17c>)
 8004b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b9a:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <pvPortMalloc+0x17c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <pvPortMalloc+0x184>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d203      	bcs.n	8004bae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <pvPortMalloc+0x17c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <pvPortMalloc+0x184>)
 8004bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <pvPortMalloc+0x178>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bc2:	f7fe ff83 	bl	8003acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <pvPortMalloc+0x16a>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <pvPortMalloc+0x168>
	return pvReturn;
 8004be6:	69fb      	ldr	r3, [r7, #28]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3728      	adds	r7, #40	; 0x28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20001480 	.word	0x20001480
 8004bf4:	2000148c 	.word	0x2000148c
 8004bf8:	20001484 	.word	0x20001484
 8004bfc:	20001478 	.word	0x20001478
 8004c00:	20001488 	.word	0x20001488

08004c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d048      	beq.n	8004ca8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c16:	2308      	movs	r3, #8
 8004c18:	425b      	negs	r3, r3
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <vPortFree+0xac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <vPortFree+0x44>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60fb      	str	r3, [r7, #12]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <vPortFree+0x62>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	60bb      	str	r3, [r7, #8]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <vPortFree+0xac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d019      	beq.n	8004ca8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d115      	bne.n	8004ca8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortFree+0xac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	401a      	ands	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c8c:	f7fe ff10 	bl	8003ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <vPortFree+0xb0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	4a06      	ldr	r2, [pc, #24]	; (8004cb4 <vPortFree+0xb0>)
 8004c9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c9e:	6938      	ldr	r0, [r7, #16]
 8004ca0:	f000 f86c 	bl	8004d7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ca4:	f7fe ff12 	bl	8003acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	2000148c 	.word	0x2000148c
 8004cb4:	20001484 	.word	0x20001484

08004cb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <prvHeapInit+0xac>)
 8004cc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3307      	adds	r3, #7
 8004cd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <prvHeapInit+0xac>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <prvHeapInit+0xb0>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <prvHeapInit+0xb0>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4413      	add	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d04:	2208      	movs	r2, #8
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <prvHeapInit+0xb4>)
 8004d18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <prvHeapInit+0xb4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <prvHeapInit+0xb4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	1ad2      	subs	r2, r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <prvHeapInit+0xb4>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <prvHeapInit+0xb8>)
 8004d46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <prvHeapInit+0xbc>)
 8004d4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <prvHeapInit+0xc0>)
 8004d52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d56:	601a      	str	r2, [r3, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000478 	.word	0x20000478
 8004d68:	20001478 	.word	0x20001478
 8004d6c:	20001480 	.word	0x20001480
 8004d70:	20001488 	.word	0x20001488
 8004d74:	20001484 	.word	0x20001484
 8004d78:	2000148c 	.word	0x2000148c

08004d7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d84:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <prvInsertBlockIntoFreeList+0xa8>)
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e002      	b.n	8004d90 <prvInsertBlockIntoFreeList+0x14>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d8f7      	bhi.n	8004d8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4413      	add	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d108      	bne.n	8004dbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d118      	bne.n	8004e04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <prvInsertBlockIntoFreeList+0xac>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d00d      	beq.n	8004dfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e008      	b.n	8004e0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <prvInsertBlockIntoFreeList+0xac>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e003      	b.n	8004e0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d002      	beq.n	8004e1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	20001478 	.word	0x20001478
 8004e28:	20001480 	.word	0x20001480

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	2600      	movs	r6, #0
 8004e30:	4d0c      	ldr	r5, [pc, #48]	; (8004e64 <__libc_init_array+0x38>)
 8004e32:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	f000 f8f4 	bl	8005028 <_init>
 8004e40:	2600      	movs	r6, #0
 8004e42:	4d0a      	ldr	r5, [pc, #40]	; (8004e6c <__libc_init_array+0x40>)
 8004e44:	4c0a      	ldr	r4, [pc, #40]	; (8004e70 <__libc_init_array+0x44>)
 8004e46:	1b64      	subs	r4, r4, r5
 8004e48:	10a4      	asrs	r4, r4, #2
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	0800516c 	.word	0x0800516c
 8004e68:	0800516c 	.word	0x0800516c
 8004e6c:	0800516c 	.word	0x0800516c
 8004e70:	08005170 	.word	0x08005170

08004e74 <__retarget_lock_acquire_recursive>:
 8004e74:	4770      	bx	lr

08004e76 <__retarget_lock_release_recursive>:
 8004e76:	4770      	bx	lr

08004e78 <memcpy>:
 8004e78:	440a      	add	r2, r1
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e80:	d100      	bne.n	8004e84 <memcpy+0xc>
 8004e82:	4770      	bx	lr
 8004e84:	b510      	push	{r4, lr}
 8004e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e90:	d1f9      	bne.n	8004e86 <memcpy+0xe>
 8004e92:	bd10      	pop	{r4, pc}

08004e94 <memset>:
 8004e94:	4603      	mov	r3, r0
 8004e96:	4402      	add	r2, r0
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d100      	bne.n	8004e9e <memset+0xa>
 8004e9c:	4770      	bx	lr
 8004e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea2:	e7f9      	b.n	8004e98 <memset+0x4>

08004ea4 <cleanup_glue>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	6809      	ldr	r1, [r1, #0]
 8004eaa:	4605      	mov	r5, r0
 8004eac:	b109      	cbz	r1, 8004eb2 <cleanup_glue+0xe>
 8004eae:	f7ff fff9 	bl	8004ea4 <cleanup_glue>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eba:	f000 b869 	b.w	8004f90 <_free_r>
	...

08004ec0 <_reclaim_reent>:
 8004ec0:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <_reclaim_reent+0xb4>)
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4283      	cmp	r3, r0
 8004eca:	d051      	beq.n	8004f70 <_reclaim_reent+0xb0>
 8004ecc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ece:	b143      	cbz	r3, 8004ee2 <_reclaim_reent+0x22>
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d14a      	bne.n	8004f6c <_reclaim_reent+0xac>
 8004ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed8:	6819      	ldr	r1, [r3, #0]
 8004eda:	b111      	cbz	r1, 8004ee2 <_reclaim_reent+0x22>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 f857 	bl	8004f90 <_free_r>
 8004ee2:	6961      	ldr	r1, [r4, #20]
 8004ee4:	b111      	cbz	r1, 8004eec <_reclaim_reent+0x2c>
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 f852 	bl	8004f90 <_free_r>
 8004eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004eee:	b111      	cbz	r1, 8004ef6 <_reclaim_reent+0x36>
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f000 f84d 	bl	8004f90 <_free_r>
 8004ef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ef8:	b111      	cbz	r1, 8004f00 <_reclaim_reent+0x40>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 f848 	bl	8004f90 <_free_r>
 8004f00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f02:	b111      	cbz	r1, 8004f0a <_reclaim_reent+0x4a>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f843 	bl	8004f90 <_free_r>
 8004f0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f0c:	b111      	cbz	r1, 8004f14 <_reclaim_reent+0x54>
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 f83e 	bl	8004f90 <_free_r>
 8004f14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f16:	b111      	cbz	r1, 8004f1e <_reclaim_reent+0x5e>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f839 	bl	8004f90 <_free_r>
 8004f1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f20:	b111      	cbz	r1, 8004f28 <_reclaim_reent+0x68>
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f834 	bl	8004f90 <_free_r>
 8004f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f2a:	b111      	cbz	r1, 8004f32 <_reclaim_reent+0x72>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f82f 	bl	8004f90 <_free_r>
 8004f32:	69a3      	ldr	r3, [r4, #24]
 8004f34:	b1e3      	cbz	r3, 8004f70 <_reclaim_reent+0xb0>
 8004f36:	4620      	mov	r0, r4
 8004f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f3a:	4798      	blx	r3
 8004f3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f3e:	b1b9      	cbz	r1, 8004f70 <_reclaim_reent+0xb0>
 8004f40:	4620      	mov	r0, r4
 8004f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f46:	f7ff bfad 	b.w	8004ea4 <cleanup_glue>
 8004f4a:	5949      	ldr	r1, [r1, r5]
 8004f4c:	b941      	cbnz	r1, 8004f60 <_reclaim_reent+0xa0>
 8004f4e:	3504      	adds	r5, #4
 8004f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f52:	2d80      	cmp	r5, #128	; 0x80
 8004f54:	68d9      	ldr	r1, [r3, #12]
 8004f56:	d1f8      	bne.n	8004f4a <_reclaim_reent+0x8a>
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f819 	bl	8004f90 <_free_r>
 8004f5e:	e7ba      	b.n	8004ed6 <_reclaim_reent+0x16>
 8004f60:	680e      	ldr	r6, [r1, #0]
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 f814 	bl	8004f90 <_free_r>
 8004f68:	4631      	mov	r1, r6
 8004f6a:	e7ef      	b.n	8004f4c <_reclaim_reent+0x8c>
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	e7ef      	b.n	8004f50 <_reclaim_reent+0x90>
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	bf00      	nop
 8004f74:	20000010 	.word	0x20000010

08004f78 <__malloc_lock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	; (8004f80 <__malloc_lock+0x8>)
 8004f7a:	f7ff bf7b 	b.w	8004e74 <__retarget_lock_acquire_recursive>
 8004f7e:	bf00      	nop
 8004f80:	20001548 	.word	0x20001548

08004f84 <__malloc_unlock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__malloc_unlock+0x8>)
 8004f86:	f7ff bf76 	b.w	8004e76 <__retarget_lock_release_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	20001548 	.word	0x20001548

08004f90 <_free_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d043      	beq.n	8005020 <_free_r+0x90>
 8004f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9c:	1f0c      	subs	r4, r1, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfb8      	it	lt
 8004fa2:	18e4      	addlt	r4, r4, r3
 8004fa4:	f7ff ffe8 	bl	8004f78 <__malloc_lock>
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <_free_r+0x94>)
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	4610      	mov	r0, r2
 8004fae:	b933      	cbnz	r3, 8004fbe <_free_r+0x2e>
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	6014      	str	r4, [r2, #0]
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fba:	f7ff bfe3 	b.w	8004f84 <__malloc_unlock>
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	d90a      	bls.n	8004fd8 <_free_r+0x48>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1862      	adds	r2, r4, r1
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bf01      	itttt	eq
 8004fca:	681a      	ldreq	r2, [r3, #0]
 8004fcc:	685b      	ldreq	r3, [r3, #4]
 8004fce:	1852      	addeq	r2, r2, r1
 8004fd0:	6022      	streq	r2, [r4, #0]
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	6004      	str	r4, [r0, #0]
 8004fd6:	e7ed      	b.n	8004fb4 <_free_r+0x24>
 8004fd8:	461a      	mov	r2, r3
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b10b      	cbz	r3, 8004fe2 <_free_r+0x52>
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	d9fa      	bls.n	8004fd8 <_free_r+0x48>
 8004fe2:	6811      	ldr	r1, [r2, #0]
 8004fe4:	1850      	adds	r0, r2, r1
 8004fe6:	42a0      	cmp	r0, r4
 8004fe8:	d10b      	bne.n	8005002 <_free_r+0x72>
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	4401      	add	r1, r0
 8004fee:	1850      	adds	r0, r2, r1
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	6011      	str	r1, [r2, #0]
 8004ff4:	d1de      	bne.n	8004fb4 <_free_r+0x24>
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4401      	add	r1, r0
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	6053      	str	r3, [r2, #4]
 8005000:	e7d8      	b.n	8004fb4 <_free_r+0x24>
 8005002:	d902      	bls.n	800500a <_free_r+0x7a>
 8005004:	230c      	movs	r3, #12
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	e7d4      	b.n	8004fb4 <_free_r+0x24>
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	1821      	adds	r1, r4, r0
 800500e:	428b      	cmp	r3, r1
 8005010:	bf01      	itttt	eq
 8005012:	6819      	ldreq	r1, [r3, #0]
 8005014:	685b      	ldreq	r3, [r3, #4]
 8005016:	1809      	addeq	r1, r1, r0
 8005018:	6021      	streq	r1, [r4, #0]
 800501a:	6063      	str	r3, [r4, #4]
 800501c:	6054      	str	r4, [r2, #4]
 800501e:	e7c9      	b.n	8004fb4 <_free_r+0x24>
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20001490 	.word	0x20001490

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
