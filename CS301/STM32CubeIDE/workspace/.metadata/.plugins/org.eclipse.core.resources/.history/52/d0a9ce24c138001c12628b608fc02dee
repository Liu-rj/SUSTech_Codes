/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint8_t rxBuffer[20];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern UART_HandleTypeDef huart1;
/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
  /* USER CODE END USART1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
//	char msg1[] = "LED0 is On\r\n";
//	char msg2[] = "LED0 is Off\r\n";
//	char msg3[] = "LED1 is On\r\n";
//	char msg4[] = "LED1 is Off\r\n";
//	switch (GPIO_Pin)
//	{
//		case KEY0_Pin:
//			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == 0)
//			{
//				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
//				HAL_Delay(300);
//				if (HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin) == 0)
//				{
//					HAL_UART_Transmit(&huart1, (uint8_t*)msg1, 13, HAL_MAX_DELAY);
//				}
//				else
//				{
//					HAL_UART_Transmit(&huart1, (uint8_t*)msg2, 14, HAL_MAX_DELAY);
//				}
//			}
//			break;
//		case KEY1_Pin:
//			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == 0)
//			{
//				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//				HAL_Delay(300);
//				if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == 0)
//				{
//					HAL_UART_Transmit(&huart1, (uint8_t*)msg3, 13, HAL_MAX_DELAY);
//				}
//				else
//				{
//					HAL_UART_Transmit(&huart1, (uint8_t*)msg4, 14, HAL_MAX_DELAY);
//				}
//			}
//			break;
//		default:
//			break;
//	}
	char Data1[] = "LED0 is On\r";
		char Data2[] = "LED0 is Off\r";
		char Data3[] = "LED1 is On\r";
		char Data4[] = "LED1 is Off\r";
		switch(GPIO_Pin){
		case KEY0_Pin:
			if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin)==0){
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
				HAL_Delay(300);
				if(HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin)==1){
					HAL_UART_Transmit(&huart1,Data2,13,0xffff);
				}else if(HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin)==0){
					HAL_UART_Transmit(&huart1,Data1,12,0xffff);
				}
			}
			break;
		case KEY1_Pin:
				if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin)==0){
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
					HAL_Delay(300);
					if(HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin)==1){
						HAL_UART_Transmit(&huart1,Data4,13,0xffff);
					}else if(HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin)==0){
						HAL_UART_Transmit(&huart1,Data3,12,0xffff);
					}
				}
				break;
		default:
			break;
		}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==USART1)
	{
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n')
		{
			if (strcmp(uRx_Data, "Turn off LED0\r") == 0)
			{
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
			}
			if (strcmp(uRx_Data, "Turn on LED0\r") == 0)
			{
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
			}
			if (strcmp(uRx_Data, "Turn off LED1\r") == 0)
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
			}
			if (strcmp(uRx_Data, "Turn on LED1\r") == 0)
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
			}
			HAL_UART_Transmit(&huart1, uRx_Data, uLength, HAL_MAX_DELAY);
			uLength = 0;
		}
		else
		{
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
