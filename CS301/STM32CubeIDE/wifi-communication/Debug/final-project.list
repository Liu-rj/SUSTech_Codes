
final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6d0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b8c  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d444  0800d444  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800d444  0800d444  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d444  0800d444  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d444  0800d444  0001d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d448  0800d448  0001d448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000080  0800d4cc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  0800d4cc  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e901  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f9  00000000  00000000  0002e9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a058  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f471  00000000  00000000  0004c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000993ab  00000000  00000000  0005bad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000f4ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000080 	.word	0x20000080
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b8a0 	.word	0x0800b8a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000084 	.word	0x20000084
 8000224:	0800b8a0 	.word	0x0800b8a0

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_dmul>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000252:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000256:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800025a:	bf1d      	ittte	ne
 800025c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000260:	ea94 0f0c 	teqne	r4, ip
 8000264:	ea95 0f0c 	teqne	r5, ip
 8000268:	f000 f8de 	bleq	8000428 <__aeabi_dmul+0x1dc>
 800026c:	442c      	add	r4, r5
 800026e:	ea81 0603 	eor.w	r6, r1, r3
 8000272:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000276:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800027a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800027e:	bf18      	it	ne
 8000280:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800028c:	d038      	beq.n	8000300 <__aeabi_dmul+0xb4>
 800028e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000292:	f04f 0500 	mov.w	r5, #0
 8000296:	fbe1 e502 	umlal	lr, r5, r1, r2
 800029a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800029e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002a2:	f04f 0600 	mov.w	r6, #0
 80002a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002aa:	f09c 0f00 	teq	ip, #0
 80002ae:	bf18      	it	ne
 80002b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80002b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002c0:	d204      	bcs.n	80002cc <__aeabi_dmul+0x80>
 80002c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002c6:	416d      	adcs	r5, r5
 80002c8:	eb46 0606 	adc.w	r6, r6, r6
 80002cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002e4:	bf88      	it	hi
 80002e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ea:	d81e      	bhi.n	800032a <__aeabi_dmul+0xde>
 80002ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000304:	ea46 0101 	orr.w	r1, r6, r1
 8000308:	ea40 0002 	orr.w	r0, r0, r2
 800030c:	ea81 0103 	eor.w	r1, r1, r3
 8000310:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000314:	bfc2      	ittt	gt
 8000316:	ebd4 050c 	rsbsgt	r5, r4, ip
 800031a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800031e:	bd70      	popgt	{r4, r5, r6, pc}
 8000320:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000324:	f04f 0e00 	mov.w	lr, #0
 8000328:	3c01      	subs	r4, #1
 800032a:	f300 80ab 	bgt.w	8000484 <__aeabi_dmul+0x238>
 800032e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000332:	bfde      	ittt	le
 8000334:	2000      	movle	r0, #0
 8000336:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800033a:	bd70      	pople	{r4, r5, r6, pc}
 800033c:	f1c4 0400 	rsb	r4, r4, #0
 8000340:	3c20      	subs	r4, #32
 8000342:	da35      	bge.n	80003b0 <__aeabi_dmul+0x164>
 8000344:	340c      	adds	r4, #12
 8000346:	dc1b      	bgt.n	8000380 <__aeabi_dmul+0x134>
 8000348:	f104 0414 	add.w	r4, r4, #20
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f305 	lsl.w	r3, r0, r5
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f205 	lsl.w	r2, r1, r5
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000364:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	fa21 f604 	lsr.w	r6, r1, r4
 8000370:	eb42 0106 	adc.w	r1, r2, r6
 8000374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000378:	bf08      	it	eq
 800037a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f1c4 040c 	rsb	r4, r4, #12
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f304 	lsl.w	r3, r0, r4
 800038c:	fa20 f005 	lsr.w	r0, r0, r5
 8000390:	fa01 f204 	lsl.w	r2, r1, r4
 8000394:	ea40 0002 	orr.w	r0, r0, r2
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a8:	bf08      	it	eq
 80003aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f205 	lsl.w	r2, r0, r5
 80003b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80003bc:	fa20 f304 	lsr.w	r3, r0, r4
 80003c0:	fa01 f205 	lsl.w	r2, r1, r5
 80003c4:	ea43 0302 	orr.w	r3, r3, r2
 80003c8:	fa21 f004 	lsr.w	r0, r1, r4
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	fa21 f204 	lsr.w	r2, r1, r4
 80003d4:	ea20 0002 	bic.w	r0, r0, r2
 80003d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e0:	bf08      	it	eq
 80003e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f094 0f00 	teq	r4, #0
 80003ec:	d10f      	bne.n	800040e <__aeabi_dmul+0x1c2>
 80003ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003f2:	0040      	lsls	r0, r0, #1
 80003f4:	eb41 0101 	adc.w	r1, r1, r1
 80003f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fc:	bf08      	it	eq
 80003fe:	3c01      	subeq	r4, #1
 8000400:	d0f7      	beq.n	80003f2 <__aeabi_dmul+0x1a6>
 8000402:	ea41 0106 	orr.w	r1, r1, r6
 8000406:	f095 0f00 	teq	r5, #0
 800040a:	bf18      	it	ne
 800040c:	4770      	bxne	lr
 800040e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	eb43 0303 	adc.w	r3, r3, r3
 8000418:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800041c:	bf08      	it	eq
 800041e:	3d01      	subeq	r5, #1
 8000420:	d0f7      	beq.n	8000412 <__aeabi_dmul+0x1c6>
 8000422:	ea43 0306 	orr.w	r3, r3, r6
 8000426:	4770      	bx	lr
 8000428:	ea94 0f0c 	teq	r4, ip
 800042c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000430:	bf18      	it	ne
 8000432:	ea95 0f0c 	teqne	r5, ip
 8000436:	d00c      	beq.n	8000452 <__aeabi_dmul+0x206>
 8000438:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043c:	bf18      	it	ne
 800043e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000442:	d1d1      	bne.n	80003e8 <__aeabi_dmul+0x19c>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000456:	bf06      	itte	eq
 8000458:	4610      	moveq	r0, r2
 800045a:	4619      	moveq	r1, r3
 800045c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000460:	d019      	beq.n	8000496 <__aeabi_dmul+0x24a>
 8000462:	ea94 0f0c 	teq	r4, ip
 8000466:	d102      	bne.n	800046e <__aeabi_dmul+0x222>
 8000468:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800046c:	d113      	bne.n	8000496 <__aeabi_dmul+0x24a>
 800046e:	ea95 0f0c 	teq	r5, ip
 8000472:	d105      	bne.n	8000480 <__aeabi_dmul+0x234>
 8000474:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000478:	bf1c      	itt	ne
 800047a:	4610      	movne	r0, r2
 800047c:	4619      	movne	r1, r3
 800047e:	d10a      	bne.n	8000496 <__aeabi_dmul+0x24a>
 8000480:	ea81 0103 	eor.w	r1, r1, r3
 8000484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000488:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800049a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800049e:	bd70      	pop	{r4, r5, r6, pc}

080004a0 <__aeabi_drsub>:
 80004a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004a4:	e002      	b.n	80004ac <__adddf3>
 80004a6:	bf00      	nop

080004a8 <__aeabi_dsub>:
 80004a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004ac <__adddf3>:
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	bf1f      	itttt	ne
 80004c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d2:	f000 80e2 	beq.w	800069a <__adddf3+0x1ee>
 80004d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004de:	bfb8      	it	lt
 80004e0:	426d      	neglt	r5, r5
 80004e2:	dd0c      	ble.n	80004fe <__adddf3+0x52>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea80 0202 	eor.w	r2, r0, r2
 80004ea:	ea81 0303 	eor.w	r3, r1, r3
 80004ee:	ea82 0000 	eor.w	r0, r2, r0
 80004f2:	ea83 0101 	eor.w	r1, r3, r1
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	2d36      	cmp	r5, #54	; 0x36
 8000500:	bf88      	it	hi
 8000502:	bd30      	pophi	{r4, r5, pc}
 8000504:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000508:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800050c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000510:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x70>
 8000516:	4240      	negs	r0, r0
 8000518:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000520:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000524:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000528:	d002      	beq.n	8000530 <__adddf3+0x84>
 800052a:	4252      	negs	r2, r2
 800052c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000530:	ea94 0f05 	teq	r4, r5
 8000534:	f000 80a7 	beq.w	8000686 <__adddf3+0x1da>
 8000538:	f1a4 0401 	sub.w	r4, r4, #1
 800053c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000540:	db0d      	blt.n	800055e <__adddf3+0xb2>
 8000542:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000546:	fa22 f205 	lsr.w	r2, r2, r5
 800054a:	1880      	adds	r0, r0, r2
 800054c:	f141 0100 	adc.w	r1, r1, #0
 8000550:	fa03 f20e 	lsl.w	r2, r3, lr
 8000554:	1880      	adds	r0, r0, r2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	4159      	adcs	r1, r3
 800055c:	e00e      	b.n	800057c <__adddf3+0xd0>
 800055e:	f1a5 0520 	sub.w	r5, r5, #32
 8000562:	f10e 0e20 	add.w	lr, lr, #32
 8000566:	2a01      	cmp	r2, #1
 8000568:	fa03 fc0e 	lsl.w	ip, r3, lr
 800056c:	bf28      	it	cs
 800056e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000572:	fa43 f305 	asr.w	r3, r3, r5
 8000576:	18c0      	adds	r0, r0, r3
 8000578:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	d507      	bpl.n	8000592 <__adddf3+0xe6>
 8000582:	f04f 0e00 	mov.w	lr, #0
 8000586:	f1dc 0c00 	rsbs	ip, ip, #0
 800058a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800058e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000592:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000596:	d31b      	bcc.n	80005d0 <__adddf3+0x124>
 8000598:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800059c:	d30c      	bcc.n	80005b8 <__adddf3+0x10c>
 800059e:	0849      	lsrs	r1, r1, #1
 80005a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005a8:	f104 0401 	add.w	r4, r4, #1
 80005ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005b4:	f080 809a 	bcs.w	80006ec <__adddf3+0x240>
 80005b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005bc:	bf08      	it	eq
 80005be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005c2:	f150 0000 	adcs.w	r0, r0, #0
 80005c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ca:	ea41 0105 	orr.w	r1, r1, r5
 80005ce:	bd30      	pop	{r4, r5, pc}
 80005d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005d4:	4140      	adcs	r0, r0
 80005d6:	eb41 0101 	adc.w	r1, r1, r1
 80005da:	3c01      	subs	r4, #1
 80005dc:	bf28      	it	cs
 80005de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005e2:	d2e9      	bcs.n	80005b8 <__adddf3+0x10c>
 80005e4:	f091 0f00 	teq	r1, #0
 80005e8:	bf04      	itt	eq
 80005ea:	4601      	moveq	r1, r0
 80005ec:	2000      	moveq	r0, #0
 80005ee:	fab1 f381 	clz	r3, r1
 80005f2:	bf08      	it	eq
 80005f4:	3320      	addeq	r3, #32
 80005f6:	f1a3 030b 	sub.w	r3, r3, #11
 80005fa:	f1b3 0220 	subs.w	r2, r3, #32
 80005fe:	da0c      	bge.n	800061a <__adddf3+0x16e>
 8000600:	320c      	adds	r2, #12
 8000602:	dd08      	ble.n	8000616 <__adddf3+0x16a>
 8000604:	f102 0c14 	add.w	ip, r2, #20
 8000608:	f1c2 020c 	rsb	r2, r2, #12
 800060c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000610:	fa21 f102 	lsr.w	r1, r1, r2
 8000614:	e00c      	b.n	8000630 <__adddf3+0x184>
 8000616:	f102 0214 	add.w	r2, r2, #20
 800061a:	bfd8      	it	le
 800061c:	f1c2 0c20 	rsble	ip, r2, #32
 8000620:	fa01 f102 	lsl.w	r1, r1, r2
 8000624:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000628:	bfdc      	itt	le
 800062a:	ea41 010c 	orrle.w	r1, r1, ip
 800062e:	4090      	lslle	r0, r2
 8000630:	1ae4      	subs	r4, r4, r3
 8000632:	bfa2      	ittt	ge
 8000634:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000638:	4329      	orrge	r1, r5
 800063a:	bd30      	popge	{r4, r5, pc}
 800063c:	ea6f 0404 	mvn.w	r4, r4
 8000640:	3c1f      	subs	r4, #31
 8000642:	da1c      	bge.n	800067e <__adddf3+0x1d2>
 8000644:	340c      	adds	r4, #12
 8000646:	dc0e      	bgt.n	8000666 <__adddf3+0x1ba>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0220 	rsb	r2, r4, #32
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f302 	lsl.w	r3, r1, r2
 8000658:	ea40 0003 	orr.w	r0, r0, r3
 800065c:	fa21 f304 	lsr.w	r3, r1, r4
 8000660:	ea45 0103 	orr.w	r1, r5, r3
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	f1c4 040c 	rsb	r4, r4, #12
 800066a:	f1c4 0220 	rsb	r2, r4, #32
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 f304 	lsl.w	r3, r1, r4
 8000676:	ea40 0003 	orr.w	r0, r0, r3
 800067a:	4629      	mov	r1, r5
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	fa21 f004 	lsr.w	r0, r1, r4
 8000682:	4629      	mov	r1, r5
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	f094 0f00 	teq	r4, #0
 800068a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800068e:	bf06      	itte	eq
 8000690:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000694:	3401      	addeq	r4, #1
 8000696:	3d01      	subne	r5, #1
 8000698:	e74e      	b.n	8000538 <__adddf3+0x8c>
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf18      	it	ne
 80006a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006a4:	d029      	beq.n	80006fa <__adddf3+0x24e>
 80006a6:	ea94 0f05 	teq	r4, r5
 80006aa:	bf08      	it	eq
 80006ac:	ea90 0f02 	teqeq	r0, r2
 80006b0:	d005      	beq.n	80006be <__adddf3+0x212>
 80006b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006b6:	bf04      	itt	eq
 80006b8:	4619      	moveq	r1, r3
 80006ba:	4610      	moveq	r0, r2
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea91 0f03 	teq	r1, r3
 80006c2:	bf1e      	ittt	ne
 80006c4:	2100      	movne	r1, #0
 80006c6:	2000      	movne	r0, #0
 80006c8:	bd30      	popne	{r4, r5, pc}
 80006ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ce:	d105      	bne.n	80006dc <__adddf3+0x230>
 80006d0:	0040      	lsls	r0, r0, #1
 80006d2:	4149      	adcs	r1, r1
 80006d4:	bf28      	it	cs
 80006d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd30      	pop	{r4, r5, pc}
 80006dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006e0:	bf3c      	itt	cc
 80006e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006e6:	bd30      	popcc	{r4, r5, pc}
 80006e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf1a      	itte	ne
 8000700:	4619      	movne	r1, r3
 8000702:	4610      	movne	r0, r2
 8000704:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000708:	bf1c      	itt	ne
 800070a:	460b      	movne	r3, r1
 800070c:	4602      	movne	r2, r0
 800070e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000712:	bf06      	itte	eq
 8000714:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000718:	ea91 0f03 	teqeq	r1, r3
 800071c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop

08000724 <__aeabi_ui2d>:
 8000724:	f090 0f00 	teq	r0, #0
 8000728:	bf04      	itt	eq
 800072a:	2100      	moveq	r1, #0
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000734:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000738:	f04f 0500 	mov.w	r5, #0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e750      	b.n	80005e4 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_i2d>:
 8000744:	f090 0f00 	teq	r0, #0
 8000748:	bf04      	itt	eq
 800074a:	2100      	moveq	r1, #0
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000754:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000758:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800075c:	bf48      	it	mi
 800075e:	4240      	negmi	r0, r0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e73e      	b.n	80005e4 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_f2d>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800076e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000772:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000776:	bf1f      	itttt	ne
 8000778:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800077c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000780:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000784:	4770      	bxne	lr
 8000786:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800078a:	bf08      	it	eq
 800078c:	4770      	bxeq	lr
 800078e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000792:	bf04      	itt	eq
 8000794:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	e71c      	b.n	80005e4 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_ul2d>:
 80007ac:	ea50 0201 	orrs.w	r2, r0, r1
 80007b0:	bf08      	it	eq
 80007b2:	4770      	bxeq	lr
 80007b4:	b530      	push	{r4, r5, lr}
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	e00a      	b.n	80007d2 <__aeabi_l2d+0x16>

080007bc <__aeabi_l2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ca:	d502      	bpl.n	80007d2 <__aeabi_l2d+0x16>
 80007cc:	4240      	negs	r0, r0
 80007ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007de:	f43f aed8 	beq.w	8000592 <__adddf3+0xe6>
 80007e2:	f04f 0203 	mov.w	r2, #3
 80007e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ea:	bf18      	it	ne
 80007ec:	3203      	addne	r2, #3
 80007ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007f2:	bf18      	it	ne
 80007f4:	3203      	addne	r2, #3
 80007f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007fa:	f1c2 0320 	rsb	r3, r2, #32
 80007fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	fa01 fe03 	lsl.w	lr, r1, r3
 800080a:	ea40 000e 	orr.w	r0, r0, lr
 800080e:	fa21 f102 	lsr.w	r1, r1, r2
 8000812:	4414      	add	r4, r2
 8000814:	e6bd      	b.n	8000592 <__adddf3+0xe6>
 8000816:	bf00      	nop

08000818 <__aeabi_d2uiz>:
 8000818:	004a      	lsls	r2, r1, #1
 800081a:	d211      	bcs.n	8000840 <__aeabi_d2uiz+0x28>
 800081c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000820:	d211      	bcs.n	8000846 <__aeabi_d2uiz+0x2e>
 8000822:	d50d      	bpl.n	8000840 <__aeabi_d2uiz+0x28>
 8000824:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000828:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800082c:	d40e      	bmi.n	800084c <__aeabi_d2uiz+0x34>
 800082e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000836:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800083a:	fa23 f002 	lsr.w	r0, r3, r2
 800083e:	4770      	bx	lr
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	4770      	bx	lr
 8000846:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800084a:	d102      	bne.n	8000852 <__aeabi_d2uiz+0x3a>
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	4770      	bx	lr
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4770      	bx	lr

08000858 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <LCD_WR_REG+0x40>)
 8000864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000868:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <LCD_WR_REG+0x40>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LCD_WR_REG+0x44>)
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <LCD_WR_REG+0x40>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <LCD_WR_REG+0x40>)
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <LCD_WR_REG+0x40>)
 8000886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088a:	611a      	str	r2, [r3, #16]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40011000 	.word	0x40011000
 800089c:	40010c00 	.word	0x40010c00

080008a0 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b0:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LCD_WR_DATAX+0x44>)
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <LCD_WR_DATAX+0x40>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	611a      	str	r2, [r3, #16]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40010c00 	.word	0x40010c00

080008e8 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <LCD_RD_DATA+0x7c>)
 80008f0:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80008f4:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <LCD_RD_DATA+0x7c>)
 80008f8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80008fc:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <LCD_RD_DATA+0x7c>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <LCD_RD_DATA+0x80>)
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090a:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <LCD_RD_DATA+0x80>)
 800090e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000912:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <LCD_RD_DATA+0x80>)
 8000916:	2240      	movs	r2, #64	; 0x40
 8000918:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <LCD_RD_DATA+0x84>)
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	f648 1289 	movw	r2, #35209	; 0x8989
 8000922:	4293      	cmp	r3, r2
 8000924:	d102      	bne.n	800092c <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000926:	2001      	movs	r0, #1
 8000928:	f007 fdf0 	bl	800850c <HAL_Delay>
	t = DATAIN
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <LCD_RD_DATA+0x7c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <LCD_RD_DATA+0x80>)
 8000934:	2240      	movs	r2, #64	; 0x40
 8000936:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <LCD_RD_DATA+0x80>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LCD_RD_DATA+0x7c>)
 8000942:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000946:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <LCD_RD_DATA+0x7c>)
 800094a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800094e:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <LCD_RD_DATA+0x7c>)
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	60da      	str	r2, [r3, #12]
	return t;
 8000958:	88fb      	ldrh	r3, [r7, #6]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010c00 	.word	0x40010c00
 8000968:	40011000 	.word	0x40011000
 800096c:	20000204 	.word	0x20000204

08000970 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	4613      	mov	r3, r2
 800097e:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff68 	bl	8000858 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <LCD_WriteReg+0x4c>)
 800098a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <LCD_WriteReg+0x4c>)
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <LCD_WriteReg+0x50>)
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	60d3      	str	r3, [r2, #12]
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <LCD_WriteReg+0x4c>)
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <LCD_WriteReg+0x4c>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <LCD_WriteReg+0x4c>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	611a      	str	r2, [r3, #16]
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff41 	bl	8000858 <LCD_WR_REG>
	return LCD_RD_DATA();
 80009d6:	f7ff ff87 	bl	80008e8 <LCD_RD_DATA>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <LCD_WriteRAM_Prepare+0x14>)
 80009ea:	891b      	ldrh	r3, [r3, #8]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff33 	bl	8000858 <LCD_WR_REG>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000204 	.word	0x20000204

080009fc <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000a0c:	4b73      	ldr	r3, [pc, #460]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	f249 3241 	movw	r2, #37697	; 0x9341
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d005      	beq.n	8000a24 <LCD_SetCursor+0x28>
 8000a18:	4b70      	ldr	r3, [pc, #448]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	f245 3210 	movw	r2, #21264	; 0x5310
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d164      	bne.n	8000aee <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000a24:	4b6d      	ldr	r3, [pc, #436]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a26:	895b      	ldrh	r3, [r3, #10]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff15 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000a2e:	4b6c      	ldr	r3, [pc, #432]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b67      	ldr	r3, [pc, #412]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	4b65      	ldr	r3, [pc, #404]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	4b62      	ldr	r3, [pc, #392]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	4b5e      	ldr	r3, [pc, #376]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	4a5d      	ldr	r2, [pc, #372]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	60d3      	str	r3, [r2, #12]
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a86:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000a88:	4b54      	ldr	r3, [pc, #336]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000a8a:	899b      	ldrh	r3, [r3, #12]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fee3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000a92:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	4b51      	ldr	r3, [pc, #324]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ac0:	4b47      	ldr	r3, [pc, #284]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	611a      	str	r2, [r3, #16]
 8000ac8:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4a44      	ldr	r2, [pc, #272]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	60d3      	str	r3, [r2, #12]
 8000ad8:	4b41      	ldr	r3, [pc, #260]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	615a      	str	r2, [r3, #20]
 8000ade:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	4b3e      	ldr	r3, [pc, #248]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000aec:	e248      	b.n	8000f80 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000af0:	889b      	ldrh	r3, [r3, #4]
 8000af2:	f646 0204 	movw	r2, #26628	; 0x6804
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d176      	bne.n	8000be8 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000afa:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000afc:	799b      	ldrb	r3, [r3, #6]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d106      	bne.n	8000b10 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000b12:	895b      	ldrh	r3, [r3, #10]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe9f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b46:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	60d3      	str	r3, [r2, #12]
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <LCD_SetCursor+0x1e0>)
 8000b76:	899b      	ldrh	r3, [r3, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe6d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000baa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	4a09      	ldr	r2, [pc, #36]	; (8000be4 <LCD_SetCursor+0x1e8>)
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	60d3      	str	r3, [r2, #12]
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <LCD_SetCursor+0x1e4>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd6:	611a      	str	r2, [r3, #16]
}
 8000bd8:	e1d2      	b.n	8000f80 <LCD_SetCursor+0x584>
 8000bda:	bf00      	nop
 8000bdc:	20000204 	.word	0x20000204
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000be8:	4b99      	ldr	r3, [pc, #612]	; (8000e50 <LCD_SetCursor+0x454>)
 8000bea:	889b      	ldrh	r3, [r3, #4]
 8000bec:	f641 1263 	movw	r2, #6499	; 0x1963
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	f040 8133 	bne.w	8000e5c <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000bf6:	4b96      	ldr	r3, [pc, #600]	; (8000e50 <LCD_SetCursor+0x454>)
 8000bf8:	799b      	ldrb	r3, [r3, #6]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d163      	bne.n	8000cc6 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000bfe:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <LCD_SetCursor+0x454>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000c0c:	4b90      	ldr	r3, [pc, #576]	; (8000e50 <LCD_SetCursor+0x454>)
 8000c0e:	895b      	ldrh	r3, [r3, #10]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe21 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000c16:	4b8f      	ldr	r3, [pc, #572]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	4b8d      	ldr	r3, [pc, #564]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	4b89      	ldr	r3, [pc, #548]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	4b86      	ldr	r3, [pc, #536]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000c40:	4b84      	ldr	r3, [pc, #528]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	4b82      	ldr	r3, [pc, #520]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	4b7f      	ldr	r3, [pc, #508]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b7d      	ldr	r3, [pc, #500]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	4b7c      	ldr	r3, [pc, #496]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c68:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000c6a:	4b7a      	ldr	r3, [pc, #488]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	4b78      	ldr	r3, [pc, #480]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b72      	ldr	r3, [pc, #456]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000c98:	4b6e      	ldr	r3, [pc, #440]	; (8000e54 <LCD_SetCursor+0x458>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	4b6c      	ldr	r3, [pc, #432]	; (8000e54 <LCD_SetCursor+0x458>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	4a6b      	ldr	r2, [pc, #428]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	60d3      	str	r3, [r2, #12]
 8000cb0:	4b68      	ldr	r3, [pc, #416]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	4b67      	ldr	r3, [pc, #412]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	4b65      	ldr	r3, [pc, #404]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	e061      	b.n	8000d8a <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000cc6:	4b62      	ldr	r3, [pc, #392]	; (8000e50 <LCD_SetCursor+0x454>)
 8000cc8:	895b      	ldrh	r3, [r3, #10]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fdc4 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000cd0:	4b60      	ldr	r3, [pc, #384]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b5c      	ldr	r3, [pc, #368]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	4b5a      	ldr	r3, [pc, #360]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b58      	ldr	r3, [pc, #352]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <LCD_SetCursor+0x458>)
 8000cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cfc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000cfe:	4b55      	ldr	r3, [pc, #340]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4a51      	ldr	r2, [pc, #324]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	60d3      	str	r3, [r2, #12]
 8000d16:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d28:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000d2a:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	611a      	str	r2, [r3, #16]
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <LCD_SetCursor+0x454>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	121a      	asrs	r2, r3, #8
 8000d42:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4b40      	ldr	r3, [pc, #256]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d58:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <LCD_SetCursor+0x454>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	60d3      	str	r3, [r2, #12]
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <LCD_SetCursor+0x454>)
 8000d8c:	899b      	ldrh	r3, [r3, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fd62 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <LCD_SetCursor+0x458>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <LCD_SetCursor+0x458>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <LCD_SetCursor+0x458>)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <LCD_SetCursor+0x458>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <LCD_SetCursor+0x458>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <LCD_SetCursor+0x458>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	60d3      	str	r3, [r2, #12]
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <LCD_SetCursor+0x458>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <LCD_SetCursor+0x458>)
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <LCD_SetCursor+0x458>)
 8000de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <LCD_SetCursor+0x458>)
 8000df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <LCD_SetCursor+0x458>)
 8000df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <LCD_SetCursor+0x454>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	121a      	asrs	r2, r3, #8
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <LCD_SetCursor+0x454>)
 8000e30:	885b      	ldrh	r3, [r3, #2]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <LCD_SetCursor+0x45c>)
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	60d3      	str	r3, [r2, #12]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	611a      	str	r2, [r3, #16]
}
 8000e4e:	e097      	b.n	8000f80 <LCD_SetCursor+0x584>
 8000e50:	20000204 	.word	0x20000204
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000e5c:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	f245 5210 	movw	r2, #21776	; 0x5510
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d172      	bne.n	8000f4e <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000e68:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000e6a:	895b      	ldrh	r3, [r3, #10]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcf3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <LCD_SetCursor+0x594>)
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <LCD_SetCursor+0x590>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000ea2:	895b      	ldrh	r3, [r3, #10]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fcd5 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000eae:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <LCD_SetCursor+0x590>)
 8000eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <LCD_SetCursor+0x590>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <LCD_SetCursor+0x594>)
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	60d3      	str	r3, [r2, #12]
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000edc:	899b      	ldrh	r3, [r3, #12]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcba 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <LCD_SetCursor+0x590>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <LCD_SetCursor+0x590>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <LCD_SetCursor+0x594>)
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f14:	899b      	ldrh	r3, [r3, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fc9c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <LCD_SetCursor+0x594>)
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	60d3      	str	r3, [r2, #12]
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <LCD_SetCursor+0x590>)
 8000f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f4a:	611a      	str	r2, [r3, #16]
}
 8000f4c:	e018      	b.n	8000f80 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f50:	799b      	ldrb	r3, [r3, #6]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d106      	bne.n	8000f64 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f66:	895b      	ldrh	r3, [r3, #10]
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fcff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <LCD_SetCursor+0x58c>)
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	88ba      	ldrh	r2, [r7, #4]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fcf8 	bl	8000970 <LCD_WriteReg>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000204 	.word	0x20000204
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40010c00 	.word	0x40010c00

08000f94 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8000fa6:	4b78      	ldr	r3, [pc, #480]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fa8:	799b      	ldrb	r3, [r3, #6]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <LCD_Scan_Dir+0x32>
 8000fae:	4b76      	ldr	r3, [pc, #472]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	f646 0204 	movw	r2, #26628	; 0x6804
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d005      	beq.n	8000fc6 <LCD_Scan_Dir+0x32>
 8000fba:	4b73      	ldr	r3, [pc, #460]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d109      	bne.n	8000fda <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8000fc6:	4b70      	ldr	r3, [pc, #448]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fc8:	799b      	ldrb	r3, [r3, #6]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d134      	bne.n	8001038 <LCD_Scan_Dir+0xa4>
 8000fce:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f641 1263 	movw	r2, #6499	; 0x1963
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12e      	bne.n	8001038 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d82c      	bhi.n	800103a <LCD_Scan_Dir+0xa6>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <LCD_Scan_Dir+0x54>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001009 	.word	0x08001009
 8000fec:	0800100f 	.word	0x0800100f
 8000ff0:	08001015 	.word	0x08001015
 8000ff4:	0800101b 	.word	0x0800101b
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	08001027 	.word	0x08001027
 8001000:	0800102d 	.word	0x0800102d
 8001004:	08001033 	.word	0x08001033
		{
		case 0:
			dir = 6;
 8001008:	2306      	movs	r3, #6
 800100a:	71fb      	strb	r3, [r7, #7]
			break;
 800100c:	e015      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 800100e:	2307      	movs	r3, #7
 8001010:	71fb      	strb	r3, [r7, #7]
			break;
 8001012:	e012      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	71fb      	strb	r3, [r7, #7]
			break;
 8001018:	e00f      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 800101a:	2305      	movs	r3, #5
 800101c:	71fb      	strb	r3, [r7, #7]
			break;
 800101e:	e00c      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
			break;
 8001024:	e009      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	71fb      	strb	r3, [r7, #7]
			break;
 800102a:	e006      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 800102c:	2303      	movs	r3, #3
 800102e:	71fb      	strb	r3, [r7, #7]
			break;
 8001030:	e003      	b.n	800103a <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	71fb      	strb	r3, [r7, #7]
			break;
 8001036:	e000      	b.n	800103a <LCD_Scan_Dir+0xa6>
		}
	}
 8001038:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800103c:	889b      	ldrh	r3, [r3, #4]
 800103e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001042:	4293      	cmp	r3, r2
 8001044:	d018      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
 8001046:	4b50      	ldr	r3, [pc, #320]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	f646 0204 	movw	r2, #26628	; 0x6804
 800104e:	4293      	cmp	r3, r2
 8001050:	d012      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	f245 3210 	movw	r2, #21264	; 0x5310
 800105a:	4293      	cmp	r3, r2
 800105c:	d00c      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	f245 5210 	movw	r2, #21776	; 0x5510
 8001066:	4293      	cmp	r3, r2
 8001068:	d006      	beq.n	8001078 <LCD_Scan_Dir+0xe4>
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 824f 	bne.w	8001516 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b07      	cmp	r3, #7
 800107c:	d835      	bhi.n	80010ea <LCD_Scan_Dir+0x156>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <LCD_Scan_Dir+0xf0>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010eb 	.word	0x080010eb
 8001088:	080010a5 	.word	0x080010a5
 800108c:	080010af 	.word	0x080010af
 8001090:	080010b9 	.word	0x080010b9
 8001094:	080010c3 	.word	0x080010c3
 8001098:	080010cd 	.word	0x080010cd
 800109c:	080010d7 	.word	0x080010d7
 80010a0:	080010e1 	.word	0x080010e1
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010aa:	81fb      	strh	r3, [r7, #14]
			break;
 80010ac:	e01d      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	81fb      	strh	r3, [r7, #14]
			break;
 80010b6:	e018      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010be:	81fb      	strh	r3, [r7, #14]
			break;
 80010c0:	e013      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	81fb      	strh	r3, [r7, #14]
			break;
 80010ca:	e00e      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010d2:	81fb      	strh	r3, [r7, #14]
			break;
 80010d4:	e009      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80010dc:	81fb      	strh	r3, [r7, #14]
			break;
 80010de:	e004      	b.n	80010ea <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80010e6:	81fb      	strh	r3, [r7, #14]
			break;
 80010e8:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	f245 5210 	movw	r2, #21776	; 0x5510
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d103      	bne.n	80010fe <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80010f6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80010fa:	81bb      	strh	r3, [r7, #12]
 80010fc:	e001      	b.n	8001102 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 80010fe:	2336      	movs	r3, #54	; 0x36
 8001100:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	f245 3210 	movw	r2, #21264	; 0x5310
 800110a:	4293      	cmp	r3, r2
 800110c:	d00f      	beq.n	800112e <LCD_Scan_Dir+0x19a>
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	f245 5210 	movw	r2, #21776	; 0x5510
 8001116:	4293      	cmp	r3, r2
 8001118:	d009      	beq.n	800112e <LCD_Scan_Dir+0x19a>
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800111c:	889b      	ldrh	r3, [r3, #4]
 800111e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001122:	4293      	cmp	r3, r2
 8001124:	d003      	beq.n	800112e <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	f646 0204 	movw	r2, #26628	; 0x6804
 8001136:	4293      	cmp	r3, r2
 8001138:	d103      	bne.n	8001142 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800113a:	89fb      	ldrh	r3, [r7, #14]
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001142:	89fa      	ldrh	r2, [r7, #14]
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fc11 	bl	8000970 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	f641 1263 	movw	r2, #6499	; 0x1963
 8001156:	4293      	cmp	r3, r2
 8001158:	d028      	beq.n	80011ac <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	f003 0320 	and.w	r3, r3, #32
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800116a:	885b      	ldrh	r3, [r3, #2]
 800116c:	429a      	cmp	r2, r3
 800116e:	d21d      	bcs.n	80011ac <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001178:	885a      	ldrh	r2, [r3, #2]
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 800117c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800117e:	4a02      	ldr	r2, [pc, #8]	; (8001188 <LCD_Scan_Dir+0x1f4>)
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	8053      	strh	r3, [r2, #2]
 8001184:	e012      	b.n	80011ac <LCD_Scan_Dir+0x218>
 8001186:	bf00      	nop
 8001188:	20000204 	.word	0x20000204
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 800118c:	4b7f      	ldr	r3, [pc, #508]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	4b7e      	ldr	r3, [pc, #504]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	429a      	cmp	r2, r3
 8001196:	d909      	bls.n	80011ac <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001198:	4b7c      	ldr	r3, [pc, #496]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800119e:	4b7b      	ldr	r3, [pc, #492]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011a0:	885a      	ldrh	r2, [r3, #2]
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011a4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80011a6:	4a79      	ldr	r2, [pc, #484]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011a8:	897b      	ldrh	r3, [r7, #10]
 80011aa:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80011ac:	4b77      	ldr	r3, [pc, #476]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	f245 5210 	movw	r2, #21776	; 0x5510
 80011b4:	4293      	cmp	r3, r2
 80011b6:	f040 80ef 	bne.w	8001398 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80011ba:	4b74      	ldr	r3, [pc, #464]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011bc:	895b      	ldrh	r3, [r3, #10]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fb4a 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011c4:	4b72      	ldr	r3, [pc, #456]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	4b70      	ldr	r3, [pc, #448]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <LCD_Scan_Dir+0x400>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80011ee:	4b67      	ldr	r3, [pc, #412]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80011f0:	895b      	ldrh	r3, [r3, #10]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb2e 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80011fc:	4b64      	ldr	r3, [pc, #400]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80011fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	4b61      	ldr	r3, [pc, #388]	; (8001394 <LCD_Scan_Dir+0x400>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001226:	4b59      	ldr	r3, [pc, #356]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001228:	895b      	ldrh	r3, [r3, #10]
 800122a:	3302      	adds	r3, #2
 800122c:	b29b      	uxth	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fb12 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001234:	4b56      	ldr	r3, [pc, #344]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	4b54      	ldr	r3, [pc, #336]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	4b51      	ldr	r3, [pc, #324]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	121a      	asrs	r2, r3, #8
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <LCD_Scan_Dir+0x400>)
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	4b4e      	ldr	r3, [pc, #312]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800125e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001262:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001264:	4b49      	ldr	r3, [pc, #292]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001266:	895b      	ldrh	r3, [r3, #10]
 8001268:	3303      	adds	r3, #3
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff faf3 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800127c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	4b42      	ldr	r3, [pc, #264]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a42      	ldr	r2, [pc, #264]	; (8001394 <LCD_Scan_Dir+0x400>)
 800128a:	b2db      	uxtb	r3, r3
 800128c:	60d3      	str	r3, [r2, #12]
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80012a4:	899b      	ldrh	r3, [r3, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fad6 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012ac:	4b38      	ldr	r3, [pc, #224]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <LCD_Scan_Dir+0x400>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	611a      	str	r2, [r3, #16]
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <LCD_Scan_Dir+0x3f8>)
 80012d8:	899b      	ldrh	r3, [r3, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff faba 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <LCD_Scan_Dir+0x400>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <LCD_Scan_Dir+0x3f8>)
 8001310:	899b      	ldrh	r3, [r3, #12]
 8001312:	3302      	adds	r3, #2
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fa9e 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800131e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800132e:	885b      	ldrh	r3, [r3, #2]
 8001330:	3b01      	subs	r3, #1
 8001332:	121a      	asrs	r2, r3, #8
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <LCD_Scan_Dir+0x400>)
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800134e:	899b      	ldrh	r3, [r3, #12]
 8001350:	3303      	adds	r3, #3
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fa7f 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800135c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <LCD_Scan_Dir+0x3f8>)
 800136c:	885b      	ldrh	r3, [r3, #2]
 800136e:	3b01      	subs	r3, #1
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <LCD_Scan_Dir+0x400>)
 8001372:	b2db      	uxtb	r3, r3
 8001374:	60d3      	str	r3, [r2, #12]
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <LCD_Scan_Dir+0x3fc>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800138a:	e10b      	b.n	80015a4 <LCD_Scan_Dir+0x610>
 800138c:	20000204 	.word	0x20000204
 8001390:	40011000 	.word	0x40011000
 8001394:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001398:	4b84      	ldr	r3, [pc, #528]	; (80015ac <LCD_Scan_Dir+0x618>)
 800139a:	895b      	ldrh	r3, [r3, #10]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fa5b 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013a2:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	4b80      	ldr	r3, [pc, #512]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80013cc:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80013f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <LCD_Scan_Dir+0x618>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	3b01      	subs	r3, #1
 800140c:	121a      	asrs	r2, r3, #8
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <LCD_Scan_Dir+0x620>)
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001424:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001426:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <LCD_Scan_Dir+0x618>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <LCD_Scan_Dir+0x620>)
 800143e:	b2db      	uxtb	r3, r3
 8001440:	60d3      	str	r3, [r2, #12]
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001454:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001456:	4b55      	ldr	r3, [pc, #340]	; (80015ac <LCD_Scan_Dir+0x618>)
 8001458:	899b      	ldrh	r3, [r3, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f9fc 	bl	8000858 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <LCD_Scan_Dir+0x620>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001488:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <LCD_Scan_Dir+0x620>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <LCD_Scan_Dir+0x618>)
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	121a      	asrs	r2, r3, #8
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <LCD_Scan_Dir+0x618>)
 80014f6:	885b      	ldrh	r3, [r3, #2]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <LCD_Scan_Dir+0x620>)
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	60d3      	str	r3, [r2, #12]
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <LCD_Scan_Dir+0x61c>)
 800150e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001512:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001514:	e046      	b.n	80015a4 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b07      	cmp	r3, #7
 800151a:	d836      	bhi.n	800158a <LCD_Scan_Dir+0x5f6>
 800151c:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <LCD_Scan_Dir+0x590>)
 800151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001522:	bf00      	nop
 8001524:	08001545 	.word	0x08001545
 8001528:	0800154f 	.word	0x0800154f
 800152c:	08001559 	.word	0x08001559
 8001530:	0800158b 	.word	0x0800158b
 8001534:	08001563 	.word	0x08001563
 8001538:	0800156d 	.word	0x0800156d
 800153c:	08001577 	.word	0x08001577
 8001540:	08001581 	.word	0x08001581
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001544:	89fb      	ldrh	r3, [r7, #14]
 8001546:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800154a:	81fb      	strh	r3, [r7, #14]
			break;
 800154c:	e01d      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	81fb      	strh	r3, [r7, #14]
			break;
 8001556:	e018      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	81fb      	strh	r3, [r7, #14]
			break;
 8001560:	e013      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001568:	81fb      	strh	r3, [r7, #14]
			break;
 800156a:	e00e      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001572:	81fb      	strh	r3, [r7, #14]
			break;
 8001574:	e009      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	f043 0318 	orr.w	r3, r3, #24
 800157c:	81fb      	strh	r3, [r7, #14]
			break;
 800157e:	e004      	b.n	800158a <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	81fb      	strh	r3, [r7, #14]
			break;
 8001588:	bf00      	nop
		}
		dirreg = 0X03;
 800158a:	2303      	movs	r3, #3
 800158c:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001594:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001596:	89fa      	ldrh	r2, [r7, #14]
 8001598:	89bb      	ldrh	r3, [r7, #12]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f9e7 	bl	8000970 <LCD_WriteReg>
	}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000204 	.word	0x20000204
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40010c00 	.word	0x40010c00

080015b8 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	80fb      	strh	r3, [r7, #6]
 80015c4:	4613      	mov	r3, r2
 80015c6:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 80015c8:	88ba      	ldrh	r2, [r7, #4]
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fa14 	bl	80009fc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 80015d4:	f7ff fa06 	bl	80009e4 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <LCD_DrawPoint+0x54>)
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <LCD_DrawPoint+0x54>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <LCD_DrawPoint+0x58>)
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <LCD_DrawPoint+0x5c>)
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <LCD_DrawPoint+0x54>)
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <LCD_DrawPoint+0x54>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <LCD_DrawPoint+0x54>)
 80015fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001602:	611a      	str	r2, [r3, #16]
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40011000 	.word	0x40011000
 8001610:	2000009c 	.word	0x2000009c
 8001614:	40010c00 	.word	0x40010c00

08001618 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
 8001622:	460b      	mov	r3, r1
 8001624:	80bb      	strh	r3, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800162a:	4b75      	ldr	r3, [pc, #468]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001632:	4293      	cmp	r3, r2
 8001634:	d005      	beq.n	8001642 <LCD_Fast_DrawPoint+0x2a>
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	f245 3210 	movw	r2, #21264	; 0x5310
 800163e:	4293      	cmp	r3, r2
 8001640:	d164      	bne.n	800170c <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 8001644:	895b      	ldrh	r3, [r3, #10]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f906 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800164c:	4b6d      	ldr	r3, [pc, #436]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800164e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b69      	ldr	r3, [pc, #420]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	4b65      	ldr	r3, [pc, #404]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	4b64      	ldr	r3, [pc, #400]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800167c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	4b60      	ldr	r3, [pc, #384]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 800168e:	b2db      	uxtb	r3, r3
 8001690:	60d3      	str	r3, [r2, #12]
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80016a6:	4b56      	ldr	r3, [pc, #344]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 80016a8:	899b      	ldrh	r3, [r3, #12]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f8d4 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	611a      	str	r2, [r3, #16]
 80016b8:	4b52      	ldr	r3, [pc, #328]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b50      	ldr	r3, [pc, #320]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	4a45      	ldr	r2, [pc, #276]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	60d3      	str	r3, [r2, #12]
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	e1e6      	b.n	8001ada <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 800170c:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	f245 5210 	movw	r2, #21776	; 0x5510
 8001714:	4293      	cmp	r3, r2
 8001716:	d179      	bne.n	800180c <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001718:	4b39      	ldr	r3, [pc, #228]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 800171a:	895b      	ldrh	r3, [r3, #10]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff f89b 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	4b30      	ldr	r3, [pc, #192]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800174a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 8001752:	895b      	ldrh	r3, [r3, #10]
 8001754:	3301      	adds	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f87d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4a25      	ldr	r2, [pc, #148]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 8001772:	b2db      	uxtb	r3, r3
 8001774:	60d3      	str	r3, [r2, #12]
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 800178c:	899b      	ldrh	r3, [r3, #12]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f862 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 8001796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <LCD_Fast_DrawPoint+0x1e8>)
 80017c4:	899b      	ldrh	r3, [r3, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f844 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <LCD_Fast_DrawPoint+0x1f0>)
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	60d3      	str	r3, [r2, #12]
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <LCD_Fast_DrawPoint+0x1ec>)
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	e16d      	b.n	8001ada <LCD_Fast_DrawPoint+0x4c2>
 80017fe:	bf00      	nop
 8001800:	20000204 	.word	0x20000204
 8001804:	40011000 	.word	0x40011000
 8001808:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <LCD_Fast_DrawPoint+0x398>)
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	f641 1263 	movw	r2, #6499	; 0x1963
 8001814:	4293      	cmp	r3, r2
 8001816:	f040 80d1 	bne.w	80019bc <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <LCD_Fast_DrawPoint+0x398>)
 800181c:	799b      	ldrb	r3, [r3, #6]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <LCD_Fast_DrawPoint+0x398>)
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001830:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <LCD_Fast_DrawPoint+0x398>)
 8001832:	895b      	ldrh	r3, [r3, #10]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f80f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800183a:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800183c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001856:	2280      	movs	r2, #128	; 0x80
 8001858:	615a      	str	r2, [r3, #20]
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800186a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4a4f      	ldr	r2, [pc, #316]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 800187c:	b2db      	uxtb	r3, r3
 800187e:	60d3      	str	r3, [r2, #12]
 8001880:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80018c2:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	60d3      	str	r3, [r2, #12]
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <LCD_Fast_DrawPoint+0x398>)
 80018f0:	899b      	ldrh	r3, [r3, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe ffb0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80018fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 800193a:	b2db      	uxtb	r3, r3
 800193c:	60d3      	str	r3, [r2, #12]
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001950:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 8001982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800198a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <LCD_Fast_DrawPoint+0x3a0>)
 8001994:	b2db      	uxtb	r3, r3
 8001996:	60d3      	str	r3, [r2, #12]
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	615a      	str	r2, [r3, #20]
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <LCD_Fast_DrawPoint+0x39c>)
 80019a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	e095      	b.n	8001ada <LCD_Fast_DrawPoint+0x4c2>
 80019ae:	bf00      	nop
 80019b0:	20000204 	.word	0x20000204
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 80019bc:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 80019be:	889b      	ldrh	r3, [r3, #4]
 80019c0:	f646 0204 	movw	r2, #26628	; 0x6804
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d16f      	bne.n	8001aa8 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 80019ca:	799b      	ldrb	r3, [r3, #6]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80019de:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 80019e0:	895b      	ldrh	r3, [r3, #10]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe ff38 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80019e8:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 80019f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <LCD_Fast_DrawPoint+0x528>)
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001a16:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <LCD_Fast_DrawPoint+0x528>)
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	60d3      	str	r3, [r2, #12]
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 8001a44:	899b      	ldrh	r3, [r3, #12]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe ff06 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a4c:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <LCD_Fast_DrawPoint+0x528>)
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	4a2c      	ldr	r2, [pc, #176]	; (8001b40 <LCD_Fast_DrawPoint+0x528>)
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	60d3      	str	r3, [r2, #12]
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	e018      	b.n	8001ada <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 8001aaa:	799b      	ldrb	r3, [r3, #6]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 8001ac0:	895b      	ldrh	r3, [r3, #10]
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe ff52 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 8001ace:	899b      	ldrh	r3, [r3, #12]
 8001ad0:	88ba      	ldrh	r2, [r7, #4]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe ff4b 	bl	8000970 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <LCD_Fast_DrawPoint+0x520>)
 8001aec:	891a      	ldrh	r2, [r3, #8]
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <LCD_Fast_DrawPoint+0x528>)
 8001af0:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b04:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001b08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LCD_Fast_DrawPoint+0x528>)
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	60d3      	str	r3, [r2, #12]
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <LCD_Fast_DrawPoint+0x524>)
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	611a      	str	r2, [r3, #16]
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000204 	.word	0x20000204
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	40010c00 	.word	0x40010c00
 8001b44:	00000000 	.word	0x00000000

08001b48 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001b52:	20be      	movs	r0, #190	; 0xbe
 8001b54:	f7fe fe80 	bl	8000858 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001b58:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <LCD_SSD_BackLightSet+0x144>)
 8001b6a:	2205      	movs	r2, #5
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b76:	2280      	movs	r2, #128	; 0x80
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b80:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fdd5 	bl	8000744 <__aeabi_i2d>
 8001b9a:	a339      	add	r3, pc, #228	; (adr r3, 8001c80 <LCD_SSD_BackLightSet+0x138>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fb54 	bl	800024c <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4c38      	ldr	r4, [pc, #224]	; (8001c8c <LCD_SSD_BackLightSet+0x144>)
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe fe33 	bl	8000818 <__aeabi_d2uiz>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	60e3      	str	r3, [r4, #12]
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	615a      	str	r2, [r3, #20]
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <LCD_SSD_BackLightSet+0x144>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <LCD_SSD_BackLightSet+0x144>)
 8001c06:	22ff      	movs	r2, #255	; 0xff
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c24:	611a      	str	r2, [r3, #16]
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <LCD_SSD_BackLightSet+0x144>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <LCD_SSD_BackLightSet+0x144>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <LCD_SSD_BackLightSet+0x140>)
 8001c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c70:	611a      	str	r2, [r3, #16]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	66666666 	.word	0x66666666
 8001c84:	40046666 	.word	0x40046666
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40010c00 	.word	0x40010c00

08001c90 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d177      	bne.n	8001d90 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001ca0:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001ca8:	22f0      	movs	r2, #240	; 0xf0
 8001caa:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001cac:	4b7d      	ldr	r3, [pc, #500]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cb2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cb4:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cb6:	889b      	ldrh	r3, [r3, #4]
 8001cb8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00b      	beq.n	8001cd8 <LCD_Display_Dir+0x48>
 8001cc0:	4b78      	ldr	r3, [pc, #480]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cc2:	889b      	ldrh	r3, [r3, #4]
 8001cc4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d005      	beq.n	8001cd8 <LCD_Display_Dir+0x48>
 8001ccc:	4b75      	ldr	r3, [pc, #468]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cce:	889b      	ldrh	r3, [r3, #4]
 8001cd0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d11e      	bne.n	8001d16 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001cd8:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cda:	222c      	movs	r2, #44	; 0x2c
 8001cdc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001cde:	4b71      	ldr	r3, [pc, #452]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001ce0:	222a      	movs	r2, #42	; 0x2a
 8001ce2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001ce6:	222b      	movs	r2, #43	; 0x2b
 8001ce8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001cea:	4b6e      	ldr	r3, [pc, #440]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cec:	889b      	ldrh	r3, [r3, #4]
 8001cee:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d006      	beq.n	8001d04 <LCD_Display_Dir+0x74>
 8001cf6:	4b6b      	ldr	r3, [pc, #428]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001cf8:	889b      	ldrh	r3, [r3, #4]
 8001cfa:	f245 3210 	movw	r2, #21264	; 0x5310
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	f040 80c7 	bne.w	8001e92 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001d04:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d0a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001d0c:	4b65      	ldr	r3, [pc, #404]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d12:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d14:	e0bd      	b.n	8001e92 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d114      	bne.n	8001d4c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001d22:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d24:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d28:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001d2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d2c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d30:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d34:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d38:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d40:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d48:	805a      	strh	r2, [r3, #2]
 8001d4a:	e0a3      	b.n	8001e94 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001d4c:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d4e:	889b      	ldrh	r3, [r3, #4]
 8001d50:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001d58:	4b52      	ldr	r3, [pc, #328]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d5a:	222c      	movs	r2, #44	; 0x2c
 8001d5c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d60:	222b      	movs	r2, #43	; 0x2b
 8001d62:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d66:	222a      	movs	r2, #42	; 0x2a
 8001d68:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d70:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d78:	805a      	strh	r2, [r3, #2]
 8001d7a:	e08b      	b.n	8001e94 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d7e:	2222      	movs	r2, #34	; 0x22
 8001d80:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d84:	2220      	movs	r2, #32
 8001d86:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001d88:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d8a:	2221      	movs	r2, #33	; 0x21
 8001d8c:	819a      	strh	r2, [r3, #12]
 8001d8e:	e081      	b.n	8001e94 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001d90:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001d96:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001d98:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d9c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001da0:	22f0      	movs	r2, #240	; 0xf0
 8001da2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001da6:	889b      	ldrh	r3, [r3, #4]
 8001da8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d005      	beq.n	8001dbc <LCD_Display_Dir+0x12c>
 8001db0:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001db2:	889b      	ldrh	r3, [r3, #4]
 8001db4:	f245 3210 	movw	r2, #21264	; 0x5310
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d109      	bne.n	8001dd0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dbe:	222c      	movs	r2, #44	; 0x2c
 8001dc0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dc4:	222a      	movs	r2, #42	; 0x2a
 8001dc6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dca:	222b      	movs	r2, #43	; 0x2b
 8001dcc:	819a      	strh	r2, [r3, #12]
 8001dce:	e04b      	b.n	8001e68 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dd2:	889b      	ldrh	r3, [r3, #4]
 8001dd4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d109      	bne.n	8001df0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dde:	222c      	movs	r2, #44	; 0x2c
 8001de0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001de4:	222b      	movs	r2, #43	; 0x2b
 8001de6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dea:	222a      	movs	r2, #42	; 0x2a
 8001dec:	819a      	strh	r2, [r3, #12]
 8001dee:	e03b      	b.n	8001e68 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001df2:	889b      	ldrh	r3, [r3, #4]
 8001df4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d114      	bne.n	8001e26 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001dfe:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001e02:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e06:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e0a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e0e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001e12:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e1a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e22:	805a      	strh	r2, [r3, #2]
 8001e24:	e020      	b.n	8001e68 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e28:	889b      	ldrh	r3, [r3, #4]
 8001e2a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d111      	bne.n	8001e56 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e34:	222c      	movs	r2, #44	; 0x2c
 8001e36:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e3a:	222a      	movs	r2, #42	; 0x2a
 8001e3c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e40:	222b      	movs	r2, #43	; 0x2b
 8001e42:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e4a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e52:	805a      	strh	r2, [r3, #2]
 8001e54:	e008      	b.n	8001e68 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e58:	2222      	movs	r2, #34	; 0x22
 8001e5a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e5e:	2221      	movs	r2, #33	; 0x21
 8001e60:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e64:	2220      	movs	r2, #32
 8001e66:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d005      	beq.n	8001e80 <LCD_Display_Dir+0x1f0>
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d109      	bne.n	8001e94 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e86:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <LCD_Display_Dir+0x214>)
 8001e8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e8e:	805a      	strh	r2, [r3, #2]
 8001e90:	e000      	b.n	8001e94 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e92:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff f87d 	bl	8000f94 <LCD_Scan_Dir>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000204 	.word	0x20000204

08001ea8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001eae:	4b90      	ldr	r3, [pc, #576]	; (80020f0 <LCD_Init+0x248>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a8f      	ldr	r2, [pc, #572]	; (80020f0 <LCD_Init+0x248>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b8d      	ldr	r3, [pc, #564]	; (80020f0 <LCD_Init+0x248>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001ec6:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <LCD_Init+0x248>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a89      	ldr	r2, [pc, #548]	; (80020f0 <LCD_Init+0x248>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b87      	ldr	r3, [pc, #540]	; (80020f0 <LCD_Init+0x248>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001ede:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001ee2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001eec:	2303      	movs	r3, #3
 8001eee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	487f      	ldr	r0, [pc, #508]	; (80020f4 <LCD_Init+0x24c>)
 8001ef8:	f007 f8bc 	bl	8009074 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f00:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	4619      	mov	r1, r3
 8001f08:	487b      	ldr	r0, [pc, #492]	; (80020f8 <LCD_Init+0x250>)
 8001f0a:	f007 f8b3 	bl	8009074 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001f0e:	2032      	movs	r0, #50	; 0x32
 8001f10:	f006 fafc 	bl	800850c <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001f14:	2101      	movs	r1, #1
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7fe fd2a 	bl	8000970 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001f1c:	2032      	movs	r0, #50	; 0x32
 8001f1e:	f006 faf5 	bl	800850c <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7fe fd4e 	bl	80009c4 <LCD_ReadReg>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b73      	ldr	r3, [pc, #460]	; (80020fc <LCD_Init+0x254>)
 8001f2e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001f30:	4b72      	ldr	r3, [pc, #456]	; (80020fc <LCD_Init+0x254>)
 8001f32:	889b      	ldrh	r3, [r3, #4]
 8001f34:	2bfe      	cmp	r3, #254	; 0xfe
 8001f36:	d90b      	bls.n	8001f50 <LCD_Init+0xa8>
 8001f38:	4b70      	ldr	r3, [pc, #448]	; (80020fc <LCD_Init+0x254>)
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d005      	beq.n	8001f50 <LCD_Init+0xa8>
 8001f44:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <LCD_Init+0x254>)
 8001f46:	889b      	ldrh	r3, [r3, #4]
 8001f48:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001f4c:	f040 80c8 	bne.w	80020e0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001f50:	20d3      	movs	r0, #211	; 0xd3
 8001f52:	f7fe fc81 	bl	8000858 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001f56:	f7fe fcc7 	bl	80008e8 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001f5a:	f7fe fcc5 	bl	80008e8 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001f5e:	f7fe fcc3 	bl	80008e8 <LCD_RD_DATA>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b65      	ldr	r3, [pc, #404]	; (80020fc <LCD_Init+0x254>)
 8001f68:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <LCD_Init+0x254>)
 8001f6c:	889b      	ldrh	r3, [r3, #4]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	4b62      	ldr	r3, [pc, #392]	; (80020fc <LCD_Init+0x254>)
 8001f74:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001f76:	f7fe fcb7 	bl	80008e8 <LCD_RD_DATA>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	; (80020fc <LCD_Init+0x254>)
 8001f80:	889b      	ldrh	r3, [r3, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <LCD_Init+0x254>)
 8001f88:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	; (80020fc <LCD_Init+0x254>)
 8001f8c:	889b      	ldrh	r3, [r3, #4]
 8001f8e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f000 80a4 	beq.w	80020e0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001f98:	20bf      	movs	r0, #191	; 0xbf
 8001f9a:	f7fe fc5d 	bl	8000858 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001f9e:	f7fe fca3 	bl	80008e8 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001fa2:	f7fe fca1 	bl	80008e8 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001fa6:	f7fe fc9f 	bl	80008e8 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001faa:	f7fe fc9d 	bl	80008e8 <LCD_RD_DATA>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b52      	ldr	r3, [pc, #328]	; (80020fc <LCD_Init+0x254>)
 8001fb4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <LCD_Init+0x254>)
 8001fb8:	889b      	ldrh	r3, [r3, #4]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <LCD_Init+0x254>)
 8001fc0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001fc2:	f7fe fc91 	bl	80008e8 <LCD_RD_DATA>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <LCD_Init+0x254>)
 8001fcc:	889b      	ldrh	r3, [r3, #4]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <LCD_Init+0x254>)
 8001fd4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001fd6:	4b49      	ldr	r3, [pc, #292]	; (80020fc <LCD_Init+0x254>)
 8001fd8:	889b      	ldrh	r3, [r3, #4]
 8001fda:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d07e      	beq.n	80020e0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001fe2:	20d4      	movs	r0, #212	; 0xd4
 8001fe4:	f7fe fc38 	bl	8000858 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001fe8:	f7fe fc7e 	bl	80008e8 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001fec:	f7fe fc7c 	bl	80008e8 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001ff0:	f7fe fc7a 	bl	80008e8 <LCD_RD_DATA>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b40      	ldr	r3, [pc, #256]	; (80020fc <LCD_Init+0x254>)
 8001ffa:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <LCD_Init+0x254>)
 8001ffe:	889b      	ldrh	r3, [r3, #4]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <LCD_Init+0x254>)
 8002006:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002008:	f7fe fc6e 	bl	80008e8 <LCD_RD_DATA>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <LCD_Init+0x254>)
 8002012:	889b      	ldrh	r3, [r3, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <LCD_Init+0x254>)
 800201a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <LCD_Init+0x254>)
 800201e:	889b      	ldrh	r3, [r3, #4]
 8002020:	f245 3210 	movw	r2, #21264	; 0x5310
 8002024:	4293      	cmp	r3, r2
 8002026:	d05b      	beq.n	80020e0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002028:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800202c:	f7fe fc14 	bl	8000858 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002030:	f7fe fc5a 	bl	80008e8 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002034:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002038:	f7fe fc0e 	bl	8000858 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800203c:	f7fe fc54 	bl	80008e8 <LCD_RD_DATA>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <LCD_Init+0x254>)
 8002046:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <LCD_Init+0x254>)
 800204a:	889b      	ldrh	r3, [r3, #4]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <LCD_Init+0x254>)
 8002052:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002054:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002058:	f7fe fbfe 	bl	8000858 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800205c:	f7fe fc44 	bl	80008e8 <LCD_RD_DATA>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <LCD_Init+0x254>)
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	4313      	orrs	r3, r2
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <LCD_Init+0x254>)
 800206e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <LCD_Init+0x254>)
 8002072:	889b      	ldrh	r3, [r3, #4]
 8002074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002078:	d103      	bne.n	8002082 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <LCD_Init+0x254>)
 800207c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002080:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <LCD_Init+0x254>)
 8002084:	889b      	ldrh	r3, [r3, #4]
 8002086:	f245 5210 	movw	r2, #21776	; 0x5510
 800208a:	4293      	cmp	r3, r2
 800208c:	d028      	beq.n	80020e0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800208e:	20a1      	movs	r0, #161	; 0xa1
 8002090:	f7fe fbe2 	bl	8000858 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002094:	f7fe fc28 	bl	80008e8 <LCD_RD_DATA>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <LCD_Init+0x254>)
 800209e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80020a0:	f7fe fc22 	bl	80008e8 <LCD_RD_DATA>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <LCD_Init+0x254>)
 80020aa:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <LCD_Init+0x254>)
 80020ae:	889b      	ldrh	r3, [r3, #4]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <LCD_Init+0x254>)
 80020b6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80020b8:	f7fe fc16 	bl	80008e8 <LCD_RD_DATA>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <LCD_Init+0x254>)
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <LCD_Init+0x254>)
 80020ca:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <LCD_Init+0x254>)
 80020ce:	889b      	ldrh	r3, [r3, #4]
 80020d0:	f245 7261 	movw	r2, #22369	; 0x5761
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d103      	bne.n	80020e0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <LCD_Init+0x254>)
 80020da:	f641 1263 	movw	r2, #6499	; 0x1963
 80020de:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <LCD_Init+0x254>)
 80020e2:	889b      	ldrh	r3, [r3, #4]
 80020e4:	f249 3241 	movw	r2, #37697	; 0x9341
 80020e8:	4293      	cmp	r3, r2
 80020ea:	f040 811f 	bne.w	800232c <LCD_Init+0x484>
 80020ee:	e007      	b.n	8002100 <LCD_Init+0x258>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40011000 	.word	0x40011000
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	20000204 	.word	0x20000204
			{
		LCD_WR_REG(0xCF);
 8002100:	20cf      	movs	r0, #207	; 0xcf
 8002102:	f7fe fba9 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fbca 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 800210c:	20c1      	movs	r0, #193	; 0xc1
 800210e:	f7fe fbc7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8002112:	2030      	movs	r0, #48	; 0x30
 8002114:	f7fe fbc4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002118:	20ed      	movs	r0, #237	; 0xed
 800211a:	f7fe fb9d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 800211e:	2064      	movs	r0, #100	; 0x64
 8002120:	f7fe fbbe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002124:	2003      	movs	r0, #3
 8002126:	f7fe fbbb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 800212a:	2012      	movs	r0, #18
 800212c:	f7fe fbb8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002130:	2081      	movs	r0, #129	; 0x81
 8002132:	f7fe fbb5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002136:	20e8      	movs	r0, #232	; 0xe8
 8002138:	f7fe fb8e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 800213c:	2085      	movs	r0, #133	; 0x85
 800213e:	f7fe fbaf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002142:	2010      	movs	r0, #16
 8002144:	f7fe fbac 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002148:	207a      	movs	r0, #122	; 0x7a
 800214a:	f7fe fba9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800214e:	20cb      	movs	r0, #203	; 0xcb
 8002150:	f7fe fb82 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002154:	2039      	movs	r0, #57	; 0x39
 8002156:	f7fe fba3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800215a:	202c      	movs	r0, #44	; 0x2c
 800215c:	f7fe fba0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002160:	2000      	movs	r0, #0
 8002162:	f7fe fb9d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002166:	2034      	movs	r0, #52	; 0x34
 8002168:	f7fe fb9a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800216c:	2002      	movs	r0, #2
 800216e:	f7fe fb97 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002172:	20f7      	movs	r0, #247	; 0xf7
 8002174:	f7fe fb70 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002178:	2020      	movs	r0, #32
 800217a:	f7fe fb91 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800217e:	20ea      	movs	r0, #234	; 0xea
 8002180:	f7fe fb6a 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe fb8b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fb88 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002190:	20c0      	movs	r0, #192	; 0xc0
 8002192:	f7fe fb61 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002196:	201b      	movs	r0, #27
 8002198:	f7fe fb82 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800219c:	20c1      	movs	r0, #193	; 0xc1
 800219e:	f7fe fb5b 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7fe fb7c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80021a8:	20c5      	movs	r0, #197	; 0xc5
 80021aa:	f7fe fb55 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80021ae:	2030      	movs	r0, #48	; 0x30
 80021b0:	f7fe fb76 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80021b4:	2030      	movs	r0, #48	; 0x30
 80021b6:	f7fe fb73 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80021ba:	20c7      	movs	r0, #199	; 0xc7
 80021bc:	f7fe fb4c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80021c0:	20b7      	movs	r0, #183	; 0xb7
 80021c2:	f7fe fb6d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80021c6:	2036      	movs	r0, #54	; 0x36
 80021c8:	f7fe fb46 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80021cc:	2048      	movs	r0, #72	; 0x48
 80021ce:	f7fe fb67 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80021d2:	203a      	movs	r0, #58	; 0x3a
 80021d4:	f7fe fb40 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80021d8:	2055      	movs	r0, #85	; 0x55
 80021da:	f7fe fb61 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80021de:	20b1      	movs	r0, #177	; 0xb1
 80021e0:	f7fe fb3a 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe fb5b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80021ea:	201a      	movs	r0, #26
 80021ec:	f7fe fb58 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80021f0:	20b6      	movs	r0, #182	; 0xb6
 80021f2:	f7fe fb31 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80021f6:	200a      	movs	r0, #10
 80021f8:	f7fe fb52 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80021fc:	20a2      	movs	r0, #162	; 0xa2
 80021fe:	f7fe fb4f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8002202:	20f2      	movs	r0, #242	; 0xf2
 8002204:	f7fe fb28 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fb49 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 800220e:	2026      	movs	r0, #38	; 0x26
 8002210:	f7fe fb22 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002214:	2001      	movs	r0, #1
 8002216:	f7fe fb43 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 800221a:	20e0      	movs	r0, #224	; 0xe0
 800221c:	f7fe fb1c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002220:	200f      	movs	r0, #15
 8002222:	f7fe fb3d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002226:	202a      	movs	r0, #42	; 0x2a
 8002228:	f7fe fb3a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 800222c:	2028      	movs	r0, #40	; 0x28
 800222e:	f7fe fb37 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002232:	2008      	movs	r0, #8
 8002234:	f7fe fb34 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002238:	200e      	movs	r0, #14
 800223a:	f7fe fb31 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800223e:	2008      	movs	r0, #8
 8002240:	f7fe fb2e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002244:	2054      	movs	r0, #84	; 0x54
 8002246:	f7fe fb2b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800224a:	20a9      	movs	r0, #169	; 0xa9
 800224c:	f7fe fb28 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002250:	2043      	movs	r0, #67	; 0x43
 8002252:	f7fe fb25 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002256:	200a      	movs	r0, #10
 8002258:	f7fe fb22 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800225c:	200f      	movs	r0, #15
 800225e:	f7fe fb1f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002262:	2000      	movs	r0, #0
 8002264:	f7fe fb1c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fb19 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800226e:	2000      	movs	r0, #0
 8002270:	f7fe fb16 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f7fe fb13 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800227a:	20e1      	movs	r0, #225	; 0xe1
 800227c:	f7fe faec 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f7fe fb0d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002286:	2015      	movs	r0, #21
 8002288:	f7fe fb0a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800228c:	2017      	movs	r0, #23
 800228e:	f7fe fb07 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002292:	2007      	movs	r0, #7
 8002294:	f7fe fb04 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002298:	2011      	movs	r0, #17
 800229a:	f7fe fb01 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800229e:	2006      	movs	r0, #6
 80022a0:	f7fe fafe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80022a4:	202b      	movs	r0, #43	; 0x2b
 80022a6:	f7fe fafb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80022aa:	2056      	movs	r0, #86	; 0x56
 80022ac:	f7fe faf8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80022b0:	203c      	movs	r0, #60	; 0x3c
 80022b2:	f7fe faf5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80022b6:	2005      	movs	r0, #5
 80022b8:	f7fe faf2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80022bc:	2010      	movs	r0, #16
 80022be:	f7fe faef 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f7fe faec 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80022c8:	203f      	movs	r0, #63	; 0x3f
 80022ca:	f7fe fae9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80022ce:	203f      	movs	r0, #63	; 0x3f
 80022d0:	f7fe fae6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80022d4:	200f      	movs	r0, #15
 80022d6:	f7fe fae3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80022da:	202b      	movs	r0, #43	; 0x2b
 80022dc:	f7fe fabc 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7fe fadd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7fe fada 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7fe fad7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80022f2:	203f      	movs	r0, #63	; 0x3f
 80022f4:	f7fe fad4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80022f8:	202a      	movs	r0, #42	; 0x2a
 80022fa:	f7fe faad 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022fe:	2000      	movs	r0, #0
 8002300:	f7fe face 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe facb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f7fe fac8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002310:	20ef      	movs	r0, #239	; 0xef
 8002312:	f7fe fac5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002316:	2011      	movs	r0, #17
 8002318:	f7fe fa9e 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(120);
 800231c:	2078      	movs	r0, #120	; 0x78
 800231e:	f006 f8f5 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8002322:	2029      	movs	r0, #41	; 0x29
 8002324:	f7fe fa98 	bl	8000858 <LCD_WR_REG>
 8002328:	f003 bcd8 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <LCD_Init+0x5e8>)
 800232e:	889b      	ldrh	r3, [r3, #4]
 8002330:	f646 0204 	movw	r2, #26628	; 0x6804
 8002334:	4293      	cmp	r3, r2
 8002336:	f040 80ad 	bne.w	8002494 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800233a:	2011      	movs	r0, #17
 800233c:	f7fe fa8c 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(20);
 8002340:	2014      	movs	r0, #20
 8002342:	f006 f8e3 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002346:	20d0      	movs	r0, #208	; 0xd0
 8002348:	f7fe fa86 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800234c:	2007      	movs	r0, #7
 800234e:	f7fe faa7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002352:	2042      	movs	r0, #66	; 0x42
 8002354:	f7fe faa4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002358:	201d      	movs	r0, #29
 800235a:	f7fe faa1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800235e:	20d1      	movs	r0, #209	; 0xd1
 8002360:	f7fe fa7a 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fa9b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800236a:	201a      	movs	r0, #26
 800236c:	f7fe fa98 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002370:	2009      	movs	r0, #9
 8002372:	f7fe fa95 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002376:	20d2      	movs	r0, #210	; 0xd2
 8002378:	f7fe fa6e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe fa8f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002382:	2022      	movs	r0, #34	; 0x22
 8002384:	f7fe fa8c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002388:	20c0      	movs	r0, #192	; 0xc0
 800238a:	f7fe fa65 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800238e:	2010      	movs	r0, #16
 8002390:	f7fe fa86 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002394:	203b      	movs	r0, #59	; 0x3b
 8002396:	f7fe fa83 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800239a:	2000      	movs	r0, #0
 800239c:	f7fe fa80 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80023a0:	2002      	movs	r0, #2
 80023a2:	f7fe fa7d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80023a6:	2011      	movs	r0, #17
 80023a8:	f7fe fa7a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80023ac:	20c5      	movs	r0, #197	; 0xc5
 80023ae:	f7fe fa53 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f7fe fa74 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80023b8:	20c8      	movs	r0, #200	; 0xc8
 80023ba:	f7fe fa4d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe fa6e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80023c4:	2025      	movs	r0, #37	; 0x25
 80023c6:	f7fe fa6b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80023ca:	2021      	movs	r0, #33	; 0x21
 80023cc:	f7fe fa68 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80023d0:	2005      	movs	r0, #5
 80023d2:	f7fe fa65 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe fa62 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80023dc:	200a      	movs	r0, #10
 80023de:	f7fe fa5f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80023e2:	2065      	movs	r0, #101	; 0x65
 80023e4:	f7fe fa5c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80023e8:	2025      	movs	r0, #37	; 0x25
 80023ea:	f7fe fa59 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80023ee:	2077      	movs	r0, #119	; 0x77
 80023f0:	f7fe fa56 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80023f4:	2050      	movs	r0, #80	; 0x50
 80023f6:	f7fe fa53 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80023fa:	200f      	movs	r0, #15
 80023fc:	f7fe fa50 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002400:	2000      	movs	r0, #0
 8002402:	f7fe fa4d 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002406:	20f8      	movs	r0, #248	; 0xf8
 8002408:	f7fe fa26 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe fa47 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002412:	20fe      	movs	r0, #254	; 0xfe
 8002414:	f7fe fa20 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002418:	2000      	movs	r0, #0
 800241a:	f7fe fa41 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800241e:	2002      	movs	r0, #2
 8002420:	f7fe fa3e 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002424:	2020      	movs	r0, #32
 8002426:	f7fe fa17 	bl	8000858 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800242a:	2036      	movs	r0, #54	; 0x36
 800242c:	f7fe fa14 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002430:	2008      	movs	r0, #8
 8002432:	f7fe fa35 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002436:	203a      	movs	r0, #58	; 0x3a
 8002438:	f7fe fa0e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800243c:	2055      	movs	r0, #85	; 0x55
 800243e:	f7fe fa2f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002442:	202b      	movs	r0, #43	; 0x2b
 8002444:	f7fe fa08 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fa29 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe fa26 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe fa23 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800245a:	203f      	movs	r0, #63	; 0x3f
 800245c:	f7fe fa20 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002460:	202a      	movs	r0, #42	; 0x2a
 8002462:	f7fe f9f9 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe fa1a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fa17 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002472:	2001      	movs	r0, #1
 8002474:	f7fe fa14 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002478:	20df      	movs	r0, #223	; 0xdf
 800247a:	f7fe fa11 	bl	80008a0 <LCD_WR_DATAX>
		HAL_Delay(120);
 800247e:	2078      	movs	r0, #120	; 0x78
 8002480:	f006 f844 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0X29);
 8002484:	2029      	movs	r0, #41	; 0x29
 8002486:	f7fe f9e7 	bl	8000858 <LCD_WR_REG>
 800248a:	f003 bc27 	b.w	8005cdc <LCD_Init+0x3e34>
 800248e:	bf00      	nop
 8002490:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0x5310) {
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <LCD_Init+0x5fc>)
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	f245 3210 	movw	r2, #21264	; 0x5310
 800249c:	4293      	cmp	r3, r2
 800249e:	f040 877c 	bne.w	800339a <LCD_Init+0x14f2>
 80024a2:	e001      	b.n	80024a8 <LCD_Init+0x600>
 80024a4:	20000204 	.word	0x20000204
		LCD_WR_REG(0xED);
 80024a8:	20ed      	movs	r0, #237	; 0xed
 80024aa:	f7fe f9d5 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fe f9f6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80024b4:	20fe      	movs	r0, #254	; 0xfe
 80024b6:	f7fe f9f3 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80024ba:	20ee      	movs	r0, #238	; 0xee
 80024bc:	f7fe f9cc 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80024c0:	20de      	movs	r0, #222	; 0xde
 80024c2:	f7fe f9ed 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80024c6:	2021      	movs	r0, #33	; 0x21
 80024c8:	f7fe f9ea 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80024cc:	20f1      	movs	r0, #241	; 0xf1
 80024ce:	f7fe f9c3 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7fe f9e4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80024d8:	20df      	movs	r0, #223	; 0xdf
 80024da:	f7fe f9bd 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80024de:	2010      	movs	r0, #16
 80024e0:	f7fe f9de 	bl	80008a0 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80024e4:	20c4      	movs	r0, #196	; 0xc4
 80024e6:	f7fe f9b7 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80024ea:	208f      	movs	r0, #143	; 0x8f
 80024ec:	f7fe f9d8 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80024f0:	20c6      	movs	r0, #198	; 0xc6
 80024f2:	f7fe f9b1 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe f9d2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80024fc:	20e2      	movs	r0, #226	; 0xe2
 80024fe:	f7fe f9cf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002502:	20e2      	movs	r0, #226	; 0xe2
 8002504:	f7fe f9cc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002508:	20e2      	movs	r0, #226	; 0xe2
 800250a:	f7fe f9c9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800250e:	20bf      	movs	r0, #191	; 0xbf
 8002510:	f7fe f9a2 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002514:	20aa      	movs	r0, #170	; 0xaa
 8002516:	f7fe f9c3 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800251a:	20b0      	movs	r0, #176	; 0xb0
 800251c:	f7fe f99c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002520:	200d      	movs	r0, #13
 8002522:	f7fe f9bd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002526:	2000      	movs	r0, #0
 8002528:	f7fe f9ba 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800252c:	200d      	movs	r0, #13
 800252e:	f7fe f9b7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002532:	2000      	movs	r0, #0
 8002534:	f7fe f9b4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002538:	2011      	movs	r0, #17
 800253a:	f7fe f9b1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800253e:	2000      	movs	r0, #0
 8002540:	f7fe f9ae 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002544:	2019      	movs	r0, #25
 8002546:	f7fe f9ab 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe f9a8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002550:	2021      	movs	r0, #33	; 0x21
 8002552:	f7fe f9a5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe f9a2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800255c:	202d      	movs	r0, #45	; 0x2d
 800255e:	f7fe f99f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe f99c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002568:	203d      	movs	r0, #61	; 0x3d
 800256a:	f7fe f999 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe f996 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002574:	205d      	movs	r0, #93	; 0x5d
 8002576:	f7fe f993 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe f990 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002580:	205d      	movs	r0, #93	; 0x5d
 8002582:	f7fe f98d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe f98a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800258c:	20b1      	movs	r0, #177	; 0xb1
 800258e:	f7fe f963 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002592:	2080      	movs	r0, #128	; 0x80
 8002594:	f7fe f984 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe f981 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800259e:	208b      	movs	r0, #139	; 0x8b
 80025a0:	f7fe f97e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe f97b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80025aa:	2096      	movs	r0, #150	; 0x96
 80025ac:	f7fe f978 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe f975 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80025b6:	20b2      	movs	r0, #178	; 0xb2
 80025b8:	f7fe f94e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe f96f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7fe f96c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe f969 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe f966 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f7fe f963 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe f960 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80025e0:	20b3      	movs	r0, #179	; 0xb3
 80025e2:	f7fe f939 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe f95a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe f957 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe f954 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe f951 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe f94e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe f94b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f948 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe f945 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe f942 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe f93f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe f93c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe f939 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f936 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe f933 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe f930 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe f92d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe f92a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe f927 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe f924 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe f921 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe f91e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f91b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe f918 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe f915 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002676:	20b4      	movs	r0, #180	; 0xb4
 8002678:	f7fe f8ee 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800267c:	208b      	movs	r0, #139	; 0x8b
 800267e:	f7fe f90f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe f90c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002688:	2096      	movs	r0, #150	; 0x96
 800268a:	f7fe f909 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe f906 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002694:	20a1      	movs	r0, #161	; 0xa1
 8002696:	f7fe f903 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7fe f900 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80026a0:	20b5      	movs	r0, #181	; 0xb5
 80026a2:	f7fe f8d9 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7fe f8fa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f8f7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80026b2:	2003      	movs	r0, #3
 80026b4:	f7fe f8f4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f8f1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80026be:	2004      	movs	r0, #4
 80026c0:	f7fe f8ee 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f8eb 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80026ca:	20b6      	movs	r0, #182	; 0xb6
 80026cc:	f7fe f8c4 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f8e5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe f8e2 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80026dc:	20b7      	movs	r0, #183	; 0xb7
 80026de:	f7fe f8bb 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f8dc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f8d9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80026ee:	203f      	movs	r0, #63	; 0x3f
 80026f0:	f7fe f8d6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f8d3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80026fa:	205e      	movs	r0, #94	; 0x5e
 80026fc:	f7fe f8d0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f8cd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002706:	2064      	movs	r0, #100	; 0x64
 8002708:	f7fe f8ca 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f8c7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002712:	208c      	movs	r0, #140	; 0x8c
 8002714:	f7fe f8c4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f8c1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800271e:	20ac      	movs	r0, #172	; 0xac
 8002720:	f7fe f8be 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f8bb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800272a:	20dc      	movs	r0, #220	; 0xdc
 800272c:	f7fe f8b8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f8b5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002736:	2070      	movs	r0, #112	; 0x70
 8002738:	f7fe f8b2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7fe f8af 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002742:	2090      	movs	r0, #144	; 0x90
 8002744:	f7fe f8ac 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe f8a9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800274e:	20eb      	movs	r0, #235	; 0xeb
 8002750:	f7fe f8a6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe f8a3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800275a:	20dc      	movs	r0, #220	; 0xdc
 800275c:	f7fe f8a0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe f89d 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002766:	20b8      	movs	r0, #184	; 0xb8
 8002768:	f7fe f876 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe f897 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe f894 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe f891 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe f88e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe f88b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe f888 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe f885 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe f882 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800279c:	20ba      	movs	r0, #186	; 0xba
 800279e:	f7fe f85b 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80027a2:	2024      	movs	r0, #36	; 0x24
 80027a4:	f7fe f87c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe f879 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe f876 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe f873 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80027ba:	20c1      	movs	r0, #193	; 0xc1
 80027bc:	f7fe f84c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80027c0:	2020      	movs	r0, #32
 80027c2:	f7fe f86d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe f86a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80027cc:	2054      	movs	r0, #84	; 0x54
 80027ce:	f7fe f867 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe f864 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80027d8:	20ff      	movs	r0, #255	; 0xff
 80027da:	f7fe f861 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f85e 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80027e4:	20c2      	movs	r0, #194	; 0xc2
 80027e6:	f7fe f837 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80027ea:	200a      	movs	r0, #10
 80027ec:	f7fe f858 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe f855 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80027f6:	2004      	movs	r0, #4
 80027f8:	f7fe f852 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe f84f 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002802:	20c3      	movs	r0, #195	; 0xc3
 8002804:	f7fe f828 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002808:	203c      	movs	r0, #60	; 0x3c
 800280a:	f7fe f849 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f846 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002814:	203a      	movs	r0, #58	; 0x3a
 8002816:	f7fe f843 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f840 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002820:	2039      	movs	r0, #57	; 0x39
 8002822:	f7fe f83d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f83a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800282c:	2037      	movs	r0, #55	; 0x37
 800282e:	f7fe f837 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f834 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002838:	203c      	movs	r0, #60	; 0x3c
 800283a:	f7fe f831 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f82e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002844:	2036      	movs	r0, #54	; 0x36
 8002846:	f7fe f82b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f828 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002850:	2032      	movs	r0, #50	; 0x32
 8002852:	f7fe f825 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f822 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800285c:	202f      	movs	r0, #47	; 0x2f
 800285e:	f7fe f81f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe f81c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002868:	202c      	movs	r0, #44	; 0x2c
 800286a:	f7fe f819 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f816 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002874:	2029      	movs	r0, #41	; 0x29
 8002876:	f7fe f813 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f810 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002880:	2026      	movs	r0, #38	; 0x26
 8002882:	f7fe f80d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f80a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800288c:	2024      	movs	r0, #36	; 0x24
 800288e:	f7fe f807 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f804 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002898:	2024      	movs	r0, #36	; 0x24
 800289a:	f7fe f801 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fd fffe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80028a4:	2023      	movs	r0, #35	; 0x23
 80028a6:	f7fd fffb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fd fff8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80028b0:	203c      	movs	r0, #60	; 0x3c
 80028b2:	f7fd fff5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fd fff2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80028bc:	2036      	movs	r0, #54	; 0x36
 80028be:	f7fd ffef 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fd ffec 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80028c8:	2032      	movs	r0, #50	; 0x32
 80028ca:	f7fd ffe9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fd ffe6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80028d4:	202f      	movs	r0, #47	; 0x2f
 80028d6:	f7fd ffe3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fd ffe0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80028e0:	202c      	movs	r0, #44	; 0x2c
 80028e2:	f7fd ffdd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fd ffda 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80028ec:	2029      	movs	r0, #41	; 0x29
 80028ee:	f7fd ffd7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fd ffd4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80028f8:	2026      	movs	r0, #38	; 0x26
 80028fa:	f7fd ffd1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fd ffce 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002904:	2024      	movs	r0, #36	; 0x24
 8002906:	f7fd ffcb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fd ffc8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002910:	2024      	movs	r0, #36	; 0x24
 8002912:	f7fd ffc5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fd ffc2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800291c:	2023      	movs	r0, #35	; 0x23
 800291e:	f7fd ffbf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fd ffbc 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002928:	20c4      	movs	r0, #196	; 0xc4
 800292a:	f7fd ff95 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800292e:	2062      	movs	r0, #98	; 0x62
 8002930:	f7fd ffb6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fd ffb3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800293a:	2005      	movs	r0, #5
 800293c:	f7fd ffb0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fd ffad 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002946:	2084      	movs	r0, #132	; 0x84
 8002948:	f7fd ffaa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fd ffa7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002952:	20f0      	movs	r0, #240	; 0xf0
 8002954:	f7fd ffa4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fd ffa1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800295e:	2018      	movs	r0, #24
 8002960:	f7fd ff9e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fd ff9b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800296a:	20a4      	movs	r0, #164	; 0xa4
 800296c:	f7fd ff98 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fd ff95 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002976:	2018      	movs	r0, #24
 8002978:	f7fd ff92 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f7fd ff8f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002982:	2050      	movs	r0, #80	; 0x50
 8002984:	f7fd ff8c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7fd ff89 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800298e:	200c      	movs	r0, #12
 8002990:	f7fd ff86 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fd ff83 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800299a:	2017      	movs	r0, #23
 800299c:	f7fd ff80 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fd ff7d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80029a6:	2095      	movs	r0, #149	; 0x95
 80029a8:	f7fd ff7a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fd ff77 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029b2:	20f3      	movs	r0, #243	; 0xf3
 80029b4:	f7fd ff74 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fd ff71 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80029be:	20e6      	movs	r0, #230	; 0xe6
 80029c0:	f7fd ff6e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fd ff6b 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80029ca:	20c5      	movs	r0, #197	; 0xc5
 80029cc:	f7fd ff44 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80029d0:	2032      	movs	r0, #50	; 0x32
 80029d2:	f7fd ff65 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fd ff62 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80029dc:	2044      	movs	r0, #68	; 0x44
 80029de:	f7fd ff5f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fd ff5c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80029e8:	2065      	movs	r0, #101	; 0x65
 80029ea:	f7fd ff59 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fd ff56 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80029f4:	2076      	movs	r0, #118	; 0x76
 80029f6:	f7fd ff53 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fd ff50 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a00:	2088      	movs	r0, #136	; 0x88
 8002a02:	f7fd ff4d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fd ff4a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002a0c:	20c6      	movs	r0, #198	; 0xc6
 8002a0e:	f7fd ff23 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a12:	2020      	movs	r0, #32
 8002a14:	f7fd ff44 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fd ff41 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a1e:	2017      	movs	r0, #23
 8002a20:	f7fd ff3e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd ff3b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7fd ff38 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fd ff35 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002a36:	20c7      	movs	r0, #199	; 0xc7
 8002a38:	f7fd ff0e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ff2f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fd ff2c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ff29 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fd ff26 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002a54:	20c8      	movs	r0, #200	; 0xc8
 8002a56:	f7fd feff 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fd ff20 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ff1d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fd ff1a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ff17 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002a72:	20c9      	movs	r0, #201	; 0xc9
 8002a74:	f7fd fef0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fd ff11 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fd ff0e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd ff0b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fd ff08 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fd ff05 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fd ff02 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fd feff 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fd fefc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fd fef9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fd fef6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd fef3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fd fef0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd feed 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fd feea 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd fee7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fd fee4 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002ad8:	20e0      	movs	r0, #224	; 0xe0
 8002ada:	f7fd febd 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002ade:	2016      	movs	r0, #22
 8002ae0:	f7fd fede 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fd fedb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002aea:	201c      	movs	r0, #28
 8002aec:	f7fd fed8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fd fed5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002af6:	2021      	movs	r0, #33	; 0x21
 8002af8:	f7fd fed2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fd fecf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b02:	2036      	movs	r0, #54	; 0x36
 8002b04:	f7fd fecc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fd fec9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002b0e:	2046      	movs	r0, #70	; 0x46
 8002b10:	f7fd fec6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7fd fec3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002b1a:	2052      	movs	r0, #82	; 0x52
 8002b1c:	f7fd fec0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fd febd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002b26:	2064      	movs	r0, #100	; 0x64
 8002b28:	f7fd feba 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fd feb7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002b32:	207a      	movs	r0, #122	; 0x7a
 8002b34:	f7fd feb4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd feb1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002b3e:	208b      	movs	r0, #139	; 0x8b
 8002b40:	f7fd feae 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fd feab 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002b4a:	2099      	movs	r0, #153	; 0x99
 8002b4c:	f7fd fea8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd fea5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002b56:	20a8      	movs	r0, #168	; 0xa8
 8002b58:	f7fd fea2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fd fe9f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002b62:	20b9      	movs	r0, #185	; 0xb9
 8002b64:	f7fd fe9c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fd fe99 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b6e:	20c4      	movs	r0, #196	; 0xc4
 8002b70:	f7fd fe96 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd fe93 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002b7a:	20ca      	movs	r0, #202	; 0xca
 8002b7c:	f7fd fe90 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fd fe8d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002b86:	20d2      	movs	r0, #210	; 0xd2
 8002b88:	f7fd fe8a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fd fe87 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002b92:	20d9      	movs	r0, #217	; 0xd9
 8002b94:	f7fd fe84 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fd fe81 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002b9e:	20e0      	movs	r0, #224	; 0xe0
 8002ba0:	f7fd fe7e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fd fe7b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002baa:	20f3      	movs	r0, #243	; 0xf3
 8002bac:	f7fd fe78 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd fe75 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002bb6:	20e1      	movs	r0, #225	; 0xe1
 8002bb8:	f7fd fe4e 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002bbc:	2016      	movs	r0, #22
 8002bbe:	f7fd fe6f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fd fe6c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002bc8:	201c      	movs	r0, #28
 8002bca:	f7fd fe69 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fd fe66 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002bd4:	2022      	movs	r0, #34	; 0x22
 8002bd6:	f7fd fe63 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fd fe60 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002be0:	2036      	movs	r0, #54	; 0x36
 8002be2:	f7fd fe5d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fe5a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002bec:	2045      	movs	r0, #69	; 0x45
 8002bee:	f7fd fe57 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd fe54 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bf8:	2052      	movs	r0, #82	; 0x52
 8002bfa:	f7fd fe51 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd fe4e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002c04:	2064      	movs	r0, #100	; 0x64
 8002c06:	f7fd fe4b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd fe48 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002c10:	207a      	movs	r0, #122	; 0x7a
 8002c12:	f7fd fe45 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fd fe42 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002c1c:	208b      	movs	r0, #139	; 0x8b
 8002c1e:	f7fd fe3f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fd fe3c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c28:	2099      	movs	r0, #153	; 0x99
 8002c2a:	f7fd fe39 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fd fe36 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c34:	20a8      	movs	r0, #168	; 0xa8
 8002c36:	f7fd fe33 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7fd fe30 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c40:	20b9      	movs	r0, #185	; 0xb9
 8002c42:	f7fd fe2d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fd fe2a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c4c:	20c4      	movs	r0, #196	; 0xc4
 8002c4e:	f7fd fe27 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fd fe24 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c58:	20ca      	movs	r0, #202	; 0xca
 8002c5a:	f7fd fe21 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fd fe1e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c64:	20d2      	movs	r0, #210	; 0xd2
 8002c66:	f7fd fe1b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fd fe18 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002c70:	20d8      	movs	r0, #216	; 0xd8
 8002c72:	f7fd fe15 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fd fe12 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c7c:	20e0      	movs	r0, #224	; 0xe0
 8002c7e:	f7fd fe0f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7fd fe0c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c88:	20f3      	movs	r0, #243	; 0xf3
 8002c8a:	f7fd fe09 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fd fe06 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002c94:	20e2      	movs	r0, #226	; 0xe2
 8002c96:	f7fd fddf 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002c9a:	2005      	movs	r0, #5
 8002c9c:	f7fd fe00 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd fdfd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002ca6:	200b      	movs	r0, #11
 8002ca8:	f7fd fdfa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd fdf7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002cb2:	201b      	movs	r0, #27
 8002cb4:	f7fd fdf4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fd fdf1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002cbe:	2034      	movs	r0, #52	; 0x34
 8002cc0:	f7fd fdee 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fd fdeb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cca:	2044      	movs	r0, #68	; 0x44
 8002ccc:	f7fd fde8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fd fde5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002cd6:	204f      	movs	r0, #79	; 0x4f
 8002cd8:	f7fd fde2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fd fddf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002ce2:	2061      	movs	r0, #97	; 0x61
 8002ce4:	f7fd fddc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd fdd9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002cee:	2079      	movs	r0, #121	; 0x79
 8002cf0:	f7fd fdd6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fd fdd3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002cfa:	2088      	movs	r0, #136	; 0x88
 8002cfc:	f7fd fdd0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd fdcd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002d06:	2097      	movs	r0, #151	; 0x97
 8002d08:	f7fd fdca 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd fdc7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002d12:	20a6      	movs	r0, #166	; 0xa6
 8002d14:	f7fd fdc4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7fd fdc1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002d1e:	20b7      	movs	r0, #183	; 0xb7
 8002d20:	f7fd fdbe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd fdbb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002d2a:	20c2      	movs	r0, #194	; 0xc2
 8002d2c:	f7fd fdb8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd fdb5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002d36:	20c7      	movs	r0, #199	; 0xc7
 8002d38:	f7fd fdb2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fd fdaf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002d42:	20d1      	movs	r0, #209	; 0xd1
 8002d44:	f7fd fdac 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd fda9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002d4e:	20d6      	movs	r0, #214	; 0xd6
 8002d50:	f7fd fda6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd fda3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002d5a:	20dd      	movs	r0, #221	; 0xdd
 8002d5c:	f7fd fda0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd fd9d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d66:	20f3      	movs	r0, #243	; 0xf3
 8002d68:	f7fd fd9a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd fd97 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002d72:	20e3      	movs	r0, #227	; 0xe3
 8002d74:	f7fd fd70 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f7fd fd91 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd fd8e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002d84:	200a      	movs	r0, #10
 8002d86:	f7fd fd8b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd fd88 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002d90:	201c      	movs	r0, #28
 8002d92:	f7fd fd85 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd fd82 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002d9c:	2033      	movs	r0, #51	; 0x33
 8002d9e:	f7fd fd7f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd fd7c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002da8:	2044      	movs	r0, #68	; 0x44
 8002daa:	f7fd fd79 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd fd76 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002db4:	2050      	movs	r0, #80	; 0x50
 8002db6:	f7fd fd73 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd fd70 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002dc0:	2062      	movs	r0, #98	; 0x62
 8002dc2:	f7fd fd6d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd fd6a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002dcc:	2078      	movs	r0, #120	; 0x78
 8002dce:	f7fd fd67 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fd fd64 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002dd8:	2088      	movs	r0, #136	; 0x88
 8002dda:	f7fd fd61 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fd fd5e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002de4:	2097      	movs	r0, #151	; 0x97
 8002de6:	f7fd fd5b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd fd58 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002df0:	20a6      	movs	r0, #166	; 0xa6
 8002df2:	f7fd fd55 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fd fd52 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dfc:	20b7      	movs	r0, #183	; 0xb7
 8002dfe:	f7fd fd4f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fd fd4c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002e08:	20c2      	movs	r0, #194	; 0xc2
 8002e0a:	f7fd fd49 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fd fd46 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002e14:	20c7      	movs	r0, #199	; 0xc7
 8002e16:	f7fd fd43 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd fd40 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e20:	20d1      	movs	r0, #209	; 0xd1
 8002e22:	f7fd fd3d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fd fd3a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002e2c:	20d5      	movs	r0, #213	; 0xd5
 8002e2e:	f7fd fd37 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fd fd34 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e38:	20dd      	movs	r0, #221	; 0xdd
 8002e3a:	f7fd fd31 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fd fd2e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e44:	20f3      	movs	r0, #243	; 0xf3
 8002e46:	f7fd fd2b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd fd28 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002e50:	20e4      	movs	r0, #228	; 0xe4
 8002e52:	f7fd fd01 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fd fd22 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fd1f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7fd fd1c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fd19 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7fd fd16 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd fd13 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002e7a:	202a      	movs	r0, #42	; 0x2a
 8002e7c:	f7fd fd10 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd fd0d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002e86:	203c      	movs	r0, #60	; 0x3c
 8002e88:	f7fd fd0a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd fd07 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002e92:	204b      	movs	r0, #75	; 0x4b
 8002e94:	f7fd fd04 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fd01 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002e9e:	205d      	movs	r0, #93	; 0x5d
 8002ea0:	f7fd fcfe 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fcfb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002eaa:	2074      	movs	r0, #116	; 0x74
 8002eac:	f7fd fcf8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd fcf5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002eb6:	2084      	movs	r0, #132	; 0x84
 8002eb8:	f7fd fcf2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd fcef 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002ec2:	2093      	movs	r0, #147	; 0x93
 8002ec4:	f7fd fcec 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd fce9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002ece:	20a2      	movs	r0, #162	; 0xa2
 8002ed0:	f7fd fce6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd fce3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002eda:	20b3      	movs	r0, #179	; 0xb3
 8002edc:	f7fd fce0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fd fcdd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002ee6:	20be      	movs	r0, #190	; 0xbe
 8002ee8:	f7fd fcda 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fd fcd7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002ef2:	20c4      	movs	r0, #196	; 0xc4
 8002ef4:	f7fd fcd4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fd fcd1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002efe:	20cd      	movs	r0, #205	; 0xcd
 8002f00:	f7fd fcce 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fd fccb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002f0a:	20d3      	movs	r0, #211	; 0xd3
 8002f0c:	f7fd fcc8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7fd fcc5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f16:	20dd      	movs	r0, #221	; 0xdd
 8002f18:	f7fd fcc2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fd fcbf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f22:	20f3      	movs	r0, #243	; 0xf3
 8002f24:	f7fd fcbc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fd fcb9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002f2e:	20e5      	movs	r0, #229	; 0xe5
 8002f30:	f7fd fc92 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd fcb3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fcb0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fd fcad 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fcaa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f7fd fca7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fca4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002f58:	2029      	movs	r0, #41	; 0x29
 8002f5a:	f7fd fca1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fc9e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f64:	203c      	movs	r0, #60	; 0x3c
 8002f66:	f7fd fc9b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fc98 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f70:	204b      	movs	r0, #75	; 0x4b
 8002f72:	f7fd fc95 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fc92 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f7c:	205d      	movs	r0, #93	; 0x5d
 8002f7e:	f7fd fc8f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fd fc8c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f88:	2074      	movs	r0, #116	; 0x74
 8002f8a:	f7fd fc89 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fd fc86 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f94:	2084      	movs	r0, #132	; 0x84
 8002f96:	f7fd fc83 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fd fc80 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002fa0:	2093      	movs	r0, #147	; 0x93
 8002fa2:	f7fd fc7d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fd fc7a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002fac:	20a2      	movs	r0, #162	; 0xa2
 8002fae:	f7fd fc77 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7fd fc74 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002fb8:	20b3      	movs	r0, #179	; 0xb3
 8002fba:	f7fd fc71 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7fd fc6e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fc4:	20be      	movs	r0, #190	; 0xbe
 8002fc6:	f7fd fc6b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fd fc68 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002fd0:	20c4      	movs	r0, #196	; 0xc4
 8002fd2:	f7fd fc65 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7fd fc62 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fdc:	20cd      	movs	r0, #205	; 0xcd
 8002fde:	f7fd fc5f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7fd fc5c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fe8:	20d3      	movs	r0, #211	; 0xd3
 8002fea:	f7fd fc59 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7fd fc56 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002ff4:	20dc      	movs	r0, #220	; 0xdc
 8002ff6:	f7fd fc53 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fd fc50 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003000:	20f3      	movs	r0, #243	; 0xf3
 8003002:	f7fd fc4d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f7fd fc4a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800300c:	20e6      	movs	r0, #230	; 0xe6
 800300e:	f7fd fc23 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8003012:	2011      	movs	r0, #17
 8003014:	f7fd fc44 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fc41 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800301e:	2034      	movs	r0, #52	; 0x34
 8003020:	f7fd fc3e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fc3b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800302a:	2056      	movs	r0, #86	; 0x56
 800302c:	f7fd fc38 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fc35 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003036:	2076      	movs	r0, #118	; 0x76
 8003038:	f7fd fc32 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fc2f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003042:	2077      	movs	r0, #119	; 0x77
 8003044:	f7fd fc2c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fc29 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800304e:	2066      	movs	r0, #102	; 0x66
 8003050:	f7fd fc26 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fd fc23 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800305a:	2088      	movs	r0, #136	; 0x88
 800305c:	f7fd fc20 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003060:	2000      	movs	r0, #0
 8003062:	f7fd fc1d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003066:	2099      	movs	r0, #153	; 0x99
 8003068:	f7fd fc1a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f7fd fc17 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003072:	20bb      	movs	r0, #187	; 0xbb
 8003074:	f7fd fc14 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003078:	2000      	movs	r0, #0
 800307a:	f7fd fc11 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800307e:	2099      	movs	r0, #153	; 0x99
 8003080:	f7fd fc0e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003084:	2000      	movs	r0, #0
 8003086:	f7fd fc0b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800308a:	2066      	movs	r0, #102	; 0x66
 800308c:	f7fd fc08 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003090:	2000      	movs	r0, #0
 8003092:	f7fd fc05 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003096:	2055      	movs	r0, #85	; 0x55
 8003098:	f7fd fc02 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309c:	2000      	movs	r0, #0
 800309e:	f7fd fbff 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030a2:	2055      	movs	r0, #85	; 0x55
 80030a4:	f7fd fbfc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7fd fbf9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80030ae:	2045      	movs	r0, #69	; 0x45
 80030b0:	f7fd fbf6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7fd fbf3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80030ba:	2043      	movs	r0, #67	; 0x43
 80030bc:	f7fd fbf0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7fd fbed 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030c6:	2044      	movs	r0, #68	; 0x44
 80030c8:	f7fd fbea 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fd fbe7 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80030d2:	20e7      	movs	r0, #231	; 0xe7
 80030d4:	f7fd fbc0 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80030d8:	2032      	movs	r0, #50	; 0x32
 80030da:	f7fd fbe1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fbde 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80030e4:	2055      	movs	r0, #85	; 0x55
 80030e6:	f7fd fbdb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fbd8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80030f0:	2076      	movs	r0, #118	; 0x76
 80030f2:	f7fd fbd5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fbd2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80030fc:	2066      	movs	r0, #102	; 0x66
 80030fe:	f7fd fbcf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fbcc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003108:	2067      	movs	r0, #103	; 0x67
 800310a:	f7fd fbc9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fbc6 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003114:	2067      	movs	r0, #103	; 0x67
 8003116:	f7fd fbc3 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fbc0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003120:	2087      	movs	r0, #135	; 0x87
 8003122:	f7fd fbbd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fbba 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800312c:	2099      	movs	r0, #153	; 0x99
 800312e:	f7fd fbb7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fbb4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003138:	20bb      	movs	r0, #187	; 0xbb
 800313a:	f7fd fbb1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd fbae 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003144:	2099      	movs	r0, #153	; 0x99
 8003146:	f7fd fbab 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314a:	2000      	movs	r0, #0
 800314c:	f7fd fba8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003150:	2077      	movs	r0, #119	; 0x77
 8003152:	f7fd fba5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003156:	2000      	movs	r0, #0
 8003158:	f7fd fba2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800315c:	2044      	movs	r0, #68	; 0x44
 800315e:	f7fd fb9f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd fb9c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003168:	2056      	movs	r0, #86	; 0x56
 800316a:	f7fd fb99 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316e:	2000      	movs	r0, #0
 8003170:	f7fd fb96 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003174:	2023      	movs	r0, #35	; 0x23
 8003176:	f7fd fb93 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317a:	2000      	movs	r0, #0
 800317c:	f7fd fb90 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003180:	2033      	movs	r0, #51	; 0x33
 8003182:	f7fd fb8d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fd fb8a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800318c:	2045      	movs	r0, #69	; 0x45
 800318e:	f7fd fb87 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fd fb84 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003198:	20e8      	movs	r0, #232	; 0xe8
 800319a:	f7fd fb5d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800319e:	2000      	movs	r0, #0
 80031a0:	f7fd fb7e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fb7b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031aa:	2099      	movs	r0, #153	; 0x99
 80031ac:	f7fd fb78 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fb75 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031b6:	2087      	movs	r0, #135	; 0x87
 80031b8:	f7fd fb72 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fb6f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031c2:	2088      	movs	r0, #136	; 0x88
 80031c4:	f7fd fb6c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fb69 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80031ce:	2077      	movs	r0, #119	; 0x77
 80031d0:	f7fd fb66 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fb63 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031da:	2066      	movs	r0, #102	; 0x66
 80031dc:	f7fd fb60 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fb5d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80031e6:	2088      	movs	r0, #136	; 0x88
 80031e8:	f7fd fb5a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fb57 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80031f2:	20aa      	movs	r0, #170	; 0xaa
 80031f4:	f7fd fb54 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fb51 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80031fe:	20bb      	movs	r0, #187	; 0xbb
 8003200:	f7fd fb4e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fb4b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800320a:	2099      	movs	r0, #153	; 0x99
 800320c:	f7fd fb48 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fb45 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003216:	2066      	movs	r0, #102	; 0x66
 8003218:	f7fd fb42 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fb3f 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003222:	2055      	movs	r0, #85	; 0x55
 8003224:	f7fd fb3c 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7fd fb39 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800322e:	2055      	movs	r0, #85	; 0x55
 8003230:	f7fd fb36 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003234:	2000      	movs	r0, #0
 8003236:	f7fd fb33 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800323a:	2044      	movs	r0, #68	; 0x44
 800323c:	f7fd fb30 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fd fb2d 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003246:	2044      	movs	r0, #68	; 0x44
 8003248:	f7fd fb2a 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fd fb27 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003252:	2055      	movs	r0, #85	; 0x55
 8003254:	f7fd fb24 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd fb21 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800325e:	20e9      	movs	r0, #233	; 0xe9
 8003260:	f7fd fafa 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003264:	20aa      	movs	r0, #170	; 0xaa
 8003266:	f7fd fb1b 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fb18 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fb15 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fb12 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd faeb 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003282:	20aa      	movs	r0, #170	; 0xaa
 8003284:	f7fd fb0c 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003288:	20cf      	movs	r0, #207	; 0xcf
 800328a:	f7fd fae5 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fb06 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003294:	2000      	movs	r0, #0
 8003296:	f7fd fb03 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fb00 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd fafd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fafa 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd faf7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd faf4 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fd faf1 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd faee 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd faeb 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fae8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd fae5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fae2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fd fadf 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fd fadc 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd fad9 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7fd fad6 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80032f4:	20f0      	movs	r0, #240	; 0xf0
 80032f6:	f7fd faaf 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fd fad0 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003300:	2050      	movs	r0, #80	; 0x50
 8003302:	f7fd facd 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003306:	2000      	movs	r0, #0
 8003308:	f7fd faca 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fac7 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fd fac4 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003318:	20f3      	movs	r0, #243	; 0xf3
 800331a:	f7fd fa9d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800331e:	2000      	movs	r0, #0
 8003320:	f7fd fabe 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003324:	20f9      	movs	r0, #249	; 0xf9
 8003326:	f7fd fa97 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800332a:	2006      	movs	r0, #6
 800332c:	f7fd fab8 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003330:	2010      	movs	r0, #16
 8003332:	f7fd fab5 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003336:	2029      	movs	r0, #41	; 0x29
 8003338:	f7fd fab2 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd faaf 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003342:	203a      	movs	r0, #58	; 0x3a
 8003344:	f7fd fa88 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003348:	2055      	movs	r0, #85	; 0x55
 800334a:	f7fd faa9 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800334e:	2011      	movs	r0, #17
 8003350:	f7fd fa82 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(100);
 8003354:	2064      	movs	r0, #100	; 0x64
 8003356:	f005 f8d9 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0x29);
 800335a:	2029      	movs	r0, #41	; 0x29
 800335c:	f7fd fa7c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003360:	2035      	movs	r0, #53	; 0x35
 8003362:	f7fd fa79 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7fd fa9a 	bl	80008a0 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800336c:	2051      	movs	r0, #81	; 0x51
 800336e:	f7fd fa73 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003372:	20ff      	movs	r0, #255	; 0xff
 8003374:	f7fd fa94 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003378:	2053      	movs	r0, #83	; 0x53
 800337a:	f7fd fa6d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800337e:	202c      	movs	r0, #44	; 0x2c
 8003380:	f7fd fa8e 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003384:	2055      	movs	r0, #85	; 0x55
 8003386:	f7fd fa67 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800338a:	2082      	movs	r0, #130	; 0x82
 800338c:	f7fd fa88 	bl	80008a0 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003390:	202c      	movs	r0, #44	; 0x2c
 8003392:	f7fd fa61 	bl	8000858 <LCD_WR_REG>
 8003396:	f002 bca1 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <LCD_Init+0x1504>)
 800339c:	889b      	ldrh	r3, [r3, #4]
 800339e:	f245 5210 	movw	r2, #21776	; 0x5510
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f040 8782 	bne.w	80042ac <LCD_Init+0x2404>
 80033a8:	e002      	b.n	80033b0 <LCD_Init+0x1508>
 80033aa:	bf00      	nop
 80033ac:	20000204 	.word	0x20000204
		LCD_WriteReg(0xF000, 0x55);
 80033b0:	2155      	movs	r1, #85	; 0x55
 80033b2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80033b6:	f7fd fadb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80033ba:	21aa      	movs	r1, #170	; 0xaa
 80033bc:	f24f 0001 	movw	r0, #61441	; 0xf001
 80033c0:	f7fd fad6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80033c4:	2152      	movs	r1, #82	; 0x52
 80033c6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80033ca:	f7fd fad1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80033ce:	2108      	movs	r1, #8
 80033d0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80033d4:	f7fd facc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80033d8:	2101      	movs	r1, #1
 80033da:	f24f 0004 	movw	r0, #61444	; 0xf004
 80033de:	f7fd fac7 	bl	8000970 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80033e2:	210d      	movs	r1, #13
 80033e4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80033e8:	f7fd fac2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80033ec:	210d      	movs	r1, #13
 80033ee:	f24b 0001 	movw	r0, #45057	; 0xb001
 80033f2:	f7fd fabd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80033f6:	210d      	movs	r1, #13
 80033f8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80033fc:	f7fd fab8 	bl	8000970 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003400:	2134      	movs	r1, #52	; 0x34
 8003402:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003406:	f7fd fab3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800340a:	2134      	movs	r1, #52	; 0x34
 800340c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003410:	f7fd faae 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003414:	2134      	movs	r1, #52	; 0x34
 8003416:	f24b 6002 	movw	r0, #46594	; 0xb602
 800341a:	f7fd faa9 	bl	8000970 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800341e:	210d      	movs	r1, #13
 8003420:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003424:	f7fd faa4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003428:	210d      	movs	r1, #13
 800342a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800342e:	f7fd fa9f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003432:	210d      	movs	r1, #13
 8003434:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003438:	f7fd fa9a 	bl	8000970 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800343c:	2134      	movs	r1, #52	; 0x34
 800343e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003442:	f7fd fa95 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003446:	2134      	movs	r1, #52	; 0x34
 8003448:	f24b 7001 	movw	r0, #46849	; 0xb701
 800344c:	f7fd fa90 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003450:	2134      	movs	r1, #52	; 0x34
 8003452:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003456:	f7fd fa8b 	bl	8000970 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800345a:	2100      	movs	r1, #0
 800345c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003460:	f7fd fa86 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003464:	2100      	movs	r1, #0
 8003466:	f24b 2001 	movw	r0, #45569	; 0xb201
 800346a:	f7fd fa81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800346e:	2100      	movs	r1, #0
 8003470:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003474:	f7fd fa7c 	bl	8000970 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003478:	2124      	movs	r1, #36	; 0x24
 800347a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800347e:	f7fd fa77 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003482:	2124      	movs	r1, #36	; 0x24
 8003484:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003488:	f7fd fa72 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800348c:	2124      	movs	r1, #36	; 0x24
 800348e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003492:	f7fd fa6d 	bl	8000970 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003496:	2101      	movs	r1, #1
 8003498:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800349c:	f7fd fa68 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80034a0:	210f      	movs	r1, #15
 80034a2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80034a6:	f7fd fa63 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80034aa:	210f      	movs	r1, #15
 80034ac:	f24b 3001 	movw	r0, #45825	; 0xb301
 80034b0:	f7fd fa5e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80034b4:	210f      	movs	r1, #15
 80034b6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80034ba:	f7fd fa59 	bl	8000970 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80034be:	2134      	movs	r1, #52	; 0x34
 80034c0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80034c4:	f7fd fa54 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80034c8:	2134      	movs	r1, #52	; 0x34
 80034ca:	f64b 1001 	movw	r0, #47361	; 0xb901
 80034ce:	f7fd fa4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80034d2:	2134      	movs	r1, #52	; 0x34
 80034d4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80034d8:	f7fd fa4a 	bl	8000970 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80034dc:	2108      	movs	r1, #8
 80034de:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80034e2:	f7fd fa45 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80034e6:	2108      	movs	r1, #8
 80034e8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80034ec:	f7fd fa40 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80034f0:	2108      	movs	r1, #8
 80034f2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80034f6:	f7fd fa3b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80034fa:	2103      	movs	r1, #3
 80034fc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003500:	f7fd fa36 	bl	8000970 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003504:	2124      	movs	r1, #36	; 0x24
 8003506:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800350a:	f7fd fa31 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800350e:	2124      	movs	r1, #36	; 0x24
 8003510:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003514:	f7fd fa2c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003518:	2124      	movs	r1, #36	; 0x24
 800351a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800351e:	f7fd fa27 	bl	8000970 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003522:	2100      	movs	r1, #0
 8003524:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003528:	f7fd fa22 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800352c:	2178      	movs	r1, #120	; 0x78
 800352e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003532:	f7fd fa1d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003536:	2100      	movs	r1, #0
 8003538:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800353c:	f7fd fa18 	bl	8000970 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003540:	2100      	movs	r1, #0
 8003542:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003546:	f7fd fa13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800354a:	2178      	movs	r1, #120	; 0x78
 800354c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003550:	f7fd fa0e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003554:	2100      	movs	r1, #0
 8003556:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800355a:	f7fd fa09 	bl	8000970 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800355e:	2100      	movs	r1, #0
 8003560:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003564:	f7fd fa04 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003568:	2164      	movs	r1, #100	; 0x64
 800356a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800356e:	f7fd f9ff 	bl	8000970 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003572:	2100      	movs	r1, #0
 8003574:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003578:	f7fd f9fa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800357c:	2133      	movs	r1, #51	; 0x33
 800357e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003582:	f7fd f9f5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003586:	2100      	movs	r1, #0
 8003588:	f24d 1002 	movw	r0, #53506	; 0xd102
 800358c:	f7fd f9f0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003590:	2134      	movs	r1, #52	; 0x34
 8003592:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003596:	f7fd f9eb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800359a:	2100      	movs	r1, #0
 800359c:	f24d 1004 	movw	r0, #53508	; 0xd104
 80035a0:	f7fd f9e6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80035a4:	213a      	movs	r1, #58	; 0x3a
 80035a6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80035aa:	f7fd f9e1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80035ae:	2100      	movs	r1, #0
 80035b0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80035b4:	f7fd f9dc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80035b8:	214a      	movs	r1, #74	; 0x4a
 80035ba:	f24d 1007 	movw	r0, #53511	; 0xd107
 80035be:	f7fd f9d7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80035c2:	2100      	movs	r1, #0
 80035c4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80035c8:	f7fd f9d2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80035cc:	215c      	movs	r1, #92	; 0x5c
 80035ce:	f24d 1009 	movw	r0, #53513	; 0xd109
 80035d2:	f7fd f9cd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80035d6:	2100      	movs	r1, #0
 80035d8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80035dc:	f7fd f9c8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80035e0:	2181      	movs	r1, #129	; 0x81
 80035e2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80035e6:	f7fd f9c3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80035ea:	2100      	movs	r1, #0
 80035ec:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80035f0:	f7fd f9be 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80035f4:	21a6      	movs	r1, #166	; 0xa6
 80035f6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80035fa:	f7fd f9b9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80035fe:	2100      	movs	r1, #0
 8003600:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003604:	f7fd f9b4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003608:	21e5      	movs	r1, #229	; 0xe5
 800360a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800360e:	f7fd f9af 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003612:	2101      	movs	r1, #1
 8003614:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003618:	f7fd f9aa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800361c:	2113      	movs	r1, #19
 800361e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003622:	f7fd f9a5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003626:	2101      	movs	r1, #1
 8003628:	f24d 1012 	movw	r0, #53522	; 0xd112
 800362c:	f7fd f9a0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003630:	2154      	movs	r1, #84	; 0x54
 8003632:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003636:	f7fd f99b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800363a:	2101      	movs	r1, #1
 800363c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003640:	f7fd f996 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003644:	2182      	movs	r1, #130	; 0x82
 8003646:	f24d 1015 	movw	r0, #53525	; 0xd115
 800364a:	f7fd f991 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800364e:	2101      	movs	r1, #1
 8003650:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003654:	f7fd f98c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003658:	21ca      	movs	r1, #202	; 0xca
 800365a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800365e:	f7fd f987 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003662:	2102      	movs	r1, #2
 8003664:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003668:	f7fd f982 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800366c:	2100      	movs	r1, #0
 800366e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003672:	f7fd f97d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003676:	2102      	movs	r1, #2
 8003678:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800367c:	f7fd f978 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003680:	2101      	movs	r1, #1
 8003682:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003686:	f7fd f973 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800368a:	2102      	movs	r1, #2
 800368c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003690:	f7fd f96e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003694:	2134      	movs	r1, #52	; 0x34
 8003696:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800369a:	f7fd f969 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800369e:	2102      	movs	r1, #2
 80036a0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80036a4:	f7fd f964 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80036a8:	2167      	movs	r1, #103	; 0x67
 80036aa:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80036ae:	f7fd f95f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80036b2:	2102      	movs	r1, #2
 80036b4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80036b8:	f7fd f95a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80036bc:	2184      	movs	r1, #132	; 0x84
 80036be:	f24d 1021 	movw	r0, #53537	; 0xd121
 80036c2:	f7fd f955 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80036c6:	2102      	movs	r1, #2
 80036c8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80036cc:	f7fd f950 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80036d0:	21a4      	movs	r1, #164	; 0xa4
 80036d2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80036d6:	f7fd f94b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80036da:	2102      	movs	r1, #2
 80036dc:	f24d 1024 	movw	r0, #53540	; 0xd124
 80036e0:	f7fd f946 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80036e4:	21b7      	movs	r1, #183	; 0xb7
 80036e6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80036ea:	f7fd f941 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80036ee:	2102      	movs	r1, #2
 80036f0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80036f4:	f7fd f93c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80036f8:	21cf      	movs	r1, #207	; 0xcf
 80036fa:	f24d 1027 	movw	r0, #53543	; 0xd127
 80036fe:	f7fd f937 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003702:	2102      	movs	r1, #2
 8003704:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003708:	f7fd f932 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800370c:	21de      	movs	r1, #222	; 0xde
 800370e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003712:	f7fd f92d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003716:	2102      	movs	r1, #2
 8003718:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800371c:	f7fd f928 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003720:	21f2      	movs	r1, #242	; 0xf2
 8003722:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003726:	f7fd f923 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800372a:	2102      	movs	r1, #2
 800372c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003730:	f7fd f91e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003734:	21fe      	movs	r1, #254	; 0xfe
 8003736:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800373a:	f7fd f919 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800373e:	2103      	movs	r1, #3
 8003740:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003744:	f7fd f914 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003748:	2110      	movs	r1, #16
 800374a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800374e:	f7fd f90f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003752:	2103      	movs	r1, #3
 8003754:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003758:	f7fd f90a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800375c:	2133      	movs	r1, #51	; 0x33
 800375e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003762:	f7fd f905 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003766:	2103      	movs	r1, #3
 8003768:	f24d 1032 	movw	r0, #53554	; 0xd132
 800376c:	f7fd f900 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003770:	216d      	movs	r1, #109	; 0x6d
 8003772:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003776:	f7fd f8fb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800377a:	2100      	movs	r1, #0
 800377c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003780:	f7fd f8f6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003784:	2133      	movs	r1, #51	; 0x33
 8003786:	f24d 2001 	movw	r0, #53761	; 0xd201
 800378a:	f7fd f8f1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800378e:	2100      	movs	r1, #0
 8003790:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003794:	f7fd f8ec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003798:	2134      	movs	r1, #52	; 0x34
 800379a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800379e:	f7fd f8e7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80037a2:	2100      	movs	r1, #0
 80037a4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80037a8:	f7fd f8e2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80037ac:	213a      	movs	r1, #58	; 0x3a
 80037ae:	f24d 2005 	movw	r0, #53765	; 0xd205
 80037b2:	f7fd f8dd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80037b6:	2100      	movs	r1, #0
 80037b8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80037bc:	f7fd f8d8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80037c0:	214a      	movs	r1, #74	; 0x4a
 80037c2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80037c6:	f7fd f8d3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80037ca:	2100      	movs	r1, #0
 80037cc:	f24d 2008 	movw	r0, #53768	; 0xd208
 80037d0:	f7fd f8ce 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80037d4:	215c      	movs	r1, #92	; 0x5c
 80037d6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80037da:	f7fd f8c9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80037de:	2100      	movs	r1, #0
 80037e0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80037e4:	f7fd f8c4 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80037e8:	2181      	movs	r1, #129	; 0x81
 80037ea:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80037ee:	f7fd f8bf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80037f2:	2100      	movs	r1, #0
 80037f4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80037f8:	f7fd f8ba 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80037fc:	21a6      	movs	r1, #166	; 0xa6
 80037fe:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003802:	f7fd f8b5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003806:	2100      	movs	r1, #0
 8003808:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800380c:	f7fd f8b0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003810:	21e5      	movs	r1, #229	; 0xe5
 8003812:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003816:	f7fd f8ab 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800381a:	2101      	movs	r1, #1
 800381c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003820:	f7fd f8a6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003824:	2113      	movs	r1, #19
 8003826:	f24d 2011 	movw	r0, #53777	; 0xd211
 800382a:	f7fd f8a1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800382e:	2101      	movs	r1, #1
 8003830:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003834:	f7fd f89c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003838:	2154      	movs	r1, #84	; 0x54
 800383a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800383e:	f7fd f897 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003842:	2101      	movs	r1, #1
 8003844:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003848:	f7fd f892 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800384c:	2182      	movs	r1, #130	; 0x82
 800384e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003852:	f7fd f88d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003856:	2101      	movs	r1, #1
 8003858:	f24d 2016 	movw	r0, #53782	; 0xd216
 800385c:	f7fd f888 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003860:	21ca      	movs	r1, #202	; 0xca
 8003862:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003866:	f7fd f883 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800386a:	2102      	movs	r1, #2
 800386c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003870:	f7fd f87e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003874:	2100      	movs	r1, #0
 8003876:	f24d 2019 	movw	r0, #53785	; 0xd219
 800387a:	f7fd f879 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800387e:	2102      	movs	r1, #2
 8003880:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003884:	f7fd f874 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003888:	2101      	movs	r1, #1
 800388a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800388e:	f7fd f86f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003892:	2102      	movs	r1, #2
 8003894:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003898:	f7fd f86a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800389c:	2134      	movs	r1, #52	; 0x34
 800389e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80038a2:	f7fd f865 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80038a6:	2102      	movs	r1, #2
 80038a8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80038ac:	f7fd f860 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80038b0:	2167      	movs	r1, #103	; 0x67
 80038b2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80038b6:	f7fd f85b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80038ba:	2102      	movs	r1, #2
 80038bc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80038c0:	f7fd f856 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80038c4:	2184      	movs	r1, #132	; 0x84
 80038c6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80038ca:	f7fd f851 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80038ce:	2102      	movs	r1, #2
 80038d0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80038d4:	f7fd f84c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80038d8:	21a4      	movs	r1, #164	; 0xa4
 80038da:	f24d 2023 	movw	r0, #53795	; 0xd223
 80038de:	f7fd f847 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80038e2:	2102      	movs	r1, #2
 80038e4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80038e8:	f7fd f842 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80038ec:	21b7      	movs	r1, #183	; 0xb7
 80038ee:	f24d 2025 	movw	r0, #53797	; 0xd225
 80038f2:	f7fd f83d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80038f6:	2102      	movs	r1, #2
 80038f8:	f24d 2026 	movw	r0, #53798	; 0xd226
 80038fc:	f7fd f838 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003900:	21cf      	movs	r1, #207	; 0xcf
 8003902:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003906:	f7fd f833 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800390a:	2102      	movs	r1, #2
 800390c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003910:	f7fd f82e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003914:	21de      	movs	r1, #222	; 0xde
 8003916:	f24d 2029 	movw	r0, #53801	; 0xd229
 800391a:	f7fd f829 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800391e:	2102      	movs	r1, #2
 8003920:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003924:	f7fd f824 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003928:	21f2      	movs	r1, #242	; 0xf2
 800392a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800392e:	f7fd f81f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003932:	2102      	movs	r1, #2
 8003934:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003938:	f7fd f81a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800393c:	21fe      	movs	r1, #254	; 0xfe
 800393e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003942:	f7fd f815 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003946:	2103      	movs	r1, #3
 8003948:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800394c:	f7fd f810 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003950:	2110      	movs	r1, #16
 8003952:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003956:	f7fd f80b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800395a:	2103      	movs	r1, #3
 800395c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003960:	f7fd f806 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003964:	2133      	movs	r1, #51	; 0x33
 8003966:	f24d 2031 	movw	r0, #53809	; 0xd231
 800396a:	f7fd f801 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800396e:	2103      	movs	r1, #3
 8003970:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003974:	f7fc fffc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003978:	216d      	movs	r1, #109	; 0x6d
 800397a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800397e:	f7fc fff7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003982:	2100      	movs	r1, #0
 8003984:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003988:	f7fc fff2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800398c:	2133      	movs	r1, #51	; 0x33
 800398e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003992:	f7fc ffed 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003996:	2100      	movs	r1, #0
 8003998:	f24d 3002 	movw	r0, #54018	; 0xd302
 800399c:	f7fc ffe8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80039a0:	2134      	movs	r1, #52	; 0x34
 80039a2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80039a6:	f7fc ffe3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80039aa:	2100      	movs	r1, #0
 80039ac:	f24d 3004 	movw	r0, #54020	; 0xd304
 80039b0:	f7fc ffde 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80039b4:	213a      	movs	r1, #58	; 0x3a
 80039b6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80039ba:	f7fc ffd9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80039be:	2100      	movs	r1, #0
 80039c0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80039c4:	f7fc ffd4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80039c8:	214a      	movs	r1, #74	; 0x4a
 80039ca:	f24d 3007 	movw	r0, #54023	; 0xd307
 80039ce:	f7fc ffcf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80039d2:	2100      	movs	r1, #0
 80039d4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80039d8:	f7fc ffca 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80039dc:	215c      	movs	r1, #92	; 0x5c
 80039de:	f24d 3009 	movw	r0, #54025	; 0xd309
 80039e2:	f7fc ffc5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80039e6:	2100      	movs	r1, #0
 80039e8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80039ec:	f7fc ffc0 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 80039f0:	2181      	movs	r1, #129	; 0x81
 80039f2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80039f6:	f7fc ffbb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 80039fa:	2100      	movs	r1, #0
 80039fc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003a00:	f7fc ffb6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003a04:	21a6      	movs	r1, #166	; 0xa6
 8003a06:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003a0a:	f7fc ffb1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003a14:	f7fc ffac 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003a18:	21e5      	movs	r1, #229	; 0xe5
 8003a1a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003a1e:	f7fc ffa7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003a22:	2101      	movs	r1, #1
 8003a24:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003a28:	f7fc ffa2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003a2c:	2113      	movs	r1, #19
 8003a2e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003a32:	f7fc ff9d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003a36:	2101      	movs	r1, #1
 8003a38:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003a3c:	f7fc ff98 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003a40:	2154      	movs	r1, #84	; 0x54
 8003a42:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003a46:	f7fc ff93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003a50:	f7fc ff8e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003a54:	2182      	movs	r1, #130	; 0x82
 8003a56:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003a5a:	f7fc ff89 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003a64:	f7fc ff84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003a68:	21ca      	movs	r1, #202	; 0xca
 8003a6a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003a6e:	f7fc ff7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003a72:	2102      	movs	r1, #2
 8003a74:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003a78:	f7fc ff7a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003a82:	f7fc ff75 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003a86:	2102      	movs	r1, #2
 8003a88:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003a8c:	f7fc ff70 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003a90:	2101      	movs	r1, #1
 8003a92:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003a96:	f7fc ff6b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003aa0:	f7fc ff66 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003aa4:	2134      	movs	r1, #52	; 0x34
 8003aa6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003aaa:	f7fc ff61 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003ab4:	f7fc ff5c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003ab8:	2167      	movs	r1, #103	; 0x67
 8003aba:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003abe:	f7fc ff57 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003ac8:	f7fc ff52 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003acc:	2184      	movs	r1, #132	; 0x84
 8003ace:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003ad2:	f7fc ff4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003adc:	f7fc ff48 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003ae0:	21a4      	movs	r1, #164	; 0xa4
 8003ae2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003ae6:	f7fc ff43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003aea:	2102      	movs	r1, #2
 8003aec:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003af0:	f7fc ff3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003af4:	21b7      	movs	r1, #183	; 0xb7
 8003af6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003afa:	f7fc ff39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003afe:	2102      	movs	r1, #2
 8003b00:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003b04:	f7fc ff34 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003b08:	21cf      	movs	r1, #207	; 0xcf
 8003b0a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003b0e:	f7fc ff2f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003b12:	2102      	movs	r1, #2
 8003b14:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003b18:	f7fc ff2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003b1c:	21de      	movs	r1, #222	; 0xde
 8003b1e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003b22:	f7fc ff25 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003b26:	2102      	movs	r1, #2
 8003b28:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003b2c:	f7fc ff20 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003b30:	21f2      	movs	r1, #242	; 0xf2
 8003b32:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003b36:	f7fc ff1b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003b40:	f7fc ff16 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003b44:	21fe      	movs	r1, #254	; 0xfe
 8003b46:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003b4a:	f7fc ff11 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003b4e:	2103      	movs	r1, #3
 8003b50:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003b54:	f7fc ff0c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003b58:	2110      	movs	r1, #16
 8003b5a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003b5e:	f7fc ff07 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003b62:	2103      	movs	r1, #3
 8003b64:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003b68:	f7fc ff02 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003b6c:	2133      	movs	r1, #51	; 0x33
 8003b6e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003b72:	f7fc fefd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003b76:	2103      	movs	r1, #3
 8003b78:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003b7c:	f7fc fef8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003b80:	216d      	movs	r1, #109	; 0x6d
 8003b82:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003b86:	f7fc fef3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003b90:	f7fc feee 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003b94:	2133      	movs	r1, #51	; 0x33
 8003b96:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003b9a:	f7fc fee9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003ba4:	f7fc fee4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003ba8:	2134      	movs	r1, #52	; 0x34
 8003baa:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003bae:	f7fc fedf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003bb8:	f7fc feda 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003bbc:	213a      	movs	r1, #58	; 0x3a
 8003bbe:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003bc2:	f7fc fed5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003bcc:	f7fc fed0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003bd0:	214a      	movs	r1, #74	; 0x4a
 8003bd2:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003bd6:	f7fc fecb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003be0:	f7fc fec6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003be4:	215c      	movs	r1, #92	; 0x5c
 8003be6:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003bea:	f7fc fec1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003bf4:	f7fc febc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003bf8:	2181      	movs	r1, #129	; 0x81
 8003bfa:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003bfe:	f7fc feb7 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003c02:	2100      	movs	r1, #0
 8003c04:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003c08:	f7fc feb2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003c0c:	21a6      	movs	r1, #166	; 0xa6
 8003c0e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003c12:	f7fc fead 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003c16:	2100      	movs	r1, #0
 8003c18:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003c1c:	f7fc fea8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003c20:	21e5      	movs	r1, #229	; 0xe5
 8003c22:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003c26:	f7fc fea3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003c30:	f7fc fe9e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003c34:	2113      	movs	r1, #19
 8003c36:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003c3a:	f7fc fe99 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003c3e:	2101      	movs	r1, #1
 8003c40:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003c44:	f7fc fe94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003c48:	2154      	movs	r1, #84	; 0x54
 8003c4a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003c4e:	f7fc fe8f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003c52:	2101      	movs	r1, #1
 8003c54:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003c58:	f7fc fe8a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003c5c:	2182      	movs	r1, #130	; 0x82
 8003c5e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003c62:	f7fc fe85 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003c66:	2101      	movs	r1, #1
 8003c68:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003c6c:	f7fc fe80 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003c70:	21ca      	movs	r1, #202	; 0xca
 8003c72:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003c76:	f7fc fe7b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003c80:	f7fc fe76 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003c84:	2100      	movs	r1, #0
 8003c86:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003c8a:	f7fc fe71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003c8e:	2102      	movs	r1, #2
 8003c90:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003c94:	f7fc fe6c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003c98:	2101      	movs	r1, #1
 8003c9a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003c9e:	f7fc fe67 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003ca8:	f7fc fe62 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003cac:	2134      	movs	r1, #52	; 0x34
 8003cae:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003cb2:	f7fc fe5d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003cbc:	f7fc fe58 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003cc0:	2167      	movs	r1, #103	; 0x67
 8003cc2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003cc6:	f7fc fe53 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003cd0:	f7fc fe4e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003cd4:	2184      	movs	r1, #132	; 0x84
 8003cd6:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003cda:	f7fc fe49 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003cde:	2102      	movs	r1, #2
 8003ce0:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003ce4:	f7fc fe44 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003ce8:	21a4      	movs	r1, #164	; 0xa4
 8003cea:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003cee:	f7fc fe3f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003cf8:	f7fc fe3a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003cfc:	21b7      	movs	r1, #183	; 0xb7
 8003cfe:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003d02:	f7fc fe35 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003d06:	2102      	movs	r1, #2
 8003d08:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003d0c:	f7fc fe30 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003d10:	21cf      	movs	r1, #207	; 0xcf
 8003d12:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003d16:	f7fc fe2b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003d20:	f7fc fe26 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003d24:	21de      	movs	r1, #222	; 0xde
 8003d26:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003d2a:	f7fc fe21 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003d2e:	2102      	movs	r1, #2
 8003d30:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003d34:	f7fc fe1c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003d38:	21f2      	movs	r1, #242	; 0xf2
 8003d3a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003d3e:	f7fc fe17 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003d42:	2102      	movs	r1, #2
 8003d44:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003d48:	f7fc fe12 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003d4c:	21fe      	movs	r1, #254	; 0xfe
 8003d4e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003d52:	f7fc fe0d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003d56:	2103      	movs	r1, #3
 8003d58:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003d5c:	f7fc fe08 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003d60:	2110      	movs	r1, #16
 8003d62:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003d66:	f7fc fe03 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003d70:	f7fc fdfe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003d74:	2133      	movs	r1, #51	; 0x33
 8003d76:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003d7a:	f7fc fdf9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003d7e:	2103      	movs	r1, #3
 8003d80:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003d84:	f7fc fdf4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003d88:	216d      	movs	r1, #109	; 0x6d
 8003d8a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003d8e:	f7fc fdef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003d92:	2100      	movs	r1, #0
 8003d94:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003d98:	f7fc fdea 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003d9c:	2133      	movs	r1, #51	; 0x33
 8003d9e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003da2:	f7fc fde5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003da6:	2100      	movs	r1, #0
 8003da8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003dac:	f7fc fde0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003db0:	2134      	movs	r1, #52	; 0x34
 8003db2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003db6:	f7fc fddb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003dc0:	f7fc fdd6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003dc4:	213a      	movs	r1, #58	; 0x3a
 8003dc6:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003dca:	f7fc fdd1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003dd4:	f7fc fdcc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003dd8:	214a      	movs	r1, #74	; 0x4a
 8003dda:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003dde:	f7fc fdc7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003de2:	2100      	movs	r1, #0
 8003de4:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003de8:	f7fc fdc2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003dec:	215c      	movs	r1, #92	; 0x5c
 8003dee:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003df2:	f7fc fdbd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003df6:	2100      	movs	r1, #0
 8003df8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003dfc:	f7fc fdb8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003e00:	2181      	movs	r1, #129	; 0x81
 8003e02:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003e06:	f7fc fdb3 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003e10:	f7fc fdae 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003e14:	21a6      	movs	r1, #166	; 0xa6
 8003e16:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003e1a:	f7fc fda9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003e24:	f7fc fda4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003e28:	21e5      	movs	r1, #229	; 0xe5
 8003e2a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003e2e:	f7fc fd9f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003e32:	2101      	movs	r1, #1
 8003e34:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003e38:	f7fc fd9a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003e3c:	2113      	movs	r1, #19
 8003e3e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003e42:	f7fc fd95 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003e46:	2101      	movs	r1, #1
 8003e48:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003e4c:	f7fc fd90 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003e50:	2154      	movs	r1, #84	; 0x54
 8003e52:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003e56:	f7fc fd8b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003e60:	f7fc fd86 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003e64:	2182      	movs	r1, #130	; 0x82
 8003e66:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003e6a:	f7fc fd81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003e6e:	2101      	movs	r1, #1
 8003e70:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003e74:	f7fc fd7c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003e78:	21ca      	movs	r1, #202	; 0xca
 8003e7a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003e7e:	f7fc fd77 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003e82:	2102      	movs	r1, #2
 8003e84:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003e88:	f7fc fd72 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003e92:	f7fc fd6d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003e96:	2102      	movs	r1, #2
 8003e98:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003e9c:	f7fc fd68 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003ea6:	f7fc fd63 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003eaa:	2102      	movs	r1, #2
 8003eac:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003eb0:	f7fc fd5e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003eb4:	2134      	movs	r1, #52	; 0x34
 8003eb6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003eba:	f7fc fd59 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003ec4:	f7fc fd54 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003ec8:	2167      	movs	r1, #103	; 0x67
 8003eca:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003ece:	f7fc fd4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003ed8:	f7fc fd4a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003edc:	2184      	movs	r1, #132	; 0x84
 8003ede:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003ee2:	f7fc fd45 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003eec:	f7fc fd40 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003ef0:	21a4      	movs	r1, #164	; 0xa4
 8003ef2:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003ef6:	f7fc fd3b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003efa:	2102      	movs	r1, #2
 8003efc:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003f00:	f7fc fd36 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003f04:	21b7      	movs	r1, #183	; 0xb7
 8003f06:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003f0a:	f7fc fd31 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003f0e:	2102      	movs	r1, #2
 8003f10:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003f14:	f7fc fd2c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003f18:	21cf      	movs	r1, #207	; 0xcf
 8003f1a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003f1e:	f7fc fd27 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003f22:	2102      	movs	r1, #2
 8003f24:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003f28:	f7fc fd22 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003f2c:	21de      	movs	r1, #222	; 0xde
 8003f2e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003f32:	f7fc fd1d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003f36:	2102      	movs	r1, #2
 8003f38:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003f3c:	f7fc fd18 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003f40:	21f2      	movs	r1, #242	; 0xf2
 8003f42:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003f46:	f7fc fd13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003f50:	f7fc fd0e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003f54:	21fe      	movs	r1, #254	; 0xfe
 8003f56:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003f5a:	f7fc fd09 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003f5e:	2103      	movs	r1, #3
 8003f60:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003f64:	f7fc fd04 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003f68:	2110      	movs	r1, #16
 8003f6a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003f6e:	f7fc fcff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003f72:	2103      	movs	r1, #3
 8003f74:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003f78:	f7fc fcfa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003f7c:	2133      	movs	r1, #51	; 0x33
 8003f7e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003f82:	f7fc fcf5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003f86:	2103      	movs	r1, #3
 8003f88:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003f8c:	f7fc fcf0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003f90:	216d      	movs	r1, #109	; 0x6d
 8003f92:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003f96:	f7fc fceb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003fa0:	f7fc fce6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003fa4:	2133      	movs	r1, #51	; 0x33
 8003fa6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003faa:	f7fc fce1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003fb4:	f7fc fcdc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003fb8:	2134      	movs	r1, #52	; 0x34
 8003fba:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003fbe:	f7fc fcd7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003fc8:	f7fc fcd2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003fcc:	213a      	movs	r1, #58	; 0x3a
 8003fce:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003fd2:	f7fc fccd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003fdc:	f7fc fcc8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003fe0:	214a      	movs	r1, #74	; 0x4a
 8003fe2:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003fe6:	f7fc fcc3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003fea:	2100      	movs	r1, #0
 8003fec:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003ff0:	f7fc fcbe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003ff4:	215c      	movs	r1, #92	; 0x5c
 8003ff6:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003ffa:	f7fc fcb9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003ffe:	2100      	movs	r1, #0
 8004000:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004004:	f7fc fcb4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004008:	2181      	movs	r1, #129	; 0x81
 800400a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800400e:	f7fc fcaf 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8004012:	2100      	movs	r1, #0
 8004014:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004018:	f7fc fcaa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 800401c:	21a6      	movs	r1, #166	; 0xa6
 800401e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004022:	f7fc fca5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8004026:	2100      	movs	r1, #0
 8004028:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800402c:	f7fc fca0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004030:	21e5      	movs	r1, #229	; 0xe5
 8004032:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004036:	f7fc fc9b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800403a:	2101      	movs	r1, #1
 800403c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004040:	f7fc fc96 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004044:	2113      	movs	r1, #19
 8004046:	f24d 6011 	movw	r0, #54801	; 0xd611
 800404a:	f7fc fc91 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800404e:	2101      	movs	r1, #1
 8004050:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004054:	f7fc fc8c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004058:	2154      	movs	r1, #84	; 0x54
 800405a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800405e:	f7fc fc87 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004062:	2101      	movs	r1, #1
 8004064:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004068:	f7fc fc82 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800406c:	2182      	movs	r1, #130	; 0x82
 800406e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004072:	f7fc fc7d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004076:	2101      	movs	r1, #1
 8004078:	f24d 6016 	movw	r0, #54806	; 0xd616
 800407c:	f7fc fc78 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004080:	21ca      	movs	r1, #202	; 0xca
 8004082:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004086:	f7fc fc73 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800408a:	2102      	movs	r1, #2
 800408c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004090:	f7fc fc6e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004094:	2100      	movs	r1, #0
 8004096:	f24d 6019 	movw	r0, #54809	; 0xd619
 800409a:	f7fc fc69 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800409e:	2102      	movs	r1, #2
 80040a0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80040a4:	f7fc fc64 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80040a8:	2101      	movs	r1, #1
 80040aa:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80040ae:	f7fc fc5f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80040b2:	2102      	movs	r1, #2
 80040b4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80040b8:	f7fc fc5a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80040bc:	2134      	movs	r1, #52	; 0x34
 80040be:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80040c2:	f7fc fc55 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80040c6:	2102      	movs	r1, #2
 80040c8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80040cc:	f7fc fc50 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80040d0:	2167      	movs	r1, #103	; 0x67
 80040d2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80040d6:	f7fc fc4b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80040da:	2102      	movs	r1, #2
 80040dc:	f24d 6020 	movw	r0, #54816	; 0xd620
 80040e0:	f7fc fc46 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80040e4:	2184      	movs	r1, #132	; 0x84
 80040e6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80040ea:	f7fc fc41 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80040ee:	2102      	movs	r1, #2
 80040f0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80040f4:	f7fc fc3c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80040f8:	21a4      	movs	r1, #164	; 0xa4
 80040fa:	f24d 6023 	movw	r0, #54819	; 0xd623
 80040fe:	f7fc fc37 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8004102:	2102      	movs	r1, #2
 8004104:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004108:	f7fc fc32 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 800410c:	21b7      	movs	r1, #183	; 0xb7
 800410e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004112:	f7fc fc2d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8004116:	2102      	movs	r1, #2
 8004118:	f24d 6026 	movw	r0, #54822	; 0xd626
 800411c:	f7fc fc28 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004120:	21cf      	movs	r1, #207	; 0xcf
 8004122:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004126:	f7fc fc23 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 800412a:	2102      	movs	r1, #2
 800412c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004130:	f7fc fc1e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004134:	21de      	movs	r1, #222	; 0xde
 8004136:	f24d 6029 	movw	r0, #54825	; 0xd629
 800413a:	f7fc fc19 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 800413e:	2102      	movs	r1, #2
 8004140:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004144:	f7fc fc14 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004148:	21f2      	movs	r1, #242	; 0xf2
 800414a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800414e:	f7fc fc0f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004152:	2102      	movs	r1, #2
 8004154:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004158:	f7fc fc0a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800415c:	21fe      	movs	r1, #254	; 0xfe
 800415e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004162:	f7fc fc05 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004166:	2103      	movs	r1, #3
 8004168:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800416c:	f7fc fc00 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004170:	2110      	movs	r1, #16
 8004172:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004176:	f7fc fbfb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800417a:	2103      	movs	r1, #3
 800417c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004180:	f7fc fbf6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004184:	2133      	movs	r1, #51	; 0x33
 8004186:	f24d 6031 	movw	r0, #54833	; 0xd631
 800418a:	f7fc fbf1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800418e:	2103      	movs	r1, #3
 8004190:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004194:	f7fc fbec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004198:	216d      	movs	r1, #109	; 0x6d
 800419a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800419e:	f7fc fbe7 	bl	8000970 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80041a2:	2155      	movs	r1, #85	; 0x55
 80041a4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80041a8:	f7fc fbe2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80041ac:	21aa      	movs	r1, #170	; 0xaa
 80041ae:	f24f 0001 	movw	r0, #61441	; 0xf001
 80041b2:	f7fc fbdd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80041b6:	2152      	movs	r1, #82	; 0x52
 80041b8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80041bc:	f7fc fbd8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80041c0:	2108      	movs	r1, #8
 80041c2:	f24f 0003 	movw	r0, #61443	; 0xf003
 80041c6:	f7fc fbd3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80041ca:	2100      	movs	r1, #0
 80041cc:	f24f 0004 	movw	r0, #61444	; 0xf004
 80041d0:	f7fc fbce 	bl	8000970 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80041d4:	21cc      	movs	r1, #204	; 0xcc
 80041d6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80041da:	f7fc fbc9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80041de:	2100      	movs	r1, #0
 80041e0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80041e4:	f7fc fbc4 	bl	8000970 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80041e8:	2105      	movs	r1, #5
 80041ea:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80041ee:	f7fc fbbf 	bl	8000970 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80041f2:	2170      	movs	r1, #112	; 0x70
 80041f4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80041f8:	f7fc fbba 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80041fc:	2170      	movs	r1, #112	; 0x70
 80041fe:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004202:	f7fc fbb5 	bl	8000970 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8004206:	2101      	movs	r1, #1
 8004208:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800420c:	f7fc fbb0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004210:	2103      	movs	r1, #3
 8004212:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004216:	f7fc fbab 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 800421a:	2103      	movs	r1, #3
 800421c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004220:	f7fc fba6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8004224:	2103      	movs	r1, #3
 8004226:	f64b 0003 	movw	r0, #47107	; 0xb803
 800422a:	f7fc fba1 	bl	8000970 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 800422e:	2102      	movs	r1, #2
 8004230:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004234:	f7fc fb9c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004238:	2100      	movs	r1, #0
 800423a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800423e:	f7fc fb97 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004242:	2100      	movs	r1, #0
 8004244:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004248:	f7fc fb92 	bl	8000970 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800424c:	21d0      	movs	r1, #208	; 0xd0
 800424e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004252:	f7fc fb8d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004256:	2102      	movs	r1, #2
 8004258:	f64c 1001 	movw	r0, #51457	; 0xc901
 800425c:	f7fc fb88 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004260:	2150      	movs	r1, #80	; 0x50
 8004262:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004266:	f7fc fb83 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800426a:	2150      	movs	r1, #80	; 0x50
 800426c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004270:	f7fc fb7e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004274:	2150      	movs	r1, #80	; 0x50
 8004276:	f64c 1004 	movw	r0, #51460	; 0xc904
 800427a:	f7fc fb79 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800427e:	2100      	movs	r1, #0
 8004280:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004284:	f7fc fb74 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004288:	2155      	movs	r1, #85	; 0x55
 800428a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800428e:	f7fc fb6f 	bl	8000970 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004292:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004296:	f7fc fadf 	bl	8000858 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800429a:	2001      	movs	r0, #1
 800429c:	f004 f936 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0x2900);
 80042a0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80042a4:	f7fc fad8 	bl	8000858 <LCD_WR_REG>
 80042a8:	f001 bd18 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80042ac:	4bec      	ldr	r3, [pc, #944]	; (8004660 <LCD_Init+0x27b8>)
 80042ae:	889b      	ldrh	r3, [r3, #4]
 80042b0:	f249 3225 	movw	r2, #37669	; 0x9325
 80042b4:	4293      	cmp	r3, r2
 80042b6:	f040 80d7 	bne.w	8004468 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80042ba:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80042be:	20e5      	movs	r0, #229	; 0xe5
 80042c0:	f7fc fb56 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80042c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042c8:	2001      	movs	r0, #1
 80042ca:	f7fc fb51 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80042ce:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80042d2:	2002      	movs	r0, #2
 80042d4:	f7fc fb4c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80042d8:	f241 0130 	movw	r1, #4144	; 0x1030
 80042dc:	2003      	movs	r0, #3
 80042de:	f7fc fb47 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80042e2:	2100      	movs	r1, #0
 80042e4:	2004      	movs	r0, #4
 80042e6:	f7fc fb43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80042ea:	f240 2102 	movw	r1, #514	; 0x202
 80042ee:	2008      	movs	r0, #8
 80042f0:	f7fc fb3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80042f4:	2100      	movs	r1, #0
 80042f6:	2009      	movs	r0, #9
 80042f8:	f7fc fb3a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80042fc:	2100      	movs	r1, #0
 80042fe:	200a      	movs	r0, #10
 8004300:	f7fc fb36 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004304:	2100      	movs	r1, #0
 8004306:	200c      	movs	r0, #12
 8004308:	f7fc fb32 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800430c:	2100      	movs	r1, #0
 800430e:	200d      	movs	r0, #13
 8004310:	f7fc fb2e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004314:	2100      	movs	r1, #0
 8004316:	200f      	movs	r0, #15
 8004318:	f7fc fb2a 	bl	8000970 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800431c:	2100      	movs	r1, #0
 800431e:	2010      	movs	r0, #16
 8004320:	f7fc fb26 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004324:	2107      	movs	r1, #7
 8004326:	2011      	movs	r0, #17
 8004328:	f7fc fb22 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800432c:	2100      	movs	r1, #0
 800432e:	2012      	movs	r0, #18
 8004330:	f7fc fb1e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004334:	2100      	movs	r1, #0
 8004336:	2013      	movs	r0, #19
 8004338:	f7fc fb1a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800433c:	2100      	movs	r1, #0
 800433e:	2007      	movs	r0, #7
 8004340:	f7fc fb16 	bl	8000970 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004344:	f241 6190 	movw	r1, #5776	; 0x1690
 8004348:	2010      	movs	r0, #16
 800434a:	f7fc fb11 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800434e:	f240 2127 	movw	r1, #551	; 0x227
 8004352:	2011      	movs	r0, #17
 8004354:	f7fc fb0c 	bl	8000970 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004358:	219d      	movs	r1, #157	; 0x9d
 800435a:	2012      	movs	r0, #18
 800435c:	f7fc fb08 	bl	8000970 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004360:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004364:	2013      	movs	r0, #19
 8004366:	f7fc fb03 	bl	8000970 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800436a:	2125      	movs	r1, #37	; 0x25
 800436c:	2029      	movs	r0, #41	; 0x29
 800436e:	f7fc faff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004372:	210d      	movs	r1, #13
 8004374:	202b      	movs	r0, #43	; 0x2b
 8004376:	f7fc fafb 	bl	8000970 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800437a:	2107      	movs	r1, #7
 800437c:	2030      	movs	r0, #48	; 0x30
 800437e:	f7fc faf7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004382:	f240 3103 	movw	r1, #771	; 0x303
 8004386:	2031      	movs	r0, #49	; 0x31
 8004388:	f7fc faf2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800438c:	2103      	movs	r1, #3
 800438e:	2032      	movs	r0, #50	; 0x32
 8004390:	f7fc faee 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004394:	f240 2106 	movw	r1, #518	; 0x206
 8004398:	2035      	movs	r0, #53	; 0x35
 800439a:	f7fc fae9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800439e:	2108      	movs	r1, #8
 80043a0:	2036      	movs	r0, #54	; 0x36
 80043a2:	f7fc fae5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80043a6:	f240 4106 	movw	r1, #1030	; 0x406
 80043aa:	2037      	movs	r0, #55	; 0x37
 80043ac:	f7fc fae0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80043b0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80043b4:	2038      	movs	r0, #56	; 0x38
 80043b6:	f7fc fadb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80043ba:	2107      	movs	r1, #7
 80043bc:	2039      	movs	r0, #57	; 0x39
 80043be:	f7fc fad7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80043c2:	f240 6102 	movw	r1, #1538	; 0x602
 80043c6:	203c      	movs	r0, #60	; 0x3c
 80043c8:	f7fc fad2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80043cc:	2108      	movs	r1, #8
 80043ce:	203d      	movs	r0, #61	; 0x3d
 80043d0:	f7fc face 	bl	8000970 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80043d4:	2100      	movs	r1, #0
 80043d6:	2050      	movs	r0, #80	; 0x50
 80043d8:	f7fc faca 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80043dc:	21ef      	movs	r1, #239	; 0xef
 80043de:	2051      	movs	r0, #81	; 0x51
 80043e0:	f7fc fac6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80043e4:	2100      	movs	r1, #0
 80043e6:	2052      	movs	r0, #82	; 0x52
 80043e8:	f7fc fac2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80043ec:	f240 113f 	movw	r1, #319	; 0x13f
 80043f0:	2053      	movs	r0, #83	; 0x53
 80043f2:	f7fc fabd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80043f6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80043fa:	2060      	movs	r0, #96	; 0x60
 80043fc:	f7fc fab8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004400:	2101      	movs	r1, #1
 8004402:	2061      	movs	r0, #97	; 0x61
 8004404:	f7fc fab4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004408:	2100      	movs	r1, #0
 800440a:	206a      	movs	r0, #106	; 0x6a
 800440c:	f7fc fab0 	bl	8000970 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004410:	2100      	movs	r1, #0
 8004412:	2080      	movs	r0, #128	; 0x80
 8004414:	f7fc faac 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004418:	2100      	movs	r1, #0
 800441a:	2081      	movs	r0, #129	; 0x81
 800441c:	f7fc faa8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004420:	2100      	movs	r1, #0
 8004422:	2082      	movs	r0, #130	; 0x82
 8004424:	f7fc faa4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004428:	2100      	movs	r1, #0
 800442a:	2083      	movs	r0, #131	; 0x83
 800442c:	f7fc faa0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004430:	2100      	movs	r1, #0
 8004432:	2084      	movs	r0, #132	; 0x84
 8004434:	f7fc fa9c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004438:	2100      	movs	r1, #0
 800443a:	2085      	movs	r0, #133	; 0x85
 800443c:	f7fc fa98 	bl	8000970 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004440:	2110      	movs	r1, #16
 8004442:	2090      	movs	r0, #144	; 0x90
 8004444:	f7fc fa94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004448:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800444c:	2092      	movs	r0, #146	; 0x92
 800444e:	f7fc fa8f 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004452:	f240 1133 	movw	r1, #307	; 0x133
 8004456:	2007      	movs	r0, #7
 8004458:	f7fc fa8a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800445c:	2122      	movs	r1, #34	; 0x22
 800445e:	2000      	movs	r0, #0
 8004460:	f7fc fa86 	bl	8000970 <LCD_WriteReg>
 8004464:	f001 bc3a 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004468:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <LCD_Init+0x27b8>)
 800446a:	889b      	ldrh	r3, [r3, #4]
 800446c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004470:	4293      	cmp	r3, r2
 8004472:	f040 80f7 	bne.w	8004664 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004476:	f241 018f 	movw	r1, #4239	; 0x108f
 800447a:	20ec      	movs	r0, #236	; 0xec
 800447c:	f7fc fa78 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004480:	f241 2134 	movw	r1, #4660	; 0x1234
 8004484:	20ef      	movs	r0, #239	; 0xef
 8004486:	f7fc fa73 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800448a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448e:	2001      	movs	r0, #1
 8004490:	f7fc fa6e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004494:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004498:	2002      	movs	r0, #2
 800449a:	f7fc fa69 	bl	8000970 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800449e:	f241 0130 	movw	r1, #4144	; 0x1030
 80044a2:	2003      	movs	r0, #3
 80044a4:	f7fc fa64 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80044a8:	2100      	movs	r1, #0
 80044aa:	2004      	movs	r0, #4
 80044ac:	f7fc fa60 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80044b0:	f240 2102 	movw	r1, #514	; 0x202
 80044b4:	2008      	movs	r0, #8
 80044b6:	f7fc fa5b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80044ba:	2100      	movs	r1, #0
 80044bc:	2009      	movs	r0, #9
 80044be:	f7fc fa57 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80044c2:	2100      	movs	r1, #0
 80044c4:	200a      	movs	r0, #10
 80044c6:	f7fc fa53 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80044ca:	2101      	movs	r1, #1
 80044cc:	200c      	movs	r0, #12
 80044ce:	f7fc fa4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80044d2:	2100      	movs	r1, #0
 80044d4:	200d      	movs	r0, #13
 80044d6:	f7fc fa4b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80044da:	2100      	movs	r1, #0
 80044dc:	200f      	movs	r0, #15
 80044de:	f7fc fa47 	bl	8000970 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80044e2:	2100      	movs	r1, #0
 80044e4:	2010      	movs	r0, #16
 80044e6:	f7fc fa43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80044ea:	2107      	movs	r1, #7
 80044ec:	2011      	movs	r0, #17
 80044ee:	f7fc fa3f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80044f2:	2100      	movs	r1, #0
 80044f4:	2012      	movs	r0, #18
 80044f6:	f7fc fa3b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80044fa:	2100      	movs	r1, #0
 80044fc:	2013      	movs	r0, #19
 80044fe:	f7fc fa37 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004502:	2101      	movs	r1, #1
 8004504:	2007      	movs	r0, #7
 8004506:	f7fc fa33 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 800450a:	2032      	movs	r0, #50	; 0x32
 800450c:	f003 fffe 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004510:	f241 4190 	movw	r1, #5264	; 0x1490
 8004514:	2010      	movs	r0, #16
 8004516:	f7fc fa2b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800451a:	f240 2127 	movw	r1, #551	; 0x227
 800451e:	2011      	movs	r0, #17
 8004520:	f7fc fa26 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004524:	2032      	movs	r0, #50	; 0x32
 8004526:	f003 fff1 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800452a:	218a      	movs	r1, #138	; 0x8a
 800452c:	2012      	movs	r0, #18
 800452e:	f7fc fa1f 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004532:	2032      	movs	r0, #50	; 0x32
 8004534:	f003 ffea 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004538:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800453c:	2013      	movs	r0, #19
 800453e:	f7fc fa17 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004542:	2106      	movs	r1, #6
 8004544:	2029      	movs	r0, #41	; 0x29
 8004546:	f7fc fa13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800454a:	210d      	movs	r1, #13
 800454c:	202b      	movs	r0, #43	; 0x2b
 800454e:	f7fc fa0f 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004552:	2032      	movs	r0, #50	; 0x32
 8004554:	f003 ffda 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004558:	2100      	movs	r1, #0
 800455a:	2020      	movs	r0, #32
 800455c:	f7fc fa08 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004560:	2100      	movs	r1, #0
 8004562:	2021      	movs	r0, #33	; 0x21
 8004564:	f7fc fa04 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004568:	2032      	movs	r0, #50	; 0x32
 800456a:	f003 ffcf 	bl	800850c <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800456e:	2100      	movs	r1, #0
 8004570:	2030      	movs	r0, #48	; 0x30
 8004572:	f7fc f9fd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004576:	f240 6104 	movw	r1, #1540	; 0x604
 800457a:	2031      	movs	r0, #49	; 0x31
 800457c:	f7fc f9f8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004580:	f240 3105 	movw	r1, #773	; 0x305
 8004584:	2032      	movs	r0, #50	; 0x32
 8004586:	f7fc f9f3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800458a:	2100      	movs	r1, #0
 800458c:	2035      	movs	r0, #53	; 0x35
 800458e:	f7fc f9ef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004592:	f640 4109 	movw	r1, #3081	; 0xc09
 8004596:	2036      	movs	r0, #54	; 0x36
 8004598:	f7fc f9ea 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800459c:	f44f 7101 	mov.w	r1, #516	; 0x204
 80045a0:	2037      	movs	r0, #55	; 0x37
 80045a2:	f7fc f9e5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80045a6:	f240 3101 	movw	r1, #769	; 0x301
 80045aa:	2038      	movs	r0, #56	; 0x38
 80045ac:	f7fc f9e0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80045b0:	f240 7107 	movw	r1, #1799	; 0x707
 80045b4:	2039      	movs	r0, #57	; 0x39
 80045b6:	f7fc f9db 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80045ba:	2100      	movs	r1, #0
 80045bc:	203c      	movs	r0, #60	; 0x3c
 80045be:	f7fc f9d7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80045c2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80045c6:	203d      	movs	r0, #61	; 0x3d
 80045c8:	f7fc f9d2 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80045cc:	2032      	movs	r0, #50	; 0x32
 80045ce:	f003 ff9d 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80045d2:	2100      	movs	r1, #0
 80045d4:	2050      	movs	r0, #80	; 0x50
 80045d6:	f7fc f9cb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80045da:	21ef      	movs	r1, #239	; 0xef
 80045dc:	2051      	movs	r0, #81	; 0x51
 80045de:	f7fc f9c7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80045e2:	2100      	movs	r1, #0
 80045e4:	2052      	movs	r0, #82	; 0x52
 80045e6:	f7fc f9c3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80045ea:	f240 113f 	movw	r1, #319	; 0x13f
 80045ee:	2053      	movs	r0, #83	; 0x53
 80045f0:	f7fc f9be 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80045f4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80045f8:	2060      	movs	r0, #96	; 0x60
 80045fa:	f7fc f9b9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80045fe:	2101      	movs	r1, #1
 8004600:	2061      	movs	r0, #97	; 0x61
 8004602:	f7fc f9b5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004606:	2100      	movs	r1, #0
 8004608:	206a      	movs	r0, #106	; 0x6a
 800460a:	f7fc f9b1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800460e:	2100      	movs	r1, #0
 8004610:	2080      	movs	r0, #128	; 0x80
 8004612:	f7fc f9ad 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004616:	2100      	movs	r1, #0
 8004618:	2081      	movs	r0, #129	; 0x81
 800461a:	f7fc f9a9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800461e:	2100      	movs	r1, #0
 8004620:	2082      	movs	r0, #130	; 0x82
 8004622:	f7fc f9a5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004626:	2100      	movs	r1, #0
 8004628:	2083      	movs	r0, #131	; 0x83
 800462a:	f7fc f9a1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800462e:	2100      	movs	r1, #0
 8004630:	2084      	movs	r0, #132	; 0x84
 8004632:	f7fc f99d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004636:	2100      	movs	r1, #0
 8004638:	2085      	movs	r0, #133	; 0x85
 800463a:	f7fc f999 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800463e:	2110      	movs	r1, #16
 8004640:	2090      	movs	r0, #144	; 0x90
 8004642:	f7fc f995 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004646:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800464a:	2092      	movs	r0, #146	; 0x92
 800464c:	f7fc f990 	bl	8000970 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004650:	f240 1133 	movw	r1, #307	; 0x133
 8004654:	2007      	movs	r0, #7
 8004656:	f7fc f98b 	bl	8000970 <LCD_WriteReg>
 800465a:	f001 bb3f 	b.w	8005cdc <LCD_Init+0x3e34>
 800465e:	bf00      	nop
 8004660:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0x9320) //测试OK.
 8004664:	4bce      	ldr	r3, [pc, #824]	; (80049a0 <LCD_Init+0x2af8>)
 8004666:	889b      	ldrh	r3, [r3, #4]
 8004668:	f249 3220 	movw	r2, #37664	; 0x9320
 800466c:	4293      	cmp	r3, r2
 800466e:	f040 80ad 	bne.w	80047cc <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004672:	2100      	movs	r1, #0
 8004674:	2000      	movs	r0, #0
 8004676:	f7fc f97b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800467a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800467e:	2001      	movs	r0, #1
 8004680:	f7fc f976 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004684:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004688:	2002      	movs	r0, #2
 800468a:	f7fc f971 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800468e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004692:	2003      	movs	r0, #3
 8004694:	f7fc f96c 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004698:	2100      	movs	r1, #0
 800469a:	2004      	movs	r0, #4
 800469c:	f7fc f968 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80046a0:	f240 2102 	movw	r1, #514	; 0x202
 80046a4:	2008      	movs	r0, #8
 80046a6:	f7fc f963 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80046aa:	2100      	movs	r1, #0
 80046ac:	2009      	movs	r0, #9
 80046ae:	f7fc f95f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80046b2:	2100      	movs	r1, #0
 80046b4:	200a      	movs	r0, #10
 80046b6:	f7fc f95b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80046ba:	2101      	movs	r1, #1
 80046bc:	200c      	movs	r0, #12
 80046be:	f7fc f957 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80046c2:	2100      	movs	r1, #0
 80046c4:	200d      	movs	r0, #13
 80046c6:	f7fc f953 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80046ca:	2100      	movs	r1, #0
 80046cc:	200f      	movs	r0, #15
 80046ce:	f7fc f94f 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80046d2:	2032      	movs	r0, #50	; 0x32
 80046d4:	f003 ff1a 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80046d8:	f240 1101 	movw	r1, #257	; 0x101
 80046dc:	2007      	movs	r0, #7
 80046de:	f7fc f947 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 80046e2:	2032      	movs	r0, #50	; 0x32
 80046e4:	f003 ff12 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80046e8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80046ec:	2010      	movs	r0, #16
 80046ee:	f7fc f93f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80046f2:	2107      	movs	r1, #7
 80046f4:	2011      	movs	r0, #17
 80046f6:	f7fc f93b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80046fa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80046fe:	2012      	movs	r0, #18
 8004700:	f7fc f936 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004704:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004708:	2013      	movs	r0, #19
 800470a:	f7fc f931 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800470e:	2100      	movs	r1, #0
 8004710:	2029      	movs	r0, #41	; 0x29
 8004712:	f7fc f92d 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004716:	f244 0110 	movw	r1, #16400	; 0x4010
 800471a:	202b      	movs	r0, #43	; 0x2b
 800471c:	f7fc f928 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004720:	2100      	movs	r1, #0
 8004722:	2050      	movs	r0, #80	; 0x50
 8004724:	f7fc f924 	bl	8000970 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004728:	21ef      	movs	r1, #239	; 0xef
 800472a:	2051      	movs	r0, #81	; 0x51
 800472c:	f7fc f920 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004730:	2100      	movs	r1, #0
 8004732:	2052      	movs	r0, #82	; 0x52
 8004734:	f7fc f91c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004738:	f240 113f 	movw	r1, #319	; 0x13f
 800473c:	2053      	movs	r0, #83	; 0x53
 800473e:	f7fc f917 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004742:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004746:	2060      	movs	r0, #96	; 0x60
 8004748:	f7fc f912 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800474c:	2101      	movs	r1, #1
 800474e:	2061      	movs	r0, #97	; 0x61
 8004750:	f7fc f90e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004754:	2100      	movs	r1, #0
 8004756:	206a      	movs	r0, #106	; 0x6a
 8004758:	f7fc f90a 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800475c:	2100      	movs	r1, #0
 800475e:	2080      	movs	r0, #128	; 0x80
 8004760:	f7fc f906 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004764:	2100      	movs	r1, #0
 8004766:	2081      	movs	r0, #129	; 0x81
 8004768:	f7fc f902 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800476c:	2100      	movs	r1, #0
 800476e:	2082      	movs	r0, #130	; 0x82
 8004770:	f7fc f8fe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004774:	2100      	movs	r1, #0
 8004776:	2083      	movs	r0, #131	; 0x83
 8004778:	f7fc f8fa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800477c:	2100      	movs	r1, #0
 800477e:	2084      	movs	r0, #132	; 0x84
 8004780:	f7fc f8f6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004784:	2100      	movs	r1, #0
 8004786:	2085      	movs	r0, #133	; 0x85
 8004788:	f7fc f8f2 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800478c:	2110      	movs	r1, #16
 800478e:	2090      	movs	r0, #144	; 0x90
 8004790:	f7fc f8ee 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004794:	2100      	movs	r1, #0
 8004796:	2092      	movs	r0, #146	; 0x92
 8004798:	f7fc f8ea 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800479c:	2101      	movs	r1, #1
 800479e:	2093      	movs	r0, #147	; 0x93
 80047a0:	f7fc f8e6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80047a4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047a8:	2095      	movs	r0, #149	; 0x95
 80047aa:	f7fc f8e1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80047ae:	2100      	movs	r1, #0
 80047b0:	2097      	movs	r0, #151	; 0x97
 80047b2:	f7fc f8dd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80047b6:	2100      	movs	r1, #0
 80047b8:	2098      	movs	r0, #152	; 0x98
 80047ba:	f7fc f8d9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80047be:	f240 1173 	movw	r1, #371	; 0x173
 80047c2:	2007      	movs	r0, #7
 80047c4:	f7fc f8d4 	bl	8000970 <LCD_WriteReg>
 80047c8:	f001 ba88 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80047cc:	4b74      	ldr	r3, [pc, #464]	; (80049a0 <LCD_Init+0x2af8>)
 80047ce:	889b      	ldrh	r3, [r3, #4]
 80047d0:	f249 3231 	movw	r2, #37681	; 0x9331
 80047d4:	4293      	cmp	r3, r2
 80047d6:	f040 80e5 	bne.w	80049a4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80047da:	f241 0114 	movw	r1, #4116	; 0x1014
 80047de:	20e7      	movs	r0, #231	; 0xe7
 80047e0:	f7fc f8c6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80047e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047e8:	2001      	movs	r0, #1
 80047ea:	f7fc f8c1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80047ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047f2:	2002      	movs	r0, #2
 80047f4:	f7fc f8bc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80047f8:	f241 0138 	movw	r1, #4152	; 0x1038
 80047fc:	2003      	movs	r0, #3
 80047fe:	f7fc f8b7 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004802:	f240 2102 	movw	r1, #514	; 0x202
 8004806:	2008      	movs	r0, #8
 8004808:	f7fc f8b2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800480c:	2100      	movs	r1, #0
 800480e:	2009      	movs	r0, #9
 8004810:	f7fc f8ae 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004814:	2100      	movs	r1, #0
 8004816:	200a      	movs	r0, #10
 8004818:	f7fc f8aa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800481c:	2100      	movs	r1, #0
 800481e:	200c      	movs	r0, #12
 8004820:	f7fc f8a6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004824:	2100      	movs	r1, #0
 8004826:	200d      	movs	r0, #13
 8004828:	f7fc f8a2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800482c:	2100      	movs	r1, #0
 800482e:	200f      	movs	r0, #15
 8004830:	f7fc f89e 	bl	8000970 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004834:	2100      	movs	r1, #0
 8004836:	2010      	movs	r0, #16
 8004838:	f7fc f89a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800483c:	2107      	movs	r1, #7
 800483e:	2011      	movs	r0, #17
 8004840:	f7fc f896 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004844:	2100      	movs	r1, #0
 8004846:	2012      	movs	r0, #18
 8004848:	f7fc f892 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800484c:	2100      	movs	r1, #0
 800484e:	2013      	movs	r0, #19
 8004850:	f7fc f88e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004854:	20c8      	movs	r0, #200	; 0xc8
 8004856:	f003 fe59 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800485a:	f241 6190 	movw	r1, #5776	; 0x1690
 800485e:	2010      	movs	r0, #16
 8004860:	f7fc f886 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004864:	f240 2127 	movw	r1, #551	; 0x227
 8004868:	2011      	movs	r0, #17
 800486a:	f7fc f881 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800486e:	2032      	movs	r0, #50	; 0x32
 8004870:	f003 fe4c 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004874:	210c      	movs	r1, #12
 8004876:	2012      	movs	r0, #18
 8004878:	f7fc f87a 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800487c:	2032      	movs	r0, #50	; 0x32
 800487e:	f003 fe45 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004886:	2013      	movs	r0, #19
 8004888:	f7fc f872 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800488c:	2111      	movs	r1, #17
 800488e:	2029      	movs	r0, #41	; 0x29
 8004890:	f7fc f86e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004894:	210b      	movs	r1, #11
 8004896:	202b      	movs	r0, #43	; 0x2b
 8004898:	f7fc f86a 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800489c:	2032      	movs	r0, #50	; 0x32
 800489e:	f003 fe35 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80048a2:	2100      	movs	r1, #0
 80048a4:	2020      	movs	r0, #32
 80048a6:	f7fc f863 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80048aa:	f240 113f 	movw	r1, #319	; 0x13f
 80048ae:	2021      	movs	r0, #33	; 0x21
 80048b0:	f7fc f85e 	bl	8000970 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80048b4:	2100      	movs	r1, #0
 80048b6:	2030      	movs	r0, #48	; 0x30
 80048b8:	f7fc f85a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80048bc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80048c0:	2031      	movs	r0, #49	; 0x31
 80048c2:	f7fc f855 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80048c6:	2100      	movs	r1, #0
 80048c8:	2032      	movs	r0, #50	; 0x32
 80048ca:	f7fc f851 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80048ce:	f44f 7101 	mov.w	r1, #516	; 0x204
 80048d2:	2035      	movs	r0, #53	; 0x35
 80048d4:	f7fc f84c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80048d8:	f241 610a 	movw	r1, #5642	; 0x160a
 80048dc:	2036      	movs	r0, #54	; 0x36
 80048de:	f7fc f847 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80048e2:	f240 7107 	movw	r1, #1799	; 0x707
 80048e6:	2037      	movs	r0, #55	; 0x37
 80048e8:	f7fc f842 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80048ec:	f44f 7183 	mov.w	r1, #262	; 0x106
 80048f0:	2038      	movs	r0, #56	; 0x38
 80048f2:	f7fc f83d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80048f6:	f240 7107 	movw	r1, #1799	; 0x707
 80048fa:	2039      	movs	r0, #57	; 0x39
 80048fc:	f7fc f838 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004900:	f240 4102 	movw	r1, #1026	; 0x402
 8004904:	203c      	movs	r0, #60	; 0x3c
 8004906:	f7fc f833 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800490a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800490e:	203d      	movs	r0, #61	; 0x3d
 8004910:	f7fc f82e 	bl	8000970 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004914:	2100      	movs	r1, #0
 8004916:	2050      	movs	r0, #80	; 0x50
 8004918:	f7fc f82a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800491c:	21ef      	movs	r1, #239	; 0xef
 800491e:	2051      	movs	r0, #81	; 0x51
 8004920:	f7fc f826 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004924:	2100      	movs	r1, #0
 8004926:	2052      	movs	r0, #82	; 0x52
 8004928:	f7fc f822 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800492c:	f240 113f 	movw	r1, #319	; 0x13f
 8004930:	2053      	movs	r0, #83	; 0x53
 8004932:	f7fc f81d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004936:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800493a:	2060      	movs	r0, #96	; 0x60
 800493c:	f7fc f818 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004940:	2101      	movs	r1, #1
 8004942:	2061      	movs	r0, #97	; 0x61
 8004944:	f7fc f814 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004948:	2100      	movs	r1, #0
 800494a:	206a      	movs	r0, #106	; 0x6a
 800494c:	f7fc f810 	bl	8000970 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004950:	2100      	movs	r1, #0
 8004952:	2080      	movs	r0, #128	; 0x80
 8004954:	f7fc f80c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004958:	2100      	movs	r1, #0
 800495a:	2081      	movs	r0, #129	; 0x81
 800495c:	f7fc f808 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004960:	2100      	movs	r1, #0
 8004962:	2082      	movs	r0, #130	; 0x82
 8004964:	f7fc f804 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004968:	2100      	movs	r1, #0
 800496a:	2083      	movs	r0, #131	; 0x83
 800496c:	f7fc f800 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004970:	2100      	movs	r1, #0
 8004972:	2084      	movs	r0, #132	; 0x84
 8004974:	f7fb fffc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004978:	2100      	movs	r1, #0
 800497a:	2085      	movs	r0, #133	; 0x85
 800497c:	f7fb fff8 	bl	8000970 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004980:	2110      	movs	r1, #16
 8004982:	2090      	movs	r0, #144	; 0x90
 8004984:	f7fb fff4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004988:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800498c:	2092      	movs	r0, #146	; 0x92
 800498e:	f7fb ffef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004992:	f240 1133 	movw	r1, #307	; 0x133
 8004996:	2007      	movs	r0, #7
 8004998:	f7fb ffea 	bl	8000970 <LCD_WriteReg>
 800499c:	f001 b99e 	b.w	8005cdc <LCD_Init+0x3e34>
 80049a0:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0x5408) {
 80049a4:	4be2      	ldr	r3, [pc, #904]	; (8004d30 <LCD_Init+0x2e88>)
 80049a6:	889b      	ldrh	r3, [r3, #4]
 80049a8:	f245 4208 	movw	r2, #21512	; 0x5408
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f040 80a3 	bne.w	8004af8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80049b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049b6:	2001      	movs	r0, #1
 80049b8:	f7fb ffda 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80049bc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049c0:	2002      	movs	r0, #2
 80049c2:	f7fb ffd5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80049c6:	f241 0130 	movw	r1, #4144	; 0x1030
 80049ca:	2003      	movs	r0, #3
 80049cc:	f7fb ffd0 	bl	8000970 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80049d0:	2100      	movs	r1, #0
 80049d2:	2004      	movs	r0, #4
 80049d4:	f7fb ffcc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80049d8:	f240 2107 	movw	r1, #519	; 0x207
 80049dc:	2008      	movs	r0, #8
 80049de:	f7fb ffc7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80049e2:	2100      	movs	r1, #0
 80049e4:	2009      	movs	r0, #9
 80049e6:	f7fb ffc3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80049ea:	2100      	movs	r1, #0
 80049ec:	200a      	movs	r0, #10
 80049ee:	f7fb ffbf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 80049f2:	2100      	movs	r1, #0
 80049f4:	200c      	movs	r0, #12
 80049f6:	f7fb ffbb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 80049fa:	2100      	movs	r1, #0
 80049fc:	200d      	movs	r0, #13
 80049fe:	f7fb ffb7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004a02:	2100      	movs	r1, #0
 8004a04:	200f      	movs	r0, #15
 8004a06:	f7fb ffb3 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004a0a:	2014      	movs	r0, #20
 8004a0c:	f003 fd7e 	bl	800850c <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004a10:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004a14:	2010      	movs	r0, #16
 8004a16:	f7fb ffab 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	2011      	movs	r0, #17
 8004a1e:	f7fb ffa7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004a22:	2101      	movs	r1, #1
 8004a24:	2017      	movs	r0, #23
 8004a26:	f7fb ffa3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004a2a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004a2e:	2012      	movs	r0, #18
 8004a30:	f7fb ff9e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a38:	2013      	movs	r0, #19
 8004a3a:	f7fb ff99 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004a3e:	2109      	movs	r1, #9
 8004a40:	2029      	movs	r0, #41	; 0x29
 8004a42:	f7fb ff95 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004a46:	2109      	movs	r1, #9
 8004a48:	202a      	movs	r0, #42	; 0x2a
 8004a4a:	f7fb ff91 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	20a4      	movs	r0, #164	; 0xa4
 8004a52:	f7fb ff8d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004a56:	2100      	movs	r1, #0
 8004a58:	2050      	movs	r0, #80	; 0x50
 8004a5a:	f7fb ff89 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004a5e:	21ef      	movs	r1, #239	; 0xef
 8004a60:	2051      	movs	r0, #81	; 0x51
 8004a62:	f7fb ff85 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004a66:	2100      	movs	r1, #0
 8004a68:	2052      	movs	r0, #82	; 0x52
 8004a6a:	f7fb ff81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004a6e:	f240 113f 	movw	r1, #319	; 0x13f
 8004a72:	2053      	movs	r0, #83	; 0x53
 8004a74:	f7fb ff7c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004a78:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a7c:	2060      	movs	r0, #96	; 0x60
 8004a7e:	f7fb ff77 	bl	8000970 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004a82:	2101      	movs	r1, #1
 8004a84:	2061      	movs	r0, #97	; 0x61
 8004a86:	f7fb ff73 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	206a      	movs	r0, #106	; 0x6a
 8004a8e:	f7fb ff6f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004a92:	2100      	movs	r1, #0
 8004a94:	2080      	movs	r0, #128	; 0x80
 8004a96:	f7fb ff6b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2081      	movs	r0, #129	; 0x81
 8004a9e:	f7fb ff67 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	2082      	movs	r0, #130	; 0x82
 8004aa6:	f7fb ff63 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2083      	movs	r0, #131	; 0x83
 8004aae:	f7fb ff5f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2084      	movs	r0, #132	; 0x84
 8004ab6:	f7fb ff5b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004aba:	2100      	movs	r1, #0
 8004abc:	2085      	movs	r0, #133	; 0x85
 8004abe:	f7fb ff57 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004ac2:	2113      	movs	r1, #19
 8004ac4:	2090      	movs	r0, #144	; 0x90
 8004ac6:	f7fb ff53 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004aca:	2100      	movs	r1, #0
 8004acc:	2092      	movs	r0, #146	; 0x92
 8004ace:	f7fb ff4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	2093      	movs	r0, #147	; 0x93
 8004ad6:	f7fb ff4b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004ada:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004ade:	2095      	movs	r0, #149	; 0x95
 8004ae0:	f7fb ff46 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004ae4:	f240 1173 	movw	r1, #371	; 0x173
 8004ae8:	2007      	movs	r0, #7
 8004aea:	f7fb ff41 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004aee:	2032      	movs	r0, #50	; 0x32
 8004af0:	f003 fd0c 	bl	800850c <HAL_Delay>
 8004af4:	f001 b8f2 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004af8:	4b8d      	ldr	r3, [pc, #564]	; (8004d30 <LCD_Init+0x2e88>)
 8004afa:	889b      	ldrh	r3, [r3, #4]
 8004afc:	f241 5205 	movw	r2, #5381	; 0x1505
 8004b00:	4293      	cmp	r3, r2
 8004b02:	f040 8117 	bne.w	8004d34 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004b06:	2100      	movs	r1, #0
 8004b08:	2007      	movs	r0, #7
 8004b0a:	f7fb ff31 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004b0e:	2032      	movs	r0, #50	; 0x32
 8004b10:	f003 fcfc 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004b14:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004b18:	2012      	movs	r0, #18
 8004b1a:	f7fb ff29 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004b1e:	2101      	movs	r1, #1
 8004b20:	20a4      	movs	r0, #164	; 0xa4
 8004b22:	f7fb ff25 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004b26:	210f      	movs	r1, #15
 8004b28:	2008      	movs	r0, #8
 8004b2a:	f7fb ff21 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004b2e:	2108      	movs	r1, #8
 8004b30:	200a      	movs	r0, #10
 8004b32:	f7fb ff1d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004b36:	2108      	movs	r1, #8
 8004b38:	200d      	movs	r0, #13
 8004b3a:	f7fb ff19 	bl	8000970 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004b3e:	f240 7107 	movw	r1, #1799	; 0x707
 8004b42:	2030      	movs	r0, #48	; 0x30
 8004b44:	f7fb ff14 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004b48:	2107      	movs	r1, #7
 8004b4a:	2031      	movs	r0, #49	; 0x31
 8004b4c:	f7fb ff10 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004b50:	f240 6103 	movw	r1, #1539	; 0x603
 8004b54:	2032      	movs	r0, #50	; 0x32
 8004b56:	f7fb ff0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004b5a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b5e:	2033      	movs	r0, #51	; 0x33
 8004b60:	f7fb ff06 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004b64:	f240 2102 	movw	r1, #514	; 0x202
 8004b68:	2034      	movs	r0, #52	; 0x34
 8004b6a:	f7fb ff01 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004b6e:	2102      	movs	r1, #2
 8004b70:	2035      	movs	r0, #53	; 0x35
 8004b72:	f7fb fefd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004b76:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004b7a:	2036      	movs	r0, #54	; 0x36
 8004b7c:	f7fb fef8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004b80:	f240 7107 	movw	r1, #1799	; 0x707
 8004b84:	2037      	movs	r0, #55	; 0x37
 8004b86:	f7fb fef3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2038      	movs	r0, #56	; 0x38
 8004b8e:	f7fb feef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004b92:	2100      	movs	r1, #0
 8004b94:	2039      	movs	r0, #57	; 0x39
 8004b96:	f7fb feeb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004b9a:	f240 7107 	movw	r1, #1799	; 0x707
 8004b9e:	203a      	movs	r0, #58	; 0x3a
 8004ba0:	f7fb fee6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	203b      	movs	r0, #59	; 0x3b
 8004ba8:	f7fb fee2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004bac:	2107      	movs	r1, #7
 8004bae:	203c      	movs	r0, #60	; 0x3c
 8004bb0:	f7fb fede 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	203d      	movs	r0, #61	; 0x3d
 8004bb8:	f7fb feda 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004bbc:	2032      	movs	r0, #50	; 0x32
 8004bbe:	f003 fca5 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	2007      	movs	r0, #7
 8004bc6:	f7fb fed3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004bca:	2101      	movs	r1, #1
 8004bcc:	2017      	movs	r0, #23
 8004bce:	f7fb fecf 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(50);
 8004bd2:	2032      	movs	r0, #50	; 0x32
 8004bd4:	f003 fc9a 	bl	800850c <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004bd8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004bdc:	2010      	movs	r0, #16
 8004bde:	f7fb fec7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004be2:	f240 2117 	movw	r1, #535	; 0x217
 8004be6:	2011      	movs	r0, #17
 8004be8:	f7fb fec2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004bec:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004bf0:	2012      	movs	r0, #18
 8004bf2:	f7fb febd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004bf6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004bfa:	2013      	movs	r0, #19
 8004bfc:	f7fb feb8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004c00:	2100      	movs	r1, #0
 8004c02:	202a      	movs	r0, #42	; 0x2a
 8004c04:	f7fb feb4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004c08:	210a      	movs	r1, #10
 8004c0a:	2029      	movs	r0, #41	; 0x29
 8004c0c:	f7fb feb0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004c10:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004c14:	2012      	movs	r0, #18
 8004c16:	f7fb feab 	bl	8000970 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	2050      	movs	r0, #80	; 0x50
 8004c1e:	f7fb fea7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004c22:	21ef      	movs	r1, #239	; 0xef
 8004c24:	2051      	movs	r0, #81	; 0x51
 8004c26:	f7fb fea3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	2052      	movs	r0, #82	; 0x52
 8004c2e:	f7fb fe9f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004c32:	f240 113f 	movw	r1, #319	; 0x13f
 8004c36:	2053      	movs	r0, #83	; 0x53
 8004c38:	f7fb fe9a 	bl	8000970 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004c3c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c40:	2060      	movs	r0, #96	; 0x60
 8004c42:	f7fb fe95 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004c46:	2101      	movs	r1, #1
 8004c48:	2061      	movs	r0, #97	; 0x61
 8004c4a:	f7fb fe91 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	206a      	movs	r0, #106	; 0x6a
 8004c52:	f7fb fe8d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004c56:	2100      	movs	r1, #0
 8004c58:	2080      	movs	r0, #128	; 0x80
 8004c5a:	f7fb fe89 	bl	8000970 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004c5e:	2100      	movs	r1, #0
 8004c60:	2081      	movs	r0, #129	; 0x81
 8004c62:	f7fb fe85 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c66:	2100      	movs	r1, #0
 8004c68:	2082      	movs	r0, #130	; 0x82
 8004c6a:	f7fb fe81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2083      	movs	r0, #131	; 0x83
 8004c72:	f7fb fe7d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c76:	2100      	movs	r1, #0
 8004c78:	2084      	movs	r0, #132	; 0x84
 8004c7a:	f7fb fe79 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2085      	movs	r0, #133	; 0x85
 8004c82:	f7fb fe75 	bl	8000970 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004c86:	2113      	movs	r1, #19
 8004c88:	2090      	movs	r0, #144	; 0x90
 8004c8a:	f7fb fe71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c8e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c92:	2092      	movs	r0, #146	; 0x92
 8004c94:	f7fb fe6c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004c98:	2105      	movs	r1, #5
 8004c9a:	2093      	movs	r0, #147	; 0x93
 8004c9c:	f7fb fe68 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2095      	movs	r0, #149	; 0x95
 8004ca4:	f7fb fe64 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2097      	movs	r0, #151	; 0x97
 8004cac:	f7fb fe60 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2098      	movs	r0, #152	; 0x98
 8004cb4:	f7fb fe5c 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	f7fb fe57 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004cc2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7fb fe52 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004ccc:	f241 0138 	movw	r1, #4152	; 0x1038
 8004cd0:	2003      	movs	r0, #3
 8004cd2:	f7fb fe4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	2004      	movs	r0, #4
 8004cda:	f7fb fe49 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004cde:	2100      	movs	r1, #0
 8004ce0:	200c      	movs	r0, #12
 8004ce2:	f7fb fe45 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	200f      	movs	r0, #15
 8004cea:	f7fb fe41 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2020      	movs	r0, #32
 8004cf2:	f7fb fe3d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2021      	movs	r0, #33	; 0x21
 8004cfa:	f7fb fe39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004cfe:	2121      	movs	r1, #33	; 0x21
 8004d00:	2007      	movs	r0, #7
 8004d02:	f7fb fe35 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004d06:	2014      	movs	r0, #20
 8004d08:	f003 fc00 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004d0c:	2161      	movs	r1, #97	; 0x61
 8004d0e:	2007      	movs	r0, #7
 8004d10:	f7fb fe2e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004d14:	2014      	movs	r0, #20
 8004d16:	f003 fbf9 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004d1a:	f240 1173 	movw	r1, #371	; 0x173
 8004d1e:	2007      	movs	r0, #7
 8004d20:	f7fb fe26 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004d24:	2014      	movs	r0, #20
 8004d26:	f003 fbf1 	bl	800850c <HAL_Delay>
 8004d2a:	f000 bfd7 	b.w	8005cdc <LCD_Init+0x3e34>
 8004d2e:	bf00      	nop
 8004d30:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0xB505) {
 8004d34:	4bf0      	ldr	r3, [pc, #960]	; (80050f8 <LCD_Init+0x3250>)
 8004d36:	889b      	ldrh	r3, [r3, #4]
 8004d38:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	f040 8103 	bne.w	8004f48 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004d42:	2100      	movs	r1, #0
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fb fe13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fb fe0f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d52:	2100      	movs	r1, #0
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fb fe0b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7fb fe07 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004d62:	2101      	movs	r1, #1
 8004d64:	20a4      	movs	r0, #164	; 0xa4
 8004d66:	f7fb fe03 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004d6a:	2014      	movs	r0, #20
 8004d6c:	f003 fbce 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004d70:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d74:	2060      	movs	r0, #96	; 0x60
 8004d76:	f7fb fdfb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004d7a:	f240 2102 	movw	r1, #514	; 0x202
 8004d7e:	2008      	movs	r0, #8
 8004d80:	f7fb fdf6 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004d84:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004d88:	2030      	movs	r0, #48	; 0x30
 8004d8a:	f7fb fdf1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004d8e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004d92:	2031      	movs	r0, #49	; 0x31
 8004d94:	f7fb fdec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004d98:	f240 6104 	movw	r1, #1540	; 0x604
 8004d9c:	2032      	movs	r0, #50	; 0x32
 8004d9e:	f7fb fde7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004da2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004da6:	2033      	movs	r0, #51	; 0x33
 8004da8:	f7fb fde2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004dac:	f242 2111 	movw	r1, #8721	; 0x2211
 8004db0:	2034      	movs	r0, #52	; 0x34
 8004db2:	f7fb fddd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004db6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004dba:	2035      	movs	r0, #53	; 0x35
 8004dbc:	f7fb fdd8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004dc0:	f248 5107 	movw	r1, #34055	; 0x8507
 8004dc4:	2036      	movs	r0, #54	; 0x36
 8004dc6:	f7fb fdd3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004dca:	f241 4107 	movw	r1, #5127	; 0x1407
 8004dce:	2037      	movs	r0, #55	; 0x37
 8004dd0:	f7fb fdce 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004dd4:	f241 4103 	movw	r1, #5123	; 0x1403
 8004dd8:	2038      	movs	r0, #56	; 0x38
 8004dda:	f7fb fdc9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004dde:	2120      	movs	r1, #32
 8004de0:	2039      	movs	r0, #57	; 0x39
 8004de2:	f7fb fdc5 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004de6:	211a      	movs	r1, #26
 8004de8:	2090      	movs	r0, #144	; 0x90
 8004dea:	f7fb fdc1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004dee:	2100      	movs	r1, #0
 8004df0:	2010      	movs	r0, #16
 8004df2:	f7fb fdbd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004df6:	2107      	movs	r1, #7
 8004df8:	2011      	movs	r0, #17
 8004dfa:	f7fb fdb9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004dfe:	2100      	movs	r1, #0
 8004e00:	2012      	movs	r0, #18
 8004e02:	f7fb fdb5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004e06:	2100      	movs	r1, #0
 8004e08:	2013      	movs	r0, #19
 8004e0a:	f7fb fdb1 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004e0e:	2014      	movs	r0, #20
 8004e10:	f003 fb7c 	bl	800850c <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004e14:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004e18:	2010      	movs	r0, #16
 8004e1a:	f7fb fda9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004e1e:	f240 1137 	movw	r1, #311	; 0x137
 8004e22:	2011      	movs	r0, #17
 8004e24:	f7fb fda4 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004e28:	2014      	movs	r0, #20
 8004e2a:	f003 fb6f 	bl	800850c <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004e2e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004e32:	2012      	movs	r0, #18
 8004e34:	f7fb fd9c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004e38:	2014      	movs	r0, #20
 8004e3a:	f003 fb67 	bl	800850c <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004e3e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e42:	2013      	movs	r0, #19
 8004e44:	f7fb fd94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	202a      	movs	r0, #42	; 0x2a
 8004e4c:	f7fb fd90 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004e50:	2148      	movs	r1, #72	; 0x48
 8004e52:	2029      	movs	r0, #41	; 0x29
 8004e54:	f7fb fd8c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004e58:	2014      	movs	r0, #20
 8004e5a:	f003 fb57 	bl	800850c <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e62:	2001      	movs	r0, #1
 8004e64:	f7fb fd84 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004e68:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	f7fb fd7f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004e72:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e76:	2003      	movs	r0, #3
 8004e78:	f7fb fd7a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e7c:	f240 2102 	movw	r1, #514	; 0x202
 8004e80:	2008      	movs	r0, #8
 8004e82:	f7fb fd75 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004e86:	2100      	movs	r1, #0
 8004e88:	200a      	movs	r0, #10
 8004e8a:	f7fb fd71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	200c      	movs	r0, #12
 8004e92:	f7fb fd6d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004e96:	2100      	movs	r1, #0
 8004e98:	200d      	movs	r0, #13
 8004e9a:	f7fb fd69 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004e9e:	2130      	movs	r1, #48	; 0x30
 8004ea0:	200e      	movs	r0, #14
 8004ea2:	f7fb fd65 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2050      	movs	r0, #80	; 0x50
 8004eaa:	f7fb fd61 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004eae:	21ef      	movs	r1, #239	; 0xef
 8004eb0:	2051      	movs	r0, #81	; 0x51
 8004eb2:	f7fb fd5d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2052      	movs	r0, #82	; 0x52
 8004eba:	f7fb fd59 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004ebe:	f240 113f 	movw	r1, #319	; 0x13f
 8004ec2:	2053      	movs	r0, #83	; 0x53
 8004ec4:	f7fb fd54 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004ec8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ecc:	2060      	movs	r0, #96	; 0x60
 8004ece:	f7fb fd4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	2061      	movs	r0, #97	; 0x61
 8004ed6:	f7fb fd4b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004eda:	2100      	movs	r1, #0
 8004edc:	206a      	movs	r0, #106	; 0x6a
 8004ede:	f7fb fd47 	bl	8000970 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004ee2:	2111      	movs	r1, #17
 8004ee4:	2090      	movs	r0, #144	; 0x90
 8004ee6:	f7fb fd43 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004eea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004eee:	2092      	movs	r0, #146	; 0x92
 8004ef0:	f7fb fd3e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004ef4:	f240 4102 	movw	r1, #1026	; 0x402
 8004ef8:	2093      	movs	r0, #147	; 0x93
 8004efa:	f7fb fd39 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004efe:	2102      	movs	r1, #2
 8004f00:	2094      	movs	r0, #148	; 0x94
 8004f02:	f7fb fd35 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004f06:	2014      	movs	r0, #20
 8004f08:	f003 fb00 	bl	800850c <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	2007      	movs	r0, #7
 8004f10:	f7fb fd2e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004f14:	2014      	movs	r0, #20
 8004f16:	f003 faf9 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004f1a:	2161      	movs	r1, #97	; 0x61
 8004f1c:	2007      	movs	r0, #7
 8004f1e:	f7fb fd27 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004f22:	f240 1173 	movw	r1, #371	; 0x173
 8004f26:	2007      	movs	r0, #7
 8004f28:	f7fb fd22 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	2020      	movs	r0, #32
 8004f30:	f7fb fd1e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004f34:	2100      	movs	r1, #0
 8004f36:	2021      	movs	r0, #33	; 0x21
 8004f38:	f7fb fd1a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004f3c:	2122      	movs	r1, #34	; 0x22
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f7fb fd16 	bl	8000970 <LCD_WriteReg>
 8004f44:	f000 beca 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004f48:	4b6b      	ldr	r3, [pc, #428]	; (80050f8 <LCD_Init+0x3250>)
 8004f4a:	889b      	ldrh	r3, [r3, #4]
 8004f4c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004f50:	4293      	cmp	r3, r2
 8004f52:	f040 80d3 	bne.w	80050fc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f7fb fd09 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7fb fd05 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004f66:	2014      	movs	r0, #20
 8004f68:	f003 fad0 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fb fcfe 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f74:	2100      	movs	r1, #0
 8004f76:	2000      	movs	r0, #0
 8004f78:	f7fb fcfa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fb fcf6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004f84:	2100      	movs	r1, #0
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fb fcf2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	20a4      	movs	r0, #164	; 0xa4
 8004f90:	f7fb fcee 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8004f94:	2014      	movs	r0, #20
 8004f96:	f003 fab9 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004f9a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f9e:	2060      	movs	r0, #96	; 0x60
 8004fa0:	f7fb fce6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004fa4:	f640 0106 	movw	r1, #2054	; 0x806
 8004fa8:	2008      	movs	r0, #8
 8004faa:	f7fb fce1 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004fae:	f240 7103 	movw	r1, #1795	; 0x703
 8004fb2:	2030      	movs	r0, #48	; 0x30
 8004fb4:	f7fb fcdc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	2031      	movs	r0, #49	; 0x31
 8004fbc:	f7fb fcd8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	2032      	movs	r0, #50	; 0x32
 8004fc4:	f7fb fcd4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004fc8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004fcc:	2033      	movs	r0, #51	; 0x33
 8004fce:	f7fb fccf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004fd2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004fd6:	2034      	movs	r0, #52	; 0x34
 8004fd8:	f7fb fcca 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004fdc:	f240 1103 	movw	r1, #259	; 0x103
 8004fe0:	2035      	movs	r0, #53	; 0x35
 8004fe2:	f7fb fcc5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004fe6:	211f      	movs	r1, #31
 8004fe8:	2036      	movs	r0, #54	; 0x36
 8004fea:	f7fb fcc1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004fee:	f240 7103 	movw	r1, #1795	; 0x703
 8004ff2:	2037      	movs	r0, #55	; 0x37
 8004ff4:	f7fb fcbc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	2038      	movs	r0, #56	; 0x38
 8004ffc:	f7fb fcb8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005000:	2104      	movs	r1, #4
 8005002:	2039      	movs	r0, #57	; 0x39
 8005004:	f7fb fcb4 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005008:	2115      	movs	r1, #21
 800500a:	2090      	movs	r0, #144	; 0x90
 800500c:	f7fb fcb0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005010:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005014:	2010      	movs	r0, #16
 8005016:	f7fb fcab 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 800501a:	f240 2147 	movw	r1, #583	; 0x247
 800501e:	2011      	movs	r0, #17
 8005020:	f7fb fca6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005024:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005028:	2012      	movs	r0, #18
 800502a:	f7fb fca1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800502e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005032:	2013      	movs	r0, #19
 8005034:	f7fb fc9c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(120);
 8005038:	2078      	movs	r0, #120	; 0x78
 800503a:	f003 fa67 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800503e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005042:	2001      	movs	r0, #1
 8005044:	f7fb fc94 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800504c:	2002      	movs	r0, #2
 800504e:	f7fb fc8f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005052:	f241 0130 	movw	r1, #4144	; 0x1030
 8005056:	2003      	movs	r0, #3
 8005058:	f7fb fc8a 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800505c:	2108      	movs	r1, #8
 800505e:	200a      	movs	r0, #10
 8005060:	f7fb fc86 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005064:	2100      	movs	r1, #0
 8005066:	200c      	movs	r0, #12
 8005068:	f7fb fc82 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800506c:	2120      	movs	r1, #32
 800506e:	200e      	movs	r0, #14
 8005070:	f7fb fc7e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005074:	2100      	movs	r1, #0
 8005076:	200f      	movs	r0, #15
 8005078:	f7fb fc7a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800507c:	2100      	movs	r1, #0
 800507e:	2020      	movs	r0, #32
 8005080:	f7fb fc76 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005084:	2100      	movs	r1, #0
 8005086:	2021      	movs	r0, #33	; 0x21
 8005088:	f7fb fc72 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800508c:	213d      	movs	r1, #61	; 0x3d
 800508e:	202a      	movs	r0, #42	; 0x2a
 8005090:	f7fb fc6e 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(20);
 8005094:	2014      	movs	r0, #20
 8005096:	f003 fa39 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800509a:	212d      	movs	r1, #45	; 0x2d
 800509c:	2029      	movs	r0, #41	; 0x29
 800509e:	f7fb fc67 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80050a2:	2100      	movs	r1, #0
 80050a4:	2050      	movs	r0, #80	; 0x50
 80050a6:	f7fb fc63 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80050aa:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80050ae:	2051      	movs	r0, #81	; 0x51
 80050b0:	f7fb fc5e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80050b4:	2100      	movs	r1, #0
 80050b6:	2052      	movs	r0, #82	; 0x52
 80050b8:	f7fb fc5a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80050bc:	f240 113f 	movw	r1, #319	; 0x13f
 80050c0:	2053      	movs	r0, #83	; 0x53
 80050c2:	f7fb fc55 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80050c6:	2100      	movs	r1, #0
 80050c8:	2061      	movs	r0, #97	; 0x61
 80050ca:	f7fb fc51 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80050ce:	2100      	movs	r1, #0
 80050d0:	206a      	movs	r0, #106	; 0x6a
 80050d2:	f7fb fc4d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80050d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80050da:	2092      	movs	r0, #146	; 0x92
 80050dc:	f7fb fc48 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80050e0:	2105      	movs	r1, #5
 80050e2:	2093      	movs	r0, #147	; 0x93
 80050e4:	f7fb fc44 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80050e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ec:	2007      	movs	r0, #7
 80050ee:	f7fb fc3f 	bl	8000970 <LCD_WriteReg>
 80050f2:	f000 bdf3 	b.w	8005cdc <LCD_Init+0x3e34>
 80050f6:	bf00      	nop
 80050f8:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80050fc:	4bc2      	ldr	r3, [pc, #776]	; (8005408 <LCD_Init+0x3560>)
 80050fe:	889b      	ldrh	r3, [r3, #4]
 8005100:	f648 1289 	movw	r2, #35209	; 0x8989
 8005104:	4293      	cmp	r3, r2
 8005106:	f040 80bc 	bne.w	8005282 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 800510a:	2101      	movs	r1, #1
 800510c:	2000      	movs	r0, #0
 800510e:	f7fb fc2f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8005112:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8005116:	2003      	movs	r0, #3
 8005118:	f7fb fc2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800511c:	2100      	movs	r1, #0
 800511e:	200c      	movs	r0, #12
 8005120:	f7fb fc26 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8005124:	f640 010c 	movw	r1, #2060	; 0x80c
 8005128:	200d      	movs	r0, #13
 800512a:	f7fb fc21 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 800512e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005132:	200e      	movs	r0, #14
 8005134:	f7fb fc1c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005138:	21b0      	movs	r1, #176	; 0xb0
 800513a:	201e      	movs	r0, #30
 800513c:	f7fb fc18 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005140:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005144:	2001      	movs	r0, #1
 8005146:	f7fb fc13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800514a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800514e:	2002      	movs	r0, #2
 8005150:	f7fb fc0e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005154:	2100      	movs	r1, #0
 8005156:	2010      	movs	r0, #16
 8005158:	f7fb fc0a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800515c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005160:	2011      	movs	r0, #17
 8005162:	f7fb fc05 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005166:	2100      	movs	r1, #0
 8005168:	2005      	movs	r0, #5
 800516a:	f7fb fc01 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800516e:	2100      	movs	r1, #0
 8005170:	2006      	movs	r0, #6
 8005172:	f7fb fbfd 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005176:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800517a:	2016      	movs	r0, #22
 800517c:	f7fb fbf8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005180:	2103      	movs	r1, #3
 8005182:	2017      	movs	r0, #23
 8005184:	f7fb fbf4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005188:	f240 2133 	movw	r1, #563	; 0x233
 800518c:	2007      	movs	r0, #7
 800518e:	f7fb fbef 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005192:	2100      	movs	r1, #0
 8005194:	200b      	movs	r0, #11
 8005196:	f7fb fbeb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800519a:	2100      	movs	r1, #0
 800519c:	200f      	movs	r0, #15
 800519e:	f7fb fbe7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80051a2:	2100      	movs	r1, #0
 80051a4:	2041      	movs	r0, #65	; 0x41
 80051a6:	f7fb fbe3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80051aa:	2100      	movs	r1, #0
 80051ac:	2042      	movs	r0, #66	; 0x42
 80051ae:	f7fb fbdf 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 80051b2:	2100      	movs	r1, #0
 80051b4:	2048      	movs	r0, #72	; 0x48
 80051b6:	f7fb fbdb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80051ba:	f240 113f 	movw	r1, #319	; 0x13f
 80051be:	2049      	movs	r0, #73	; 0x49
 80051c0:	f7fb fbd6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80051c4:	2100      	movs	r1, #0
 80051c6:	204a      	movs	r0, #74	; 0x4a
 80051c8:	f7fb fbd2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80051cc:	2100      	movs	r1, #0
 80051ce:	204b      	movs	r0, #75	; 0x4b
 80051d0:	f7fb fbce 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80051d4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80051d8:	2044      	movs	r0, #68	; 0x44
 80051da:	f7fb fbc9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80051de:	2100      	movs	r1, #0
 80051e0:	2045      	movs	r0, #69	; 0x45
 80051e2:	f7fb fbc5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80051e6:	f240 113f 	movw	r1, #319	; 0x13f
 80051ea:	2046      	movs	r0, #70	; 0x46
 80051ec:	f7fb fbc0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80051f0:	f240 7107 	movw	r1, #1799	; 0x707
 80051f4:	2030      	movs	r0, #48	; 0x30
 80051f6:	f7fb fbbb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80051fa:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051fe:	2031      	movs	r0, #49	; 0x31
 8005200:	f7fb fbb6 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8005204:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005208:	2032      	movs	r0, #50	; 0x32
 800520a:	f7fb fbb1 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800520e:	f240 5102 	movw	r1, #1282	; 0x502
 8005212:	2033      	movs	r0, #51	; 0x33
 8005214:	f7fb fbac 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005218:	f240 5107 	movw	r1, #1287	; 0x507
 800521c:	2034      	movs	r0, #52	; 0x34
 800521e:	f7fb fba7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005222:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005226:	2035      	movs	r0, #53	; 0x35
 8005228:	f7fb fba2 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 800522c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005230:	2036      	movs	r0, #54	; 0x36
 8005232:	f7fb fb9d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005236:	f240 5102 	movw	r1, #1282	; 0x502
 800523a:	2037      	movs	r0, #55	; 0x37
 800523c:	f7fb fb98 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005240:	f240 3102 	movw	r1, #770	; 0x302
 8005244:	203a      	movs	r0, #58	; 0x3a
 8005246:	f7fb fb93 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800524a:	f240 3102 	movw	r1, #770	; 0x302
 800524e:	203b      	movs	r0, #59	; 0x3b
 8005250:	f7fb fb8e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005254:	2100      	movs	r1, #0
 8005256:	2023      	movs	r0, #35	; 0x23
 8005258:	f7fb fb8a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800525c:	2100      	movs	r1, #0
 800525e:	2024      	movs	r0, #36	; 0x24
 8005260:	f7fb fb86 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005268:	2025      	movs	r0, #37	; 0x25
 800526a:	f7fb fb81 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800526e:	2100      	movs	r1, #0
 8005270:	204f      	movs	r0, #79	; 0x4f
 8005272:	f7fb fb7d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005276:	2100      	movs	r1, #0
 8005278:	204e      	movs	r0, #78	; 0x4e
 800527a:	f7fb fb79 	bl	8000970 <LCD_WriteReg>
 800527e:	f000 bd2d 	b.w	8005cdc <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005282:	4b61      	ldr	r3, [pc, #388]	; (8005408 <LCD_Init+0x3560>)
 8005284:	889b      	ldrh	r3, [r3, #4]
 8005286:	f244 5231 	movw	r2, #17713	; 0x4531
 800528a:	4293      	cmp	r3, r2
 800528c:	f040 80be 	bne.w	800540c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005290:	2101      	movs	r1, #1
 8005292:	2000      	movs	r0, #0
 8005294:	f7fb fb6c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 8005298:	200a      	movs	r0, #10
 800529a:	f003 f937 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800529e:	f241 6128 	movw	r1, #5672	; 0x1628
 80052a2:	2010      	movs	r0, #16
 80052a4:	f7fb fb64 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80052a8:	210e      	movs	r1, #14
 80052aa:	2012      	movs	r0, #18
 80052ac:	f7fb fb60 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80052b0:	f640 2139 	movw	r1, #2617	; 0xa39
 80052b4:	2013      	movs	r0, #19
 80052b6:	f7fb fb5b 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 80052ba:	200a      	movs	r0, #10
 80052bc:	f003 f926 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80052c0:	2140      	movs	r1, #64	; 0x40
 80052c2:	2011      	movs	r0, #17
 80052c4:	f7fb fb54 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80052c8:	2150      	movs	r1, #80	; 0x50
 80052ca:	2015      	movs	r0, #21
 80052cc:	f7fb fb50 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 80052d0:	200a      	movs	r0, #10
 80052d2:	f003 f91b 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80052d6:	211e      	movs	r1, #30
 80052d8:	2012      	movs	r0, #18
 80052da:	f7fb fb49 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 80052de:	200a      	movs	r0, #10
 80052e0:	f003 f914 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80052e4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80052e8:	2010      	movs	r0, #16
 80052ea:	f7fb fb41 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80052ee:	f642 2139 	movw	r1, #10809	; 0x2a39
 80052f2:	2013      	movs	r0, #19
 80052f4:	f7fb fb3c 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(10);
 80052f8:	200a      	movs	r0, #10
 80052fa:	f003 f907 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80052fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005302:	2001      	movs	r0, #1
 8005304:	f7fb fb34 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005308:	f44f 7140 	mov.w	r1, #768	; 0x300
 800530c:	2002      	movs	r0, #2
 800530e:	f7fb fb2f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005312:	f241 0138 	movw	r1, #4152	; 0x1038
 8005316:	2003      	movs	r0, #3
 8005318:	f7fb fb2a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800531c:	f240 2102 	movw	r1, #514	; 0x202
 8005320:	2008      	movs	r0, #8
 8005322:	f7fb fb25 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005326:	2108      	movs	r1, #8
 8005328:	200a      	movs	r0, #10
 800532a:	f7fb fb21 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800532e:	2100      	movs	r1, #0
 8005330:	2030      	movs	r0, #48	; 0x30
 8005332:	f7fb fb1d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005336:	f240 4102 	movw	r1, #1026	; 0x402
 800533a:	2031      	movs	r0, #49	; 0x31
 800533c:	f7fb fb18 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005340:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005344:	2032      	movs	r0, #50	; 0x32
 8005346:	f7fb fb13 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800534a:	f240 5103 	movw	r1, #1283	; 0x503
 800534e:	2033      	movs	r0, #51	; 0x33
 8005350:	f7fb fb0e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005354:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005358:	2034      	movs	r0, #52	; 0x34
 800535a:	f7fb fb09 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800535e:	f240 3101 	movw	r1, #769	; 0x301
 8005362:	2035      	movs	r0, #53	; 0x35
 8005364:	f7fb fb04 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005368:	f240 7107 	movw	r1, #1799	; 0x707
 800536c:	2036      	movs	r0, #54	; 0x36
 800536e:	f7fb faff 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005372:	f240 3105 	movw	r1, #773	; 0x305
 8005376:	2037      	movs	r0, #55	; 0x37
 8005378:	f7fb fafa 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800537c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005380:	2038      	movs	r0, #56	; 0x38
 8005382:	f7fb faf5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005386:	f640 710b 	movw	r1, #3851	; 0xf0b
 800538a:	2039      	movs	r0, #57	; 0x39
 800538c:	f7fb faf0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005390:	2102      	movs	r1, #2
 8005392:	2041      	movs	r0, #65	; 0x41
 8005394:	f7fb faec 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005398:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800539c:	2060      	movs	r0, #96	; 0x60
 800539e:	f7fb fae7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80053a2:	2101      	movs	r1, #1
 80053a4:	2061      	movs	r0, #97	; 0x61
 80053a6:	f7fb fae3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80053aa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80053ae:	2090      	movs	r0, #144	; 0x90
 80053b0:	f7fb fade 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80053b4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80053b8:	2092      	movs	r0, #146	; 0x92
 80053ba:	f7fb fad9 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80053be:	2104      	movs	r1, #4
 80053c0:	2093      	movs	r0, #147	; 0x93
 80053c2:	f7fb fad5 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80053c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053ca:	20a0      	movs	r0, #160	; 0xa0
 80053cc:	f7fb fad0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80053d0:	2101      	movs	r1, #1
 80053d2:	2007      	movs	r0, #7
 80053d4:	f7fb facc 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80053d8:	2121      	movs	r1, #33	; 0x21
 80053da:	2007      	movs	r0, #7
 80053dc:	f7fb fac8 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80053e0:	2123      	movs	r1, #35	; 0x23
 80053e2:	2007      	movs	r0, #7
 80053e4:	f7fb fac4 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80053e8:	2133      	movs	r1, #51	; 0x33
 80053ea:	2007      	movs	r0, #7
 80053ec:	f7fb fac0 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80053f0:	f240 1133 	movw	r1, #307	; 0x133
 80053f4:	2007      	movs	r0, #7
 80053f6:	f7fb fabb 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80053fa:	2100      	movs	r1, #0
 80053fc:	20a0      	movs	r0, #160	; 0xa0
 80053fe:	f7fb fab7 	bl	8000970 <LCD_WriteReg>
 8005402:	f000 bc6b 	b.w	8005cdc <LCD_Init+0x3e34>
 8005406:	bf00      	nop
 8005408:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0x4535) {
 800540c:	4b5b      	ldr	r3, [pc, #364]	; (800557c <LCD_Init+0x36d4>)
 800540e:	889b      	ldrh	r3, [r3, #4]
 8005410:	f244 5235 	movw	r2, #17717	; 0x4535
 8005414:	4293      	cmp	r3, r2
 8005416:	f040 80b3 	bne.w	8005580 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800541a:	2130      	movs	r1, #48	; 0x30
 800541c:	2015      	movs	r0, #21
 800541e:	f7fb faa7 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005422:	2110      	movs	r1, #16
 8005424:	209a      	movs	r0, #154	; 0x9a
 8005426:	f7fb faa3 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800542a:	2120      	movs	r1, #32
 800542c:	2011      	movs	r0, #17
 800542e:	f7fb fa9f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005432:	f243 4128 	movw	r1, #13352	; 0x3428
 8005436:	2010      	movs	r0, #16
 8005438:	f7fb fa9a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800543c:	2102      	movs	r1, #2
 800543e:	2012      	movs	r0, #18
 8005440:	f7fb fa96 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005444:	f241 0138 	movw	r1, #4152	; 0x1038
 8005448:	2013      	movs	r0, #19
 800544a:	f7fb fa91 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(40);
 800544e:	2028      	movs	r0, #40	; 0x28
 8005450:	f003 f85c 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005454:	2112      	movs	r1, #18
 8005456:	2012      	movs	r0, #18
 8005458:	f7fb fa8a 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(40);
 800545c:	2028      	movs	r0, #40	; 0x28
 800545e:	f003 f855 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005462:	f243 4120 	movw	r1, #13344	; 0x3420
 8005466:	2010      	movs	r0, #16
 8005468:	f7fb fa82 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800546c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005470:	2013      	movs	r0, #19
 8005472:	f7fb fa7d 	bl	8000970 <LCD_WriteReg>
		HAL_Delay(70);
 8005476:	2046      	movs	r0, #70	; 0x46
 8005478:	f003 f848 	bl	800850c <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800547c:	2100      	movs	r1, #0
 800547e:	2030      	movs	r0, #48	; 0x30
 8005480:	f7fb fa76 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005484:	f240 4102 	movw	r1, #1026	; 0x402
 8005488:	2031      	movs	r0, #49	; 0x31
 800548a:	f7fb fa71 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800548e:	f240 3107 	movw	r1, #775	; 0x307
 8005492:	2032      	movs	r0, #50	; 0x32
 8005494:	f7fb fa6c 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005498:	f44f 7141 	mov.w	r1, #772	; 0x304
 800549c:	2033      	movs	r0, #51	; 0x33
 800549e:	f7fb fa67 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80054a2:	2104      	movs	r1, #4
 80054a4:	2034      	movs	r0, #52	; 0x34
 80054a6:	f7fb fa63 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80054aa:	f240 4101 	movw	r1, #1025	; 0x401
 80054ae:	2035      	movs	r0, #53	; 0x35
 80054b0:	f7fb fa5e 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80054b4:	f240 7107 	movw	r1, #1799	; 0x707
 80054b8:	2036      	movs	r0, #54	; 0x36
 80054ba:	f7fb fa59 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80054be:	f240 3105 	movw	r1, #773	; 0x305
 80054c2:	2037      	movs	r0, #55	; 0x37
 80054c4:	f7fb fa54 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80054c8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80054cc:	2038      	movs	r0, #56	; 0x38
 80054ce:	f7fb fa4f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80054d2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80054d6:	2039      	movs	r0, #57	; 0x39
 80054d8:	f7fb fa4a 	bl	8000970 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80054dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e0:	2001      	movs	r0, #1
 80054e2:	f7fb fa45 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80054e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80054ea:	2002      	movs	r0, #2
 80054ec:	f7fb fa40 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80054f0:	f241 0130 	movw	r1, #4144	; 0x1030
 80054f4:	2003      	movs	r0, #3
 80054f6:	f7fb fa3b 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80054fa:	f640 0108 	movw	r1, #2056	; 0x808
 80054fe:	2008      	movs	r0, #8
 8005500:	f7fb fa36 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005504:	2108      	movs	r1, #8
 8005506:	200a      	movs	r0, #10
 8005508:	f7fb fa32 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800550c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005510:	2060      	movs	r0, #96	; 0x60
 8005512:	f7fb fa2d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005516:	2101      	movs	r1, #1
 8005518:	2061      	movs	r0, #97	; 0x61
 800551a:	f7fb fa29 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800551e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005522:	2090      	movs	r0, #144	; 0x90
 8005524:	f7fb fa24 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800552c:	2092      	movs	r0, #146	; 0x92
 800552e:	f7fb fa1f 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005536:	2093      	movs	r0, #147	; 0x93
 8005538:	f7fb fa1a 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800553c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005540:	20a0      	movs	r0, #160	; 0xa0
 8005542:	f7fb fa15 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005546:	2110      	movs	r1, #16
 8005548:	20a3      	movs	r0, #163	; 0xa3
 800554a:	f7fb fa11 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800554e:	2101      	movs	r1, #1
 8005550:	2007      	movs	r0, #7
 8005552:	f7fb fa0d 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005556:	2121      	movs	r1, #33	; 0x21
 8005558:	2007      	movs	r0, #7
 800555a:	f7fb fa09 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800555e:	2123      	movs	r1, #35	; 0x23
 8005560:	2007      	movs	r0, #7
 8005562:	f7fb fa05 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005566:	2133      	movs	r1, #51	; 0x33
 8005568:	2007      	movs	r0, #7
 800556a:	f7fb fa01 	bl	8000970 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800556e:	f240 1133 	movw	r1, #307	; 0x133
 8005572:	2007      	movs	r0, #7
 8005574:	f7fb f9fc 	bl	8000970 <LCD_WriteReg>
 8005578:	e3b0      	b.n	8005cdc <LCD_Init+0x3e34>
 800557a:	bf00      	nop
 800557c:	20000204 	.word	0x20000204
	} else if (lcddev.id == 0X1963) {
 8005580:	4ba8      	ldr	r3, [pc, #672]	; (8005824 <LCD_Init+0x397c>)
 8005582:	889b      	ldrh	r3, [r3, #4]
 8005584:	f641 1263 	movw	r2, #6499	; 0x1963
 8005588:	4293      	cmp	r3, r2
 800558a:	f040 83a7 	bne.w	8005cdc <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800558e:	20e2      	movs	r0, #226	; 0xe2
 8005590:	f7fb f962 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005594:	4ba4      	ldr	r3, [pc, #656]	; (8005828 <LCD_Init+0x3980>)
 8005596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559a:	611a      	str	r2, [r3, #16]
 800559c:	4ba2      	ldr	r3, [pc, #648]	; (8005828 <LCD_Init+0x3980>)
 800559e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a2:	615a      	str	r2, [r3, #20]
 80055a4:	4ba1      	ldr	r3, [pc, #644]	; (800582c <LCD_Init+0x3984>)
 80055a6:	221d      	movs	r2, #29
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	4b9f      	ldr	r3, [pc, #636]	; (8005828 <LCD_Init+0x3980>)
 80055ac:	2280      	movs	r2, #128	; 0x80
 80055ae:	615a      	str	r2, [r3, #20]
 80055b0:	4b9d      	ldr	r3, [pc, #628]	; (8005828 <LCD_Init+0x3980>)
 80055b2:	2280      	movs	r2, #128	; 0x80
 80055b4:	611a      	str	r2, [r3, #16]
 80055b6:	4b9c      	ldr	r3, [pc, #624]	; (8005828 <LCD_Init+0x3980>)
 80055b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055bc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80055be:	4b9a      	ldr	r3, [pc, #616]	; (8005828 <LCD_Init+0x3980>)
 80055c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	4b98      	ldr	r3, [pc, #608]	; (8005828 <LCD_Init+0x3980>)
 80055c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055cc:	615a      	str	r2, [r3, #20]
 80055ce:	4b97      	ldr	r3, [pc, #604]	; (800582c <LCD_Init+0x3984>)
 80055d0:	2202      	movs	r2, #2
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	4b94      	ldr	r3, [pc, #592]	; (8005828 <LCD_Init+0x3980>)
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	615a      	str	r2, [r3, #20]
 80055da:	4b93      	ldr	r3, [pc, #588]	; (8005828 <LCD_Init+0x3980>)
 80055dc:	2280      	movs	r2, #128	; 0x80
 80055de:	611a      	str	r2, [r3, #16]
 80055e0:	4b91      	ldr	r3, [pc, #580]	; (8005828 <LCD_Init+0x3980>)
 80055e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80055e8:	4b8f      	ldr	r3, [pc, #572]	; (8005828 <LCD_Init+0x3980>)
 80055ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ee:	611a      	str	r2, [r3, #16]
 80055f0:	4b8d      	ldr	r3, [pc, #564]	; (8005828 <LCD_Init+0x3980>)
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	615a      	str	r2, [r3, #20]
 80055f8:	4b8c      	ldr	r3, [pc, #560]	; (800582c <LCD_Init+0x3984>)
 80055fa:	2204      	movs	r2, #4
 80055fc:	60da      	str	r2, [r3, #12]
 80055fe:	4b8a      	ldr	r3, [pc, #552]	; (8005828 <LCD_Init+0x3980>)
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	615a      	str	r2, [r3, #20]
 8005604:	4b88      	ldr	r3, [pc, #544]	; (8005828 <LCD_Init+0x3980>)
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	611a      	str	r2, [r3, #16]
 800560a:	4b87      	ldr	r3, [pc, #540]	; (8005828 <LCD_Init+0x3980>)
 800560c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005610:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005612:	2001      	movs	r0, #1
 8005614:	f002 ff7a 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005618:	20e0      	movs	r0, #224	; 0xe0
 800561a:	f7fb f91d 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800561e:	4b82      	ldr	r3, [pc, #520]	; (8005828 <LCD_Init+0x3980>)
 8005620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	4b80      	ldr	r3, [pc, #512]	; (8005828 <LCD_Init+0x3980>)
 8005628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562c:	615a      	str	r2, [r3, #20]
 800562e:	4b7f      	ldr	r3, [pc, #508]	; (800582c <LCD_Init+0x3984>)
 8005630:	2201      	movs	r2, #1
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <LCD_Init+0x3980>)
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	615a      	str	r2, [r3, #20]
 800563a:	4b7b      	ldr	r3, [pc, #492]	; (8005828 <LCD_Init+0x3980>)
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	611a      	str	r2, [r3, #16]
 8005640:	4b79      	ldr	r3, [pc, #484]	; (8005828 <LCD_Init+0x3980>)
 8005642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005646:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005648:	200a      	movs	r0, #10
 800564a:	f002 ff5f 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800564e:	20e0      	movs	r0, #224	; 0xe0
 8005650:	f7fb f902 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005654:	4b74      	ldr	r3, [pc, #464]	; (8005828 <LCD_Init+0x3980>)
 8005656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800565a:	611a      	str	r2, [r3, #16]
 800565c:	4b72      	ldr	r3, [pc, #456]	; (8005828 <LCD_Init+0x3980>)
 800565e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005662:	615a      	str	r2, [r3, #20]
 8005664:	4b71      	ldr	r3, [pc, #452]	; (800582c <LCD_Init+0x3984>)
 8005666:	2203      	movs	r2, #3
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <LCD_Init+0x3980>)
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	4b6d      	ldr	r3, [pc, #436]	; (8005828 <LCD_Init+0x3980>)
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	4b6c      	ldr	r3, [pc, #432]	; (8005828 <LCD_Init+0x3980>)
 8005678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800567e:	200c      	movs	r0, #12
 8005680:	f002 ff44 	bl	800850c <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005684:	2001      	movs	r0, #1
 8005686:	f7fb f8e7 	bl	8000858 <LCD_WR_REG>
		HAL_Delay(10);
 800568a:	200a      	movs	r0, #10
 800568c:	f002 ff3e 	bl	800850c <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005690:	20e6      	movs	r0, #230	; 0xe6
 8005692:	f7fb f8e1 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005696:	4b64      	ldr	r3, [pc, #400]	; (8005828 <LCD_Init+0x3980>)
 8005698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569c:	611a      	str	r2, [r3, #16]
 800569e:	4b62      	ldr	r3, [pc, #392]	; (8005828 <LCD_Init+0x3980>)
 80056a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a4:	615a      	str	r2, [r3, #20]
 80056a6:	4b61      	ldr	r3, [pc, #388]	; (800582c <LCD_Init+0x3984>)
 80056a8:	222f      	movs	r2, #47	; 0x2f
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <LCD_Init+0x3980>)
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	615a      	str	r2, [r3, #20]
 80056b2:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <LCD_Init+0x3980>)
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	611a      	str	r2, [r3, #16]
 80056b8:	4b5b      	ldr	r3, [pc, #364]	; (8005828 <LCD_Init+0x3980>)
 80056ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80056c0:	4b59      	ldr	r3, [pc, #356]	; (8005828 <LCD_Init+0x3980>)
 80056c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c6:	611a      	str	r2, [r3, #16]
 80056c8:	4b57      	ldr	r3, [pc, #348]	; (8005828 <LCD_Init+0x3980>)
 80056ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ce:	615a      	str	r2, [r3, #20]
 80056d0:	4b56      	ldr	r3, [pc, #344]	; (800582c <LCD_Init+0x3984>)
 80056d2:	22ff      	movs	r2, #255	; 0xff
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	4b54      	ldr	r3, [pc, #336]	; (8005828 <LCD_Init+0x3980>)
 80056d8:	2280      	movs	r2, #128	; 0x80
 80056da:	615a      	str	r2, [r3, #20]
 80056dc:	4b52      	ldr	r3, [pc, #328]	; (8005828 <LCD_Init+0x3980>)
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	611a      	str	r2, [r3, #16]
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <LCD_Init+0x3980>)
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <LCD_Init+0x3980>)
 80056ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <LCD_Init+0x3980>)
 80056f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f8:	615a      	str	r2, [r3, #20]
 80056fa:	4b4c      	ldr	r3, [pc, #304]	; (800582c <LCD_Init+0x3984>)
 80056fc:	22ff      	movs	r2, #255	; 0xff
 80056fe:	60da      	str	r2, [r3, #12]
 8005700:	4b49      	ldr	r3, [pc, #292]	; (8005828 <LCD_Init+0x3980>)
 8005702:	2280      	movs	r2, #128	; 0x80
 8005704:	615a      	str	r2, [r3, #20]
 8005706:	4b48      	ldr	r3, [pc, #288]	; (8005828 <LCD_Init+0x3980>)
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	4b46      	ldr	r3, [pc, #280]	; (8005828 <LCD_Init+0x3980>)
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005714:	20b0      	movs	r0, #176	; 0xb0
 8005716:	f7fb f89f 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800571a:	4b43      	ldr	r3, [pc, #268]	; (8005828 <LCD_Init+0x3980>)
 800571c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	4b41      	ldr	r3, [pc, #260]	; (8005828 <LCD_Init+0x3980>)
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	615a      	str	r2, [r3, #20]
 800572a:	4b40      	ldr	r3, [pc, #256]	; (800582c <LCD_Init+0x3984>)
 800572c:	2220      	movs	r2, #32
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <LCD_Init+0x3980>)
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	615a      	str	r2, [r3, #20]
 8005736:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <LCD_Init+0x3980>)
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	611a      	str	r2, [r3, #16]
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <LCD_Init+0x3980>)
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005744:	4b38      	ldr	r3, [pc, #224]	; (8005828 <LCD_Init+0x3980>)
 8005746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574a:	611a      	str	r2, [r3, #16]
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <LCD_Init+0x3980>)
 800574e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005752:	615a      	str	r2, [r3, #20]
 8005754:	4b35      	ldr	r3, [pc, #212]	; (800582c <LCD_Init+0x3984>)
 8005756:	2200      	movs	r2, #0
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	4b33      	ldr	r3, [pc, #204]	; (8005828 <LCD_Init+0x3980>)
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	615a      	str	r2, [r3, #20]
 8005760:	4b31      	ldr	r3, [pc, #196]	; (8005828 <LCD_Init+0x3980>)
 8005762:	2280      	movs	r2, #128	; 0x80
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <LCD_Init+0x3980>)
 8005768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800576e:	4b2e      	ldr	r3, [pc, #184]	; (8005828 <LCD_Init+0x3980>)
 8005770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005774:	611a      	str	r2, [r3, #16]
 8005776:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <LCD_Init+0x3980>)
 8005778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577c:	615a      	str	r2, [r3, #20]
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <LCD_Init+0x3984>)
 8005780:	2203      	movs	r2, #3
 8005782:	60da      	str	r2, [r3, #12]
 8005784:	4b28      	ldr	r3, [pc, #160]	; (8005828 <LCD_Init+0x3980>)
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	615a      	str	r2, [r3, #20]
 800578a:	4b27      	ldr	r3, [pc, #156]	; (8005828 <LCD_Init+0x3980>)
 800578c:	2280      	movs	r2, #128	; 0x80
 800578e:	611a      	str	r2, [r3, #16]
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <LCD_Init+0x3980>)
 8005792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005796:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005798:	4b23      	ldr	r3, [pc, #140]	; (8005828 <LCD_Init+0x3980>)
 800579a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800579e:	611a      	str	r2, [r3, #16]
 80057a0:	4b21      	ldr	r3, [pc, #132]	; (8005828 <LCD_Init+0x3980>)
 80057a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a6:	615a      	str	r2, [r3, #20]
 80057a8:	4b20      	ldr	r3, [pc, #128]	; (800582c <LCD_Init+0x3984>)
 80057aa:	f240 321f 	movw	r2, #799	; 0x31f
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <LCD_Init+0x3980>)
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	4b1c      	ldr	r3, [pc, #112]	; (8005828 <LCD_Init+0x3980>)
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	611a      	str	r2, [r3, #16]
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <LCD_Init+0x3980>)
 80057be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80057c4:	4b18      	ldr	r3, [pc, #96]	; (8005828 <LCD_Init+0x3980>)
 80057c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ca:	611a      	str	r2, [r3, #16]
 80057cc:	4b16      	ldr	r3, [pc, #88]	; (8005828 <LCD_Init+0x3980>)
 80057ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d2:	615a      	str	r2, [r3, #20]
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <LCD_Init+0x3984>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <LCD_Init+0x3980>)
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	615a      	str	r2, [r3, #20]
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <LCD_Init+0x3980>)
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	611a      	str	r2, [r3, #16]
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <LCD_Init+0x3980>)
 80057e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <LCD_Init+0x3980>)
 80057f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f4:	611a      	str	r2, [r3, #16]
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <LCD_Init+0x3980>)
 80057f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fc:	615a      	str	r2, [r3, #20]
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <LCD_Init+0x3984>)
 8005800:	f240 12df 	movw	r2, #479	; 0x1df
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <LCD_Init+0x3980>)
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <LCD_Init+0x3980>)
 800580e:	2280      	movs	r2, #128	; 0x80
 8005810:	611a      	str	r2, [r3, #16]
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <LCD_Init+0x3980>)
 8005814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005818:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800581a:	4b03      	ldr	r3, [pc, #12]	; (8005828 <LCD_Init+0x3980>)
 800581c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005820:	e006      	b.n	8005830 <LCD_Init+0x3988>
 8005822:	bf00      	nop
 8005824:	20000204 	.word	0x20000204
 8005828:	40011000 	.word	0x40011000
 800582c:	40010c00 	.word	0x40010c00
 8005830:	611a      	str	r2, [r3, #16]
 8005832:	4ba3      	ldr	r3, [pc, #652]	; (8005ac0 <LCD_Init+0x3c18>)
 8005834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005838:	615a      	str	r2, [r3, #20]
 800583a:	4ba2      	ldr	r3, [pc, #648]	; (8005ac4 <LCD_Init+0x3c1c>)
 800583c:	2200      	movs	r2, #0
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	4b9f      	ldr	r3, [pc, #636]	; (8005ac0 <LCD_Init+0x3c18>)
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	615a      	str	r2, [r3, #20]
 8005846:	4b9e      	ldr	r3, [pc, #632]	; (8005ac0 <LCD_Init+0x3c18>)
 8005848:	2280      	movs	r2, #128	; 0x80
 800584a:	611a      	str	r2, [r3, #16]
 800584c:	4b9c      	ldr	r3, [pc, #624]	; (8005ac0 <LCD_Init+0x3c18>)
 800584e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005852:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005854:	20b4      	movs	r0, #180	; 0xb4
 8005856:	f7fa ffff 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800585a:	4b99      	ldr	r3, [pc, #612]	; (8005ac0 <LCD_Init+0x3c18>)
 800585c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005860:	611a      	str	r2, [r3, #16]
 8005862:	4b97      	ldr	r3, [pc, #604]	; (8005ac0 <LCD_Init+0x3c18>)
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	615a      	str	r2, [r3, #20]
 800586a:	4b96      	ldr	r3, [pc, #600]	; (8005ac4 <LCD_Init+0x3c1c>)
 800586c:	2204      	movs	r2, #4
 800586e:	60da      	str	r2, [r3, #12]
 8005870:	4b93      	ldr	r3, [pc, #588]	; (8005ac0 <LCD_Init+0x3c18>)
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	615a      	str	r2, [r3, #20]
 8005876:	4b92      	ldr	r3, [pc, #584]	; (8005ac0 <LCD_Init+0x3c18>)
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	611a      	str	r2, [r3, #16]
 800587c:	4b90      	ldr	r3, [pc, #576]	; (8005ac0 <LCD_Init+0x3c18>)
 800587e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005882:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005884:	4b8e      	ldr	r3, [pc, #568]	; (8005ac0 <LCD_Init+0x3c18>)
 8005886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	4b8c      	ldr	r3, [pc, #560]	; (8005ac0 <LCD_Init+0x3c18>)
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	615a      	str	r2, [r3, #20]
 8005894:	4b8b      	ldr	r3, [pc, #556]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005896:	f240 421f 	movw	r2, #1055	; 0x41f
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <LCD_Init+0x3c18>)
 800589e:	2280      	movs	r2, #128	; 0x80
 80058a0:	615a      	str	r2, [r3, #20]
 80058a2:	4b87      	ldr	r3, [pc, #540]	; (8005ac0 <LCD_Init+0x3c18>)
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	611a      	str	r2, [r3, #16]
 80058a8:	4b85      	ldr	r3, [pc, #532]	; (8005ac0 <LCD_Init+0x3c18>)
 80058aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80058b0:	4b83      	ldr	r3, [pc, #524]	; (8005ac0 <LCD_Init+0x3c18>)
 80058b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058b6:	611a      	str	r2, [r3, #16]
 80058b8:	4b81      	ldr	r3, [pc, #516]	; (8005ac0 <LCD_Init+0x3c18>)
 80058ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058be:	615a      	str	r2, [r3, #20]
 80058c0:	4b80      	ldr	r3, [pc, #512]	; (8005ac4 <LCD_Init+0x3c1c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	4b7e      	ldr	r3, [pc, #504]	; (8005ac0 <LCD_Init+0x3c18>)
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	615a      	str	r2, [r3, #20]
 80058cc:	4b7c      	ldr	r3, [pc, #496]	; (8005ac0 <LCD_Init+0x3c18>)
 80058ce:	2280      	movs	r2, #128	; 0x80
 80058d0:	611a      	str	r2, [r3, #16]
 80058d2:	4b7b      	ldr	r3, [pc, #492]	; (8005ac0 <LCD_Init+0x3c18>)
 80058d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80058da:	4b79      	ldr	r3, [pc, #484]	; (8005ac0 <LCD_Init+0x3c18>)
 80058dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	4b77      	ldr	r3, [pc, #476]	; (8005ac0 <LCD_Init+0x3c18>)
 80058e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e8:	615a      	str	r2, [r3, #20]
 80058ea:	4b76      	ldr	r3, [pc, #472]	; (8005ac4 <LCD_Init+0x3c1c>)
 80058ec:	222e      	movs	r2, #46	; 0x2e
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	4b73      	ldr	r3, [pc, #460]	; (8005ac0 <LCD_Init+0x3c18>)
 80058f2:	2280      	movs	r2, #128	; 0x80
 80058f4:	615a      	str	r2, [r3, #20]
 80058f6:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <LCD_Init+0x3c18>)
 80058f8:	2280      	movs	r2, #128	; 0x80
 80058fa:	611a      	str	r2, [r3, #16]
 80058fc:	4b70      	ldr	r3, [pc, #448]	; (8005ac0 <LCD_Init+0x3c18>)
 80058fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005902:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005904:	4b6e      	ldr	r3, [pc, #440]	; (8005ac0 <LCD_Init+0x3c18>)
 8005906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590a:	611a      	str	r2, [r3, #16]
 800590c:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <LCD_Init+0x3c18>)
 800590e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005912:	615a      	str	r2, [r3, #20]
 8005914:	4b6b      	ldr	r3, [pc, #428]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005916:	2200      	movs	r2, #0
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	4b69      	ldr	r3, [pc, #420]	; (8005ac0 <LCD_Init+0x3c18>)
 800591c:	2280      	movs	r2, #128	; 0x80
 800591e:	615a      	str	r2, [r3, #20]
 8005920:	4b67      	ldr	r3, [pc, #412]	; (8005ac0 <LCD_Init+0x3c18>)
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	611a      	str	r2, [r3, #16]
 8005926:	4b66      	ldr	r3, [pc, #408]	; (8005ac0 <LCD_Init+0x3c18>)
 8005928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800592e:	4b64      	ldr	r3, [pc, #400]	; (8005ac0 <LCD_Init+0x3c18>)
 8005930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005934:	611a      	str	r2, [r3, #16]
 8005936:	4b62      	ldr	r3, [pc, #392]	; (8005ac0 <LCD_Init+0x3c18>)
 8005938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593c:	615a      	str	r2, [r3, #20]
 800593e:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005940:	2200      	movs	r2, #0
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	4b5e      	ldr	r3, [pc, #376]	; (8005ac0 <LCD_Init+0x3c18>)
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	615a      	str	r2, [r3, #20]
 800594a:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <LCD_Init+0x3c18>)
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	611a      	str	r2, [r3, #16]
 8005950:	4b5b      	ldr	r3, [pc, #364]	; (8005ac0 <LCD_Init+0x3c18>)
 8005952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005956:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <LCD_Init+0x3c18>)
 800595a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595e:	611a      	str	r2, [r3, #16]
 8005960:	4b57      	ldr	r3, [pc, #348]	; (8005ac0 <LCD_Init+0x3c18>)
 8005962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005966:	615a      	str	r2, [r3, #20]
 8005968:	4b56      	ldr	r3, [pc, #344]	; (8005ac4 <LCD_Init+0x3c1c>)
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	4b54      	ldr	r3, [pc, #336]	; (8005ac0 <LCD_Init+0x3c18>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	615a      	str	r2, [r3, #20]
 8005974:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <LCD_Init+0x3c18>)
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	4b51      	ldr	r3, [pc, #324]	; (8005ac0 <LCD_Init+0x3c18>)
 800597c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005980:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005982:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <LCD_Init+0x3c18>)
 8005984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <LCD_Init+0x3c18>)
 800598c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005990:	615a      	str	r2, [r3, #20]
 8005992:	4b4c      	ldr	r3, [pc, #304]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005994:	2200      	movs	r2, #0
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <LCD_Init+0x3c18>)
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	615a      	str	r2, [r3, #20]
 800599e:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <LCD_Init+0x3c18>)
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	611a      	str	r2, [r3, #16]
 80059a4:	4b46      	ldr	r3, [pc, #280]	; (8005ac0 <LCD_Init+0x3c18>)
 80059a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059aa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80059ac:	20b6      	movs	r0, #182	; 0xb6
 80059ae:	f7fa ff53 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80059b2:	4b43      	ldr	r3, [pc, #268]	; (8005ac0 <LCD_Init+0x3c18>)
 80059b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <LCD_Init+0x3c18>)
 80059bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c0:	615a      	str	r2, [r3, #20]
 80059c2:	4b40      	ldr	r3, [pc, #256]	; (8005ac4 <LCD_Init+0x3c1c>)
 80059c4:	2202      	movs	r2, #2
 80059c6:	60da      	str	r2, [r3, #12]
 80059c8:	4b3d      	ldr	r3, [pc, #244]	; (8005ac0 <LCD_Init+0x3c18>)
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	615a      	str	r2, [r3, #20]
 80059ce:	4b3c      	ldr	r3, [pc, #240]	; (8005ac0 <LCD_Init+0x3c18>)
 80059d0:	2280      	movs	r2, #128	; 0x80
 80059d2:	611a      	str	r2, [r3, #16]
 80059d4:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <LCD_Init+0x3c18>)
 80059d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059da:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80059dc:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <LCD_Init+0x3c18>)
 80059de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e2:	611a      	str	r2, [r3, #16]
 80059e4:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <LCD_Init+0x3c18>)
 80059e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ea:	615a      	str	r2, [r3, #20]
 80059ec:	4b35      	ldr	r3, [pc, #212]	; (8005ac4 <LCD_Init+0x3c1c>)
 80059ee:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <LCD_Init+0x3c18>)
 80059f6:	2280      	movs	r2, #128	; 0x80
 80059f8:	615a      	str	r2, [r3, #20]
 80059fa:	4b31      	ldr	r3, [pc, #196]	; (8005ac0 <LCD_Init+0x3c18>)
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	611a      	str	r2, [r3, #16]
 8005a00:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005a08:	4b2d      	ldr	r3, [pc, #180]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	615a      	str	r2, [r3, #20]
 8005a18:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
 8005a1e:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005a44:	2217      	movs	r2, #23
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	611a      	str	r2, [r3, #16]
 8005a54:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005a5c:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a62:	611a      	str	r2, [r3, #16]
 8005a64:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6a:	615a      	str	r2, [r3, #20]
 8005a6c:	4b15      	ldr	r3, [pc, #84]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005a6e:	2215      	movs	r2, #21
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	615a      	str	r2, [r3, #20]
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	611a      	str	r2, [r3, #16]
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a8c:	611a      	str	r2, [r3, #16]
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a94:	615a      	str	r2, [r3, #20]
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <LCD_Init+0x3c1c>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	60da      	str	r2, [r3, #12]
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <LCD_Init+0x3c18>)
 8005a9e:	2280      	movs	r2, #128	; 0x80
 8005aa0:	615a      	str	r2, [r3, #20]
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <LCD_Init+0x3c18>)
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	611a      	str	r2, [r3, #16]
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <LCD_Init+0x3c18>)
 8005aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <LCD_Init+0x3c18>)
 8005ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab6:	611a      	str	r2, [r3, #16]
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <LCD_Init+0x3c18>)
 8005aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abe:	e003      	b.n	8005ac8 <LCD_Init+0x3c20>
 8005ac0:	40011000 	.word	0x40011000
 8005ac4:	40010c00 	.word	0x40010c00
 8005ac8:	615a      	str	r2, [r3, #20]
 8005aca:	4b8b      	ldr	r3, [pc, #556]	; (8005cf8 <LCD_Init+0x3e50>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	60da      	str	r2, [r3, #12]
 8005ad0:	4b8a      	ldr	r3, [pc, #552]	; (8005cfc <LCD_Init+0x3e54>)
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	615a      	str	r2, [r3, #20]
 8005ad6:	4b89      	ldr	r3, [pc, #548]	; (8005cfc <LCD_Init+0x3e54>)
 8005ad8:	2280      	movs	r2, #128	; 0x80
 8005ada:	611a      	str	r2, [r3, #16]
 8005adc:	4b87      	ldr	r3, [pc, #540]	; (8005cfc <LCD_Init+0x3e54>)
 8005ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005ae4:	20f0      	movs	r0, #240	; 0xf0
 8005ae6:	f7fa feb7 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005aea:	4b84      	ldr	r3, [pc, #528]	; (8005cfc <LCD_Init+0x3e54>)
 8005aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005af0:	611a      	str	r2, [r3, #16]
 8005af2:	4b82      	ldr	r3, [pc, #520]	; (8005cfc <LCD_Init+0x3e54>)
 8005af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af8:	615a      	str	r2, [r3, #20]
 8005afa:	4b7f      	ldr	r3, [pc, #508]	; (8005cf8 <LCD_Init+0x3e50>)
 8005afc:	2203      	movs	r2, #3
 8005afe:	60da      	str	r2, [r3, #12]
 8005b00:	4b7e      	ldr	r3, [pc, #504]	; (8005cfc <LCD_Init+0x3e54>)
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	615a      	str	r2, [r3, #20]
 8005b06:	4b7d      	ldr	r3, [pc, #500]	; (8005cfc <LCD_Init+0x3e54>)
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	611a      	str	r2, [r3, #16]
 8005b0c:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <LCD_Init+0x3e54>)
 8005b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b12:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005b14:	2029      	movs	r0, #41	; 0x29
 8005b16:	f7fa fe9f 	bl	8000858 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005b1a:	20d0      	movs	r0, #208	; 0xd0
 8005b1c:	f7fa fe9c 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005b20:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <LCD_Init+0x3e54>)
 8005b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b26:	611a      	str	r2, [r3, #16]
 8005b28:	4b74      	ldr	r3, [pc, #464]	; (8005cfc <LCD_Init+0x3e54>)
 8005b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2e:	615a      	str	r2, [r3, #20]
 8005b30:	4b71      	ldr	r3, [pc, #452]	; (8005cf8 <LCD_Init+0x3e50>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	4b71      	ldr	r3, [pc, #452]	; (8005cfc <LCD_Init+0x3e54>)
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	615a      	str	r2, [r3, #20]
 8005b3c:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <LCD_Init+0x3e54>)
 8005b3e:	2280      	movs	r2, #128	; 0x80
 8005b40:	611a      	str	r2, [r3, #16]
 8005b42:	4b6e      	ldr	r3, [pc, #440]	; (8005cfc <LCD_Init+0x3e54>)
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005b4a:	20be      	movs	r0, #190	; 0xbe
 8005b4c:	f7fa fe84 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005b50:	4b6a      	ldr	r3, [pc, #424]	; (8005cfc <LCD_Init+0x3e54>)
 8005b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b56:	611a      	str	r2, [r3, #16]
 8005b58:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <LCD_Init+0x3e54>)
 8005b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5e:	615a      	str	r2, [r3, #20]
 8005b60:	4b65      	ldr	r3, [pc, #404]	; (8005cf8 <LCD_Init+0x3e50>)
 8005b62:	2205      	movs	r2, #5
 8005b64:	60da      	str	r2, [r3, #12]
 8005b66:	4b65      	ldr	r3, [pc, #404]	; (8005cfc <LCD_Init+0x3e54>)
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	615a      	str	r2, [r3, #20]
 8005b6c:	4b63      	ldr	r3, [pc, #396]	; (8005cfc <LCD_Init+0x3e54>)
 8005b6e:	2280      	movs	r2, #128	; 0x80
 8005b70:	611a      	str	r2, [r3, #16]
 8005b72:	4b62      	ldr	r3, [pc, #392]	; (8005cfc <LCD_Init+0x3e54>)
 8005b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b78:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005b7a:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <LCD_Init+0x3e54>)
 8005b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b80:	611a      	str	r2, [r3, #16]
 8005b82:	4b5e      	ldr	r3, [pc, #376]	; (8005cfc <LCD_Init+0x3e54>)
 8005b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <LCD_Init+0x3e50>)
 8005b8c:	22fe      	movs	r2, #254	; 0xfe
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	4b5a      	ldr	r3, [pc, #360]	; (8005cfc <LCD_Init+0x3e54>)
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	615a      	str	r2, [r3, #20]
 8005b96:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <LCD_Init+0x3e54>)
 8005b98:	2280      	movs	r2, #128	; 0x80
 8005b9a:	611a      	str	r2, [r3, #16]
 8005b9c:	4b57      	ldr	r3, [pc, #348]	; (8005cfc <LCD_Init+0x3e54>)
 8005b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005ba4:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <LCD_Init+0x3e54>)
 8005ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005baa:	611a      	str	r2, [r3, #16]
 8005bac:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <LCD_Init+0x3e54>)
 8005bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb2:	615a      	str	r2, [r3, #20]
 8005bb4:	4b50      	ldr	r3, [pc, #320]	; (8005cf8 <LCD_Init+0x3e50>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	4b50      	ldr	r3, [pc, #320]	; (8005cfc <LCD_Init+0x3e54>)
 8005bbc:	2280      	movs	r2, #128	; 0x80
 8005bbe:	615a      	str	r2, [r3, #20]
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <LCD_Init+0x3e54>)
 8005bc2:	2280      	movs	r2, #128	; 0x80
 8005bc4:	611a      	str	r2, [r3, #16]
 8005bc6:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <LCD_Init+0x3e54>)
 8005bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bcc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005bce:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <LCD_Init+0x3e54>)
 8005bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd4:	611a      	str	r2, [r3, #16]
 8005bd6:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <LCD_Init+0x3e54>)
 8005bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bdc:	615a      	str	r2, [r3, #20]
 8005bde:	4b46      	ldr	r3, [pc, #280]	; (8005cf8 <LCD_Init+0x3e50>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	4b45      	ldr	r3, [pc, #276]	; (8005cfc <LCD_Init+0x3e54>)
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	615a      	str	r2, [r3, #20]
 8005bea:	4b44      	ldr	r3, [pc, #272]	; (8005cfc <LCD_Init+0x3e54>)
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	611a      	str	r2, [r3, #16]
 8005bf0:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <LCD_Init+0x3e54>)
 8005bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005bf8:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <LCD_Init+0x3e54>)
 8005bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bfe:	611a      	str	r2, [r3, #16]
 8005c00:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <LCD_Init+0x3e54>)
 8005c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <LCD_Init+0x3e50>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <LCD_Init+0x3e54>)
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	615a      	str	r2, [r3, #20]
 8005c14:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <LCD_Init+0x3e54>)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	4b38      	ldr	r3, [pc, #224]	; (8005cfc <LCD_Init+0x3e54>)
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005c22:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <LCD_Init+0x3e54>)
 8005c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c28:	611a      	str	r2, [r3, #16]
 8005c2a:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <LCD_Init+0x3e54>)
 8005c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <LCD_Init+0x3e50>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	60da      	str	r2, [r3, #12]
 8005c38:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <LCD_Init+0x3e54>)
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	615a      	str	r2, [r3, #20]
 8005c3e:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <LCD_Init+0x3e54>)
 8005c40:	2280      	movs	r2, #128	; 0x80
 8005c42:	611a      	str	r2, [r3, #16]
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <LCD_Init+0x3e54>)
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005c4c:	20b8      	movs	r0, #184	; 0xb8
 8005c4e:	f7fa fe03 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <LCD_Init+0x3e54>)
 8005c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	4b28      	ldr	r3, [pc, #160]	; (8005cfc <LCD_Init+0x3e54>)
 8005c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c60:	615a      	str	r2, [r3, #20]
 8005c62:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <LCD_Init+0x3e50>)
 8005c64:	2203      	movs	r2, #3
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <LCD_Init+0x3e54>)
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	615a      	str	r2, [r3, #20]
 8005c6e:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <LCD_Init+0x3e54>)
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	611a      	str	r2, [r3, #16]
 8005c74:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <LCD_Init+0x3e54>)
 8005c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <LCD_Init+0x3e54>)
 8005c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c82:	611a      	str	r2, [r3, #16]
 8005c84:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <LCD_Init+0x3e54>)
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	615a      	str	r2, [r3, #20]
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <LCD_Init+0x3e50>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <LCD_Init+0x3e54>)
 8005c94:	2280      	movs	r2, #128	; 0x80
 8005c96:	615a      	str	r2, [r3, #20]
 8005c98:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <LCD_Init+0x3e54>)
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	611a      	str	r2, [r3, #16]
 8005c9e:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <LCD_Init+0x3e54>)
 8005ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005ca6:	20ba      	movs	r0, #186	; 0xba
 8005ca8:	f7fa fdd6 	bl	8000858 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <LCD_Init+0x3e54>)
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <LCD_Init+0x3e54>)
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <LCD_Init+0x3e50>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <LCD_Init+0x3e54>)
 8005cc4:	2280      	movs	r2, #128	; 0x80
 8005cc6:	615a      	str	r2, [r3, #20]
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <LCD_Init+0x3e54>)
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <LCD_Init+0x3e54>)
 8005cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005cd6:	2064      	movs	r0, #100	; 0x64
 8005cd8:	f7fb ff36 	bl	8001b48 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f7fb ffd7 	bl	8001c90 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005ce2:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <LCD_Init+0x3e58>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005ce8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005cec:	f000 f80a 	bl	8005d04 <LCD_Clear>
}
 8005cf0:	bf00      	nop
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40010c00 	.word	0x40010c00
 8005cfc:	40011000 	.word	0x40011000
 8005d00:	422201a8 	.word	0x422201a8

08005d04 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005d12:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <LCD_Clear+0xb8>)
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005d18:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <LCD_Clear+0xb8>)
 8005d1a:	885b      	ldrh	r3, [r3, #2]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	fb02 f303 	mul.w	r3, r2, r3
 8005d24:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005d26:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <LCD_Clear+0xb8>)
 8005d28:	889b      	ldrh	r3, [r3, #4]
 8005d2a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d11a      	bne.n	8005d68 <LCD_Clear+0x64>
 8005d32:	4b22      	ldr	r3, [pc, #136]	; (8005dbc <LCD_Clear+0xb8>)
 8005d34:	799b      	ldrb	r3, [r3, #6]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d116      	bne.n	8005d68 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005d3a:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <LCD_Clear+0xb8>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <LCD_Clear+0xb8>)
 8005d42:	222a      	movs	r2, #42	; 0x2a
 8005d44:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005d46:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <LCD_Clear+0xb8>)
 8005d48:	222b      	movs	r2, #43	; 0x2b
 8005d4a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f7fa fe54 	bl	80009fc <LCD_SetCursor>
		lcddev.dir = 1;
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <LCD_Clear+0xb8>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <LCD_Clear+0xb8>)
 8005d5c:	222b      	movs	r2, #43	; 0x2b
 8005d5e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005d60:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <LCD_Clear+0xb8>)
 8005d62:	222a      	movs	r2, #42	; 0x2a
 8005d64:	819a      	strh	r2, [r3, #12]
 8005d66:	e003      	b.n	8005d70 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005d68:	2100      	movs	r1, #0
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f7fa fe46 	bl	80009fc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005d70:	f7fa fe38 	bl	80009e4 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e017      	b.n	8005daa <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <LCD_Clear+0xbc>)
 8005d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d80:	611a      	str	r2, [r3, #16]
 8005d82:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <LCD_Clear+0xbc>)
 8005d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <LCD_Clear+0xc0>)
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	60d3      	str	r3, [r2, #12]
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <LCD_Clear+0xbc>)
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	615a      	str	r2, [r3, #20]
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <LCD_Clear+0xbc>)
 8005d98:	2280      	movs	r2, #128	; 0x80
 8005d9a:	611a      	str	r2, [r3, #16]
 8005d9c:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <LCD_Clear+0xbc>)
 8005d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d3e3      	bcc.n	8005d7a <LCD_Clear+0x76>
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000204 	.word	0x20000204
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	40010c00 	.word	0x40010c00

08005dc8 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b08d      	sub	sp, #52	; 0x34
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	80fb      	strh	r3, [r7, #6]
 8005dda:	4603      	mov	r3, r0
 8005ddc:	80bb      	strh	r3, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	807b      	strh	r3, [r7, #2]
 8005de2:	4613      	mov	r3, r2
 8005de4:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8005de6:	2300      	movs	r3, #0
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dea:	2300      	movs	r3, #0
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8005df6:	883a      	ldrh	r2, [r7, #0]
 8005df8:	88bb      	ldrh	r3, [r7, #4]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8005e02:	88bb      	ldrh	r3, [r7, #4]
 8005e04:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dd02      	ble.n	8005e12 <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e00b      	b.n	8005e2a <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e005      	b.n	8005e2a <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e22:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	425b      	negs	r3, r3
 8005e28:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dd02      	ble.n	8005e36 <LCD_DrawLine+0x6e>
		incy = 1;
 8005e30:	2301      	movs	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e00b      	b.n	8005e4e <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	e005      	b.n	8005e4e <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8005e42:	f04f 33ff 	mov.w	r3, #4294967295
 8005e46:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	dd02      	ble.n	8005e5c <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e001      	b.n	8005e60 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8005e60:	2300      	movs	r3, #0
 8005e62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e64:	e02a      	b.n	8005ebc <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fb fba1 	bl	80015b8 <LCD_DrawPoint>
		xerr += delta_x;
 8005e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8005e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	dd07      	ble.n	8005e9e <LCD_DrawLine+0xd6>
			xerr -= distance;
 8005e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	dd07      	ble.n	8005eb6 <LCD_DrawLine+0xee>
			yerr -= distance;
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8005eb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eb8:	3301      	adds	r3, #1
 8005eba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ebc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	ddcf      	ble.n	8005e66 <LCD_DrawLine+0x9e>
		}
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	3734      	adds	r7, #52	; 0x34
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd90      	pop	{r4, r7, pc}

08005ed0 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	80fb      	strh	r3, [r7, #6]
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80bb      	strh	r3, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	807b      	strh	r3, [r7, #2]
 8005eea:	4613      	mov	r3, r2
 8005eec:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 8005eee:	88bb      	ldrh	r3, [r7, #4]
 8005ef0:	887a      	ldrh	r2, [r7, #2]
 8005ef2:	88b9      	ldrh	r1, [r7, #4]
 8005ef4:	88f8      	ldrh	r0, [r7, #6]
 8005ef6:	f7ff ff67 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8005efa:	883b      	ldrh	r3, [r7, #0]
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	88b9      	ldrh	r1, [r7, #4]
 8005f00:	88f8      	ldrh	r0, [r7, #6]
 8005f02:	f7ff ff61 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 8005f06:	883b      	ldrh	r3, [r7, #0]
 8005f08:	887a      	ldrh	r2, [r7, #2]
 8005f0a:	8839      	ldrh	r1, [r7, #0]
 8005f0c:	88f8      	ldrh	r0, [r7, #6]
 8005f0e:	f7ff ff5b 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 8005f12:	883b      	ldrh	r3, [r7, #0]
 8005f14:	887a      	ldrh	r2, [r7, #2]
 8005f16:	88b9      	ldrh	r1, [r7, #4]
 8005f18:	8878      	ldrh	r0, [r7, #2]
 8005f1a:	f7ff ff55 	bl	8005dc8 <LCD_DrawLine>
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd90      	pop	{r4, r7, pc}

08005f26 <LCD_Draw_Circle>:

// Draw a circle
//(x,y): center
//r    : radius
void LCD_Draw_Circle(uint16_t x0, uint16_t y0, uint8_t r) {
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	80fb      	strh	r3, [r7, #6]
 8005f30:	460b      	mov	r3, r1
 8005f32:	80bb      	strh	r3, [r7, #4]
 8005f34:	4613      	mov	r3, r2
 8005f36:	70fb      	strb	r3, [r7, #3]
	int a, b;
	int di;
	a = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]
	b = r;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	613b      	str	r3, [r7, #16]
	di = 3 - (r << 1);             //判断下个点位置的标志
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	f1c3 0303 	rsb	r3, r3, #3
 8005f48:	60fb      	str	r3, [r7, #12]
	while (a <= b) {
 8005f4a:	e07f      	b.n	800604c <LCD_Draw_Circle+0x126>
		LCD_DrawPoint(x0 + a, y0 - b);             //5
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	4413      	add	r3, r2
 8005f54:	b298      	uxth	r0, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	88ba      	ldrh	r2, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	f7fb fb29 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 - a);             //0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b298      	uxth	r0, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	88ba      	ldrh	r2, [r7, #4]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f7fb fb1c 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 + b, y0 + a);             //4
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	4413      	add	r3, r2
 8005f88:	b298      	uxth	r0, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	88bb      	ldrh	r3, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	f7fb fb0f 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 + a, y0 + b);             //6
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	b298      	uxth	r0, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	88bb      	ldrh	r3, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f7fb fb02 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 + b);             //1
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	b298      	uxth	r0, r3
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	88bb      	ldrh	r3, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	f7fb faf5 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 + a);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	b298      	uxth	r0, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	88bb      	ldrh	r3, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f7fb fae8 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 - b);             //2
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	b298      	uxth	r0, r3
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	88ba      	ldrh	r2, [r7, #4]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f7fb fadb 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 - a);             //7
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	b29b      	uxth	r3, r3
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	b298      	uxth	r0, r3
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	b29b      	uxth	r3, r3
 8006010:	88ba      	ldrh	r2, [r7, #4]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	b29b      	uxth	r3, r3
 8006016:	4619      	mov	r1, r3
 8006018:	f7fb face 	bl	80015b8 <LCD_DrawPoint>
		a++;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	3301      	adds	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆     
		if (di < 0)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	da06      	bge.n	8006036 <LCD_Draw_Circle+0x110>
			di += 4 * a + 6;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	3306      	adds	r3, #6
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e00a      	b.n	800604c <LCD_Draw_Circle+0x126>
		else {
			di += 10 + 4 * (a - b);
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	330a      	adds	r3, #10
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
			b--;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	3b01      	subs	r3, #1
 800604a:	613b      	str	r3, [r7, #16]
	while (a <= b) {
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	429a      	cmp	r2, r3
 8006052:	f77f af7b 	ble.w	8005f4c <LCD_Draw_Circle+0x26>
		}
	}
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	4611      	mov	r1, r2
 800606c:	461a      	mov	r2, r3
 800606e:	4623      	mov	r3, r4
 8006070:	80fb      	strh	r3, [r7, #6]
 8006072:	4603      	mov	r3, r0
 8006074:	80bb      	strh	r3, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
 800607a:	4613      	mov	r3, r2
 800607c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800607e:	88bb      	ldrh	r3, [r7, #4]
 8006080:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8006082:	78bb      	ldrb	r3, [r7, #2]
 8006084:	08db      	lsrs	r3, r3, #3
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	78bb      	ldrb	r3, [r7, #2]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	bf14      	ite	ne
 8006096:	2301      	movne	r3, #1
 8006098:	2300      	moveq	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	4413      	add	r3, r2
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	78ba      	ldrb	r2, [r7, #2]
 80060a2:	0852      	lsrs	r2, r2, #1
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	3b20      	subs	r3, #32
 80060b0:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80060b2:	2300      	movs	r3, #0
 80060b4:	737b      	strb	r3, [r7, #13]
 80060b6:	e069      	b.n	800618c <LCD_ShowChar+0x12c>
		if (size == 12)
 80060b8:	78bb      	ldrb	r3, [r7, #2]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d10b      	bne.n	80060d6 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	7b79      	ldrb	r1, [r7, #13]
 80060c2:	4838      	ldr	r0, [pc, #224]	; (80061a4 <LCD_ShowChar+0x144>)
 80060c4:	4613      	mov	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4403      	add	r3, r0
 80060ce:	440b      	add	r3, r1
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	e019      	b.n	800610a <LCD_ShowChar+0xaa>
		else if (size == 16)
 80060d6:	78bb      	ldrb	r3, [r7, #2]
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d108      	bne.n	80060ee <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	7b7b      	ldrb	r3, [r7, #13]
 80060e0:	4931      	ldr	r1, [pc, #196]	; (80061a8 <LCD_ShowChar+0x148>)
 80060e2:	0112      	lsls	r2, r2, #4
 80060e4:	440a      	add	r2, r1
 80060e6:	4413      	add	r3, r2
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e00d      	b.n	800610a <LCD_ShowChar+0xaa>
		else if (size == 24)
 80060ee:	78bb      	ldrb	r3, [r7, #2]
 80060f0:	2b18      	cmp	r3, #24
 80060f2:	d150      	bne.n	8006196 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80060f4:	78fa      	ldrb	r2, [r7, #3]
 80060f6:	7b79      	ldrb	r1, [r7, #13]
 80060f8:	482c      	ldr	r0, [pc, #176]	; (80061ac <LCD_ShowChar+0x14c>)
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4403      	add	r3, r0
 8006104:	440b      	add	r3, r1
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800610a:	2300      	movs	r3, #0
 800610c:	73bb      	strb	r3, [r7, #14]
 800610e:	e035      	b.n	800617c <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8006110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	da07      	bge.n	8006128 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <LCD_ShowChar+0x150>)
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	88b9      	ldrh	r1, [r7, #4]
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fb fa79 	bl	8001618 <LCD_Fast_DrawPoint>
 8006126:	e00a      	b.n	800613e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006128:	f897 3020 	ldrb.w	r3, [r7, #32]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006130:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <LCD_ShowChar+0x154>)
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	88b9      	ldrh	r1, [r7, #4]
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fb fa6d 	bl	8001618 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
			y++;
 8006144:	88bb      	ldrh	r3, [r7, #4]
 8006146:	3301      	adds	r3, #1
 8006148:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800614a:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <LCD_ShowChar+0x158>)
 800614c:	885b      	ldrh	r3, [r3, #2]
 800614e:	88ba      	ldrh	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d222      	bcs.n	800619a <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006154:	88ba      	ldrh	r2, [r7, #4]
 8006156:	897b      	ldrh	r3, [r7, #10]
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	78bb      	ldrb	r3, [r7, #2]
 800615c:	429a      	cmp	r2, r3
 800615e:	d10a      	bne.n	8006176 <LCD_ShowChar+0x116>
				y = y0;
 8006160:	897b      	ldrh	r3, [r7, #10]
 8006162:	80bb      	strh	r3, [r7, #4]
				x++;
 8006164:	88fb      	ldrh	r3, [r7, #6]
 8006166:	3301      	adds	r3, #1
 8006168:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <LCD_ShowChar+0x158>)
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	429a      	cmp	r2, r3
 8006172:	d307      	bcc.n	8006184 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006174:	e012      	b.n	800619c <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	3301      	adds	r3, #1
 800617a:	73bb      	strb	r3, [r7, #14]
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	2b07      	cmp	r3, #7
 8006180:	d9c6      	bls.n	8006110 <LCD_ShowChar+0xb0>
 8006182:	e000      	b.n	8006186 <LCD_ShowChar+0x126>
				break;
 8006184:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006186:	7b7b      	ldrb	r3, [r7, #13]
 8006188:	3301      	adds	r3, #1
 800618a:	737b      	strb	r3, [r7, #13]
 800618c:	7b7a      	ldrb	r2, [r7, #13]
 800618e:	7a7b      	ldrb	r3, [r7, #9]
 8006190:	429a      	cmp	r2, r3
 8006192:	d391      	bcc.n	80060b8 <LCD_ShowChar+0x58>
 8006194:	e002      	b.n	800619c <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <LCD_ShowChar+0x13c>
				return;		//超区域了
 800619a:	bf00      	nop
			}
		}
	}
}
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0800bc38 	.word	0x0800bc38
 80061a8:	0800c0ac 	.word	0x0800c0ac
 80061ac:	0800c69c 	.word	0x0800c69c
 80061b0:	2000009c 	.word	0x2000009c
 80061b4:	20000000 	.word	0x20000000
 80061b8:	20000204 	.word	0x20000204

080061bc <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b087      	sub	sp, #28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4623      	mov	r3, r4
 80061cc:	80fb      	strh	r3, [r7, #6]
 80061ce:	4603      	mov	r3, r0
 80061d0:	80bb      	strh	r3, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	807b      	strh	r3, [r7, #2]
 80061d6:	4613      	mov	r3, r2
 80061d8:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	73fb      	strb	r3, [r7, #15]
	width += x;
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	4413      	add	r3, r2
 80061e4:	807b      	strh	r3, [r7, #2]
	height += y;
 80061e6:	883a      	ldrh	r2, [r7, #0]
 80061e8:	88bb      	ldrh	r3, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80061ee:	e024      	b.n	800623a <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	887b      	ldrh	r3, [r7, #2]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d307      	bcc.n	8006208 <LCD_ShowString+0x4c>
			x = x0;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	80fb      	strh	r3, [r7, #6]
			y += size;
 80061fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006200:	b29a      	uxth	r2, r3
 8006202:	88bb      	ldrh	r3, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006208:	88ba      	ldrh	r2, [r7, #4]
 800620a:	883b      	ldrh	r3, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d21d      	bcs.n	800624c <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006218:	88b9      	ldrh	r1, [r7, #4]
 800621a:	88f8      	ldrh	r0, [r7, #6]
 800621c:	2400      	movs	r4, #0
 800621e:	9400      	str	r4, [sp, #0]
 8006220:	f7ff ff1e 	bl	8006060 <LCD_ShowChar>
		x += size / 2;
 8006224:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	b2db      	uxtb	r3, r3
 800622c:	b29a      	uxth	r2, r3
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	4413      	add	r3, r2
 8006232:	80fb      	strh	r3, [r7, #6]
		p++;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	3301      	adds	r3, #1
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b7e      	cmp	r3, #126	; 0x7e
 8006240:	d805      	bhi.n	800624e <LCD_ShowString+0x92>
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b1f      	cmp	r3, #31
 8006248:	d8d2      	bhi.n	80061f0 <LCD_ShowString+0x34>
	}
}
 800624a:	e000      	b.n	800624e <LCD_ShowString+0x92>
			break;	//退出
 800624c:	bf00      	nop
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bd90      	pop	{r4, r7, pc}
	...

08006258 <reset>:
char uRx_Data[2048];
int uLength = 0;


//Call this method to clear all the information.
void reset(){
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
	for(int i = 0;i < 2048;i++){
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
 8006262:	e007      	b.n	8006274 <reset+0x1c>
		uRx_Data[i] = 0;
 8006264:	4a43      	ldr	r2, [pc, #268]	; (8006374 <reset+0x11c>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i < 2048;i++){
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3301      	adds	r3, #1
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800627a:	dbf3      	blt.n	8006264 <reset+0xc>
	}
	uLength = 0;
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <reset+0x120>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
	for(int x = 0;x < 25;x++){
 8006282:	2300      	movs	r3, #0
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	e02f      	b.n	80062e8 <reset+0x90>
		a[x] = 0;
 8006288:	4a3c      	ldr	r2, [pc, #240]	; (800637c <reset+0x124>)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	4413      	add	r3, r2
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
		b[x] = 0;
 8006292:	4a3b      	ldr	r2, [pc, #236]	; (8006380 <reset+0x128>)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	4413      	add	r3, r2
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
		c[x] = 0;
 800629c:	4a39      	ldr	r2, [pc, #228]	; (8006384 <reset+0x12c>)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	4413      	add	r3, r2
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
		d[x] = 0;
 80062a6:	4a38      	ldr	r2, [pc, #224]	; (8006388 <reset+0x130>)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	4413      	add	r3, r2
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
		e[x] = 0;
 80062b0:	4a36      	ldr	r2, [pc, #216]	; (800638c <reset+0x134>)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	4413      	add	r3, r2
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
		f[x] = 0;
 80062ba:	4a35      	ldr	r2, [pc, #212]	; (8006390 <reset+0x138>)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	4413      	add	r3, r2
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
		g[x] = 0;
 80062c4:	4a33      	ldr	r2, [pc, #204]	; (8006394 <reset+0x13c>)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	4413      	add	r3, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
		h[x] = 0;
 80062ce:	4a32      	ldr	r2, [pc, #200]	; (8006398 <reset+0x140>)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	4413      	add	r3, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
		i[x] = 0;
 80062d8:	4a30      	ldr	r2, [pc, #192]	; (800639c <reset+0x144>)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
	for(int x = 0;x < 25;x++){
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b18      	cmp	r3, #24
 80062ec:	ddcc      	ble.n	8006288 <reset+0x30>
	}

	aa = 0;
 80062ee:	4b2c      	ldr	r3, [pc, #176]	; (80063a0 <reset+0x148>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
	LENGTH = 7;
 80062f4:	4b2b      	ldr	r3, [pc, #172]	; (80063a4 <reset+0x14c>)
 80062f6:	2207      	movs	r2, #7
 80062f8:	601a      	str	r2, [r3, #0]
	ba = 0;
 80062fa:	4b2b      	ldr	r3, [pc, #172]	; (80063a8 <reset+0x150>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
	ca = 0;
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <reset+0x154>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
	da = 0;
 8006306:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <reset+0x158>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
	ea = 0;
 800630c:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <reset+0x15c>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
	fa = 0;
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <reset+0x160>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
	ga = 0;
 8006318:	4b28      	ldr	r3, [pc, #160]	; (80063bc <reset+0x164>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
	ha = 0;
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <reset+0x168>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
	ia = 0;
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <reset+0x16c>)
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]

	al = 0;
 800632a:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <reset+0x170>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
	bl = 0;
 8006330:	4b26      	ldr	r3, [pc, #152]	; (80063cc <reset+0x174>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	cl = 0;
 8006336:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <reset+0x178>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
	dl = 0;
 800633c:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <reset+0x17c>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
	el = 0;
 8006342:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <reset+0x180>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]
	fl = 0;
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <reset+0x184>)
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
	gl = 0;
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <reset+0x188>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
	hl = 0;
 8006354:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <reset+0x18c>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
	il = 0;
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <reset+0x190>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
	changeState(0);
 8006360:	2000      	movs	r0, #0
 8006362:	f000 fadf 	bl	8006924 <changeState>
	showMessage();
 8006366:	f000 fcb5 	bl	8006cd4 <showMessage>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000aa0 	.word	0x20000aa0
 8006378:	200001e4 	.word	0x200001e4
 800637c:	200000a0 	.word	0x200000a0
 8006380:	200000bc 	.word	0x200000bc
 8006384:	200000d8 	.word	0x200000d8
 8006388:	200000f4 	.word	0x200000f4
 800638c:	20000110 	.word	0x20000110
 8006390:	2000012c 	.word	0x2000012c
 8006394:	20000148 	.word	0x20000148
 8006398:	20000164 	.word	0x20000164
 800639c:	20000180 	.word	0x20000180
 80063a0:	2000019c 	.word	0x2000019c
 80063a4:	20000004 	.word	0x20000004
 80063a8:	200001a0 	.word	0x200001a0
 80063ac:	200001a4 	.word	0x200001a4
 80063b0:	200001a8 	.word	0x200001a8
 80063b4:	200001ac 	.word	0x200001ac
 80063b8:	200001b0 	.word	0x200001b0
 80063bc:	200001b4 	.word	0x200001b4
 80063c0:	200001b8 	.word	0x200001b8
 80063c4:	200001bc 	.word	0x200001bc
 80063c8:	200001c0 	.word	0x200001c0
 80063cc:	200001c4 	.word	0x200001c4
 80063d0:	200001c8 	.word	0x200001c8
 80063d4:	200001cc 	.word	0x200001cc
 80063d8:	200001d0 	.word	0x200001d0
 80063dc:	200001d4 	.word	0x200001d4
 80063e0:	200001d8 	.word	0x200001d8
 80063e4:	200001dc 	.word	0x200001dc
 80063e8:	200001e0 	.word	0x200001e0

080063ec <StateChange>:

// This is called when the connection status changes
void StateChange(int connected){
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	changeState(connected);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa95 	bl	8006924 <changeState>
	showMessage();
 80063fa:	f000 fc6b 	bl	8006cd4 <showMessage>
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <printOut>:

// This method is called when sending a message.
// usart : 1 -> The machine sends a message.
// usart : 2 -> The machine received the message.
void printOut(unsigned char newline[],unsigned char ul, int usart,int connected){
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	460b      	mov	r3, r1
 8006414:	72fb      	strb	r3, [r7, #11]
	changeState(connected);
 8006416:	6838      	ldr	r0, [r7, #0]
 8006418:	f000 fa84 	bl	8006924 <changeState>
	updateuD(newline,ul,usart);
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	4619      	mov	r1, r3
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fae6 	bl	80069f4 <updateuD>
	showMessage();
 8006428:	f000 fc54 	bl	8006cd4 <showMessage>
}
 800642c:	bf00      	nop
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	0000      	movs	r0, r0
	...

08006438 <rightDialog>:

void rightDialog(
	  	int x0, int y0,int r,int L,uint16_t c){
 8006438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800643c:	b08d      	sub	sp, #52	; 0x34
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	603b      	str	r3, [r7, #0]
	POINT_COLOR = c;
 8006448:	4a97      	ldr	r2, [pc, #604]	; (80066a8 <rightDialog+0x270>)
 800644a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800644e:	8013      	strh	r3, [r2, #0]
  	int a, b;
  	int di;
	a = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
	b = r;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
	di = 3 - (r << 1);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	f1c3 0303 	rsb	r3, r3, #3
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
	while (a <= b) {
 8006462:	e053      	b.n	800650c <rightDialog+0xd4>
		LCD_DrawPoint(x0 - a, y0 + b);             //1
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	b29a      	uxth	r2, r3
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	b29b      	uxth	r3, r3
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	b298      	uxth	r0, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	b29a      	uxth	r2, r3
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	b29b      	uxth	r3, r3
 8006478:	4413      	add	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	4619      	mov	r1, r3
 800647e:	f7fb f89b 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 + a);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	b29a      	uxth	r2, r3
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	b29b      	uxth	r3, r3
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	b298      	uxth	r0, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	b29a      	uxth	r2, r3
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	b29b      	uxth	r3, r3
 8006496:	4413      	add	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	4619      	mov	r1, r3
 800649c:	f7fb f88c 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - a, y0 - b);             //2
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	b298      	uxth	r0, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	f7fb f87d 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 - a);             //7
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	b298      	uxth	r0, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	4619      	mov	r1, r3
 80064d8:	f7fb f86e 	bl	80015b8 <LCD_DrawPoint>
		a++;
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	3301      	adds	r3, #1
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (di < 0)
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da06      	bge.n	80064f6 <rightDialog+0xbe>
			di += 4 * a + 6;
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	3306      	adds	r3, #6
 80064ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f0:	4413      	add	r3, r2
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
 80064f4:	e00a      	b.n	800650c <rightDialog+0xd4>
		else {
			di += 10 + 4 * (a - b);
 80064f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	330a      	adds	r3, #10
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	4413      	add	r3, r2
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
			b--;
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	3b01      	subs	r3, #1
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (a <= b) {
 800650c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	429a      	cmp	r2, r3
 8006512:	dda7      	ble.n	8006464 <rightDialog+0x2c>
		}
	}

	int x_1 = x0;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	623b      	str	r3, [r7, #32]
	int y_1 = y0 - r;
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	61fb      	str	r3, [r7, #28]
	int x_2 = x0 + L;
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
	int y_2 = y0 + r;
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
	LCD_DrawLine(x_1, y_1, x_2 + r, y_1);
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	b298      	uxth	r0, r3
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	b299      	uxth	r1, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	b29a      	uxth	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	b29b      	uxth	r3, r3
 8006540:	4413      	add	r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f7ff fc3e 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x_2 + r, y_1,x_2 + sqrt(2)/2 * r, y0 - sqrt(2)/2 * r);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	b29a      	uxth	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	b29b      	uxth	r3, r3
 8006554:	4413      	add	r3, r2
 8006556:	b29e      	uxth	r6, r3
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	fa1f f883 	uxth.w	r8, r3
 800655e:	69b8      	ldr	r0, [r7, #24]
 8006560:	f7fa f8f0 	bl	8000744 <__aeabi_i2d>
 8006564:	4604      	mov	r4, r0
 8006566:	460d      	mov	r5, r1
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fa f8eb 	bl	8000744 <__aeabi_i2d>
 800656e:	a34c      	add	r3, pc, #304	; (adr r3, 80066a0 <rightDialog+0x268>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 fe6a 	bl	800024c <__aeabi_dmul>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7f9 ff94 	bl	80004ac <__adddf3>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4610      	mov	r0, r2
 800658a:	4619      	mov	r1, r3
 800658c:	f7fa f944 	bl	8000818 <__aeabi_d2uiz>
 8006590:	4603      	mov	r3, r0
 8006592:	fa1f f983 	uxth.w	r9, r3
 8006596:	68b8      	ldr	r0, [r7, #8]
 8006598:	f7fa f8d4 	bl	8000744 <__aeabi_i2d>
 800659c:	4604      	mov	r4, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fa f8cf 	bl	8000744 <__aeabi_i2d>
 80065a6:	a33e      	add	r3, pc, #248	; (adr r3, 80066a0 <rightDialog+0x268>)
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f7f9 fe4e 	bl	800024c <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	f7f9 ff76 	bl	80004a8 <__aeabi_dsub>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	f7fa f928 	bl	8000818 <__aeabi_d2uiz>
 80065c8:	4603      	mov	r3, r0
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	464a      	mov	r2, r9
 80065ce:	4641      	mov	r1, r8
 80065d0:	4630      	mov	r0, r6
 80065d2:	f7ff fbf9 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x_1, y_2, x_2, y_2);
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	b298      	uxth	r0, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	b299      	uxth	r1, r3
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f7ff fbef 	bl	8005dc8 <LCD_DrawLine>
	x0 = x_2;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	60fb      	str	r3, [r7, #12]
		a = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		b = r;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
		di = 3 - (r << 1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	f1c3 0303 	rsb	r3, r3, #3
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
		while (a <= b) {
 8006600:	e044      	b.n	800668c <rightDialog+0x254>
			LCD_DrawPoint(x0 + b, y0 - a);             //0
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	b29a      	uxth	r2, r3
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	b29b      	uxth	r3, r3
 800660a:	4413      	add	r3, r2
 800660c:	b298      	uxth	r0, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	b29a      	uxth	r2, r3
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	b29b      	uxth	r3, r3
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	f7fa ffcc 	bl	80015b8 <LCD_DrawPoint>
			LCD_DrawPoint(x0 + b, y0 + a);             //4
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	b29a      	uxth	r2, r3
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	b29b      	uxth	r3, r3
 8006628:	4413      	add	r3, r2
 800662a:	b298      	uxth	r0, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	b29a      	uxth	r2, r3
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	b29b      	uxth	r3, r3
 8006634:	4413      	add	r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	4619      	mov	r1, r3
 800663a:	f7fa ffbd 	bl	80015b8 <LCD_DrawPoint>
			LCD_DrawPoint(x0 + a, y0 + b);             //6
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	b29a      	uxth	r2, r3
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	b29b      	uxth	r3, r3
 8006646:	4413      	add	r3, r2
 8006648:	b298      	uxth	r0, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	b29a      	uxth	r2, r3
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	b29b      	uxth	r3, r3
 8006652:	4413      	add	r3, r2
 8006654:	b29b      	uxth	r3, r3
 8006656:	4619      	mov	r1, r3
 8006658:	f7fa ffae 	bl	80015b8 <LCD_DrawPoint>
			a++;
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	3301      	adds	r3, #1
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (di < 0)
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	da06      	bge.n	8006676 <rightDialog+0x23e>
				di += 4 * a + 6;
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	3306      	adds	r3, #6
 800666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006670:	4413      	add	r3, r2
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
 8006674:	e00a      	b.n	800668c <rightDialog+0x254>
			else {
				di += 10 + 4 * (a - b);
 8006676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	330a      	adds	r3, #10
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	4413      	add	r3, r2
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
				b--;
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	3b01      	subs	r3, #1
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
		while (a <= b) {
 800668c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	429a      	cmp	r2, r3
 8006692:	ddb6      	ble.n	8006602 <rightDialog+0x1ca>
			}
		}

}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3734      	adds	r7, #52	; 0x34
 800669a:	46bd      	mov	sp, r7
 800669c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066a0:	667f3bcd 	.word	0x667f3bcd
 80066a4:	3fe6a09e 	.word	0x3fe6a09e
 80066a8:	2000009c 	.word	0x2000009c
 80066ac:	00000000 	.word	0x00000000

080066b0 <leftDialog>:
void leftDialog(
	  	int x0, int y0,int r,int L,uint16_t c){
 80066b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066b4:	b08d      	sub	sp, #52	; 0x34
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	603b      	str	r3, [r7, #0]
	POINT_COLOR = c;
 80066c0:	4a97      	ldr	r2, [pc, #604]	; (8006920 <leftDialog+0x270>)
 80066c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80066c6:	8013      	strh	r3, [r2, #0]
  	int a, b;
  	int di;
	a = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	b = r;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
	di = 3 - (r << 1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	f1c3 0303 	rsb	r3, r3, #3
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
	while (a <= b) {
 80066da:	e044      	b.n	8006766 <leftDialog+0xb6>
		LCD_DrawPoint(x0 - a, y0 + b);             //1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	b298      	uxth	r0, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4413      	add	r3, r2
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	f7fa ff5f 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 + a);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	b29b      	uxth	r3, r3
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	b298      	uxth	r0, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	b29a      	uxth	r2, r3
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	b29b      	uxth	r3, r3
 800670e:	4413      	add	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	4619      	mov	r1, r3
 8006714:	f7fa ff50 	bl	80015b8 <LCD_DrawPoint>
		LCD_DrawPoint(x0 - b, y0 - a);             //7
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	b29a      	uxth	r2, r3
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	b29b      	uxth	r3, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	b298      	uxth	r0, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	b29a      	uxth	r2, r3
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	b29b      	uxth	r3, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	4619      	mov	r1, r3
 8006732:	f7fa ff41 	bl	80015b8 <LCD_DrawPoint>
		a++;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	3301      	adds	r3, #1
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (di < 0)
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	da06      	bge.n	8006750 <leftDialog+0xa0>
			di += 4 * a + 6;
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	3306      	adds	r3, #6
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	4413      	add	r3, r2
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
 800674e:	e00a      	b.n	8006766 <leftDialog+0xb6>
		else {
			di += 10 + 4 * (a - b);
 8006750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	330a      	adds	r3, #10
 800675a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675c:	4413      	add	r3, r2
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
			b--;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
	while (a <= b) {
 8006766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	429a      	cmp	r2, r3
 800676c:	ddb6      	ble.n	80066dc <leftDialog+0x2c>
		}
	}

	int x_1 = x0;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	623b      	str	r3, [r7, #32]
	int y_1 = y0 - r;
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	61fb      	str	r3, [r7, #28]
	int x_2 = x0 + L;
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4413      	add	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
	int y_2 = y0 + r;
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4413      	add	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
	LCD_DrawLine(x_1 - r, y_1, x_2, y_1);
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	b29a      	uxth	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	b29b      	uxth	r3, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	b298      	uxth	r0, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	b299      	uxth	r1, r3
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	b29a      	uxth	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f7ff fb11 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x_1 - r, y_1,x_1 - sqrt(2)/2 * r, y0 - sqrt(2)/2 * r);
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	b29e      	uxth	r6, r3
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	fa1f f883 	uxth.w	r8, r3
 80067b8:	6a38      	ldr	r0, [r7, #32]
 80067ba:	f7f9 ffc3 	bl	8000744 <__aeabi_i2d>
 80067be:	4604      	mov	r4, r0
 80067c0:	460d      	mov	r5, r1
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7f9 ffbe 	bl	8000744 <__aeabi_i2d>
 80067c8:	a353      	add	r3, pc, #332	; (adr r3, 8006918 <leftDialog+0x268>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f7f9 fd3d 	bl	800024c <__aeabi_dmul>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4620      	mov	r0, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	f7f9 fe65 	bl	80004a8 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4610      	mov	r0, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	f7fa f817 	bl	8000818 <__aeabi_d2uiz>
 80067ea:	4603      	mov	r3, r0
 80067ec:	fa1f f983 	uxth.w	r9, r3
 80067f0:	68b8      	ldr	r0, [r7, #8]
 80067f2:	f7f9 ffa7 	bl	8000744 <__aeabi_i2d>
 80067f6:	4604      	mov	r4, r0
 80067f8:	460d      	mov	r5, r1
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7f9 ffa2 	bl	8000744 <__aeabi_i2d>
 8006800:	a345      	add	r3, pc, #276	; (adr r3, 8006918 <leftDialog+0x268>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f7f9 fd21 	bl	800024c <__aeabi_dmul>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7f9 fe49 	bl	80004a8 <__aeabi_dsub>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	f7f9 fffb 	bl	8000818 <__aeabi_d2uiz>
 8006822:	4603      	mov	r3, r0
 8006824:	b29b      	uxth	r3, r3
 8006826:	464a      	mov	r2, r9
 8006828:	4641      	mov	r1, r8
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff facc 	bl	8005dc8 <LCD_DrawLine>
	LCD_DrawLine(x_1, y_2, x_2, y_2);
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	b298      	uxth	r0, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	b299      	uxth	r1, r3
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	b29a      	uxth	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f7ff fac2 	bl	8005dc8 <LCD_DrawLine>
	x0 = x_2;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	60fb      	str	r3, [r7, #12]
		a = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
		b = r;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
		di = 3 - (r << 1);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	f1c3 0303 	rsb	r3, r3, #3
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
		while (a <= b) {
 800685a:	e053      	b.n	8006904 <leftDialog+0x254>
					LCD_DrawPoint(x0 + a, y0 - b);             //5
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	b29a      	uxth	r2, r3
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	b29b      	uxth	r3, r3
 8006864:	4413      	add	r3, r2
 8006866:	b298      	uxth	r0, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	b29a      	uxth	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	b29b      	uxth	r3, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	b29b      	uxth	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	f7fa fe9f 	bl	80015b8 <LCD_DrawPoint>
					LCD_DrawPoint(x0 + b, y0 - a);             //0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	b29a      	uxth	r2, r3
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	b29b      	uxth	r3, r3
 8006882:	4413      	add	r3, r2
 8006884:	b298      	uxth	r0, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	b29a      	uxth	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	b29b      	uxth	r3, r3
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	b29b      	uxth	r3, r3
 8006892:	4619      	mov	r1, r3
 8006894:	f7fa fe90 	bl	80015b8 <LCD_DrawPoint>
					LCD_DrawPoint(x0 + b, y0 + a);             //4
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	b29a      	uxth	r2, r3
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	b29b      	uxth	r3, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	b298      	uxth	r0, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	4619      	mov	r1, r3
 80068b2:	f7fa fe81 	bl	80015b8 <LCD_DrawPoint>
					LCD_DrawPoint(x0 + a, y0 + b);             //6
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4413      	add	r3, r2
 80068c0:	b298      	uxth	r0, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	4619      	mov	r1, r3
 80068d0:	f7fa fe72 	bl	80015b8 <LCD_DrawPoint>
			a++;
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	3301      	adds	r3, #1
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (di < 0)
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da06      	bge.n	80068ee <leftDialog+0x23e>
				di += 4 * a + 6;
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	3306      	adds	r3, #6
 80068e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e8:	4413      	add	r3, r2
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
 80068ec:	e00a      	b.n	8006904 <leftDialog+0x254>
			else {
				di += 10 + 4 * (a - b);
 80068ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	330a      	adds	r3, #10
 80068f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fa:	4413      	add	r3, r2
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
				b--;
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	3b01      	subs	r3, #1
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
		while (a <= b) {
 8006904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	429a      	cmp	r2, r3
 800690a:	dda7      	ble.n	800685c <leftDialog+0x1ac>
			}
		}

}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	3734      	adds	r7, #52	; 0x34
 8006912:	46bd      	mov	sp, r7
 8006914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006918:	667f3bcd 	.word	0x667f3bcd
 800691c:	3fe6a09e 	.word	0x3fe6a09e
 8006920:	2000009c 	.word	0x2000009c

08006924 <changeState>:

void changeState(int connected){
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af02      	add	r7, sp, #8
 800692a:	6078      	str	r0, [r7, #4]
	LCD_Clear(WHITE);
 800692c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006930:	f7ff f9e8 	bl	8005d04 <LCD_Clear>
	LCD_DrawRectangle(16, 20, 220, 300);
 8006934:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006938:	22dc      	movs	r2, #220	; 0xdc
 800693a:	2114      	movs	r1, #20
 800693c:	2010      	movs	r0, #16
 800693e:	f7ff fac7 	bl	8005ed0 <LCD_DrawRectangle>
	if(connected == 2){
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d125      	bne.n	8006994 <changeState+0x70>
			POINT_COLOR = GREEN;
 8006948:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <changeState+0xc4>)
 800694a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800694e:	801a      	strh	r2, [r3, #0]
			LCD_Draw_Circle(30,10,4);
 8006950:	2204      	movs	r2, #4
 8006952:	210a      	movs	r1, #10
 8006954:	201e      	movs	r0, #30
 8006956:	f7ff fae6 	bl	8005f26 <LCD_Draw_Circle>
			LCD_Draw_Circle(30,10,3);
 800695a:	2203      	movs	r2, #3
 800695c:	210a      	movs	r1, #10
 800695e:	201e      	movs	r0, #30
 8006960:	f7ff fae1 	bl	8005f26 <LCD_Draw_Circle>
			LCD_Draw_Circle(30,10,2);
 8006964:	2202      	movs	r2, #2
 8006966:	210a      	movs	r1, #10
 8006968:	201e      	movs	r0, #30
 800696a:	f7ff fadc 	bl	8005f26 <LCD_Draw_Circle>
			LCD_Draw_Circle(30,10,1);
 800696e:	2201      	movs	r2, #1
 8006970:	210a      	movs	r1, #10
 8006972:	201e      	movs	r0, #30
 8006974:	f7ff fad7 	bl	8005f26 <LCD_Draw_Circle>
			LCD_ShowString(40, 4, 185, 10, 16, (uint8_t*) "CONNECTION");
 8006978:	4b1c      	ldr	r3, [pc, #112]	; (80069ec <changeState+0xc8>)
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	2310      	movs	r3, #16
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	230a      	movs	r3, #10
 8006982:	22b9      	movs	r2, #185	; 0xb9
 8006984:	2104      	movs	r1, #4
 8006986:	2028      	movs	r0, #40	; 0x28
 8006988:	f7ff fc18 	bl	80061bc <LCD_ShowString>
			POINT_COLOR = BLACK;
 800698c:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <changeState+0xc4>)
 800698e:	2200      	movs	r2, #0
 8006990:	801a      	strh	r2, [r3, #0]
		LCD_Draw_Circle(30,10,2);
		LCD_Draw_Circle(30,10,1);
		LCD_ShowString(40, 4, 185, 10, 16, (uint8_t*) "CLOSED");
		POINT_COLOR = BLACK;
	}
}
 8006992:	e024      	b.n	80069de <changeState+0xba>
		POINT_COLOR = RED;
 8006994:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <changeState+0xc4>)
 8006996:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800699a:	801a      	strh	r2, [r3, #0]
		LCD_Draw_Circle(30,10,4);
 800699c:	2204      	movs	r2, #4
 800699e:	210a      	movs	r1, #10
 80069a0:	201e      	movs	r0, #30
 80069a2:	f7ff fac0 	bl	8005f26 <LCD_Draw_Circle>
		LCD_Draw_Circle(30,10,3);
 80069a6:	2203      	movs	r2, #3
 80069a8:	210a      	movs	r1, #10
 80069aa:	201e      	movs	r0, #30
 80069ac:	f7ff fabb 	bl	8005f26 <LCD_Draw_Circle>
		LCD_Draw_Circle(30,10,2);
 80069b0:	2202      	movs	r2, #2
 80069b2:	210a      	movs	r1, #10
 80069b4:	201e      	movs	r0, #30
 80069b6:	f7ff fab6 	bl	8005f26 <LCD_Draw_Circle>
		LCD_Draw_Circle(30,10,1);
 80069ba:	2201      	movs	r2, #1
 80069bc:	210a      	movs	r1, #10
 80069be:	201e      	movs	r0, #30
 80069c0:	f7ff fab1 	bl	8005f26 <LCD_Draw_Circle>
		LCD_ShowString(40, 4, 185, 10, 16, (uint8_t*) "CLOSED");
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <changeState+0xcc>)
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	2310      	movs	r3, #16
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	230a      	movs	r3, #10
 80069ce:	22b9      	movs	r2, #185	; 0xb9
 80069d0:	2104      	movs	r1, #4
 80069d2:	2028      	movs	r0, #40	; 0x28
 80069d4:	f7ff fbf2 	bl	80061bc <LCD_ShowString>
		POINT_COLOR = BLACK;
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <changeState+0xc4>)
 80069da:	2200      	movs	r2, #0
 80069dc:	801a      	strh	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000009c 	.word	0x2000009c
 80069ec:	0800b8b8 	.word	0x0800b8b8
 80069f0:	0800b8c4 	.word	0x0800b8c4

080069f4 <updateuD>:

//usart = 1 : From PCS
//usart = 2 : From WIFI
void updateuD(unsigned char newline[],unsigned char ul, int usart){
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	460b      	mov	r3, r1
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	72fb      	strb	r3, [r7, #11]
	int iii = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
	while(iii<ul){
 8006a06:	e00b      	b.n	8006a20 <updateuD+0x2c>
		uRx_Data[iii] = newline[iii];
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	7819      	ldrb	r1, [r3, #0]
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <updateuD+0x48>)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	460a      	mov	r2, r1
 8006a18:	701a      	strb	r2, [r3, #0]
		iii++;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
	while(iii<ul){
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	dbef      	blt.n	8006a08 <updateuD+0x14>
	}
	uLength = ul;
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <updateuD+0x4c>)
 8006a2c:	6013      	str	r3, [r2, #0]
	addNewLine(usart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f808 	bl	8006a44 <addNewLine>
}
 8006a34:	bf00      	nop
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000aa0 	.word	0x20000aa0
 8006a40:	200001e4 	.word	0x200001e4

08006a44 <addNewLine>:
//usart = 1 : From PC
//usart = 2 : From WIFI
void addNewLine(int usart){
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	int p = uLength / 24;
 8006a4c:	4b83      	ldr	r3, [pc, #524]	; (8006c5c <addNewLine+0x218>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a83      	ldr	r2, [pc, #524]	; (8006c60 <addNewLine+0x21c>)
 8006a52:	fb82 1203 	smull	r1, r2, r2, r3
 8006a56:	1092      	asrs	r2, r2, #2
 8006a58:	17db      	asrs	r3, r3, #31
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	60fb      	str	r3, [r7, #12]
	for(int m = 0; m <= p; m++){
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	e0aa      	b.n	8006bba <addNewLine+0x176>
		for(int k = 0; k < 25; k++){
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e059      	b.n	8006b1e <addNewLine+0xda>
			a[k] = b[k];
 8006a6a:	4a7e      	ldr	r2, [pc, #504]	; (8006c64 <addNewLine+0x220>)
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	4413      	add	r3, r2
 8006a70:	7819      	ldrb	r1, [r3, #0]
 8006a72:	4a7d      	ldr	r2, [pc, #500]	; (8006c68 <addNewLine+0x224>)
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	4413      	add	r3, r2
 8006a78:	460a      	mov	r2, r1
 8006a7a:	701a      	strb	r2, [r3, #0]
			b[k] = c[k];
 8006a7c:	4a7b      	ldr	r2, [pc, #492]	; (8006c6c <addNewLine+0x228>)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	4413      	add	r3, r2
 8006a82:	7819      	ldrb	r1, [r3, #0]
 8006a84:	4a77      	ldr	r2, [pc, #476]	; (8006c64 <addNewLine+0x220>)
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	4413      	add	r3, r2
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	701a      	strb	r2, [r3, #0]
			c[k] = d[k];
 8006a8e:	4a78      	ldr	r2, [pc, #480]	; (8006c70 <addNewLine+0x22c>)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	4413      	add	r3, r2
 8006a94:	7819      	ldrb	r1, [r3, #0]
 8006a96:	4a75      	ldr	r2, [pc, #468]	; (8006c6c <addNewLine+0x228>)
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	701a      	strb	r2, [r3, #0]
			d[k] = e[k];
 8006aa0:	4a74      	ldr	r2, [pc, #464]	; (8006c74 <addNewLine+0x230>)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	7819      	ldrb	r1, [r3, #0]
 8006aa8:	4a71      	ldr	r2, [pc, #452]	; (8006c70 <addNewLine+0x22c>)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	4413      	add	r3, r2
 8006aae:	460a      	mov	r2, r1
 8006ab0:	701a      	strb	r2, [r3, #0]
			e[k] = f[k];
 8006ab2:	4a71      	ldr	r2, [pc, #452]	; (8006c78 <addNewLine+0x234>)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	7819      	ldrb	r1, [r3, #0]
 8006aba:	4a6e      	ldr	r2, [pc, #440]	; (8006c74 <addNewLine+0x230>)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	4413      	add	r3, r2
 8006ac0:	460a      	mov	r2, r1
 8006ac2:	701a      	strb	r2, [r3, #0]
			f[k] = g[k];
 8006ac4:	4a6d      	ldr	r2, [pc, #436]	; (8006c7c <addNewLine+0x238>)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	4413      	add	r3, r2
 8006aca:	7819      	ldrb	r1, [r3, #0]
 8006acc:	4a6a      	ldr	r2, [pc, #424]	; (8006c78 <addNewLine+0x234>)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	701a      	strb	r2, [r3, #0]
			g[k] = h[k];
 8006ad6:	4a6a      	ldr	r2, [pc, #424]	; (8006c80 <addNewLine+0x23c>)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	4413      	add	r3, r2
 8006adc:	7819      	ldrb	r1, [r3, #0]
 8006ade:	4a67      	ldr	r2, [pc, #412]	; (8006c7c <addNewLine+0x238>)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	701a      	strb	r2, [r3, #0]
			h[k] = i[k];
 8006ae8:	4a66      	ldr	r2, [pc, #408]	; (8006c84 <addNewLine+0x240>)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	4413      	add	r3, r2
 8006aee:	7819      	ldrb	r1, [r3, #0]
 8006af0:	4a63      	ldr	r2, [pc, #396]	; (8006c80 <addNewLine+0x23c>)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4413      	add	r3, r2
 8006af6:	460a      	mov	r2, r1
 8006af8:	701a      	strb	r2, [r3, #0]
			i[k] = uRx_Data[k + m * 24];
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	4613      	mov	r3, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4413      	add	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	461a      	mov	r2, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4413      	add	r3, r2
 8006b0a:	4a5f      	ldr	r2, [pc, #380]	; (8006c88 <addNewLine+0x244>)
 8006b0c:	5cd1      	ldrb	r1, [r2, r3]
 8006b0e:	4a5d      	ldr	r2, [pc, #372]	; (8006c84 <addNewLine+0x240>)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	4413      	add	r3, r2
 8006b14:	460a      	mov	r2, r1
 8006b16:	701a      	strb	r2, [r3, #0]
		for(int k = 0; k < 25; k++){
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b18      	cmp	r3, #24
 8006b22:	dda2      	ble.n	8006a6a <addNewLine+0x26>
		}
		aa = ba;
 8006b24:	4b59      	ldr	r3, [pc, #356]	; (8006c8c <addNewLine+0x248>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a59      	ldr	r2, [pc, #356]	; (8006c90 <addNewLine+0x24c>)
 8006b2a:	6013      	str	r3, [r2, #0]
		ba = ca;
 8006b2c:	4b59      	ldr	r3, [pc, #356]	; (8006c94 <addNewLine+0x250>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a56      	ldr	r2, [pc, #344]	; (8006c8c <addNewLine+0x248>)
 8006b32:	6013      	str	r3, [r2, #0]
		ca = da;
 8006b34:	4b58      	ldr	r3, [pc, #352]	; (8006c98 <addNewLine+0x254>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a56      	ldr	r2, [pc, #344]	; (8006c94 <addNewLine+0x250>)
 8006b3a:	6013      	str	r3, [r2, #0]
		da = ea;
 8006b3c:	4b57      	ldr	r3, [pc, #348]	; (8006c9c <addNewLine+0x258>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a55      	ldr	r2, [pc, #340]	; (8006c98 <addNewLine+0x254>)
 8006b42:	6013      	str	r3, [r2, #0]
		ea = fa;
 8006b44:	4b56      	ldr	r3, [pc, #344]	; (8006ca0 <addNewLine+0x25c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a54      	ldr	r2, [pc, #336]	; (8006c9c <addNewLine+0x258>)
 8006b4a:	6013      	str	r3, [r2, #0]
		fa = ga;
 8006b4c:	4b55      	ldr	r3, [pc, #340]	; (8006ca4 <addNewLine+0x260>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a53      	ldr	r2, [pc, #332]	; (8006ca0 <addNewLine+0x25c>)
 8006b52:	6013      	str	r3, [r2, #0]
		ga = ha;
 8006b54:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <addNewLine+0x264>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a52      	ldr	r2, [pc, #328]	; (8006ca4 <addNewLine+0x260>)
 8006b5a:	6013      	str	r3, [r2, #0]
		ha = ia;
 8006b5c:	4b53      	ldr	r3, [pc, #332]	; (8006cac <addNewLine+0x268>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a51      	ldr	r2, [pc, #324]	; (8006ca8 <addNewLine+0x264>)
 8006b62:	6013      	str	r3, [r2, #0]
		ia = 0;
 8006b64:	4b51      	ldr	r3, [pc, #324]	; (8006cac <addNewLine+0x268>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]


		al = bl;
 8006b6a:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <addNewLine+0x26c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a51      	ldr	r2, [pc, #324]	; (8006cb4 <addNewLine+0x270>)
 8006b70:	6013      	str	r3, [r2, #0]
		bl = cl;
 8006b72:	4b51      	ldr	r3, [pc, #324]	; (8006cb8 <addNewLine+0x274>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a4e      	ldr	r2, [pc, #312]	; (8006cb0 <addNewLine+0x26c>)
 8006b78:	6013      	str	r3, [r2, #0]
		cl = dl;
 8006b7a:	4b50      	ldr	r3, [pc, #320]	; (8006cbc <addNewLine+0x278>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a4e      	ldr	r2, [pc, #312]	; (8006cb8 <addNewLine+0x274>)
 8006b80:	6013      	str	r3, [r2, #0]
		dl = el;
 8006b82:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <addNewLine+0x27c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a4d      	ldr	r2, [pc, #308]	; (8006cbc <addNewLine+0x278>)
 8006b88:	6013      	str	r3, [r2, #0]
		el = fl;
 8006b8a:	4b4e      	ldr	r3, [pc, #312]	; (8006cc4 <addNewLine+0x280>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a4c      	ldr	r2, [pc, #304]	; (8006cc0 <addNewLine+0x27c>)
 8006b90:	6013      	str	r3, [r2, #0]
		fl = gl;
 8006b92:	4b4d      	ldr	r3, [pc, #308]	; (8006cc8 <addNewLine+0x284>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a4b      	ldr	r2, [pc, #300]	; (8006cc4 <addNewLine+0x280>)
 8006b98:	6013      	str	r3, [r2, #0]
		gl = hl;
 8006b9a:	4b4c      	ldr	r3, [pc, #304]	; (8006ccc <addNewLine+0x288>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a4a      	ldr	r2, [pc, #296]	; (8006cc8 <addNewLine+0x284>)
 8006ba0:	6013      	str	r3, [r2, #0]
		hl = il;
 8006ba2:	4b4b      	ldr	r3, [pc, #300]	; (8006cd0 <addNewLine+0x28c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a49      	ldr	r2, [pc, #292]	; (8006ccc <addNewLine+0x288>)
 8006ba8:	6013      	str	r3, [r2, #0]
		il = uLength;
 8006baa:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <addNewLine+0x218>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <addNewLine+0x28c>)
 8006bb2:	601a      	str	r2, [r3, #0]
	for(int m = 0; m <= p; m++){
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	f77f af50 	ble.w	8006a64 <addNewLine+0x20>

	}

	if(usart == 1){
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d13d      	bne.n	8006c46 <addNewLine+0x202>
		int l = uLength % 24;
 8006bca:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <addNewLine+0x218>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	4b24      	ldr	r3, [pc, #144]	; (8006c60 <addNewLine+0x21c>)
 8006bd0:	fb83 1302 	smull	r1, r3, r3, r2
 8006bd4:	1099      	asrs	r1, r3, #2
 8006bd6:	17d3      	asrs	r3, r2, #31
 8006bd8:	1ac9      	subs	r1, r1, r3
 8006bda:	460b      	mov	r3, r1
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	440b      	add	r3, r1
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	60bb      	str	r3, [r7, #8]
		for(int k = 0; k < 24-l; k++){
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e007      	b.n	8006bfc <addNewLine+0x1b8>
			i[k] = '\40';
 8006bec:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <addNewLine+0x240>)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	701a      	strb	r2, [r3, #0]
		for(int k = 0; k < 24-l; k++){
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f1c3 0318 	rsb	r3, r3, #24
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	dbf1      	blt.n	8006bec <addNewLine+0x1a8>
		}
		for(int k = 0; k < l; k++){
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	e013      	b.n	8006c36 <addNewLine+0x1f2>
			i[24-l+k] = uRx_Data[k+24*p];
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4613      	mov	r3, r2
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	4413      	add	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f1c3 0118 	rsb	r1, r3, #24
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	440b      	add	r3, r1
 8006c28:	4917      	ldr	r1, [pc, #92]	; (8006c88 <addNewLine+0x244>)
 8006c2a:	5c89      	ldrb	r1, [r1, r2]
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <addNewLine+0x240>)
 8006c2e:	54d1      	strb	r1, [r2, r3]
		for(int k = 0; k < l; k++){
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	3301      	adds	r3, #1
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	dbe7      	blt.n	8006c0e <addNewLine+0x1ca>
		}
		i[24] = 0;
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <addNewLine+0x240>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	761a      	strb	r2, [r3, #24]
	}
	else if(usart == 2){
		ia = 1;
	}

}
 8006c44:	e005      	b.n	8006c52 <addNewLine+0x20e>
	else if(usart == 2){
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d102      	bne.n	8006c52 <addNewLine+0x20e>
		ia = 1;
 8006c4c:	4b17      	ldr	r3, [pc, #92]	; (8006cac <addNewLine+0x268>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	3724      	adds	r7, #36	; 0x24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr
 8006c5c:	200001e4 	.word	0x200001e4
 8006c60:	2aaaaaab 	.word	0x2aaaaaab
 8006c64:	200000bc 	.word	0x200000bc
 8006c68:	200000a0 	.word	0x200000a0
 8006c6c:	200000d8 	.word	0x200000d8
 8006c70:	200000f4 	.word	0x200000f4
 8006c74:	20000110 	.word	0x20000110
 8006c78:	2000012c 	.word	0x2000012c
 8006c7c:	20000148 	.word	0x20000148
 8006c80:	20000164 	.word	0x20000164
 8006c84:	20000180 	.word	0x20000180
 8006c88:	20000aa0 	.word	0x20000aa0
 8006c8c:	200001a0 	.word	0x200001a0
 8006c90:	2000019c 	.word	0x2000019c
 8006c94:	200001a4 	.word	0x200001a4
 8006c98:	200001a8 	.word	0x200001a8
 8006c9c:	200001ac 	.word	0x200001ac
 8006ca0:	200001b0 	.word	0x200001b0
 8006ca4:	200001b4 	.word	0x200001b4
 8006ca8:	200001b8 	.word	0x200001b8
 8006cac:	200001bc 	.word	0x200001bc
 8006cb0:	200001c4 	.word	0x200001c4
 8006cb4:	200001c0 	.word	0x200001c0
 8006cb8:	200001c8 	.word	0x200001c8
 8006cbc:	200001cc 	.word	0x200001cc
 8006cc0:	200001d0 	.word	0x200001d0
 8006cc4:	200001d4 	.word	0x200001d4
 8006cc8:	200001d8 	.word	0x200001d8
 8006ccc:	200001dc 	.word	0x200001dc
 8006cd0:	200001e0 	.word	0x200001e0

08006cd4 <showMessage>:
void showMessage(){
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af02      	add	r7, sp, #8
	if (aa == 1){
 8006cda:	4bb1      	ldr	r3, [pc, #708]	; (8006fa0 <showMessage+0x2cc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d122      	bne.n	8006d28 <showMessage+0x54>
		POINT_COLOR = RED;
 8006ce2:	4bb0      	ldr	r3, [pc, #704]	; (8006fa4 <showMessage+0x2d0>)
 8006ce4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006ce8:	801a      	strh	r2, [r3, #0]
		if(al!=0){
 8006cea:	4baf      	ldr	r3, [pc, #700]	; (8006fa8 <showMessage+0x2d4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d042      	beq.n	8006d78 <showMessage+0xa4>
			LCD_ShowString(23, 35, 185, 10, 16, (uint8_t*) a);
 8006cf2:	4bae      	ldr	r3, [pc, #696]	; (8006fac <showMessage+0x2d8>)
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	2310      	movs	r3, #16
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	230a      	movs	r3, #10
 8006cfc:	22b9      	movs	r2, #185	; 0xb9
 8006cfe:	2123      	movs	r1, #35	; 0x23
 8006d00:	2017      	movs	r0, #23
 8006d02:	f7ff fa5b 	bl	80061bc <LCD_ShowString>
			leftDialog(30,43,10,al * LENGTH,RED);
 8006d06:	4ba8      	ldr	r3, [pc, #672]	; (8006fa8 <showMessage+0x2d4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4aa9      	ldr	r2, [pc, #676]	; (8006fb0 <showMessage+0x2dc>)
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	220a      	movs	r2, #10
 8006d1e:	212b      	movs	r1, #43	; 0x2b
 8006d20:	201e      	movs	r0, #30
 8006d22:	f7ff fcc5 	bl	80066b0 <leftDialog>
 8006d26:	e027      	b.n	8006d78 <showMessage+0xa4>
		}
	}
	else{
		POINT_COLOR = BLACK;
 8006d28:	4b9e      	ldr	r3, [pc, #632]	; (8006fa4 <showMessage+0x2d0>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	801a      	strh	r2, [r3, #0]
		if(al!=0){
 8006d2e:	4b9e      	ldr	r3, [pc, #632]	; (8006fa8 <showMessage+0x2d4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d020      	beq.n	8006d78 <showMessage+0xa4>
			LCD_ShowString(23, 35, 185, 10, 16, (uint8_t*) a);
 8006d36:	4b9d      	ldr	r3, [pc, #628]	; (8006fac <showMessage+0x2d8>)
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	2310      	movs	r3, #16
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	230a      	movs	r3, #10
 8006d40:	22b9      	movs	r2, #185	; 0xb9
 8006d42:	2123      	movs	r1, #35	; 0x23
 8006d44:	2017      	movs	r0, #23
 8006d46:	f7ff fa39 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(al * LENGTH),43,10,al * LENGTH,BLACK);
 8006d4a:	4b97      	ldr	r3, [pc, #604]	; (8006fa8 <showMessage+0x2d4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a98      	ldr	r2, [pc, #608]	; (8006fb0 <showMessage+0x2dc>)
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
 8006d56:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	4b92      	ldr	r3, [pc, #584]	; (8006fa8 <showMessage+0x2d4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a93      	ldr	r2, [pc, #588]	; (8006fb0 <showMessage+0x2dc>)
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	220a      	movs	r2, #10
 8006d72:	212b      	movs	r1, #43	; 0x2b
 8006d74:	f7ff fb60 	bl	8006438 <rightDialog>
		}
	}

	if (ba == 1){
 8006d78:	4b8e      	ldr	r3, [pc, #568]	; (8006fb4 <showMessage+0x2e0>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d122      	bne.n	8006dc6 <showMessage+0xf2>
		POINT_COLOR = RED;
 8006d80:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <showMessage+0x2d0>)
 8006d82:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006d86:	801a      	strh	r2, [r3, #0]

		if (bl!=0){
 8006d88:	4b8b      	ldr	r3, [pc, #556]	; (8006fb8 <showMessage+0x2e4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d042      	beq.n	8006e16 <showMessage+0x142>
			LCD_ShowString(23, 65, 185, 10, 16, (uint8_t*) b);
 8006d90:	4b8a      	ldr	r3, [pc, #552]	; (8006fbc <showMessage+0x2e8>)
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	2310      	movs	r3, #16
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	230a      	movs	r3, #10
 8006d9a:	22b9      	movs	r2, #185	; 0xb9
 8006d9c:	2141      	movs	r1, #65	; 0x41
 8006d9e:	2017      	movs	r0, #23
 8006da0:	f7ff fa0c 	bl	80061bc <LCD_ShowString>
			leftDialog(30,73,10,bl * LENGTH,RED);
 8006da4:	4b84      	ldr	r3, [pc, #528]	; (8006fb8 <showMessage+0x2e4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a81      	ldr	r2, [pc, #516]	; (8006fb0 <showMessage+0x2dc>)
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	fb02 f303 	mul.w	r3, r2, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	220a      	movs	r2, #10
 8006dbc:	2149      	movs	r1, #73	; 0x49
 8006dbe:	201e      	movs	r0, #30
 8006dc0:	f7ff fc76 	bl	80066b0 <leftDialog>
 8006dc4:	e027      	b.n	8006e16 <showMessage+0x142>
		}

	}
	else{
		POINT_COLOR = BLACK;
 8006dc6:	4b77      	ldr	r3, [pc, #476]	; (8006fa4 <showMessage+0x2d0>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	801a      	strh	r2, [r3, #0]

		if (bl!=0){
 8006dcc:	4b7a      	ldr	r3, [pc, #488]	; (8006fb8 <showMessage+0x2e4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d020      	beq.n	8006e16 <showMessage+0x142>
			LCD_ShowString(23, 65, 185, 10, 16, (uint8_t*) b);
 8006dd4:	4b79      	ldr	r3, [pc, #484]	; (8006fbc <showMessage+0x2e8>)
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	2310      	movs	r3, #16
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	230a      	movs	r3, #10
 8006dde:	22b9      	movs	r2, #185	; 0xb9
 8006de0:	2141      	movs	r1, #65	; 0x41
 8006de2:	2017      	movs	r0, #23
 8006de4:	f7ff f9ea 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(bl * LENGTH),73,10,bl * LENGTH,BLACK);
 8006de8:	4b73      	ldr	r3, [pc, #460]	; (8006fb8 <showMessage+0x2e4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a70      	ldr	r2, [pc, #448]	; (8006fb0 <showMessage+0x2dc>)
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 8006df8:	4618      	mov	r0, r3
 8006dfa:	4b6f      	ldr	r3, [pc, #444]	; (8006fb8 <showMessage+0x2e4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6c      	ldr	r2, [pc, #432]	; (8006fb0 <showMessage+0x2dc>)
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	220a      	movs	r2, #10
 8006e10:	2149      	movs	r1, #73	; 0x49
 8006e12:	f7ff fb11 	bl	8006438 <rightDialog>
		}
	}
	if (ca == 1){
 8006e16:	4b6a      	ldr	r3, [pc, #424]	; (8006fc0 <showMessage+0x2ec>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d122      	bne.n	8006e64 <showMessage+0x190>
		POINT_COLOR = RED;
 8006e1e:	4b61      	ldr	r3, [pc, #388]	; (8006fa4 <showMessage+0x2d0>)
 8006e20:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006e24:	801a      	strh	r2, [r3, #0]

		if(cl!=0){
 8006e26:	4b67      	ldr	r3, [pc, #412]	; (8006fc4 <showMessage+0x2f0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d042      	beq.n	8006eb4 <showMessage+0x1e0>
			LCD_ShowString(23, 95, 185, 10, 16, (uint8_t*) c);
 8006e2e:	4b66      	ldr	r3, [pc, #408]	; (8006fc8 <showMessage+0x2f4>)
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	2310      	movs	r3, #16
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	230a      	movs	r3, #10
 8006e38:	22b9      	movs	r2, #185	; 0xb9
 8006e3a:	215f      	movs	r1, #95	; 0x5f
 8006e3c:	2017      	movs	r0, #23
 8006e3e:	f7ff f9bd 	bl	80061bc <LCD_ShowString>
			leftDialog(30,103,10,cl * LENGTH,RED);
 8006e42:	4b60      	ldr	r3, [pc, #384]	; (8006fc4 <showMessage+0x2f0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a5a      	ldr	r2, [pc, #360]	; (8006fb0 <showMessage+0x2dc>)
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	220a      	movs	r2, #10
 8006e5a:	2167      	movs	r1, #103	; 0x67
 8006e5c:	201e      	movs	r0, #30
 8006e5e:	f7ff fc27 	bl	80066b0 <leftDialog>
 8006e62:	e027      	b.n	8006eb4 <showMessage+0x1e0>
		}
	}
	else{
		POINT_COLOR = BLACK;
 8006e64:	4b4f      	ldr	r3, [pc, #316]	; (8006fa4 <showMessage+0x2d0>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	801a      	strh	r2, [r3, #0]
		if(cl!=0){
 8006e6a:	4b56      	ldr	r3, [pc, #344]	; (8006fc4 <showMessage+0x2f0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d020      	beq.n	8006eb4 <showMessage+0x1e0>
			LCD_ShowString(23, 95, 185, 10, 16, (uint8_t*) c);
 8006e72:	4b55      	ldr	r3, [pc, #340]	; (8006fc8 <showMessage+0x2f4>)
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	2310      	movs	r3, #16
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	22b9      	movs	r2, #185	; 0xb9
 8006e7e:	215f      	movs	r1, #95	; 0x5f
 8006e80:	2017      	movs	r0, #23
 8006e82:	f7ff f99b 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(cl * LENGTH),103,10,cl * LENGTH,BLACK);
 8006e86:	4b4f      	ldr	r3, [pc, #316]	; (8006fc4 <showMessage+0x2f0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a49      	ldr	r2, [pc, #292]	; (8006fb0 <showMessage+0x2dc>)
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 8006e96:	4618      	mov	r0, r3
 8006e98:	4b4a      	ldr	r3, [pc, #296]	; (8006fc4 <showMessage+0x2f0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a44      	ldr	r2, [pc, #272]	; (8006fb0 <showMessage+0x2dc>)
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	220a      	movs	r2, #10
 8006eae:	2167      	movs	r1, #103	; 0x67
 8006eb0:	f7ff fac2 	bl	8006438 <rightDialog>
		}
	}

	if (da == 1){
 8006eb4:	4b45      	ldr	r3, [pc, #276]	; (8006fcc <showMessage+0x2f8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d122      	bne.n	8006f02 <showMessage+0x22e>
		POINT_COLOR = RED;
 8006ebc:	4b39      	ldr	r3, [pc, #228]	; (8006fa4 <showMessage+0x2d0>)
 8006ebe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006ec2:	801a      	strh	r2, [r3, #0]
		if(dl!=0){
 8006ec4:	4b42      	ldr	r3, [pc, #264]	; (8006fd0 <showMessage+0x2fc>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d042      	beq.n	8006f52 <showMessage+0x27e>
			LCD_ShowString(23, 125, 185, 10, 16, (uint8_t*) d);
 8006ecc:	4b41      	ldr	r3, [pc, #260]	; (8006fd4 <showMessage+0x300>)
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	230a      	movs	r3, #10
 8006ed6:	22b9      	movs	r2, #185	; 0xb9
 8006ed8:	217d      	movs	r1, #125	; 0x7d
 8006eda:	2017      	movs	r0, #23
 8006edc:	f7ff f96e 	bl	80061bc <LCD_ShowString>
			leftDialog(30,133,10,dl * LENGTH,RED);
 8006ee0:	4b3b      	ldr	r3, [pc, #236]	; (8006fd0 <showMessage+0x2fc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a32      	ldr	r2, [pc, #200]	; (8006fb0 <showMessage+0x2dc>)
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	2185      	movs	r1, #133	; 0x85
 8006efa:	201e      	movs	r0, #30
 8006efc:	f7ff fbd8 	bl	80066b0 <leftDialog>
 8006f00:	e027      	b.n	8006f52 <showMessage+0x27e>
		}
	}
	else{
		POINT_COLOR = BLACK;
 8006f02:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <showMessage+0x2d0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	801a      	strh	r2, [r3, #0]
		if(dl!=0){
 8006f08:	4b31      	ldr	r3, [pc, #196]	; (8006fd0 <showMessage+0x2fc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <showMessage+0x27e>
			LCD_ShowString(23, 125, 185, 10, 16, (uint8_t*) d);
 8006f10:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <showMessage+0x300>)
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	2310      	movs	r3, #16
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	230a      	movs	r3, #10
 8006f1a:	22b9      	movs	r2, #185	; 0xb9
 8006f1c:	217d      	movs	r1, #125	; 0x7d
 8006f1e:	2017      	movs	r0, #23
 8006f20:	f7ff f94c 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(dl * LENGTH),133,10,dl * LENGTH,BLACK);
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <showMessage+0x2fc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a21      	ldr	r2, [pc, #132]	; (8006fb0 <showMessage+0x2dc>)
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	fb02 f303 	mul.w	r3, r2, r3
 8006f30:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 8006f34:	4618      	mov	r0, r3
 8006f36:	4b26      	ldr	r3, [pc, #152]	; (8006fd0 <showMessage+0x2fc>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1d      	ldr	r2, [pc, #116]	; (8006fb0 <showMessage+0x2dc>)
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	220a      	movs	r2, #10
 8006f4c:	2185      	movs	r1, #133	; 0x85
 8006f4e:	f7ff fa73 	bl	8006438 <rightDialog>
		}
	}
	if (ea == 1){
 8006f52:	4b21      	ldr	r3, [pc, #132]	; (8006fd8 <showMessage+0x304>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d144      	bne.n	8006fe4 <showMessage+0x310>
		POINT_COLOR = RED;
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <showMessage+0x2d0>)
 8006f5c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006f60:	801a      	strh	r2, [r3, #0]
		if(el!=0){
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <showMessage+0x308>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d064      	beq.n	8007034 <showMessage+0x360>
			LCD_ShowString(23, 155, 185, 10, 16, (uint8_t*) e);
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <showMessage+0x30c>)
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	2310      	movs	r3, #16
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	230a      	movs	r3, #10
 8006f74:	22b9      	movs	r2, #185	; 0xb9
 8006f76:	219b      	movs	r1, #155	; 0x9b
 8006f78:	2017      	movs	r0, #23
 8006f7a:	f7ff f91f 	bl	80061bc <LCD_ShowString>
			leftDialog(30,163,10,el * LENGTH,RED);
 8006f7e:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <showMessage+0x308>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <showMessage+0x2dc>)
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4613      	mov	r3, r2
 8006f94:	220a      	movs	r2, #10
 8006f96:	21a3      	movs	r1, #163	; 0xa3
 8006f98:	201e      	movs	r0, #30
 8006f9a:	f7ff fb89 	bl	80066b0 <leftDialog>
 8006f9e:	e049      	b.n	8007034 <showMessage+0x360>
 8006fa0:	2000019c 	.word	0x2000019c
 8006fa4:	2000009c 	.word	0x2000009c
 8006fa8:	200001c0 	.word	0x200001c0
 8006fac:	200000a0 	.word	0x200000a0
 8006fb0:	20000004 	.word	0x20000004
 8006fb4:	200001a0 	.word	0x200001a0
 8006fb8:	200001c4 	.word	0x200001c4
 8006fbc:	200000bc 	.word	0x200000bc
 8006fc0:	200001a4 	.word	0x200001a4
 8006fc4:	200001c8 	.word	0x200001c8
 8006fc8:	200000d8 	.word	0x200000d8
 8006fcc:	200001a8 	.word	0x200001a8
 8006fd0:	200001cc 	.word	0x200001cc
 8006fd4:	200000f4 	.word	0x200000f4
 8006fd8:	200001ac 	.word	0x200001ac
 8006fdc:	200001d0 	.word	0x200001d0
 8006fe0:	20000110 	.word	0x20000110
		}
	}
	else{
		POINT_COLOR = BLACK;
 8006fe4:	4b9e      	ldr	r3, [pc, #632]	; (8007260 <showMessage+0x58c>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	801a      	strh	r2, [r3, #0]

		if(el!=0){
 8006fea:	4b9e      	ldr	r3, [pc, #632]	; (8007264 <showMessage+0x590>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d020      	beq.n	8007034 <showMessage+0x360>
			LCD_ShowString(23, 155, 185, 10, 16, (uint8_t*) e);
 8006ff2:	4b9d      	ldr	r3, [pc, #628]	; (8007268 <showMessage+0x594>)
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	230a      	movs	r3, #10
 8006ffc:	22b9      	movs	r2, #185	; 0xb9
 8006ffe:	219b      	movs	r1, #155	; 0x9b
 8007000:	2017      	movs	r0, #23
 8007002:	f7ff f8db 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(el * LENGTH),163,10,el * LENGTH,BLACK);
 8007006:	4b97      	ldr	r3, [pc, #604]	; (8007264 <showMessage+0x590>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a98      	ldr	r2, [pc, #608]	; (800726c <showMessage+0x598>)
 800700c:	6812      	ldr	r2, [r2, #0]
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 8007016:	4618      	mov	r0, r3
 8007018:	4b92      	ldr	r3, [pc, #584]	; (8007264 <showMessage+0x590>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a93      	ldr	r2, [pc, #588]	; (800726c <showMessage+0x598>)
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	461a      	mov	r2, r3
 8007026:	2300      	movs	r3, #0
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	220a      	movs	r2, #10
 800702e:	21a3      	movs	r1, #163	; 0xa3
 8007030:	f7ff fa02 	bl	8006438 <rightDialog>
		}
	}
	if (fa == 1){
 8007034:	4b8e      	ldr	r3, [pc, #568]	; (8007270 <showMessage+0x59c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d122      	bne.n	8007082 <showMessage+0x3ae>
		POINT_COLOR = RED;
 800703c:	4b88      	ldr	r3, [pc, #544]	; (8007260 <showMessage+0x58c>)
 800703e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007042:	801a      	strh	r2, [r3, #0]
		if(fl!=0){
 8007044:	4b8b      	ldr	r3, [pc, #556]	; (8007274 <showMessage+0x5a0>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d042      	beq.n	80070d2 <showMessage+0x3fe>
			LCD_ShowString(23, 185, 185, 10, 16, (uint8_t*) f);
 800704c:	4b8a      	ldr	r3, [pc, #552]	; (8007278 <showMessage+0x5a4>)
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	2310      	movs	r3, #16
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	230a      	movs	r3, #10
 8007056:	22b9      	movs	r2, #185	; 0xb9
 8007058:	21b9      	movs	r1, #185	; 0xb9
 800705a:	2017      	movs	r0, #23
 800705c:	f7ff f8ae 	bl	80061bc <LCD_ShowString>
			leftDialog(30,193,10,fl * LENGTH,RED);
 8007060:	4b84      	ldr	r3, [pc, #528]	; (8007274 <showMessage+0x5a0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a81      	ldr	r2, [pc, #516]	; (800726c <showMessage+0x598>)
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	461a      	mov	r2, r3
 800706e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	220a      	movs	r2, #10
 8007078:	21c1      	movs	r1, #193	; 0xc1
 800707a:	201e      	movs	r0, #30
 800707c:	f7ff fb18 	bl	80066b0 <leftDialog>
 8007080:	e027      	b.n	80070d2 <showMessage+0x3fe>
		}
	}
	else{
		POINT_COLOR = BLACK;
 8007082:	4b77      	ldr	r3, [pc, #476]	; (8007260 <showMessage+0x58c>)
 8007084:	2200      	movs	r2, #0
 8007086:	801a      	strh	r2, [r3, #0]
		if(fl!=0){
 8007088:	4b7a      	ldr	r3, [pc, #488]	; (8007274 <showMessage+0x5a0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d020      	beq.n	80070d2 <showMessage+0x3fe>
			LCD_ShowString(23, 185, 185, 10, 16, (uint8_t*) f);
 8007090:	4b79      	ldr	r3, [pc, #484]	; (8007278 <showMessage+0x5a4>)
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	2310      	movs	r3, #16
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	230a      	movs	r3, #10
 800709a:	22b9      	movs	r2, #185	; 0xb9
 800709c:	21b9      	movs	r1, #185	; 0xb9
 800709e:	2017      	movs	r0, #23
 80070a0:	f7ff f88c 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(fl * LENGTH),193,10,fl * LENGTH,BLACK);
 80070a4:	4b73      	ldr	r3, [pc, #460]	; (8007274 <showMessage+0x5a0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a70      	ldr	r2, [pc, #448]	; (800726c <showMessage+0x598>)
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	fb02 f303 	mul.w	r3, r2, r3
 80070b0:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 80070b4:	4618      	mov	r0, r3
 80070b6:	4b6f      	ldr	r3, [pc, #444]	; (8007274 <showMessage+0x5a0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6c      	ldr	r2, [pc, #432]	; (800726c <showMessage+0x598>)
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	220a      	movs	r2, #10
 80070cc:	21c1      	movs	r1, #193	; 0xc1
 80070ce:	f7ff f9b3 	bl	8006438 <rightDialog>
		}

	}
	if (ga == 1){
 80070d2:	4b6a      	ldr	r3, [pc, #424]	; (800727c <showMessage+0x5a8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d122      	bne.n	8007120 <showMessage+0x44c>
		POINT_COLOR = RED;
 80070da:	4b61      	ldr	r3, [pc, #388]	; (8007260 <showMessage+0x58c>)
 80070dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80070e0:	801a      	strh	r2, [r3, #0]
		if(gl!=0){
 80070e2:	4b67      	ldr	r3, [pc, #412]	; (8007280 <showMessage+0x5ac>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d042      	beq.n	8007170 <showMessage+0x49c>
			LCD_ShowString(23, 215, 185, 10, 16, (uint8_t*) g);
 80070ea:	4b66      	ldr	r3, [pc, #408]	; (8007284 <showMessage+0x5b0>)
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	2310      	movs	r3, #16
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	230a      	movs	r3, #10
 80070f4:	22b9      	movs	r2, #185	; 0xb9
 80070f6:	21d7      	movs	r1, #215	; 0xd7
 80070f8:	2017      	movs	r0, #23
 80070fa:	f7ff f85f 	bl	80061bc <LCD_ShowString>
			leftDialog(30,223,10,gl * LENGTH,RED);
 80070fe:	4b60      	ldr	r3, [pc, #384]	; (8007280 <showMessage+0x5ac>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a5a      	ldr	r2, [pc, #360]	; (800726c <showMessage+0x598>)
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	461a      	mov	r2, r3
 800710c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4613      	mov	r3, r2
 8007114:	220a      	movs	r2, #10
 8007116:	21df      	movs	r1, #223	; 0xdf
 8007118:	201e      	movs	r0, #30
 800711a:	f7ff fac9 	bl	80066b0 <leftDialog>
 800711e:	e027      	b.n	8007170 <showMessage+0x49c>
		}
	}
	else{
		POINT_COLOR = BLACK;
 8007120:	4b4f      	ldr	r3, [pc, #316]	; (8007260 <showMessage+0x58c>)
 8007122:	2200      	movs	r2, #0
 8007124:	801a      	strh	r2, [r3, #0]

		if(gl!=0){
 8007126:	4b56      	ldr	r3, [pc, #344]	; (8007280 <showMessage+0x5ac>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d020      	beq.n	8007170 <showMessage+0x49c>
			LCD_ShowString(23, 215, 185, 10, 16, (uint8_t*) g);
 800712e:	4b55      	ldr	r3, [pc, #340]	; (8007284 <showMessage+0x5b0>)
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	2310      	movs	r3, #16
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	230a      	movs	r3, #10
 8007138:	22b9      	movs	r2, #185	; 0xb9
 800713a:	21d7      	movs	r1, #215	; 0xd7
 800713c:	2017      	movs	r0, #23
 800713e:	f7ff f83d 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(gl * LENGTH),223,10,gl * LENGTH,BLACK);
 8007142:	4b4f      	ldr	r3, [pc, #316]	; (8007280 <showMessage+0x5ac>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a49      	ldr	r2, [pc, #292]	; (800726c <showMessage+0x598>)
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 8007152:	4618      	mov	r0, r3
 8007154:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <showMessage+0x5ac>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a44      	ldr	r2, [pc, #272]	; (800726c <showMessage+0x598>)
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	fb02 f303 	mul.w	r3, r2, r3
 8007160:	461a      	mov	r2, r3
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	220a      	movs	r2, #10
 800716a:	21df      	movs	r1, #223	; 0xdf
 800716c:	f7ff f964 	bl	8006438 <rightDialog>
		}

	}
	if (ha == 1){
 8007170:	4b45      	ldr	r3, [pc, #276]	; (8007288 <showMessage+0x5b4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d122      	bne.n	80071be <showMessage+0x4ea>
		POINT_COLOR = RED;
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <showMessage+0x58c>)
 800717a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800717e:	801a      	strh	r2, [r3, #0]
		if(hl!=0){
 8007180:	4b42      	ldr	r3, [pc, #264]	; (800728c <showMessage+0x5b8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d042      	beq.n	800720e <showMessage+0x53a>
			LCD_ShowString(23, 245, 185, 10, 16, (uint8_t*) h);
 8007188:	4b41      	ldr	r3, [pc, #260]	; (8007290 <showMessage+0x5bc>)
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	2310      	movs	r3, #16
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	230a      	movs	r3, #10
 8007192:	22b9      	movs	r2, #185	; 0xb9
 8007194:	21f5      	movs	r1, #245	; 0xf5
 8007196:	2017      	movs	r0, #23
 8007198:	f7ff f810 	bl	80061bc <LCD_ShowString>
			leftDialog(30,253,10,hl * LENGTH,RED);
 800719c:	4b3b      	ldr	r3, [pc, #236]	; (800728c <showMessage+0x5b8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a32      	ldr	r2, [pc, #200]	; (800726c <showMessage+0x598>)
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4613      	mov	r3, r2
 80071b2:	220a      	movs	r2, #10
 80071b4:	21fd      	movs	r1, #253	; 0xfd
 80071b6:	201e      	movs	r0, #30
 80071b8:	f7ff fa7a 	bl	80066b0 <leftDialog>
 80071bc:	e027      	b.n	800720e <showMessage+0x53a>
		}
	}
	else{
		POINT_COLOR = BLACK;
 80071be:	4b28      	ldr	r3, [pc, #160]	; (8007260 <showMessage+0x58c>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	801a      	strh	r2, [r3, #0]
		if(hl!=0){
 80071c4:	4b31      	ldr	r3, [pc, #196]	; (800728c <showMessage+0x5b8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d020      	beq.n	800720e <showMessage+0x53a>
			LCD_ShowString(23, 245, 185, 10, 16, (uint8_t*) h);
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <showMessage+0x5bc>)
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	2310      	movs	r3, #16
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	230a      	movs	r3, #10
 80071d6:	22b9      	movs	r2, #185	; 0xb9
 80071d8:	21f5      	movs	r1, #245	; 0xf5
 80071da:	2017      	movs	r0, #23
 80071dc:	f7fe ffee 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(hl * LENGTH),253,10,hl * LENGTH,BLACK);
 80071e0:	4b2a      	ldr	r3, [pc, #168]	; (800728c <showMessage+0x5b8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <showMessage+0x598>)
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	fb02 f303 	mul.w	r3, r2, r3
 80071ec:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 80071f0:	4618      	mov	r0, r3
 80071f2:	4b26      	ldr	r3, [pc, #152]	; (800728c <showMessage+0x5b8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1d      	ldr	r2, [pc, #116]	; (800726c <showMessage+0x598>)
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	2300      	movs	r3, #0
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	220a      	movs	r2, #10
 8007208:	21fd      	movs	r1, #253	; 0xfd
 800720a:	f7ff f915 	bl	8006438 <rightDialog>
		}

	}
	if (ia == 1){
 800720e:	4b21      	ldr	r3, [pc, #132]	; (8007294 <showMessage+0x5c0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d144      	bne.n	80072a0 <showMessage+0x5cc>
		POINT_COLOR = RED;
 8007216:	4b12      	ldr	r3, [pc, #72]	; (8007260 <showMessage+0x58c>)
 8007218:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800721c:	801a      	strh	r2, [r3, #0]
		if(il!=0){
 800721e:	4b1e      	ldr	r3, [pc, #120]	; (8007298 <showMessage+0x5c4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d066      	beq.n	80072f4 <showMessage+0x620>
			LCD_ShowString(23, 275, 185, 10, 16, (uint8_t*) i);
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <showMessage+0x5c8>)
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	2310      	movs	r3, #16
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	230a      	movs	r3, #10
 8007230:	22b9      	movs	r2, #185	; 0xb9
 8007232:	f240 1113 	movw	r1, #275	; 0x113
 8007236:	2017      	movs	r0, #23
 8007238:	f7fe ffc0 	bl	80061bc <LCD_ShowString>
			leftDialog(30,283,10,il * LENGTH,RED);
 800723c:	4b16      	ldr	r3, [pc, #88]	; (8007298 <showMessage+0x5c4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0a      	ldr	r2, [pc, #40]	; (800726c <showMessage+0x598>)
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	fb02 f303 	mul.w	r3, r2, r3
 8007248:	461a      	mov	r2, r3
 800724a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	220a      	movs	r2, #10
 8007254:	f240 111b 	movw	r1, #283	; 0x11b
 8007258:	201e      	movs	r0, #30
 800725a:	f7ff fa29 	bl	80066b0 <leftDialog>
 800725e:	e049      	b.n	80072f4 <showMessage+0x620>
 8007260:	2000009c 	.word	0x2000009c
 8007264:	200001d0 	.word	0x200001d0
 8007268:	20000110 	.word	0x20000110
 800726c:	20000004 	.word	0x20000004
 8007270:	200001b0 	.word	0x200001b0
 8007274:	200001d4 	.word	0x200001d4
 8007278:	2000012c 	.word	0x2000012c
 800727c:	200001b4 	.word	0x200001b4
 8007280:	200001d8 	.word	0x200001d8
 8007284:	20000148 	.word	0x20000148
 8007288:	200001b8 	.word	0x200001b8
 800728c:	200001dc 	.word	0x200001dc
 8007290:	20000164 	.word	0x20000164
 8007294:	200001bc 	.word	0x200001bc
 8007298:	200001e0 	.word	0x200001e0
 800729c:	20000180 	.word	0x20000180
		}
	}
	else{
		POINT_COLOR = BLACK;
 80072a0:	4b17      	ldr	r3, [pc, #92]	; (8007300 <showMessage+0x62c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	801a      	strh	r2, [r3, #0]

		if(il!=0){
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <showMessage+0x630>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d022      	beq.n	80072f4 <showMessage+0x620>
			LCD_ShowString(23, 275, 185, 10, 16, (uint8_t*) i);
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <showMessage+0x634>)
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	2310      	movs	r3, #16
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	230a      	movs	r3, #10
 80072b8:	22b9      	movs	r2, #185	; 0xb9
 80072ba:	f240 1113 	movw	r1, #275	; 0x113
 80072be:	2017      	movs	r0, #23
 80072c0:	f7fe ff7c 	bl	80061bc <LCD_ShowString>
			rightDialog(205-(il * LENGTH),283,10,il * LENGTH,BLACK);
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <showMessage+0x630>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a10      	ldr	r2, [pc, #64]	; (800730c <showMessage+0x638>)
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	f1c3 03cd 	rsb	r3, r3, #205	; 0xcd
 80072d4:	4618      	mov	r0, r3
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <showMessage+0x630>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a0c      	ldr	r2, [pc, #48]	; (800730c <showMessage+0x638>)
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	220a      	movs	r2, #10
 80072ec:	f240 111b 	movw	r1, #283	; 0x11b
 80072f0:	f7ff f8a2 	bl	8006438 <rightDialog>
		}

	}
	POINT_COLOR = BLACK;
 80072f4:	4b02      	ldr	r3, [pc, #8]	; (8007300 <showMessage+0x62c>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	801a      	strh	r2, [r3, #0]
}
 80072fa:	bf00      	nop
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	2000009c 	.word	0x2000009c
 8007304:	200001e0 	.word	0x200001e0
 8007308:	20000180 	.word	0x20000180
 800730c:	20000004 	.word	0x20000004

08007310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007314:	f001 f898 	bl	8008448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007318:	f000 f836 	bl	8007388 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    LCD_Init();
 800731c:	f7fa fdc4 	bl	8001ea8 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007320:	f000 f940 	bl	80075a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007324:	f000 f918 	bl	8007558 <MX_DMA_Init>
  MX_TIM3_Init();
 8007328:	f000 f874 	bl	8007414 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800732c:	f000 f8c0 	bl	80074b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007330:	f000 f8e8 	bl	8007504 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <main+0x64>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <main+0x64>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0210 	orr.w	r2, r2, #16
 8007342:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(&huart1, (uint8_t *) uart1_rx_buffer, 2048);
 8007344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007348:	490b      	ldr	r1, [pc, #44]	; (8007378 <main+0x68>)
 800734a:	480a      	ldr	r0, [pc, #40]	; (8007374 <main+0x64>)
 800734c:	f003 f97e 	bl	800a64c <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <main+0x6c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	4b09      	ldr	r3, [pc, #36]	; (800737c <main+0x6c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0210 	orr.w	r2, r2, #16
 800735e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(&huart2, (uint8_t *) uart2_rx_buffer, 2048);
 8007360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007364:	4906      	ldr	r1, [pc, #24]	; (8007380 <main+0x70>)
 8007366:	4805      	ldr	r0, [pc, #20]	; (800737c <main+0x6c>)
 8007368:	f003 f970 	bl	800a64c <HAL_UART_Receive_DMA>
    HAL_TIM_Base_Start_IT(&htim3);
 800736c:	4805      	ldr	r0, [pc, #20]	; (8007384 <main+0x74>)
 800736e:	f002 fcaf 	bl	8009cd0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8007372:	e7fe      	b.n	8007372 <main+0x62>
 8007374:	200012e4 	.word	0x200012e4
 8007378:	200002a0 	.word	0x200002a0
 800737c:	20001b24 	.word	0x20001b24
 8007380:	20001324 	.word	0x20001324
 8007384:	20000258 	.word	0x20000258

08007388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b090      	sub	sp, #64	; 0x40
 800738c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	2228      	movs	r2, #40	; 0x28
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f003 fe0a 	bl	800afb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	605a      	str	r2, [r3, #4]
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80073b4:	2300      	movs	r3, #0
 80073b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073b8:	2301      	movs	r3, #1
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073bc:	2302      	movs	r3, #2
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80073c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073cc:	f107 0318 	add.w	r3, r7, #24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f002 f813 	bl	80093fc <HAL_RCC_OscConfig>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80073dc:	f000 f970 	bl	80076c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073e0:	230f      	movs	r3, #15
 80073e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073e4:	2302      	movs	r3, #2
 80073e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80073f6:	1d3b      	adds	r3, r7, #4
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 fa7e 	bl	80098fc <HAL_RCC_ClockConfig>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007406:	f000 f95b 	bl	80076c0 <Error_Handler>
  }
}
 800740a:	bf00      	nop
 800740c:	3740      	adds	r7, #64	; 0x40
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800741a:	f107 0308 	add.w	r3, r7, #8
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	605a      	str	r2, [r3, #4]
 8007424:	609a      	str	r2, [r3, #8]
 8007426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007428:	463b      	mov	r3, r7
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007430:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007432:	4a1e      	ldr	r2, [pc, #120]	; (80074ac <MX_TIM3_Init+0x98>)
 8007434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8007436:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007438:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800743c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007440:	2200      	movs	r2, #0
 8007442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8007444:	4b18      	ldr	r3, [pc, #96]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007446:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800744a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800744c:	4b16      	ldr	r3, [pc, #88]	; (80074a8 <MX_TIM3_Init+0x94>)
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007454:	2280      	movs	r2, #128	; 0x80
 8007456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007458:	4813      	ldr	r0, [pc, #76]	; (80074a8 <MX_TIM3_Init+0x94>)
 800745a:	f002 fbe9 	bl	8009c30 <HAL_TIM_Base_Init>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007464:	f000 f92c 	bl	80076c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800746c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800746e:	f107 0308 	add.w	r3, r7, #8
 8007472:	4619      	mov	r1, r3
 8007474:	480c      	ldr	r0, [pc, #48]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007476:	f002 fd93 	bl	8009fa0 <HAL_TIM_ConfigClockSource>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007480:	f000 f91e 	bl	80076c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007484:	2300      	movs	r3, #0
 8007486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007488:	2300      	movs	r3, #0
 800748a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800748c:	463b      	mov	r3, r7
 800748e:	4619      	mov	r1, r3
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <MX_TIM3_Init+0x94>)
 8007492:	f002 ff7d 	bl	800a390 <HAL_TIMEx_MasterConfigSynchronization>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800749c:	f000 f910 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20000258 	.word	0x20000258
 80074ac:	40000400 	.word	0x40000400

080074b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80074b4:	4b11      	ldr	r3, [pc, #68]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074b6:	4a12      	ldr	r2, [pc, #72]	; (8007500 <MX_USART1_UART_Init+0x50>)
 80074b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80074c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074d6:	220c      	movs	r2, #12
 80074d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074da:	4b08      	ldr	r3, [pc, #32]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074dc:	2200      	movs	r2, #0
 80074de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074e6:	4805      	ldr	r0, [pc, #20]	; (80074fc <MX_USART1_UART_Init+0x4c>)
 80074e8:	f002 ffd0 	bl	800a48c <HAL_UART_Init>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80074f2:	f000 f8e5 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80074f6:	bf00      	nop
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200012e4 	.word	0x200012e4
 8007500:	40013800 	.word	0x40013800

08007504 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 800750a:	4a12      	ldr	r2, [pc, #72]	; (8007554 <MX_USART2_UART_Init+0x50>)
 800750c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800750e:	4b10      	ldr	r3, [pc, #64]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 8007510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007514:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007516:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 8007518:	2200      	movs	r2, #0
 800751a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 800751e:	2200      	movs	r2, #0
 8007520:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 8007524:	2200      	movs	r2, #0
 8007526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 800752a:	220c      	movs	r2, #12
 800752c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800752e:	4b08      	ldr	r3, [pc, #32]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 8007530:	2200      	movs	r2, #0
 8007532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 8007536:	2200      	movs	r2, #0
 8007538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800753a:	4805      	ldr	r0, [pc, #20]	; (8007550 <MX_USART2_UART_Init+0x4c>)
 800753c:	f002 ffa6 	bl	800a48c <HAL_UART_Init>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007546:	f000 f8bb 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20001b24 	.word	0x20001b24
 8007554:	40004400 	.word	0x40004400

08007558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <MX_DMA_Init+0x48>)
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4a0f      	ldr	r2, [pc, #60]	; (80075a0 <MX_DMA_Init+0x48>)
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	6153      	str	r3, [r2, #20]
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <MX_DMA_Init+0x48>)
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8007576:	2200      	movs	r2, #0
 8007578:	2100      	movs	r1, #0
 800757a:	200f      	movs	r0, #15
 800757c:	f001 f8c1 	bl	8008702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007580:	200f      	movs	r0, #15
 8007582:	f001 f8da 	bl	800873a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8007586:	2200      	movs	r2, #0
 8007588:	2100      	movs	r1, #0
 800758a:	2010      	movs	r0, #16
 800758c:	f001 f8b9 	bl	8008702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8007590:	2010      	movs	r0, #16
 8007592:	f001 f8d2 	bl	800873a <HAL_NVIC_EnableIRQ>

}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40021000 	.word	0x40021000

080075a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075aa:	f107 0310 	add.w	r3, r7, #16
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	605a      	str	r2, [r3, #4]
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80075b8:	4b3c      	ldr	r3, [pc, #240]	; (80076ac <MX_GPIO_Init+0x108>)
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	4a3b      	ldr	r2, [pc, #236]	; (80076ac <MX_GPIO_Init+0x108>)
 80075be:	f043 0320 	orr.w	r3, r3, #32
 80075c2:	6193      	str	r3, [r2, #24]
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <MX_GPIO_Init+0x108>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075d0:	4b36      	ldr	r3, [pc, #216]	; (80076ac <MX_GPIO_Init+0x108>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	4a35      	ldr	r2, [pc, #212]	; (80076ac <MX_GPIO_Init+0x108>)
 80075d6:	f043 0304 	orr.w	r3, r3, #4
 80075da:	6193      	str	r3, [r2, #24]
 80075dc:	4b33      	ldr	r3, [pc, #204]	; (80076ac <MX_GPIO_Init+0x108>)
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075e8:	4b30      	ldr	r3, [pc, #192]	; (80076ac <MX_GPIO_Init+0x108>)
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	4a2f      	ldr	r2, [pc, #188]	; (80076ac <MX_GPIO_Init+0x108>)
 80075ee:	f043 0310 	orr.w	r3, r3, #16
 80075f2:	6193      	str	r3, [r2, #24]
 80075f4:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <MX_GPIO_Init+0x108>)
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007600:	2200      	movs	r2, #0
 8007602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007606:	482a      	ldr	r0, [pc, #168]	; (80076b0 <MX_GPIO_Init+0x10c>)
 8007608:	f001 fec8 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800760c:	2200      	movs	r2, #0
 800760e:	2104      	movs	r1, #4
 8007610:	4828      	ldr	r0, [pc, #160]	; (80076b4 <MX_GPIO_Init+0x110>)
 8007612:	f001 fec3 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8007616:	2320      	movs	r3, #32
 8007618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800761a:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <MX_GPIO_Init+0x114>)
 800761c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800761e:	2301      	movs	r3, #1
 8007620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8007622:	f107 0310 	add.w	r3, r7, #16
 8007626:	4619      	mov	r1, r3
 8007628:	4824      	ldr	r0, [pc, #144]	; (80076bc <MX_GPIO_Init+0x118>)
 800762a:	f001 fd23 	bl	8009074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800762e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007634:	2301      	movs	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763c:	2302      	movs	r3, #2
 800763e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8007640:	f107 0310 	add.w	r3, r7, #16
 8007644:	4619      	mov	r1, r3
 8007646:	481a      	ldr	r0, [pc, #104]	; (80076b0 <MX_GPIO_Init+0x10c>)
 8007648:	f001 fd14 	bl	8009074 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800764c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007652:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <MX_GPIO_Init+0x114>)
 8007654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007656:	2301      	movs	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800765a:	f107 0310 	add.w	r3, r7, #16
 800765e:	4619      	mov	r1, r3
 8007660:	4813      	ldr	r0, [pc, #76]	; (80076b0 <MX_GPIO_Init+0x10c>)
 8007662:	f001 fd07 	bl	8009074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8007666:	2304      	movs	r3, #4
 8007668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800766a:	2301      	movs	r3, #1
 800766c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766e:	2300      	movs	r3, #0
 8007670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007672:	2302      	movs	r3, #2
 8007674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8007676:	f107 0310 	add.w	r3, r7, #16
 800767a:	4619      	mov	r1, r3
 800767c:	480d      	ldr	r0, [pc, #52]	; (80076b4 <MX_GPIO_Init+0x110>)
 800767e:	f001 fcf9 	bl	8009074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8007682:	2200      	movs	r2, #0
 8007684:	2102      	movs	r1, #2
 8007686:	2017      	movs	r0, #23
 8007688:	f001 f83b 	bl	8008702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800768c:	2017      	movs	r0, #23
 800768e:	f001 f854 	bl	800873a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8007692:	2200      	movs	r2, #0
 8007694:	2102      	movs	r1, #2
 8007696:	2028      	movs	r0, #40	; 0x28
 8007698:	f001 f833 	bl	8008702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800769c:	2028      	movs	r0, #40	; 0x28
 800769e:	f001 f84c 	bl	800873a <HAL_NVIC_EnableIRQ>

}
 80076a2:	bf00      	nop
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40010800 	.word	0x40010800
 80076b4:	40011400 	.word	0x40011400
 80076b8:	10110000 	.word	0x10110000
 80076bc:	40011000 	.word	0x40011000

080076c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076c4:	bf00      	nop
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bc80      	pop	{r7}
 80076ca:	4770      	bx	lr

080076cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <HAL_MspInit+0x5c>)
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	4a14      	ldr	r2, [pc, #80]	; (8007728 <HAL_MspInit+0x5c>)
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	6193      	str	r3, [r2, #24]
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <HAL_MspInit+0x5c>)
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	60bb      	str	r3, [r7, #8]
 80076e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <HAL_MspInit+0x5c>)
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	4a0e      	ldr	r2, [pc, #56]	; (8007728 <HAL_MspInit+0x5c>)
 80076f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f4:	61d3      	str	r3, [r2, #28]
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <HAL_MspInit+0x5c>)
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <HAL_MspInit+0x60>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <HAL_MspInit+0x60>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr
 8007728:	40021000 	.word	0x40021000
 800772c:	40010000 	.word	0x40010000

08007730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a0d      	ldr	r2, [pc, #52]	; (8007774 <HAL_TIM_Base_MspInit+0x44>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d113      	bne.n	800776a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <HAL_TIM_Base_MspInit+0x48>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <HAL_TIM_Base_MspInit+0x48>)
 8007748:	f043 0302 	orr.w	r3, r3, #2
 800774c:	61d3      	str	r3, [r2, #28]
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_TIM_Base_MspInit+0x48>)
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800775a:	2200      	movs	r2, #0
 800775c:	2103      	movs	r1, #3
 800775e:	201d      	movs	r0, #29
 8007760:	f000 ffcf 	bl	8008702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007764:	201d      	movs	r0, #29
 8007766:	f000 ffe8 	bl	800873a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	40000400 	.word	0x40000400
 8007778:	40021000 	.word	0x40021000

0800777c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007784:	f107 0318 	add.w	r3, r7, #24
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	609a      	str	r2, [r3, #8]
 8007790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a65      	ldr	r2, [pc, #404]	; (800792c <HAL_UART_MspInit+0x1b0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d160      	bne.n	800785e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800779c:	4b64      	ldr	r3, [pc, #400]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	4a63      	ldr	r2, [pc, #396]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 80077a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077a6:	6193      	str	r3, [r2, #24]
 80077a8:	4b61      	ldr	r3, [pc, #388]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077b4:	4b5e      	ldr	r3, [pc, #376]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4a5d      	ldr	r2, [pc, #372]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	6193      	str	r3, [r2, #24]
 80077c0:	4b5b      	ldr	r3, [pc, #364]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80077cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d2:	2302      	movs	r3, #2
 80077d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077d6:	2303      	movs	r3, #3
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077da:	f107 0318 	add.w	r3, r7, #24
 80077de:	4619      	mov	r1, r3
 80077e0:	4854      	ldr	r0, [pc, #336]	; (8007934 <HAL_UART_MspInit+0x1b8>)
 80077e2:	f001 fc47 	bl	8009074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80077e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f4:	f107 0318 	add.w	r3, r7, #24
 80077f8:	4619      	mov	r1, r3
 80077fa:	484e      	ldr	r0, [pc, #312]	; (8007934 <HAL_UART_MspInit+0x1b8>)
 80077fc:	f001 fc3a 	bl	8009074 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007800:	4b4d      	ldr	r3, [pc, #308]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007802:	4a4e      	ldr	r2, [pc, #312]	; (800793c <HAL_UART_MspInit+0x1c0>)
 8007804:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007806:	4b4c      	ldr	r3, [pc, #304]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007808:	2200      	movs	r2, #0
 800780a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800780c:	4b4a      	ldr	r3, [pc, #296]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007812:	4b49      	ldr	r3, [pc, #292]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007818:	4b47      	ldr	r3, [pc, #284]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 800781a:	2200      	movs	r2, #0
 800781c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800781e:	4b46      	ldr	r3, [pc, #280]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007820:	2200      	movs	r2, #0
 8007822:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8007824:	4b44      	ldr	r3, [pc, #272]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007826:	2220      	movs	r2, #32
 8007828:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800782a:	4b43      	ldr	r3, [pc, #268]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 800782c:	2200      	movs	r2, #0
 800782e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007830:	4841      	ldr	r0, [pc, #260]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007832:	f000 ff9d 	bl	8008770 <HAL_DMA_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800783c:	f7ff ff40 	bl	80076c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a3d      	ldr	r2, [pc, #244]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007844:	635a      	str	r2, [r3, #52]	; 0x34
 8007846:	4a3c      	ldr	r2, [pc, #240]	; (8007938 <HAL_UART_MspInit+0x1bc>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800784c:	2200      	movs	r2, #0
 800784e:	2101      	movs	r1, #1
 8007850:	2025      	movs	r0, #37	; 0x25
 8007852:	f000 ff56 	bl	8008702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007856:	2025      	movs	r0, #37	; 0x25
 8007858:	f000 ff6f 	bl	800873a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800785c:	e062      	b.n	8007924 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a37      	ldr	r2, [pc, #220]	; (8007940 <HAL_UART_MspInit+0x1c4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d15d      	bne.n	8007924 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007868:	4b31      	ldr	r3, [pc, #196]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	4a30      	ldr	r2, [pc, #192]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 800786e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007872:	61d3      	str	r3, [r2, #28]
 8007874:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007880:	4b2b      	ldr	r3, [pc, #172]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 8007886:	f043 0304 	orr.w	r3, r3, #4
 800788a:	6193      	str	r3, [r2, #24]
 800788c:	4b28      	ldr	r3, [pc, #160]	; (8007930 <HAL_UART_MspInit+0x1b4>)
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007898:	2304      	movs	r3, #4
 800789a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789c:	2302      	movs	r3, #2
 800789e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80078a0:	2303      	movs	r3, #3
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078a4:	f107 0318 	add.w	r3, r7, #24
 80078a8:	4619      	mov	r1, r3
 80078aa:	4822      	ldr	r0, [pc, #136]	; (8007934 <HAL_UART_MspInit+0x1b8>)
 80078ac:	f001 fbe2 	bl	8009074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80078b0:	2308      	movs	r3, #8
 80078b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078bc:	f107 0318 	add.w	r3, r7, #24
 80078c0:	4619      	mov	r1, r3
 80078c2:	481c      	ldr	r0, [pc, #112]	; (8007934 <HAL_UART_MspInit+0x1b8>)
 80078c4:	f001 fbd6 	bl	8009074 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80078c8:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078ca:	4a1f      	ldr	r2, [pc, #124]	; (8007948 <HAL_UART_MspInit+0x1cc>)
 80078cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078ce:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078d4:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078da:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078e0:	4b18      	ldr	r3, [pc, #96]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078ee:	2220      	movs	r2, #32
 80078f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80078f8:	4812      	ldr	r0, [pc, #72]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 80078fa:	f000 ff39 	bl	8008770 <HAL_DMA_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8007904:	f7ff fedc 	bl	80076c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a0e      	ldr	r2, [pc, #56]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 800790c:	635a      	str	r2, [r3, #52]	; 0x34
 800790e:	4a0d      	ldr	r2, [pc, #52]	; (8007944 <HAL_UART_MspInit+0x1c8>)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8007914:	2200      	movs	r2, #0
 8007916:	2101      	movs	r1, #1
 8007918:	2026      	movs	r0, #38	; 0x26
 800791a:	f000 fef2 	bl	8008702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800791e:	2026      	movs	r0, #38	; 0x26
 8007920:	f000 ff0b 	bl	800873a <HAL_NVIC_EnableIRQ>
}
 8007924:	bf00      	nop
 8007926:	3728      	adds	r7, #40	; 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40013800 	.word	0x40013800
 8007930:	40021000 	.word	0x40021000
 8007934:	40010800 	.word	0x40010800
 8007938:	200012a0 	.word	0x200012a0
 800793c:	40020058 	.word	0x40020058
 8007940:	40004400 	.word	0x40004400
 8007944:	20000214 	.word	0x20000214
 8007948:	4002006c 	.word	0x4002006c

0800794c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr

08007958 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800795c:	e7fe      	b.n	800795c <HardFault_Handler+0x4>

0800795e <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800795e:	b480      	push	{r7}
 8007960:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8007962:	e7fe      	b.n	8007962 <MemManage_Handler+0x4>

08007964 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8007968:	e7fe      	b.n	8007968 <BusFault_Handler+0x4>

0800796a <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800796a:	b480      	push	{r7}
 800796c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800796e:	e7fe      	b.n	800796e <UsageFault_Handler+0x4>

08007970 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	bc80      	pop	{r7}
 800797a:	4770      	bx	lr

0800797c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8007980:	bf00      	nop
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	bc80      	pop	{r7}
 8007992:	4770      	bx	lr

08007994 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8007998:	f000 fd9c 	bl	80084d4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}

080079a0 <DMA1_Channel5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80079a4:	4802      	ldr	r0, [pc, #8]	; (80079b0 <DMA1_Channel5_IRQHandler+0x10>)
 80079a6:	f001 f8fb 	bl	8008ba0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80079aa:	bf00      	nop
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200012a0 	.word	0x200012a0

080079b4 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80079b8:	4802      	ldr	r0, [pc, #8]	; (80079c4 <DMA1_Channel6_IRQHandler+0x10>)
 80079ba:	f001 f8f1 	bl	8008ba0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80079be:	bf00      	nop
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000214 	.word	0x20000214

080079c8 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80079cc:	2020      	movs	r0, #32
 80079ce:	f001 fcfd 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 80079d2:	bf00      	nop
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80079dc:	4802      	ldr	r0, [pc, #8]	; (80079e8 <TIM3_IRQHandler+0x10>)
 80079de:	f002 f9d7 	bl	8009d90 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000258 	.word	0x20000258

080079ec <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80079f0:	4806      	ldr	r0, [pc, #24]	; (8007a0c <USART1_IRQHandler+0x20>)
 80079f2:	f002 ff07 	bl	800a804 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_RxCpltCallback(&huart1);
 80079f6:	4805      	ldr	r0, [pc, #20]	; (8007a0c <USART1_IRQHandler+0x20>)
 80079f8:	f000 f8aa 	bl	8007b50 <HAL_UART_RxCpltCallback>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 80079fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a00:	4903      	ldr	r1, [pc, #12]	; (8007a10 <USART1_IRQHandler+0x24>)
 8007a02:	4802      	ldr	r0, [pc, #8]	; (8007a0c <USART1_IRQHandler+0x20>)
 8007a04:	f002 fe22 	bl	800a64c <HAL_UART_Receive_DMA>
	/* USER CODE END USART1_IRQn 1 */
}
 8007a08:	bf00      	nop
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200012e4 	.word	0x200012e4
 8007a10:	200002a0 	.word	0x200002a0

08007a14 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8007a18:	4806      	ldr	r0, [pc, #24]	; (8007a34 <USART2_IRQHandler+0x20>)
 8007a1a:	f002 fef3 	bl	800a804 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_RxCpltCallback(&huart2);
 8007a1e:	4805      	ldr	r0, [pc, #20]	; (8007a34 <USART2_IRQHandler+0x20>)
 8007a20:	f000 f896 	bl	8007b50 <HAL_UART_RxCpltCallback>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 8007a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a28:	4903      	ldr	r1, [pc, #12]	; (8007a38 <USART2_IRQHandler+0x24>)
 8007a2a:	4802      	ldr	r0, [pc, #8]	; (8007a34 <USART2_IRQHandler+0x20>)
 8007a2c:	f002 fe0e 	bl	800a64c <HAL_UART_Receive_DMA>
	/* USER CODE END USART2_IRQn 1 */
}
 8007a30:	bf00      	nop
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20001b24 	.word	0x20001b24
 8007a38:	20001324 	.word	0x20001324

08007a3c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007a44:	f001 fcc2 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8007a56:	2064      	movs	r0, #100	; 0x64
 8007a58:	f000 fd58 	bl	800850c <HAL_Delay>
//                }
//            default:
//                break;
//        }
//    }
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	if (htim == (&htim3)) {
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a31      	ldr	r2, [pc, #196]	; (8007b34 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d15c      	bne.n	8007b2e <HAL_TIM_PeriodElapsedCallback+0xca>
		HAL_Delay(300);
 8007a74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a78:	f000 fd48 	bl	800850c <HAL_Delay>
		++timer_count;
 8007a7c:	4b2e      	ldr	r3, [pc, #184]	; (8007b38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	4a2d      	ldr	r2, [pc, #180]	; (8007b38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007a84:	6013      	str	r3, [r2, #0]
		timer_count %= 15;
 8007a86:	4b2c      	ldr	r3, [pc, #176]	; (8007b38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b2c      	ldr	r3, [pc, #176]	; (8007b3c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8007a8c:	fb83 1302 	smull	r1, r3, r3, r2
 8007a90:	4413      	add	r3, r2
 8007a92:	10d9      	asrs	r1, r3, #3
 8007a94:	17d3      	asrs	r3, r2, #31
 8007a96:	1ac9      	subs	r1, r1, r3
 8007a98:	460b      	mov	r3, r1
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	1a5b      	subs	r3, r3, r1
 8007a9e:	1ad1      	subs	r1, r2, r3
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8007aa2:	6019      	str	r1, [r3, #0]
//			} else {
//				send_cmd((uint8_t*) "AT+PING=\"192.168.4.1\"\r\n", 0);
//			}
//
//		}
		if (connect_flag == 0) {
 8007aa4:	4b26      	ldr	r3, [pc, #152]	; (8007b40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10b      	bne.n	8007ac4 <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8007aac:	2201      	movs	r2, #1
 8007aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ab2:	4824      	ldr	r0, [pc, #144]	; (8007b44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007ab4:	f001 fc72 	bl	800939c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); //0
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2104      	movs	r1, #4
 8007abc:	4822      	ldr	r0, [pc, #136]	; (8007b48 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007abe:	f001 fc6d 	bl	800939c <HAL_GPIO_WritePin>
			return;
 8007ac2:	e034      	b.n	8007b2e <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		if (connect_flag == 1) { // 连接上wifi 但是没有连接tcp
 8007ac4:	4b1e      	ldr	r3, [pc, #120]	; (8007b40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d10b      	bne.n	8007ae4 <HAL_TIM_PeriodElapsedCallback+0x80>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8007acc:	2200      	movs	r2, #0
 8007ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ad2:	481c      	ldr	r0, [pc, #112]	; (8007b44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007ad4:	f001 fc62 	bl	800939c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); //0
 8007ad8:	2201      	movs	r2, #1
 8007ada:	2104      	movs	r1, #4
 8007adc:	481a      	ldr	r0, [pc, #104]	; (8007b48 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007ade:	f001 fc5d 	bl	800939c <HAL_GPIO_WritePin>
			return;
 8007ae2:	e024      	b.n	8007b2e <HAL_TIM_PeriodElapsedCallback+0xca>
		}
		if (connect_flag == 2) {
 8007ae4:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d120      	bne.n	8007b2e <HAL_TIM_PeriodElapsedCallback+0xca>
			if (sending_flag == 0) {
 8007aec:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <HAL_TIM_PeriodElapsedCallback+0xa8>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8007af4:	2201      	movs	r2, #1
 8007af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007afa:	4812      	ldr	r0, [pc, #72]	; (8007b44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007afc:	f001 fc4e 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007b00:	2200      	movs	r2, #0
 8007b02:	2104      	movs	r1, #4
 8007b04:	4810      	ldr	r0, [pc, #64]	; (8007b48 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8007b06:	f001 fc49 	bl	800939c <HAL_GPIO_WritePin>
			} else if (sending_flag == 1) {
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
			}
			return;
 8007b0a:	e00f      	b.n	8007b2c <HAL_TIM_PeriodElapsedCallback+0xc8>
			} else if (sending_flag == 1) {
 8007b0c:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d10b      	bne.n	8007b2c <HAL_TIM_PeriodElapsedCallback+0xc8>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8007b14:	2200      	movs	r2, #0
 8007b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b1a:	480a      	ldr	r0, [pc, #40]	; (8007b44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007b1c:	f001 fc3e 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8007b20:	2200      	movs	r2, #0
 8007b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b26:	4807      	ldr	r0, [pc, #28]	; (8007b44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8007b28:	f001 fc38 	bl	800939c <HAL_GPIO_WritePin>
			return;
 8007b2c:	bf00      	nop
		}
	}
}
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20000258 	.word	0x20000258
 8007b38:	200001f0 	.word	0x200001f0
 8007b3c:	88888889 	.word	0x88888889
 8007b40:	200001e8 	.word	0x200001e8
 8007b44:	40010800 	.word	0x40010800
 8007b48:	40011400 	.word	0x40011400
 8007b4c:	200001ec 	.word	0x200001ec

08007b50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	// to receive the data from the usart1
	if (huart->Instance == USART1) {
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4aa3      	ldr	r2, [pc, #652]	; (8007dec <HAL_UART_RxCpltCallback+0x29c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f040 8104 	bne.w	8007d6c <HAL_UART_RxCpltCallback+0x21c>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8007b64:	4ba2      	ldr	r3, [pc, #648]	; (8007df0 <HAL_UART_RxCpltCallback+0x2a0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	f040 82c3 	bne.w	80080fa <HAL_UART_RxCpltCallback+0x5aa>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	4b9d      	ldr	r3, [pc, #628]	; (8007df0 <HAL_UART_RxCpltCallback+0x2a0>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	4b9b      	ldr	r3, [pc, #620]	; (8007df0 <HAL_UART_RxCpltCallback+0x2a0>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	693b      	ldr	r3, [r7, #16]
			HAL_UART_DMAStop(&huart1);
 8007b8a:	4899      	ldr	r0, [pc, #612]	; (8007df0 <HAL_UART_RxCpltCallback+0x2a0>)
 8007b8c:	f002 fdde 	bl	800a74c <HAL_UART_DMAStop>
			uint8_t data_length = 2048 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8007b90:	4b98      	ldr	r3, [pc, #608]	; (8007df4 <HAL_UART_RxCpltCallback+0x2a4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	425b      	negs	r3, r3
 8007b9a:	75fb      	strb	r3, [r7, #23]
//			send_msg_uart1((uint8_t*) "enter usart receive function", 0);
			if (link_number != -1 && uart1_rx_buffer[0] == '>'
 8007b9c:	4b96      	ldr	r3, [pc, #600]	; (8007df8 <HAL_UART_RxCpltCallback+0x2a8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d028      	beq.n	8007bf8 <HAL_UART_RxCpltCallback+0xa8>
 8007ba6:	4b95      	ldr	r3, [pc, #596]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b3e      	cmp	r3, #62	; 0x3e
 8007bac:	d124      	bne.n	8007bf8 <HAL_UART_RxCpltCallback+0xa8>
					&& connect_flag == 2) {
 8007bae:	4b94      	ldr	r3, [pc, #592]	; (8007e00 <HAL_UART_RxCpltCallback+0x2b0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d120      	bne.n	8007bf8 <HAL_UART_RxCpltCallback+0xa8>
				sending_flag = 1;
 8007bb6:	4b93      	ldr	r3, [pc, #588]	; (8007e04 <HAL_UART_RxCpltCallback+0x2b4>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bc2:	4891      	ldr	r0, [pc, #580]	; (8007e08 <HAL_UART_RxCpltCallback+0x2b8>)
 8007bc4:	f001 fbea 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2104      	movs	r1, #4
 8007bcc:	488f      	ldr	r0, [pc, #572]	; (8007e0c <HAL_UART_RxCpltCallback+0x2bc>)
 8007bce:	f001 fbe5 	bl	800939c <HAL_GPIO_WritePin>
				send_message(uart1_rx_buffer + 1);
 8007bd2:	4b8f      	ldr	r3, [pc, #572]	; (8007e10 <HAL_UART_RxCpltCallback+0x2c0>)
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fae3 	bl	80081a0 <send_message>
				sending_flag = 0;
 8007bda:	4b8a      	ldr	r3, [pc, #552]	; (8007e04 <HAL_UART_RxCpltCallback+0x2b4>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8007be0:	2201      	movs	r2, #1
 8007be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007be6:	4888      	ldr	r0, [pc, #544]	; (8007e08 <HAL_UART_RxCpltCallback+0x2b8>)
 8007be8:	f001 fbd8 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007bec:	2200      	movs	r2, #0
 8007bee:	2104      	movs	r1, #4
 8007bf0:	4886      	ldr	r0, [pc, #536]	; (8007e0c <HAL_UART_RxCpltCallback+0x2bc>)
 8007bf2:	f001 fbd3 	bl	800939c <HAL_GPIO_WritePin>
 8007bf6:	e0aa      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "server\r\n") == 0) {
 8007bf8:	4986      	ldr	r1, [pc, #536]	; (8007e14 <HAL_UART_RxCpltCallback+0x2c4>)
 8007bfa:	4880      	ldr	r0, [pc, #512]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007bfc:	f7f8 fb14 	bl	8000228 <strcmp>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10c      	bne.n	8007c20 <HAL_UART_RxCpltCallback+0xd0>
				esp8266_mode = 1;
 8007c06:	4b84      	ldr	r3, [pc, #528]	; (8007e18 <HAL_UART_RxCpltCallback+0x2c8>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
				send_msg_uart1((uint8_t*) "SET AS SERVER\r\n", 0);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4883      	ldr	r0, [pc, #524]	; (8007e1c <HAL_UART_RxCpltCallback+0x2cc>)
 8007c10:	f000 fb00 	bl	8008214 <send_msg_uart1>
				send_cmd("AT+CWMODE=3\r\n", 1000);
 8007c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c18:	4881      	ldr	r0, [pc, #516]	; (8007e20 <HAL_UART_RxCpltCallback+0x2d0>)
 8007c1a:	f000 faa7 	bl	800816c <send_cmd>
 8007c1e:	e096      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "client\r\n") == 0) {
 8007c20:	4980      	ldr	r1, [pc, #512]	; (8007e24 <HAL_UART_RxCpltCallback+0x2d4>)
 8007c22:	4876      	ldr	r0, [pc, #472]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007c24:	f7f8 fb00 	bl	8000228 <strcmp>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d111      	bne.n	8007c52 <HAL_UART_RxCpltCallback+0x102>
				esp8266_mode = 0;
 8007c2e:	4b7a      	ldr	r3, [pc, #488]	; (8007e18 <HAL_UART_RxCpltCallback+0x2c8>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
				send_msg_uart1((uint8_t*) "SET AS CLIENT\r\n", 0);
 8007c34:	2100      	movs	r1, #0
 8007c36:	487c      	ldr	r0, [pc, #496]	; (8007e28 <HAL_UART_RxCpltCallback+0x2d8>)
 8007c38:	f000 faec 	bl	8008214 <send_msg_uart1>
				send_cmd("AT+CWJAP?\r\n", 1000);
 8007c3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c40:	487a      	ldr	r0, [pc, #488]	; (8007e2c <HAL_UART_RxCpltCallback+0x2dc>)
 8007c42:	f000 fa93 	bl	800816c <send_cmd>
				send_cmd("AT+CIFSR\r\n", 1000);
 8007c46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c4a:	4879      	ldr	r0, [pc, #484]	; (8007e30 <HAL_UART_RxCpltCallback+0x2e0>)
 8007c4c:	f000 fa8e 	bl	800816c <send_cmd>
 8007c50:	e07d      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "start\r\n") == 0
 8007c52:	4978      	ldr	r1, [pc, #480]	; (8007e34 <HAL_UART_RxCpltCallback+0x2e4>)
 8007c54:	4869      	ldr	r0, [pc, #420]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007c56:	f7f8 fae7 	bl	8000228 <strcmp>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d108      	bne.n	8007c72 <HAL_UART_RxCpltCallback+0x122>
					&& esp8266_mode == 1) {
 8007c60:	4b6d      	ldr	r3, [pc, #436]	; (8007e18 <HAL_UART_RxCpltCallback+0x2c8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d104      	bne.n	8007c72 <HAL_UART_RxCpltCallback+0x122>
				reset();
 8007c68:	f7fe faf6 	bl	8006258 <reset>
				init_server();
 8007c6c:	f000 fb54 	bl	8008318 <init_server>
					&& esp8266_mode == 1) {
 8007c70:	e06d      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "connect to wifi\r\n") == 0
 8007c72:	4971      	ldr	r1, [pc, #452]	; (8007e38 <HAL_UART_RxCpltCallback+0x2e8>)
 8007c74:	4861      	ldr	r0, [pc, #388]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007c76:	f7f8 fad7 	bl	8000228 <strcmp>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d108      	bne.n	8007c92 <HAL_UART_RxCpltCallback+0x142>
					&& esp8266_mode == 0) {
 8007c80:	4b65      	ldr	r3, [pc, #404]	; (8007e18 <HAL_UART_RxCpltCallback+0x2c8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_UART_RxCpltCallback+0x142>
				reset();
 8007c88:	f7fe fae6 	bl	8006258 <reset>
				connect_to_wifi();
 8007c8c:	f000 fb0e 	bl	80082ac <connect_to_wifi>
					&& esp8266_mode == 0) {
 8007c90:	e05d      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "connect to server\r\n") == 0
 8007c92:	496a      	ldr	r1, [pc, #424]	; (8007e3c <HAL_UART_RxCpltCallback+0x2ec>)
 8007c94:	4859      	ldr	r0, [pc, #356]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007c96:	f7f8 fac7 	bl	8000228 <strcmp>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d108      	bne.n	8007cb2 <HAL_UART_RxCpltCallback+0x162>
					&& esp8266_mode == 0) {
 8007ca0:	4b5d      	ldr	r3, [pc, #372]	; (8007e18 <HAL_UART_RxCpltCallback+0x2c8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d104      	bne.n	8007cb2 <HAL_UART_RxCpltCallback+0x162>
				send_cmd((uint8_t*) "AT+CIPSTART=0,\"TCP\",\"192.168.4.1\",8089\r\n", 0);
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4865      	ldr	r0, [pc, #404]	; (8007e40 <HAL_UART_RxCpltCallback+0x2f0>)
 8007cac:	f000 fa5e 	bl	800816c <send_cmd>
 8007cb0:	e04d      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strcmp(uart1_rx_buffer, "close connection\r\n") == 0) {
 8007cb2:	4964      	ldr	r1, [pc, #400]	; (8007e44 <HAL_UART_RxCpltCallback+0x2f4>)
 8007cb4:	4851      	ldr	r0, [pc, #324]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007cb6:	f7f8 fab7 	bl	8000228 <strcmp>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d107      	bne.n	8007cd0 <HAL_UART_RxCpltCallback+0x180>
				send_cmd((uint8_t*) "AT+CIPCLOSE=0\r\n", 2000);
 8007cc0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007cc4:	4860      	ldr	r0, [pc, #384]	; (8007e48 <HAL_UART_RxCpltCallback+0x2f8>)
 8007cc6:	f000 fa51 	bl	800816c <send_cmd>
				init_var();
 8007cca:	f000 fabd 	bl	8008248 <init_var>
 8007cce:	e03e      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strncmp(uart1_rx_buffer, "quit wifi\r\n") == 0
 8007cd0:	495e      	ldr	r1, [pc, #376]	; (8007e4c <HAL_UART_RxCpltCallback+0x2fc>)
 8007cd2:	484a      	ldr	r0, [pc, #296]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007cd4:	f003 f9a1 	bl	800b01a <strncmp>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <HAL_UART_RxCpltCallback+0x1a6>
					&& esp8266_mode == 0) {
 8007cde:	4b4e      	ldr	r3, [pc, #312]	; (8007e18 <HAL_UART_RxCpltCallback+0x2c8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d107      	bne.n	8007cf6 <HAL_UART_RxCpltCallback+0x1a6>
				send_cmd("AT+CWQAP\r\n", 1000);
 8007ce6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cea:	4859      	ldr	r0, [pc, #356]	; (8007e50 <HAL_UART_RxCpltCallback+0x300>)
 8007cec:	f000 fa3e 	bl	800816c <send_cmd>
				init_var();
 8007cf0:	f000 faaa 	bl	8008248 <init_var>
 8007cf4:	e02b      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strncmp(uart1_rx_buffer, "ip status\r\n") == 0) {
 8007cf6:	4957      	ldr	r1, [pc, #348]	; (8007e54 <HAL_UART_RxCpltCallback+0x304>)
 8007cf8:	4840      	ldr	r0, [pc, #256]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007cfa:	f003 f98e 	bl	800b01a <strncmp>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <HAL_UART_RxCpltCallback+0x1ca>
				send_cmd("AT+CIPSTATUS\r\n", 1000);
 8007d04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d08:	4853      	ldr	r0, [pc, #332]	; (8007e58 <HAL_UART_RxCpltCallback+0x308>)
 8007d0a:	f000 fa2f 	bl	800816c <send_cmd>
				send_cmd("AT+CIFSR\r\n", 1000);
 8007d0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d12:	4847      	ldr	r0, [pc, #284]	; (8007e30 <HAL_UART_RxCpltCallback+0x2e0>)
 8007d14:	f000 fa2a 	bl	800816c <send_cmd>
 8007d18:	e019      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else if (strncmp(uart1_rx_buffer, "wifi status\r\n") == 0) {
 8007d1a:	4950      	ldr	r1, [pc, #320]	; (8007e5c <HAL_UART_RxCpltCallback+0x30c>)
 8007d1c:	4837      	ldr	r0, [pc, #220]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007d1e:	f003 f97c 	bl	800b01a <strncmp>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <HAL_UART_RxCpltCallback+0x1ee>
//				send_cmd("AT+CWSAP?\r\n", 1000);
				send_cmd("AT+CWLIF\r\n", 1000);
 8007d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d2c:	484c      	ldr	r0, [pc, #304]	; (8007e60 <HAL_UART_RxCpltCallback+0x310>)
 8007d2e:	f000 fa1d 	bl	800816c <send_cmd>
				send_cmd("AT+CIPSTATUS\r\n", 1000);
 8007d32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d36:	4848      	ldr	r0, [pc, #288]	; (8007e58 <HAL_UART_RxCpltCallback+0x308>)
 8007d38:	f000 fa18 	bl	800816c <send_cmd>
 8007d3c:	e007      	b.n	8007d4e <HAL_UART_RxCpltCallback+0x1fe>
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) uart1_rx_buffer,
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d46:	492d      	ldr	r1, [pc, #180]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007d48:	4846      	ldr	r0, [pc, #280]	; (8007e64 <HAL_UART_RxCpltCallback+0x314>)
 8007d4a:	f002 fbec 	bl	800a526 <HAL_UART_Transmit>
						data_length, 0xffff);
			}
			memset(uart1_rx_buffer, 0, data_length);
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	461a      	mov	r2, r3
 8007d52:	2100      	movs	r1, #0
 8007d54:	4829      	ldr	r0, [pc, #164]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007d56:	f003 f92b 	bl	800afb0 <memset>
			data_length = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 8007d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d62:	4926      	ldr	r1, [pc, #152]	; (8007dfc <HAL_UART_RxCpltCallback+0x2ac>)
 8007d64:	4822      	ldr	r0, [pc, #136]	; (8007df0 <HAL_UART_RxCpltCallback+0x2a0>)
 8007d66:	f002 fc71 	bl	800a64c <HAL_UART_Receive_DMA>
			memset(uart2_rx_buffer, 0, data_length);
			data_length = 0;
			HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
		}
	}
}
 8007d6a:	e1c6      	b.n	80080fa <HAL_UART_RxCpltCallback+0x5aa>
	} else if (huart->Instance == USART2) { // to receive the data from the usart2
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a3d      	ldr	r2, [pc, #244]	; (8007e68 <HAL_UART_RxCpltCallback+0x318>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	f040 81c1 	bne.w	80080fa <HAL_UART_RxCpltCallback+0x5aa>
		if (RESET != __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8007d78:	4b3a      	ldr	r3, [pc, #232]	; (8007e64 <HAL_UART_RxCpltCallback+0x314>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0310 	and.w	r3, r3, #16
 8007d82:	2b10      	cmp	r3, #16
 8007d84:	f040 81b9 	bne.w	80080fa <HAL_UART_RxCpltCallback+0x5aa>
			__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <HAL_UART_RxCpltCallback+0x314>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <HAL_UART_RxCpltCallback+0x314>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
			HAL_UART_DMAStop(&huart2);
 8007d9e:	4831      	ldr	r0, [pc, #196]	; (8007e64 <HAL_UART_RxCpltCallback+0x314>)
 8007da0:	f002 fcd4 	bl	800a74c <HAL_UART_DMAStop>
			uint8_t data_length = 2048 - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8007da4:	4b31      	ldr	r3, [pc, #196]	; (8007e6c <HAL_UART_RxCpltCallback+0x31c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	425b      	negs	r3, r3
 8007dae:	77fb      	strb	r3, [r7, #31]
			if (strncmp(uart2_rx_buffer, "WIFI CONNECTED\r\n", 16) == 0
 8007db0:	2210      	movs	r2, #16
 8007db2:	492f      	ldr	r1, [pc, #188]	; (8007e70 <HAL_UART_RxCpltCallback+0x320>)
 8007db4:	482f      	ldr	r0, [pc, #188]	; (8007e74 <HAL_UART_RxCpltCallback+0x324>)
 8007db6:	f003 f930 	bl	800b01a <strncmp>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d15b      	bne.n	8007e78 <HAL_UART_RxCpltCallback+0x328>
					&& connect_flag == 0) {
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <HAL_UART_RxCpltCallback+0x2b0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d157      	bne.n	8007e78 <HAL_UART_RxCpltCallback+0x328>
				connect_flag = 1;
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <HAL_UART_RxCpltCallback+0x2b0>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dd4:	480c      	ldr	r0, [pc, #48]	; (8007e08 <HAL_UART_RxCpltCallback+0x2b8>)
 8007dd6:	f001 fae1 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2104      	movs	r1, #4
 8007dde:	480b      	ldr	r0, [pc, #44]	; (8007e0c <HAL_UART_RxCpltCallback+0x2bc>)
 8007de0:	f001 fadc 	bl	800939c <HAL_GPIO_WritePin>
				link_number = 0;
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <HAL_UART_RxCpltCallback+0x2a8>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e178      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
 8007dec:	40013800 	.word	0x40013800
 8007df0:	200012e4 	.word	0x200012e4
 8007df4:	200012a0 	.word	0x200012a0
 8007df8:	2000000c 	.word	0x2000000c
 8007dfc:	200002a0 	.word	0x200002a0
 8007e00:	200001e8 	.word	0x200001e8
 8007e04:	200001ec 	.word	0x200001ec
 8007e08:	40010800 	.word	0x40010800
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	200002a1 	.word	0x200002a1
 8007e14:	0800b8cc 	.word	0x0800b8cc
 8007e18:	20000008 	.word	0x20000008
 8007e1c:	0800b8d8 	.word	0x0800b8d8
 8007e20:	0800b8e8 	.word	0x0800b8e8
 8007e24:	0800b8f8 	.word	0x0800b8f8
 8007e28:	0800b904 	.word	0x0800b904
 8007e2c:	0800b914 	.word	0x0800b914
 8007e30:	0800b920 	.word	0x0800b920
 8007e34:	0800b92c 	.word	0x0800b92c
 8007e38:	0800b934 	.word	0x0800b934
 8007e3c:	0800b948 	.word	0x0800b948
 8007e40:	0800b95c 	.word	0x0800b95c
 8007e44:	0800b988 	.word	0x0800b988
 8007e48:	0800b99c 	.word	0x0800b99c
 8007e4c:	0800b9ac 	.word	0x0800b9ac
 8007e50:	0800b9b8 	.word	0x0800b9b8
 8007e54:	0800b9c4 	.word	0x0800b9c4
 8007e58:	0800b9d0 	.word	0x0800b9d0
 8007e5c:	0800b9e0 	.word	0x0800b9e0
 8007e60:	0800b9f0 	.word	0x0800b9f0
 8007e64:	20001b24 	.word	0x20001b24
 8007e68:	40004400 	.word	0x40004400
 8007e6c:	20000214 	.word	0x20000214
 8007e70:	0800b9fc 	.word	0x0800b9fc
 8007e74:	20001324 	.word	0x20001324
			} else if (strncmp(uart2_rx_buffer, "WIFI GOT IP\r\n", 13) == 0) { // client 端会收到这个消息, 这里变成连接状态
 8007e78:	220d      	movs	r2, #13
 8007e7a:	49a2      	ldr	r1, [pc, #648]	; (8008104 <HAL_UART_RxCpltCallback+0x5b4>)
 8007e7c:	48a2      	ldr	r0, [pc, #648]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007e7e:	f003 f8cc 	bl	800b01a <strncmp>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d111      	bne.n	8007eac <HAL_UART_RxCpltCallback+0x35c>
				connect_flag = 1;
 8007e88:	4ba0      	ldr	r3, [pc, #640]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e94:	489e      	ldr	r0, [pc, #632]	; (8008110 <HAL_UART_RxCpltCallback+0x5c0>)
 8007e96:	f001 fa81 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2104      	movs	r1, #4
 8007e9e:	489d      	ldr	r0, [pc, #628]	; (8008114 <HAL_UART_RxCpltCallback+0x5c4>)
 8007ea0:	f001 fa7c 	bl	800939c <HAL_GPIO_WritePin>
				link_number = 0;
 8007ea4:	4b9c      	ldr	r3, [pc, #624]	; (8008118 <HAL_UART_RxCpltCallback+0x5c8>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e118      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
			} else if (connect_flag == 1
 8007eac:	4b97      	ldr	r3, [pc, #604]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d132      	bne.n	8007f1a <HAL_UART_RxCpltCallback+0x3ca>
					&& strncmp(uart2_rx_buffer, (uint8_t*) "+", 1) == 0) {
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	4999      	ldr	r1, [pc, #612]	; (800811c <HAL_UART_RxCpltCallback+0x5cc>)
 8007eb8:	4893      	ldr	r0, [pc, #588]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007eba:	f003 f8ae 	bl	800b01a <strncmp>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d12a      	bne.n	8007f1a <HAL_UART_RxCpltCallback+0x3ca>
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8007ec4:	4996      	ldr	r1, [pc, #600]	; (8008120 <HAL_UART_RxCpltCallback+0x5d0>)
 8007ec6:	4890      	ldr	r0, [pc, #576]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007ec8:	f003 f8b9 	bl	800b03e <strstr>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01f      	beq.n	8007f12 <HAL_UART_RxCpltCallback+0x3c2>
					if (connection_counter > 2) {
 8007ed2:	4b94      	ldr	r3, [pc, #592]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	dd11      	ble.n	8007efe <HAL_UART_RxCpltCallback+0x3ae>
						send_msg_uart1((uint8_t*) "connection closed\r\n", 100);
 8007eda:	2164      	movs	r1, #100	; 0x64
 8007edc:	4892      	ldr	r0, [pc, #584]	; (8008128 <HAL_UART_RxCpltCallback+0x5d8>)
 8007ede:	f000 f999 	bl	8008214 <send_msg_uart1>
						send_cmd((uint8_t*) "AT+CWQAP\r\n", 2000);
 8007ee2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007ee6:	4891      	ldr	r0, [pc, #580]	; (800812c <HAL_UART_RxCpltCallback+0x5dc>)
 8007ee8:	f000 f940 	bl	800816c <send_cmd>
						init_var();
 8007eec:	f000 f9ac 	bl	8008248 <init_var>
						connection_counter = 0;
 8007ef0:	4b8c      	ldr	r3, [pc, #560]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
						StateChange(0);
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f7fe fa78 	bl	80063ec <StateChange>
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8007efc:	e0ef      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
						send_msg_uart1((uint8_t*) "connection disturbance\r\n",
 8007efe:	2164      	movs	r1, #100	; 0x64
 8007f00:	488b      	ldr	r0, [pc, #556]	; (8008130 <HAL_UART_RxCpltCallback+0x5e0>)
 8007f02:	f000 f987 	bl	8008214 <send_msg_uart1>
						++connection_counter;
 8007f06:	4b87      	ldr	r3, [pc, #540]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	4a85      	ldr	r2, [pc, #532]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 8007f0e:	6013      	str	r3, [r2, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8007f10:	e0e5      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
					connection_counter = 0;
 8007f12:	4b84      	ldr	r3, [pc, #528]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8007f18:	e0e1      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
			} else if (connect_flag == 2) {
 8007f1a:	4b7c      	ldr	r3, [pc, #496]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d176      	bne.n	8008010 <HAL_UART_RxCpltCallback+0x4c0>
				if (strcmp(uart2_rx_buffer, "WIFI DISCONNECT\r\n", 16) == 0) { //client 端会收到这个消息
 8007f22:	2210      	movs	r2, #16
 8007f24:	4983      	ldr	r1, [pc, #524]	; (8008134 <HAL_UART_RxCpltCallback+0x5e4>)
 8007f26:	4878      	ldr	r0, [pc, #480]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f28:	f7f8 f97e 	bl	8000228 <strcmp>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <HAL_UART_RxCpltCallback+0x3f8>
					init_var();
 8007f32:	f000 f989 	bl	8008248 <init_var>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007f36:	7ffb      	ldrb	r3, [r7, #31]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f3e:	4972      	ldr	r1, [pc, #456]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f40:	487d      	ldr	r0, [pc, #500]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 8007f42:	f002 faf0 	bl	800a526 <HAL_UART_Transmit>
 8007f46:	e0ca      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
				} else if (strncmp(uart2_rx_buffer, "\r\n+IPD,", 7) == 0) {
 8007f48:	2207      	movs	r2, #7
 8007f4a:	497c      	ldr	r1, [pc, #496]	; (800813c <HAL_UART_RxCpltCallback+0x5ec>)
 8007f4c:	486e      	ldr	r0, [pc, #440]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f4e:	f003 f864 	bl	800b01a <strncmp>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d127      	bne.n	8007fa8 <HAL_UART_RxCpltCallback+0x458>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f5e:	486c      	ldr	r0, [pc, #432]	; (8008110 <HAL_UART_RxCpltCallback+0x5c0>)
 8007f60:	f001 fa1c 	bl	800939c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8007f64:	2200      	movs	r2, #0
 8007f66:	2104      	movs	r1, #4
 8007f68:	486a      	ldr	r0, [pc, #424]	; (8008114 <HAL_UART_RxCpltCallback+0x5c4>)
 8007f6a:	f001 fa17 	bl	800939c <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f76:	4964      	ldr	r1, [pc, #400]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f78:	486f      	ldr	r0, [pc, #444]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 8007f7a:	f002 fad4 	bl	800a526 <HAL_UART_Transmit>
					long idx = strchr((char*) uart2_rx_buffer, ':')
 8007f7e:	213a      	movs	r1, #58	; 0x3a
 8007f80:	4861      	ldr	r0, [pc, #388]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f82:	f003 f83d 	bl	800b000 <strchr>
 8007f86:	4603      	mov	r3, r0
 8007f88:	4a5f      	ldr	r2, [pc, #380]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
					printOut(uart2_rx_buffer + 1 + idx, data_length - idx, 2,
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	3301      	adds	r3, #1
 8007f92:	4a5d      	ldr	r2, [pc, #372]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007f94:	1898      	adds	r0, r3, r2
 8007f96:	7ffa      	ldrb	r2, [r7, #31]
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	1ad1      	subs	r1, r2, r3
 8007f9c:	4b5b      	ldr	r3, [pc, #364]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f7fe fa30 	bl	8006406 <printOut>
 8007fa6:	e09a      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
				} else if (strncmp(uart2_rx_buffer, (uint8_t*) "SEND FAIL", 9)
 8007fa8:	2209      	movs	r2, #9
 8007faa:	4965      	ldr	r1, [pc, #404]	; (8008140 <HAL_UART_RxCpltCallback+0x5f0>)
 8007fac:	4856      	ldr	r0, [pc, #344]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007fae:	f003 f834 	bl	800b01a <strncmp>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <HAL_UART_RxCpltCallback+0x47e>
					init_var();
 8007fb8:	f000 f946 	bl	8008248 <init_var>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007fbc:	7ffb      	ldrb	r3, [r7, #31]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fc4:	4950      	ldr	r1, [pc, #320]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007fc6:	485c      	ldr	r0, [pc, #368]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 8007fc8:	f002 faad 	bl	800a526 <HAL_UART_Transmit>
 8007fcc:	e087      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
				} else if (strncmp(uart2_rx_buffer, (uint8_t*) "0,CLOSE OK", 10)
 8007fce:	220a      	movs	r2, #10
 8007fd0:	495c      	ldr	r1, [pc, #368]	; (8008144 <HAL_UART_RxCpltCallback+0x5f4>)
 8007fd2:	484d      	ldr	r0, [pc, #308]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8007fd4:	f003 f821 	bl	800b01a <strncmp>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d17f      	bne.n	80080de <HAL_UART_RxCpltCallback+0x58e>
					connect_flag = 1;
 8007fde:	4b4b      	ldr	r3, [pc, #300]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
					sending_flag = 0;
 8007fe4:	4b58      	ldr	r3, [pc, #352]	; (8008148 <HAL_UART_RxCpltCallback+0x5f8>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
					link_number = -1;
 8007fea:	4b4b      	ldr	r3, [pc, #300]	; (8008118 <HAL_UART_RxCpltCallback+0x5c8>)
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	601a      	str	r2, [r3, #0]
					connection_counter = 0;
 8007ff2:	4b4c      	ldr	r3, [pc, #304]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
					timer_count = 0;
 8007ff8:	4b54      	ldr	r3, [pc, #336]	; (800814c <HAL_UART_RxCpltCallback+0x5fc>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007ffe:	7ffb      	ldrb	r3, [r7, #31]
 8008000:	b29a      	uxth	r2, r3
 8008002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008006:	4940      	ldr	r1, [pc, #256]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8008008:	484b      	ldr	r0, [pc, #300]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 800800a:	f002 fa8c 	bl	800a526 <HAL_UART_Transmit>
 800800e:	e066      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT\r\n", 11) == 0) {
 8008010:	220b      	movs	r2, #11
 8008012:	494f      	ldr	r1, [pc, #316]	; (8008150 <HAL_UART_RxCpltCallback+0x600>)
 8008014:	483c      	ldr	r0, [pc, #240]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8008016:	f003 f800 	bl	800b01a <strncmp>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11d      	bne.n	800805c <HAL_UART_RxCpltCallback+0x50c>
				link_number = 0;
 8008020:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <HAL_UART_RxCpltCallback+0x5c8>)
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
				connect_flag = 2;
 8008026:	4b39      	ldr	r3, [pc, #228]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 8008028:	2202      	movs	r2, #2
 800802a:	601a      	str	r2, [r3, #0]
				StateChange(connect_flag);
 800802c:	4b37      	ldr	r3, [pc, #220]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe f9db 	bl	80063ec <StateChange>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8008036:	2201      	movs	r2, #1
 8008038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800803c:	4834      	ldr	r0, [pc, #208]	; (8008110 <HAL_UART_RxCpltCallback+0x5c0>)
 800803e:	f001 f9ad 	bl	800939c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8008042:	2200      	movs	r2, #0
 8008044:	2104      	movs	r1, #4
 8008046:	4833      	ldr	r0, [pc, #204]	; (8008114 <HAL_UART_RxCpltCallback+0x5c4>)
 8008048:	f001 f9a8 	bl	800939c <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t*) "Connection on id 0\r\n",
 800804c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008050:	2214      	movs	r2, #20
 8008052:	4940      	ldr	r1, [pc, #256]	; (8008154 <HAL_UART_RxCpltCallback+0x604>)
 8008054:	4838      	ldr	r0, [pc, #224]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 8008056:	f002 fa66 	bl	800a526 <HAL_UART_Transmit>
 800805a:	e040      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT FAIL\r\n", 16) == 0 ||
 800805c:	2210      	movs	r2, #16
 800805e:	493e      	ldr	r1, [pc, #248]	; (8008158 <HAL_UART_RxCpltCallback+0x608>)
 8008060:	4829      	ldr	r0, [pc, #164]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8008062:	f002 ffda 	bl	800b01a <strncmp>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <HAL_UART_RxCpltCallback+0x52a>
			strstr(uart2_rx_buffer, "0,CLOSED\r\n") != NULL) {
 800806c:	493b      	ldr	r1, [pc, #236]	; (800815c <HAL_UART_RxCpltCallback+0x60c>)
 800806e:	4826      	ldr	r0, [pc, #152]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8008070:	f002 ffe5 	bl	800b03e <strstr>
 8008074:	4603      	mov	r3, r0
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT FAIL\r\n", 16) == 0 ||
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <HAL_UART_RxCpltCallback+0x53e>
				init_var();
 800807a:	f000 f8e5 	bl	8008248 <init_var>
				HAL_UART_Transmit(&huart1,
 800807e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008082:	221a      	movs	r2, #26
 8008084:	4936      	ldr	r1, [pc, #216]	; (8008160 <HAL_UART_RxCpltCallback+0x610>)
 8008086:	482c      	ldr	r0, [pc, #176]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 8008088:	f002 fa4d 	bl	800a526 <HAL_UART_Transmit>
 800808c:	e027      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
			} else if (strncmp(uart2_rx_buffer, "0,CLOSED\r\n", 10) == 0) {
 800808e:	220a      	movs	r2, #10
 8008090:	4932      	ldr	r1, [pc, #200]	; (800815c <HAL_UART_RxCpltCallback+0x60c>)
 8008092:	481d      	ldr	r0, [pc, #116]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 8008094:	f002 ffc1 	bl	800b01a <strncmp>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d117      	bne.n	80080ce <HAL_UART_RxCpltCallback+0x57e>
				connect_flag = 1;
 800809e:	4b1b      	ldr	r3, [pc, #108]	; (800810c <HAL_UART_RxCpltCallback+0x5bc>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
				sending_flag = 0;
 80080a4:	4b28      	ldr	r3, [pc, #160]	; (8008148 <HAL_UART_RxCpltCallback+0x5f8>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
				link_number = -1;
 80080aa:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <HAL_UART_RxCpltCallback+0x5c8>)
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	601a      	str	r2, [r3, #0]
				connection_counter = 0;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <HAL_UART_RxCpltCallback+0x5d4>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
				timer_count = 0;
 80080b8:	4b24      	ldr	r3, [pc, #144]	; (800814c <HAL_UART_RxCpltCallback+0x5fc>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,
 80080be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080c2:	221a      	movs	r2, #26
 80080c4:	4927      	ldr	r1, [pc, #156]	; (8008164 <HAL_UART_RxCpltCallback+0x614>)
 80080c6:	481c      	ldr	r0, [pc, #112]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 80080c8:	f002 fa2d 	bl	800a526 <HAL_UART_Transmit>
 80080cc:	e007      	b.n	80080de <HAL_UART_RxCpltCallback+0x58e>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 80080ce:	7ffb      	ldrb	r3, [r7, #31]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080d6:	490c      	ldr	r1, [pc, #48]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 80080d8:	4817      	ldr	r0, [pc, #92]	; (8008138 <HAL_UART_RxCpltCallback+0x5e8>)
 80080da:	f002 fa24 	bl	800a526 <HAL_UART_Transmit>
			memset(uart2_rx_buffer, 0, data_length);
 80080de:	7ffb      	ldrb	r3, [r7, #31]
 80080e0:	461a      	mov	r2, r3
 80080e2:	2100      	movs	r1, #0
 80080e4:	4808      	ldr	r0, [pc, #32]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 80080e6:	f002 ff63 	bl	800afb0 <memset>
			data_length = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	77fb      	strb	r3, [r7, #31]
			HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 80080ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080f2:	4905      	ldr	r1, [pc, #20]	; (8008108 <HAL_UART_RxCpltCallback+0x5b8>)
 80080f4:	481c      	ldr	r0, [pc, #112]	; (8008168 <HAL_UART_RxCpltCallback+0x618>)
 80080f6:	f002 faa9 	bl	800a64c <HAL_UART_Receive_DMA>
}
 80080fa:	bf00      	nop
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	0800ba10 	.word	0x0800ba10
 8008108:	20001324 	.word	0x20001324
 800810c:	200001e8 	.word	0x200001e8
 8008110:	40010800 	.word	0x40010800
 8008114:	40011400 	.word	0x40011400
 8008118:	2000000c 	.word	0x2000000c
 800811c:	0800ba20 	.word	0x0800ba20
 8008120:	0800ba24 	.word	0x0800ba24
 8008124:	200001f4 	.word	0x200001f4
 8008128:	0800ba30 	.word	0x0800ba30
 800812c:	0800b9b8 	.word	0x0800b9b8
 8008130:	0800ba44 	.word	0x0800ba44
 8008134:	0800ba60 	.word	0x0800ba60
 8008138:	200012e4 	.word	0x200012e4
 800813c:	0800ba74 	.word	0x0800ba74
 8008140:	0800ba7c 	.word	0x0800ba7c
 8008144:	0800ba88 	.word	0x0800ba88
 8008148:	200001ec 	.word	0x200001ec
 800814c:	200001f0 	.word	0x200001f0
 8008150:	0800ba94 	.word	0x0800ba94
 8008154:	0800baa0 	.word	0x0800baa0
 8008158:	0800bab8 	.word	0x0800bab8
 800815c:	0800bacc 	.word	0x0800bacc
 8008160:	0800bad8 	.word	0x0800bad8
 8008164:	0800baf4 	.word	0x0800baf4
 8008168:	20001b24 	.word	0x20001b24

0800816c <send_cmd>:

void send_cmd(uint8_t *cmd, int delay_time) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) cmd, strlen(cmd), 0xffff);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f8 f860 	bl	800023c <strlen>
 800817c:	4603      	mov	r3, r0
 800817e:	b29a      	uxth	r2, r3
 8008180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4805      	ldr	r0, [pc, #20]	; (800819c <send_cmd+0x30>)
 8008188:	f002 f9cd 	bl	800a526 <HAL_UART_Transmit>
	HAL_Delay(delay_time);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f9bc 	bl	800850c <HAL_Delay>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20001b24 	.word	0x20001b24

080081a0 <send_message>:

void send_message(uint8_t *msg) {
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b09d      	sub	sp, #116	; 0x74
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(400);
 80081a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80081ac:	f000 f9ae 	bl	800850c <HAL_Delay>
	uint8_t activate[100];
	sprintf(activate, "AT+CIPSEND=%d,%d\r\n", link_number, strlen(msg));
 80081b0:	4b15      	ldr	r3, [pc, #84]	; (8008208 <send_message+0x68>)
 80081b2:	681c      	ldr	r4, [r3, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7f8 f841 	bl	800023c <strlen>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f107 000c 	add.w	r0, r7, #12
 80081c0:	4622      	mov	r2, r4
 80081c2:	4912      	ldr	r1, [pc, #72]	; (800820c <send_message+0x6c>)
 80081c4:	f002 fefc 	bl	800afc0 <siprintf>
	send_cmd((uint8_t*) activate, 2000);
 80081c8:	f107 030c 	add.w	r3, r7, #12
 80081cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff ffcb 	bl	800816c <send_cmd>
	send_msg_uart1(msg, 500);
 80081d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f81a 	bl	8008214 <send_msg_uart1>
	printOut(msg, strlen(msg), 1, connect_flag);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7f8 f82b 	bl	800023c <strlen>
 80081e6:	4601      	mov	r1, r0
 80081e8:	4b09      	ldr	r3, [pc, #36]	; (8008210 <send_message+0x70>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2201      	movs	r2, #1
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fe f909 	bl	8006406 <printOut>
	send_cmd(msg, 1000);
 80081f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ffb7 	bl	800816c <send_cmd>
}
 80081fe:	bf00      	nop
 8008200:	3774      	adds	r7, #116	; 0x74
 8008202:	46bd      	mov	sp, r7
 8008204:	bd90      	pop	{r4, r7, pc}
 8008206:	bf00      	nop
 8008208:	2000000c 	.word	0x2000000c
 800820c:	0800bb10 	.word	0x0800bb10
 8008210:	200001e8 	.word	0x200001e8

08008214 <send_msg_uart1>:

void send_msg_uart1(uint8_t *msg, int delay_time) {
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), 0xffff);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7f8 f80c 	bl	800023c <strlen>
 8008224:	4603      	mov	r3, r0
 8008226:	b29a      	uxth	r2, r3
 8008228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4805      	ldr	r0, [pc, #20]	; (8008244 <send_msg_uart1+0x30>)
 8008230:	f002 f979 	bl	800a526 <HAL_UART_Transmit>
	HAL_Delay(delay_time);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f968 	bl	800850c <HAL_Delay>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	200012e4 	.word	0x200012e4

08008248 <init_var>:

void init_var() {
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
	connect_flag = 0;
 800824c:	4b10      	ldr	r3, [pc, #64]	; (8008290 <init_var+0x48>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
	sending_flag = 0;
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <init_var+0x4c>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
	link_number = -1;
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <init_var+0x50>)
 800825a:	f04f 32ff 	mov.w	r2, #4294967295
 800825e:	601a      	str	r2, [r3, #0]
	connection_counter = 0;
 8008260:	4b0e      	ldr	r3, [pc, #56]	; (800829c <init_var+0x54>)
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
	timer_count = 0;
 8008266:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <init_var+0x58>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
	StateChange(connect_flag);
 800826c:	4b08      	ldr	r3, [pc, #32]	; (8008290 <init_var+0x48>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	f7fe f8bb 	bl	80063ec <StateChange>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8008276:	2201      	movs	r2, #1
 8008278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800827c:	4809      	ldr	r0, [pc, #36]	; (80082a4 <init_var+0x5c>)
 800827e:	f001 f88d 	bl	800939c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008282:	2201      	movs	r2, #1
 8008284:	2104      	movs	r1, #4
 8008286:	4808      	ldr	r0, [pc, #32]	; (80082a8 <init_var+0x60>)
 8008288:	f001 f888 	bl	800939c <HAL_GPIO_WritePin>
}
 800828c:	bf00      	nop
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200001e8 	.word	0x200001e8
 8008294:	200001ec 	.word	0x200001ec
 8008298:	2000000c 	.word	0x2000000c
 800829c:	200001f4 	.word	0x200001f4
 80082a0:	200001f0 	.word	0x200001f0
 80082a4:	40010800 	.word	0x40010800
 80082a8:	40011400 	.word	0x40011400

080082ac <connect_to_wifi>:

void connect_to_wifi() {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
	init_var();
 80082b0:	f7ff ffca 	bl	8008248 <init_var>
	send_msg_uart1((uint8_t*) "start connect to wifi\r\n", 2000);
 80082b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80082b8:	4811      	ldr	r0, [pc, #68]	; (8008300 <connect_to_wifi+0x54>)
 80082ba:	f7ff ffab 	bl	8008214 <send_msg_uart1>
	send_cmd("AT+RST\r\n", 5000);
 80082be:	f241 3188 	movw	r1, #5000	; 0x1388
 80082c2:	4810      	ldr	r0, [pc, #64]	; (8008304 <connect_to_wifi+0x58>)
 80082c4:	f7ff ff52 	bl	800816c <send_cmd>
	send_cmd("AT+CWMODE=1\r\n", 2000);
 80082c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80082cc:	480e      	ldr	r0, [pc, #56]	; (8008308 <connect_to_wifi+0x5c>)
 80082ce:	f7ff ff4d 	bl	800816c <send_cmd>
	send_cmd("AT+RST\r\n", 5000);
 80082d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80082d6:	480b      	ldr	r0, [pc, #44]	; (8008304 <connect_to_wifi+0x58>)
 80082d8:	f7ff ff48 	bl	800816c <send_cmd>
	send_cmd("AT+CWJAP=\"SUSTC-WIFI-FAKE\",\"987654321\"\r\n", 10000);
 80082dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80082e0:	480a      	ldr	r0, [pc, #40]	; (800830c <connect_to_wifi+0x60>)
 80082e2:	f7ff ff43 	bl	800816c <send_cmd>
	send_cmd("AT+CIPMUX=1\r\n", 5000);
 80082e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80082ea:	4809      	ldr	r0, [pc, #36]	; (8008310 <connect_to_wifi+0x64>)
 80082ec:	f7ff ff3e 	bl	800816c <send_cmd>
	send_cmd("AT+CIPSERVER=1\r\n", 5000);
 80082f0:	f241 3188 	movw	r1, #5000	; 0x1388
 80082f4:	4807      	ldr	r0, [pc, #28]	; (8008314 <connect_to_wifi+0x68>)
 80082f6:	f7ff ff39 	bl	800816c <send_cmd>
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	0800bb24 	.word	0x0800bb24
 8008304:	0800bb3c 	.word	0x0800bb3c
 8008308:	0800bb48 	.word	0x0800bb48
 800830c:	0800bb58 	.word	0x0800bb58
 8008310:	0800bb84 	.word	0x0800bb84
 8008314:	0800bb94 	.word	0x0800bb94

08008318 <init_server>:

void init_server() {
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
	init_var();
 800831c:	f7ff ff94 	bl	8008248 <init_var>
	send_msg_uart1((uint8_t*) "start initialize server\r\n", 0);
 8008320:	2100      	movs	r1, #0
 8008322:	4811      	ldr	r0, [pc, #68]	; (8008368 <init_server+0x50>)
 8008324:	f7ff ff76 	bl	8008214 <send_msg_uart1>
	send_cmd("AT+CWMODE=3\r\n", 2000);
 8008328:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800832c:	480f      	ldr	r0, [pc, #60]	; (800836c <init_server+0x54>)
 800832e:	f7ff ff1d 	bl	800816c <send_cmd>
	send_cmd("AT+RST\r\n", 5000);
 8008332:	f241 3188 	movw	r1, #5000	; 0x1388
 8008336:	480e      	ldr	r0, [pc, #56]	; (8008370 <init_server+0x58>)
 8008338:	f7ff ff18 	bl	800816c <send_cmd>
	send_cmd("AT+CWSAP=\"SUSTC-WIFI-FAKE\",\"987654321\",1,0,4,0\r\n", 2000);
 800833c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008340:	480c      	ldr	r0, [pc, #48]	; (8008374 <init_server+0x5c>)
 8008342:	f7ff ff13 	bl	800816c <send_cmd>
	send_cmd("AT+CIPMUX=1\r\n", 2000);
 8008346:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800834a:	480b      	ldr	r0, [pc, #44]	; (8008378 <init_server+0x60>)
 800834c:	f7ff ff0e 	bl	800816c <send_cmd>
	send_cmd("AT+CIPSERVER=1,8089\r\n", 2000);
 8008350:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008354:	4809      	ldr	r0, [pc, #36]	; (800837c <init_server+0x64>)
 8008356:	f7ff ff09 	bl	800816c <send_cmd>
	send_msg_uart1((uint8_t*) "end initialize server\r\n", 0);
 800835a:	2100      	movs	r1, #0
 800835c:	4808      	ldr	r0, [pc, #32]	; (8008380 <init_server+0x68>)
 800835e:	f7ff ff59 	bl	8008214 <send_msg_uart1>
}
 8008362:	bf00      	nop
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	0800bba8 	.word	0x0800bba8
 800836c:	0800b8e8 	.word	0x0800b8e8
 8008370:	0800bb3c 	.word	0x0800bb3c
 8008374:	0800bbc4 	.word	0x0800bbc4
 8008378:	0800bb84 	.word	0x0800bb84
 800837c:	0800bbf8 	.word	0x0800bbf8
 8008380:	0800bc10 	.word	0x0800bc10

08008384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800838c:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <_sbrk+0x5c>)
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <_sbrk+0x60>)
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008398:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <_sbrk+0x64>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <_sbrk+0x64>)
 80083a2:	4a12      	ldr	r2, [pc, #72]	; (80083ec <_sbrk+0x68>)
 80083a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <_sbrk+0x64>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d207      	bcs.n	80083c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083b4:	f002 fdd2 	bl	800af5c <__errno>
 80083b8:	4603      	mov	r3, r0
 80083ba:	220c      	movs	r2, #12
 80083bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083be:	f04f 33ff 	mov.w	r3, #4294967295
 80083c2:	e009      	b.n	80083d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083c4:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <_sbrk+0x64>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <_sbrk+0x64>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	4a05      	ldr	r2, [pc, #20]	; (80083e8 <_sbrk+0x64>)
 80083d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	2000c000 	.word	0x2000c000
 80083e4:	00000400 	.word	0x00000400
 80083e8:	200001f8 	.word	0x200001f8
 80083ec:	20001b78 	.word	0x20001b78

080083f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083f4:	bf00      	nop
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80083fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80083fe:	e003      	b.n	8008408 <LoopCopyDataInit>

08008400 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008402:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008404:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008406:	3104      	adds	r1, #4

08008408 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008408:	480a      	ldr	r0, [pc, #40]	; (8008434 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800840a:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800840c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800840e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008410:	d3f6      	bcc.n	8008400 <CopyDataInit>
  ldr r2, =_sbss
 8008412:	4a0a      	ldr	r2, [pc, #40]	; (800843c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008414:	e002      	b.n	800841c <LoopFillZerobss>

08008416 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008416:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008418:	f842 3b04 	str.w	r3, [r2], #4

0800841c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800841c:	4b08      	ldr	r3, [pc, #32]	; (8008440 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800841e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008420:	d3f9      	bcc.n	8008416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008422:	f7ff ffe5 	bl	80083f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008426:	f002 fd9f 	bl	800af68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800842a:	f7fe ff71 	bl	8007310 <main>
  bx lr
 800842e:	4770      	bx	lr
  ldr r3, =_sidata
 8008430:	0800d44c 	.word	0x0800d44c
  ldr r0, =_sdata
 8008434:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008438:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 800843c:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8008440:	20001b78 	.word	0x20001b78

08008444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008444:	e7fe      	b.n	8008444 <ADC1_2_IRQHandler>
	...

08008448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800844c:	4b08      	ldr	r3, [pc, #32]	; (8008470 <HAL_Init+0x28>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a07      	ldr	r2, [pc, #28]	; (8008470 <HAL_Init+0x28>)
 8008452:	f043 0310 	orr.w	r3, r3, #16
 8008456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008458:	2003      	movs	r0, #3
 800845a:	f000 f947 	bl	80086ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800845e:	2000      	movs	r0, #0
 8008460:	f000 f808 	bl	8008474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008464:	f7ff f932 	bl	80076cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40022000 	.word	0x40022000

08008474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800847c:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <HAL_InitTick+0x54>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b12      	ldr	r3, [pc, #72]	; (80084cc <HAL_InitTick+0x58>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4619      	mov	r1, r3
 8008486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800848a:	fbb3 f3f1 	udiv	r3, r3, r1
 800848e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f95f 	bl	8008756 <HAL_SYSTICK_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e00e      	b.n	80084c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b0f      	cmp	r3, #15
 80084a6:	d80a      	bhi.n	80084be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084a8:	2200      	movs	r2, #0
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	f000 f927 	bl	8008702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084b4:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <HAL_InitTick+0x5c>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e000      	b.n	80084c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000010 	.word	0x20000010
 80084cc:	20000018 	.word	0x20000018
 80084d0:	20000014 	.word	0x20000014

080084d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084d8:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <HAL_IncTick+0x1c>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <HAL_IncTick+0x20>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4413      	add	r3, r2
 80084e4:	4a03      	ldr	r2, [pc, #12]	; (80084f4 <HAL_IncTick+0x20>)
 80084e6:	6013      	str	r3, [r2, #0]
}
 80084e8:	bf00      	nop
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr
 80084f0:	20000018 	.word	0x20000018
 80084f4:	20001b64 	.word	0x20001b64

080084f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
  return uwTick;
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <HAL_GetTick+0x10>)
 80084fe:	681b      	ldr	r3, [r3, #0]
}
 8008500:	4618      	mov	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr
 8008508:	20001b64 	.word	0x20001b64

0800850c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008514:	f7ff fff0 	bl	80084f8 <HAL_GetTick>
 8008518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d005      	beq.n	8008532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008526:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <HAL_Delay+0x44>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008532:	bf00      	nop
 8008534:	f7ff ffe0 	bl	80084f8 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d8f7      	bhi.n	8008534 <HAL_Delay+0x28>
  {
  }
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000018 	.word	0x20000018

08008554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <__NVIC_SetPriorityGrouping+0x44>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008570:	4013      	ands	r3, r2
 8008572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800857c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008586:	4a04      	ldr	r2, [pc, #16]	; (8008598 <__NVIC_SetPriorityGrouping+0x44>)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	60d3      	str	r3, [r2, #12]
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	e000ed00 	.word	0xe000ed00

0800859c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <__NVIC_GetPriorityGrouping+0x18>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	0a1b      	lsrs	r3, r3, #8
 80085a6:	f003 0307 	and.w	r3, r3, #7
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	e000ed00 	.word	0xe000ed00

080085b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	db0b      	blt.n	80085e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	f003 021f 	and.w	r2, r3, #31
 80085d0:	4906      	ldr	r1, [pc, #24]	; (80085ec <__NVIC_EnableIRQ+0x34>)
 80085d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	2001      	movs	r0, #1
 80085da:	fa00 f202 	lsl.w	r2, r0, r2
 80085de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085e2:	bf00      	nop
 80085e4:	370c      	adds	r7, #12
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr
 80085ec:	e000e100 	.word	0xe000e100

080085f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008600:	2b00      	cmp	r3, #0
 8008602:	db0a      	blt.n	800861a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	490c      	ldr	r1, [pc, #48]	; (800863c <__NVIC_SetPriority+0x4c>)
 800860a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860e:	0112      	lsls	r2, r2, #4
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	440b      	add	r3, r1
 8008614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008618:	e00a      	b.n	8008630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	b2da      	uxtb	r2, r3
 800861e:	4908      	ldr	r1, [pc, #32]	; (8008640 <__NVIC_SetPriority+0x50>)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	3b04      	subs	r3, #4
 8008628:	0112      	lsls	r2, r2, #4
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	440b      	add	r3, r1
 800862e:	761a      	strb	r2, [r3, #24]
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	e000e100 	.word	0xe000e100
 8008640:	e000ed00 	.word	0xe000ed00

08008644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008644:	b480      	push	{r7}
 8008646:	b089      	sub	sp, #36	; 0x24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f1c3 0307 	rsb	r3, r3, #7
 800865e:	2b04      	cmp	r3, #4
 8008660:	bf28      	it	cs
 8008662:	2304      	movcs	r3, #4
 8008664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3304      	adds	r3, #4
 800866a:	2b06      	cmp	r3, #6
 800866c:	d902      	bls.n	8008674 <NVIC_EncodePriority+0x30>
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	3b03      	subs	r3, #3
 8008672:	e000      	b.n	8008676 <NVIC_EncodePriority+0x32>
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008678:	f04f 32ff 	mov.w	r2, #4294967295
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	43da      	mvns	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	401a      	ands	r2, r3
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800868c:	f04f 31ff 	mov.w	r1, #4294967295
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	fa01 f303 	lsl.w	r3, r1, r3
 8008696:	43d9      	mvns	r1, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800869c:	4313      	orrs	r3, r2
         );
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3724      	adds	r7, #36	; 0x24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b8:	d301      	bcc.n	80086be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086ba:	2301      	movs	r3, #1
 80086bc:	e00f      	b.n	80086de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086be:	4a0a      	ldr	r2, [pc, #40]	; (80086e8 <SysTick_Config+0x40>)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086c6:	210f      	movs	r1, #15
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	f7ff ff90 	bl	80085f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086d0:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <SysTick_Config+0x40>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086d6:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <SysTick_Config+0x40>)
 80086d8:	2207      	movs	r2, #7
 80086da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	e000e010 	.word	0xe000e010

080086ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff ff2d 	bl	8008554 <__NVIC_SetPriorityGrouping>
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	4603      	mov	r3, r0
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008714:	f7ff ff42 	bl	800859c <__NVIC_GetPriorityGrouping>
 8008718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	6978      	ldr	r0, [r7, #20]
 8008720:	f7ff ff90 	bl	8008644 <NVIC_EncodePriority>
 8008724:	4602      	mov	r2, r0
 8008726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff ff5f 	bl	80085f0 <__NVIC_SetPriority>
}
 8008732:	bf00      	nop
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	4603      	mov	r3, r0
 8008742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff ff35 	bl	80085b8 <__NVIC_EnableIRQ>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff ffa2 	bl	80086a8 <SysTick_Config>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e059      	b.n	800883a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <HAL_DMA_Init+0xd4>)
 800878e:	429a      	cmp	r2, r3
 8008790:	d80f      	bhi.n	80087b2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <HAL_DMA_Init+0xd8>)
 800879a:	4413      	add	r3, r2
 800879c:	4a2b      	ldr	r2, [pc, #172]	; (800884c <HAL_DMA_Init+0xdc>)
 800879e:	fba2 2303 	umull	r2, r3, r2, r3
 80087a2:	091b      	lsrs	r3, r3, #4
 80087a4:	009a      	lsls	r2, r3, #2
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a28      	ldr	r2, [pc, #160]	; (8008850 <HAL_DMA_Init+0xe0>)
 80087ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80087b0:	e00e      	b.n	80087d0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b26      	ldr	r3, [pc, #152]	; (8008854 <HAL_DMA_Init+0xe4>)
 80087ba:	4413      	add	r3, r2
 80087bc:	4a23      	ldr	r2, [pc, #140]	; (800884c <HAL_DMA_Init+0xdc>)
 80087be:	fba2 2303 	umull	r2, r3, r2, r3
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	009a      	lsls	r2, r3, #2
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a22      	ldr	r2, [pc, #136]	; (8008858 <HAL_DMA_Init+0xe8>)
 80087ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80087e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80087ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80087f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800880c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	40020407 	.word	0x40020407
 8008848:	bffdfff8 	.word	0xbffdfff8
 800884c:	cccccccd 	.word	0xcccccccd
 8008850:	40020000 	.word	0x40020000
 8008854:	bffdfbf8 	.word	0xbffdfbf8
 8008858:	40020400 	.word	0x40020400

0800885c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_DMA_Start_IT+0x20>
 8008878:	2302      	movs	r3, #2
 800887a:	e04a      	b.n	8008912 <HAL_DMA_Start_IT+0xb6>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800888a:	2b01      	cmp	r3, #1
 800888c:	d13a      	bne.n	8008904 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 fbb0 	bl	8009018 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 020e 	orr.w	r2, r2, #14
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e00f      	b.n	80088f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0204 	bic.w	r2, r2, #4
 80088e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f042 020a 	orr.w	r2, r2, #10
 80088f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 0201 	orr.w	r2, r2, #1
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	e005      	b.n	8008910 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800890c:	2302      	movs	r3, #2
 800890e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800892c:	2b02      	cmp	r3, #2
 800892e:	d008      	beq.n	8008942 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2204      	movs	r2, #4
 8008934:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e020      	b.n	8008984 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 020e 	bic.w	r2, r2, #14
 8008950:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0201 	bic.w	r2, r2, #1
 8008960:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800896a:	2101      	movs	r1, #1
 800896c:	fa01 f202 	lsl.w	r2, r1, r2
 8008970:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	bc80      	pop	{r7}
 800898c:	4770      	bx	lr
	...

08008990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d005      	beq.n	80089b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2204      	movs	r2, #4
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]
 80089b0:	e0d6      	b.n	8008b60 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 020e 	bic.w	r2, r2, #14
 80089c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 0201 	bic.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	4b64      	ldr	r3, [pc, #400]	; (8008b6c <HAL_DMA_Abort_IT+0x1dc>)
 80089da:	429a      	cmp	r2, r3
 80089dc:	d958      	bls.n	8008a90 <HAL_DMA_Abort_IT+0x100>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a63      	ldr	r2, [pc, #396]	; (8008b70 <HAL_DMA_Abort_IT+0x1e0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d04f      	beq.n	8008a88 <HAL_DMA_Abort_IT+0xf8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a61      	ldr	r2, [pc, #388]	; (8008b74 <HAL_DMA_Abort_IT+0x1e4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d048      	beq.n	8008a84 <HAL_DMA_Abort_IT+0xf4>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a60      	ldr	r2, [pc, #384]	; (8008b78 <HAL_DMA_Abort_IT+0x1e8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d040      	beq.n	8008a7e <HAL_DMA_Abort_IT+0xee>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a5e      	ldr	r2, [pc, #376]	; (8008b7c <HAL_DMA_Abort_IT+0x1ec>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d038      	beq.n	8008a78 <HAL_DMA_Abort_IT+0xe8>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a5d      	ldr	r2, [pc, #372]	; (8008b80 <HAL_DMA_Abort_IT+0x1f0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d030      	beq.n	8008a72 <HAL_DMA_Abort_IT+0xe2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a5b      	ldr	r2, [pc, #364]	; (8008b84 <HAL_DMA_Abort_IT+0x1f4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d028      	beq.n	8008a6c <HAL_DMA_Abort_IT+0xdc>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a53      	ldr	r2, [pc, #332]	; (8008b6c <HAL_DMA_Abort_IT+0x1dc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d020      	beq.n	8008a66 <HAL_DMA_Abort_IT+0xd6>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a57      	ldr	r2, [pc, #348]	; (8008b88 <HAL_DMA_Abort_IT+0x1f8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d019      	beq.n	8008a62 <HAL_DMA_Abort_IT+0xd2>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a56      	ldr	r2, [pc, #344]	; (8008b8c <HAL_DMA_Abort_IT+0x1fc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d012      	beq.n	8008a5e <HAL_DMA_Abort_IT+0xce>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a54      	ldr	r2, [pc, #336]	; (8008b90 <HAL_DMA_Abort_IT+0x200>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00a      	beq.n	8008a58 <HAL_DMA_Abort_IT+0xc8>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a53      	ldr	r2, [pc, #332]	; (8008b94 <HAL_DMA_Abort_IT+0x204>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <HAL_DMA_Abort_IT+0xc2>
 8008a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a50:	e01b      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a56:	e018      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a5c:	e015      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a5e:	2310      	movs	r3, #16
 8008a60:	e013      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e011      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a6a:	e00e      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a70:	e00b      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a76:	e008      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a7c:	e005      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a82:	e002      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a84:	2310      	movs	r3, #16
 8008a86:	e000      	b.n	8008a8a <HAL_DMA_Abort_IT+0xfa>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4a43      	ldr	r2, [pc, #268]	; (8008b98 <HAL_DMA_Abort_IT+0x208>)
 8008a8c:	6053      	str	r3, [r2, #4]
 8008a8e:	e057      	b.n	8008b40 <HAL_DMA_Abort_IT+0x1b0>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a36      	ldr	r2, [pc, #216]	; (8008b70 <HAL_DMA_Abort_IT+0x1e0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d04f      	beq.n	8008b3a <HAL_DMA_Abort_IT+0x1aa>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a35      	ldr	r2, [pc, #212]	; (8008b74 <HAL_DMA_Abort_IT+0x1e4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d048      	beq.n	8008b36 <HAL_DMA_Abort_IT+0x1a6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a33      	ldr	r2, [pc, #204]	; (8008b78 <HAL_DMA_Abort_IT+0x1e8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d040      	beq.n	8008b30 <HAL_DMA_Abort_IT+0x1a0>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a32      	ldr	r2, [pc, #200]	; (8008b7c <HAL_DMA_Abort_IT+0x1ec>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d038      	beq.n	8008b2a <HAL_DMA_Abort_IT+0x19a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a30      	ldr	r2, [pc, #192]	; (8008b80 <HAL_DMA_Abort_IT+0x1f0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d030      	beq.n	8008b24 <HAL_DMA_Abort_IT+0x194>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a2f      	ldr	r2, [pc, #188]	; (8008b84 <HAL_DMA_Abort_IT+0x1f4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d028      	beq.n	8008b1e <HAL_DMA_Abort_IT+0x18e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <HAL_DMA_Abort_IT+0x1dc>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d020      	beq.n	8008b18 <HAL_DMA_Abort_IT+0x188>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a2b      	ldr	r2, [pc, #172]	; (8008b88 <HAL_DMA_Abort_IT+0x1f8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d019      	beq.n	8008b14 <HAL_DMA_Abort_IT+0x184>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a29      	ldr	r2, [pc, #164]	; (8008b8c <HAL_DMA_Abort_IT+0x1fc>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d012      	beq.n	8008b10 <HAL_DMA_Abort_IT+0x180>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a28      	ldr	r2, [pc, #160]	; (8008b90 <HAL_DMA_Abort_IT+0x200>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00a      	beq.n	8008b0a <HAL_DMA_Abort_IT+0x17a>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a26      	ldr	r2, [pc, #152]	; (8008b94 <HAL_DMA_Abort_IT+0x204>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d102      	bne.n	8008b04 <HAL_DMA_Abort_IT+0x174>
 8008afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b02:	e01b      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b08:	e018      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b0e:	e015      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b10:	2310      	movs	r3, #16
 8008b12:	e013      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e011      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b1c:	e00e      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b22:	e00b      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b28:	e008      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b2e:	e005      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b34:	e002      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b36:	2310      	movs	r3, #16
 8008b38:	e000      	b.n	8008b3c <HAL_DMA_Abort_IT+0x1ac>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4a17      	ldr	r2, [pc, #92]	; (8008b9c <HAL_DMA_Abort_IT+0x20c>)
 8008b3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	4798      	blx	r3
    } 
  }
  return status;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40020080 	.word	0x40020080
 8008b70:	40020008 	.word	0x40020008
 8008b74:	4002001c 	.word	0x4002001c
 8008b78:	40020030 	.word	0x40020030
 8008b7c:	40020044 	.word	0x40020044
 8008b80:	40020058 	.word	0x40020058
 8008b84:	4002006c 	.word	0x4002006c
 8008b88:	40020408 	.word	0x40020408
 8008b8c:	4002041c 	.word	0x4002041c
 8008b90:	40020430 	.word	0x40020430
 8008b94:	40020444 	.word	0x40020444
 8008b98:	40020400 	.word	0x40020400
 8008b9c:	40020000 	.word	0x40020000

08008ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2204      	movs	r2, #4
 8008bbe:	409a      	lsls	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80d6 	beq.w	8008d76 <HAL_DMA_IRQHandler+0x1d6>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 80d0 	beq.w	8008d76 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d107      	bne.n	8008bf4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0204 	bic.w	r2, r2, #4
 8008bf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4b9b      	ldr	r3, [pc, #620]	; (8008e68 <HAL_DMA_IRQHandler+0x2c8>)
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d958      	bls.n	8008cb2 <HAL_DMA_IRQHandler+0x112>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a99      	ldr	r2, [pc, #612]	; (8008e6c <HAL_DMA_IRQHandler+0x2cc>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d04f      	beq.n	8008caa <HAL_DMA_IRQHandler+0x10a>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a98      	ldr	r2, [pc, #608]	; (8008e70 <HAL_DMA_IRQHandler+0x2d0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d048      	beq.n	8008ca6 <HAL_DMA_IRQHandler+0x106>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a96      	ldr	r2, [pc, #600]	; (8008e74 <HAL_DMA_IRQHandler+0x2d4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d040      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0x100>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a95      	ldr	r2, [pc, #596]	; (8008e78 <HAL_DMA_IRQHandler+0x2d8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d038      	beq.n	8008c9a <HAL_DMA_IRQHandler+0xfa>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a93      	ldr	r2, [pc, #588]	; (8008e7c <HAL_DMA_IRQHandler+0x2dc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d030      	beq.n	8008c94 <HAL_DMA_IRQHandler+0xf4>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a92      	ldr	r2, [pc, #584]	; (8008e80 <HAL_DMA_IRQHandler+0x2e0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d028      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xee>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a89      	ldr	r2, [pc, #548]	; (8008e68 <HAL_DMA_IRQHandler+0x2c8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d020      	beq.n	8008c88 <HAL_DMA_IRQHandler+0xe8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a8e      	ldr	r2, [pc, #568]	; (8008e84 <HAL_DMA_IRQHandler+0x2e4>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d019      	beq.n	8008c84 <HAL_DMA_IRQHandler+0xe4>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a8c      	ldr	r2, [pc, #560]	; (8008e88 <HAL_DMA_IRQHandler+0x2e8>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d012      	beq.n	8008c80 <HAL_DMA_IRQHandler+0xe0>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a8b      	ldr	r2, [pc, #556]	; (8008e8c <HAL_DMA_IRQHandler+0x2ec>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00a      	beq.n	8008c7a <HAL_DMA_IRQHandler+0xda>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a89      	ldr	r2, [pc, #548]	; (8008e90 <HAL_DMA_IRQHandler+0x2f0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d102      	bne.n	8008c74 <HAL_DMA_IRQHandler+0xd4>
 8008c6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c72:	e01b      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c78:	e018      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	e015      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	e013      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c84:	2304      	movs	r3, #4
 8008c86:	e011      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c8c:	e00e      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c92:	e00b      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c98:	e008      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c9e:	e005      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca4:	e002      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008ca6:	2340      	movs	r3, #64	; 0x40
 8008ca8:	e000      	b.n	8008cac <HAL_DMA_IRQHandler+0x10c>
 8008caa:	2304      	movs	r3, #4
 8008cac:	4a79      	ldr	r2, [pc, #484]	; (8008e94 <HAL_DMA_IRQHandler+0x2f4>)
 8008cae:	6053      	str	r3, [r2, #4]
 8008cb0:	e057      	b.n	8008d62 <HAL_DMA_IRQHandler+0x1c2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a6d      	ldr	r2, [pc, #436]	; (8008e6c <HAL_DMA_IRQHandler+0x2cc>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d04f      	beq.n	8008d5c <HAL_DMA_IRQHandler+0x1bc>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a6b      	ldr	r2, [pc, #428]	; (8008e70 <HAL_DMA_IRQHandler+0x2d0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d048      	beq.n	8008d58 <HAL_DMA_IRQHandler+0x1b8>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a6a      	ldr	r2, [pc, #424]	; (8008e74 <HAL_DMA_IRQHandler+0x2d4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d040      	beq.n	8008d52 <HAL_DMA_IRQHandler+0x1b2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a68      	ldr	r2, [pc, #416]	; (8008e78 <HAL_DMA_IRQHandler+0x2d8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d038      	beq.n	8008d4c <HAL_DMA_IRQHandler+0x1ac>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a67      	ldr	r2, [pc, #412]	; (8008e7c <HAL_DMA_IRQHandler+0x2dc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d030      	beq.n	8008d46 <HAL_DMA_IRQHandler+0x1a6>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a65      	ldr	r2, [pc, #404]	; (8008e80 <HAL_DMA_IRQHandler+0x2e0>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d028      	beq.n	8008d40 <HAL_DMA_IRQHandler+0x1a0>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a5d      	ldr	r2, [pc, #372]	; (8008e68 <HAL_DMA_IRQHandler+0x2c8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d020      	beq.n	8008d3a <HAL_DMA_IRQHandler+0x19a>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a61      	ldr	r2, [pc, #388]	; (8008e84 <HAL_DMA_IRQHandler+0x2e4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d019      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x196>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a60      	ldr	r2, [pc, #384]	; (8008e88 <HAL_DMA_IRQHandler+0x2e8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d012      	beq.n	8008d32 <HAL_DMA_IRQHandler+0x192>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a5e      	ldr	r2, [pc, #376]	; (8008e8c <HAL_DMA_IRQHandler+0x2ec>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00a      	beq.n	8008d2c <HAL_DMA_IRQHandler+0x18c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a5d      	ldr	r2, [pc, #372]	; (8008e90 <HAL_DMA_IRQHandler+0x2f0>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d102      	bne.n	8008d26 <HAL_DMA_IRQHandler+0x186>
 8008d20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d24:	e01b      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d2a:	e018      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d30:	e015      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	e013      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d36:	2304      	movs	r3, #4
 8008d38:	e011      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d3e:	e00e      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d44:	e00b      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d4a:	e008      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d50:	e005      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d56:	e002      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	e000      	b.n	8008d5e <HAL_DMA_IRQHandler+0x1be>
 8008d5c:	2304      	movs	r3, #4
 8008d5e:	4a4e      	ldr	r2, [pc, #312]	; (8008e98 <HAL_DMA_IRQHandler+0x2f8>)
 8008d60:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 8136 	beq.w	8008fd8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008d74:	e130      	b.n	8008fd8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	409a      	lsls	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4013      	ands	r3, r2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80f8 	beq.w	8008f78 <HAL_DMA_IRQHandler+0x3d8>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80f2 	beq.w	8008f78 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10b      	bne.n	8008dba <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 020a 	bic.w	r2, r2, #10
 8008db0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4b29      	ldr	r3, [pc, #164]	; (8008e68 <HAL_DMA_IRQHandler+0x2c8>)
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d973      	bls.n	8008eae <HAL_DMA_IRQHandler+0x30e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a28      	ldr	r2, [pc, #160]	; (8008e6c <HAL_DMA_IRQHandler+0x2cc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d06a      	beq.n	8008ea6 <HAL_DMA_IRQHandler+0x306>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <HAL_DMA_IRQHandler+0x2d0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d063      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0x302>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a25      	ldr	r2, [pc, #148]	; (8008e74 <HAL_DMA_IRQHandler+0x2d4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d05b      	beq.n	8008e9c <HAL_DMA_IRQHandler+0x2fc>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a23      	ldr	r2, [pc, #140]	; (8008e78 <HAL_DMA_IRQHandler+0x2d8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d038      	beq.n	8008e60 <HAL_DMA_IRQHandler+0x2c0>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <HAL_DMA_IRQHandler+0x2dc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d030      	beq.n	8008e5a <HAL_DMA_IRQHandler+0x2ba>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a20      	ldr	r2, [pc, #128]	; (8008e80 <HAL_DMA_IRQHandler+0x2e0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d028      	beq.n	8008e54 <HAL_DMA_IRQHandler+0x2b4>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <HAL_DMA_IRQHandler+0x2c8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d020      	beq.n	8008e4e <HAL_DMA_IRQHandler+0x2ae>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a1c      	ldr	r2, [pc, #112]	; (8008e84 <HAL_DMA_IRQHandler+0x2e4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d019      	beq.n	8008e4a <HAL_DMA_IRQHandler+0x2aa>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <HAL_DMA_IRQHandler+0x2e8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d012      	beq.n	8008e46 <HAL_DMA_IRQHandler+0x2a6>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a19      	ldr	r2, [pc, #100]	; (8008e8c <HAL_DMA_IRQHandler+0x2ec>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00a      	beq.n	8008e40 <HAL_DMA_IRQHandler+0x2a0>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a18      	ldr	r2, [pc, #96]	; (8008e90 <HAL_DMA_IRQHandler+0x2f0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d102      	bne.n	8008e3a <HAL_DMA_IRQHandler+0x29a>
 8008e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e38:	e036      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e3e:	e033      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e44:	e030      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e46:	2320      	movs	r3, #32
 8008e48:	e02e      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e02c      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e52:	e029      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e58:	e026      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e5e:	e023      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e64:	e020      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008e66:	bf00      	nop
 8008e68:	40020080 	.word	0x40020080
 8008e6c:	40020008 	.word	0x40020008
 8008e70:	4002001c 	.word	0x4002001c
 8008e74:	40020030 	.word	0x40020030
 8008e78:	40020044 	.word	0x40020044
 8008e7c:	40020058 	.word	0x40020058
 8008e80:	4002006c 	.word	0x4002006c
 8008e84:	40020408 	.word	0x40020408
 8008e88:	4002041c 	.word	0x4002041c
 8008e8c:	40020430 	.word	0x40020430
 8008e90:	40020444 	.word	0x40020444
 8008e94:	40020400 	.word	0x40020400
 8008e98:	40020000 	.word	0x40020000
 8008e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea0:	e002      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008ea2:	2320      	movs	r3, #32
 8008ea4:	e000      	b.n	8008ea8 <HAL_DMA_IRQHandler+0x308>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	4a4e      	ldr	r2, [pc, #312]	; (8008fe4 <HAL_DMA_IRQHandler+0x444>)
 8008eaa:	6053      	str	r3, [r2, #4]
 8008eac:	e057      	b.n	8008f5e <HAL_DMA_IRQHandler+0x3be>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a4d      	ldr	r2, [pc, #308]	; (8008fe8 <HAL_DMA_IRQHandler+0x448>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d04f      	beq.n	8008f58 <HAL_DMA_IRQHandler+0x3b8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a4b      	ldr	r2, [pc, #300]	; (8008fec <HAL_DMA_IRQHandler+0x44c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d048      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x3b4>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a4a      	ldr	r2, [pc, #296]	; (8008ff0 <HAL_DMA_IRQHandler+0x450>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d040      	beq.n	8008f4e <HAL_DMA_IRQHandler+0x3ae>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a48      	ldr	r2, [pc, #288]	; (8008ff4 <HAL_DMA_IRQHandler+0x454>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d038      	beq.n	8008f48 <HAL_DMA_IRQHandler+0x3a8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a47      	ldr	r2, [pc, #284]	; (8008ff8 <HAL_DMA_IRQHandler+0x458>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d030      	beq.n	8008f42 <HAL_DMA_IRQHandler+0x3a2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a45      	ldr	r2, [pc, #276]	; (8008ffc <HAL_DMA_IRQHandler+0x45c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d028      	beq.n	8008f3c <HAL_DMA_IRQHandler+0x39c>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a44      	ldr	r2, [pc, #272]	; (8009000 <HAL_DMA_IRQHandler+0x460>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d020      	beq.n	8008f36 <HAL_DMA_IRQHandler+0x396>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a42      	ldr	r2, [pc, #264]	; (8009004 <HAL_DMA_IRQHandler+0x464>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d019      	beq.n	8008f32 <HAL_DMA_IRQHandler+0x392>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a41      	ldr	r2, [pc, #260]	; (8009008 <HAL_DMA_IRQHandler+0x468>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d012      	beq.n	8008f2e <HAL_DMA_IRQHandler+0x38e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a3f      	ldr	r2, [pc, #252]	; (800900c <HAL_DMA_IRQHandler+0x46c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d00a      	beq.n	8008f28 <HAL_DMA_IRQHandler+0x388>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a3e      	ldr	r2, [pc, #248]	; (8009010 <HAL_DMA_IRQHandler+0x470>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d102      	bne.n	8008f22 <HAL_DMA_IRQHandler+0x382>
 8008f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f20:	e01b      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f26:	e018      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f2c:	e015      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f2e:	2320      	movs	r3, #32
 8008f30:	e013      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e011      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f3a:	e00e      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f40:	e00b      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f46:	e008      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f4c:	e005      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f52:	e002      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f54:	2320      	movs	r3, #32
 8008f56:	e000      	b.n	8008f5a <HAL_DMA_IRQHandler+0x3ba>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	4a2e      	ldr	r2, [pc, #184]	; (8009014 <HAL_DMA_IRQHandler+0x474>)
 8008f5c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d034      	beq.n	8008fd8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008f76:	e02f      	b.n	8008fd8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	409a      	lsls	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4013      	ands	r3, r2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d028      	beq.n	8008fda <HAL_DMA_IRQHandler+0x43a>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f003 0308 	and.w	r3, r3, #8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d023      	beq.n	8008fda <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 020e 	bic.w	r2, r2, #14
 8008fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	2101      	movs	r1, #1
 8008fac:	fa01 f202 	lsl.w	r2, r1, r2
 8008fb0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
    }
  }
  return;
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
}
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40020400 	.word	0x40020400
 8008fe8:	40020008 	.word	0x40020008
 8008fec:	4002001c 	.word	0x4002001c
 8008ff0:	40020030 	.word	0x40020030
 8008ff4:	40020044 	.word	0x40020044
 8008ff8:	40020058 	.word	0x40020058
 8008ffc:	4002006c 	.word	0x4002006c
 8009000:	40020080 	.word	0x40020080
 8009004:	40020408 	.word	0x40020408
 8009008:	4002041c 	.word	0x4002041c
 800900c:	40020430 	.word	0x40020430
 8009010:	40020444 	.word	0x40020444
 8009014:	40020000 	.word	0x40020000

08009018 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902e:	2101      	movs	r1, #1
 8009030:	fa01 f202 	lsl.w	r2, r1, r2
 8009034:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2b10      	cmp	r3, #16
 8009044:	d108      	bne.n	8009058 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009056:	e007      	b.n	8009068 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	60da      	str	r2, [r3, #12]
}
 8009068:	bf00      	nop
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr
	...

08009074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009074:	b480      	push	{r7}
 8009076:	b08b      	sub	sp, #44	; 0x2c
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800907e:	2300      	movs	r3, #0
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009082:	2300      	movs	r3, #0
 8009084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009086:	e179      	b.n	800937c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009088:	2201      	movs	r2, #1
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	4013      	ands	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	f040 8168 	bne.w	8009376 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	4aa0      	ldr	r2, [pc, #640]	; (800932c <HAL_GPIO_Init+0x2b8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d05e      	beq.n	800916e <HAL_GPIO_Init+0xfa>
 80090b0:	4a9e      	ldr	r2, [pc, #632]	; (800932c <HAL_GPIO_Init+0x2b8>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d875      	bhi.n	80091a2 <HAL_GPIO_Init+0x12e>
 80090b6:	4a9e      	ldr	r2, [pc, #632]	; (8009330 <HAL_GPIO_Init+0x2bc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d058      	beq.n	800916e <HAL_GPIO_Init+0xfa>
 80090bc:	4a9c      	ldr	r2, [pc, #624]	; (8009330 <HAL_GPIO_Init+0x2bc>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d86f      	bhi.n	80091a2 <HAL_GPIO_Init+0x12e>
 80090c2:	4a9c      	ldr	r2, [pc, #624]	; (8009334 <HAL_GPIO_Init+0x2c0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d052      	beq.n	800916e <HAL_GPIO_Init+0xfa>
 80090c8:	4a9a      	ldr	r2, [pc, #616]	; (8009334 <HAL_GPIO_Init+0x2c0>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d869      	bhi.n	80091a2 <HAL_GPIO_Init+0x12e>
 80090ce:	4a9a      	ldr	r2, [pc, #616]	; (8009338 <HAL_GPIO_Init+0x2c4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d04c      	beq.n	800916e <HAL_GPIO_Init+0xfa>
 80090d4:	4a98      	ldr	r2, [pc, #608]	; (8009338 <HAL_GPIO_Init+0x2c4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d863      	bhi.n	80091a2 <HAL_GPIO_Init+0x12e>
 80090da:	4a98      	ldr	r2, [pc, #608]	; (800933c <HAL_GPIO_Init+0x2c8>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d046      	beq.n	800916e <HAL_GPIO_Init+0xfa>
 80090e0:	4a96      	ldr	r2, [pc, #600]	; (800933c <HAL_GPIO_Init+0x2c8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d85d      	bhi.n	80091a2 <HAL_GPIO_Init+0x12e>
 80090e6:	2b12      	cmp	r3, #18
 80090e8:	d82a      	bhi.n	8009140 <HAL_GPIO_Init+0xcc>
 80090ea:	2b12      	cmp	r3, #18
 80090ec:	d859      	bhi.n	80091a2 <HAL_GPIO_Init+0x12e>
 80090ee:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <HAL_GPIO_Init+0x80>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	0800916f 	.word	0x0800916f
 80090f8:	08009149 	.word	0x08009149
 80090fc:	0800915b 	.word	0x0800915b
 8009100:	0800919d 	.word	0x0800919d
 8009104:	080091a3 	.word	0x080091a3
 8009108:	080091a3 	.word	0x080091a3
 800910c:	080091a3 	.word	0x080091a3
 8009110:	080091a3 	.word	0x080091a3
 8009114:	080091a3 	.word	0x080091a3
 8009118:	080091a3 	.word	0x080091a3
 800911c:	080091a3 	.word	0x080091a3
 8009120:	080091a3 	.word	0x080091a3
 8009124:	080091a3 	.word	0x080091a3
 8009128:	080091a3 	.word	0x080091a3
 800912c:	080091a3 	.word	0x080091a3
 8009130:	080091a3 	.word	0x080091a3
 8009134:	080091a3 	.word	0x080091a3
 8009138:	08009151 	.word	0x08009151
 800913c:	08009165 	.word	0x08009165
 8009140:	4a7f      	ldr	r2, [pc, #508]	; (8009340 <HAL_GPIO_Init+0x2cc>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d013      	beq.n	800916e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009146:	e02c      	b.n	80091a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	623b      	str	r3, [r7, #32]
          break;
 800914e:	e029      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	3304      	adds	r3, #4
 8009156:	623b      	str	r3, [r7, #32]
          break;
 8009158:	e024      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	3308      	adds	r3, #8
 8009160:	623b      	str	r3, [r7, #32]
          break;
 8009162:	e01f      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	330c      	adds	r3, #12
 800916a:	623b      	str	r3, [r7, #32]
          break;
 800916c:	e01a      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d102      	bne.n	800917c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009176:	2304      	movs	r3, #4
 8009178:	623b      	str	r3, [r7, #32]
          break;
 800917a:	e013      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d105      	bne.n	8009190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009184:	2308      	movs	r3, #8
 8009186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	611a      	str	r2, [r3, #16]
          break;
 800918e:	e009      	b.n	80091a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009190:	2308      	movs	r3, #8
 8009192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	615a      	str	r2, [r3, #20]
          break;
 800919a:	e003      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800919c:	2300      	movs	r3, #0
 800919e:	623b      	str	r3, [r7, #32]
          break;
 80091a0:	e000      	b.n	80091a4 <HAL_GPIO_Init+0x130>
          break;
 80091a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	2bff      	cmp	r3, #255	; 0xff
 80091a8:	d801      	bhi.n	80091ae <HAL_GPIO_Init+0x13a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	e001      	b.n	80091b2 <HAL_GPIO_Init+0x13e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	2bff      	cmp	r3, #255	; 0xff
 80091b8:	d802      	bhi.n	80091c0 <HAL_GPIO_Init+0x14c>
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	e002      	b.n	80091c6 <HAL_GPIO_Init+0x152>
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	3b08      	subs	r3, #8
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	210f      	movs	r1, #15
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	43db      	mvns	r3, r3
 80091d6:	401a      	ands	r2, r3
 80091d8:	6a39      	ldr	r1, [r7, #32]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	fa01 f303 	lsl.w	r3, r1, r3
 80091e0:	431a      	orrs	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80c1 	beq.w	8009376 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80091f4:	4b53      	ldr	r3, [pc, #332]	; (8009344 <HAL_GPIO_Init+0x2d0>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	4a52      	ldr	r2, [pc, #328]	; (8009344 <HAL_GPIO_Init+0x2d0>)
 80091fa:	f043 0301 	orr.w	r3, r3, #1
 80091fe:	6193      	str	r3, [r2, #24]
 8009200:	4b50      	ldr	r3, [pc, #320]	; (8009344 <HAL_GPIO_Init+0x2d0>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 0301 	and.w	r3, r3, #1
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800920c:	4a4e      	ldr	r2, [pc, #312]	; (8009348 <HAL_GPIO_Init+0x2d4>)
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	089b      	lsrs	r3, r3, #2
 8009212:	3302      	adds	r3, #2
 8009214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	220f      	movs	r2, #15
 8009224:	fa02 f303 	lsl.w	r3, r2, r3
 8009228:	43db      	mvns	r3, r3
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4013      	ands	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a46      	ldr	r2, [pc, #280]	; (800934c <HAL_GPIO_Init+0x2d8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d01f      	beq.n	8009278 <HAL_GPIO_Init+0x204>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a45      	ldr	r2, [pc, #276]	; (8009350 <HAL_GPIO_Init+0x2dc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d019      	beq.n	8009274 <HAL_GPIO_Init+0x200>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a44      	ldr	r2, [pc, #272]	; (8009354 <HAL_GPIO_Init+0x2e0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d013      	beq.n	8009270 <HAL_GPIO_Init+0x1fc>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a43      	ldr	r2, [pc, #268]	; (8009358 <HAL_GPIO_Init+0x2e4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00d      	beq.n	800926c <HAL_GPIO_Init+0x1f8>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a42      	ldr	r2, [pc, #264]	; (800935c <HAL_GPIO_Init+0x2e8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d007      	beq.n	8009268 <HAL_GPIO_Init+0x1f4>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a41      	ldr	r2, [pc, #260]	; (8009360 <HAL_GPIO_Init+0x2ec>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d101      	bne.n	8009264 <HAL_GPIO_Init+0x1f0>
 8009260:	2305      	movs	r3, #5
 8009262:	e00a      	b.n	800927a <HAL_GPIO_Init+0x206>
 8009264:	2306      	movs	r3, #6
 8009266:	e008      	b.n	800927a <HAL_GPIO_Init+0x206>
 8009268:	2304      	movs	r3, #4
 800926a:	e006      	b.n	800927a <HAL_GPIO_Init+0x206>
 800926c:	2303      	movs	r3, #3
 800926e:	e004      	b.n	800927a <HAL_GPIO_Init+0x206>
 8009270:	2302      	movs	r3, #2
 8009272:	e002      	b.n	800927a <HAL_GPIO_Init+0x206>
 8009274:	2301      	movs	r3, #1
 8009276:	e000      	b.n	800927a <HAL_GPIO_Init+0x206>
 8009278:	2300      	movs	r3, #0
 800927a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927c:	f002 0203 	and.w	r2, r2, #3
 8009280:	0092      	lsls	r2, r2, #2
 8009282:	4093      	lsls	r3, r2
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800928a:	492f      	ldr	r1, [pc, #188]	; (8009348 <HAL_GPIO_Init+0x2d4>)
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	089b      	lsrs	r3, r3, #2
 8009290:	3302      	adds	r3, #2
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80092a4:	4b2f      	ldr	r3, [pc, #188]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	492e      	ldr	r1, [pc, #184]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	600b      	str	r3, [r1, #0]
 80092b0:	e006      	b.n	80092c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80092b2:	4b2c      	ldr	r3, [pc, #176]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	43db      	mvns	r3, r3
 80092ba:	492a      	ldr	r1, [pc, #168]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092bc:	4013      	ands	r3, r2
 80092be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d006      	beq.n	80092da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80092cc:	4b25      	ldr	r3, [pc, #148]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	4924      	ldr	r1, [pc, #144]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	604b      	str	r3, [r1, #4]
 80092d8:	e006      	b.n	80092e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80092da:	4b22      	ldr	r3, [pc, #136]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	43db      	mvns	r3, r3
 80092e2:	4920      	ldr	r1, [pc, #128]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80092f4:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	491a      	ldr	r1, [pc, #104]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	608b      	str	r3, [r1, #8]
 8009300:	e006      	b.n	8009310 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009302:	4b18      	ldr	r3, [pc, #96]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	43db      	mvns	r3, r3
 800930a:	4916      	ldr	r1, [pc, #88]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 800930c:	4013      	ands	r3, r2
 800930e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d025      	beq.n	8009368 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800931c:	4b11      	ldr	r3, [pc, #68]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	4910      	ldr	r1, [pc, #64]	; (8009364 <HAL_GPIO_Init+0x2f0>)
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	4313      	orrs	r3, r2
 8009326:	60cb      	str	r3, [r1, #12]
 8009328:	e025      	b.n	8009376 <HAL_GPIO_Init+0x302>
 800932a:	bf00      	nop
 800932c:	10320000 	.word	0x10320000
 8009330:	10310000 	.word	0x10310000
 8009334:	10220000 	.word	0x10220000
 8009338:	10210000 	.word	0x10210000
 800933c:	10120000 	.word	0x10120000
 8009340:	10110000 	.word	0x10110000
 8009344:	40021000 	.word	0x40021000
 8009348:	40010000 	.word	0x40010000
 800934c:	40010800 	.word	0x40010800
 8009350:	40010c00 	.word	0x40010c00
 8009354:	40011000 	.word	0x40011000
 8009358:	40011400 	.word	0x40011400
 800935c:	40011800 	.word	0x40011800
 8009360:	40011c00 	.word	0x40011c00
 8009364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009368:	4b0b      	ldr	r3, [pc, #44]	; (8009398 <HAL_GPIO_Init+0x324>)
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	43db      	mvns	r3, r3
 8009370:	4909      	ldr	r1, [pc, #36]	; (8009398 <HAL_GPIO_Init+0x324>)
 8009372:	4013      	ands	r3, r2
 8009374:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	3301      	adds	r3, #1
 800937a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	fa22 f303 	lsr.w	r3, r2, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	f47f ae7e 	bne.w	8009088 <HAL_GPIO_Init+0x14>
  }
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	372c      	adds	r7, #44	; 0x2c
 8009392:	46bd      	mov	sp, r7
 8009394:	bc80      	pop	{r7}
 8009396:	4770      	bx	lr
 8009398:	40010400 	.word	0x40010400

0800939c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
 80093a8:	4613      	mov	r3, r2
 80093aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093ac:	787b      	ldrb	r3, [r7, #1]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093b2:	887a      	ldrh	r2, [r7, #2]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093b8:	e003      	b.n	80093c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093ba:	887b      	ldrh	r3, [r7, #2]
 80093bc:	041a      	lsls	r2, r3, #16
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	611a      	str	r2, [r3, #16]
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr

080093cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80093d6:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	4013      	ands	r3, r2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80093e2:	4a05      	ldr	r2, [pc, #20]	; (80093f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80093e8:	88fb      	ldrh	r3, [r7, #6]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fb2e 	bl	8007a4c <HAL_GPIO_EXTI_Callback>
  }
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40010400 	.word	0x40010400

080093fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e26c      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 8087 	beq.w	800952a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800941c:	4b92      	ldr	r3, [pc, #584]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f003 030c 	and.w	r3, r3, #12
 8009424:	2b04      	cmp	r3, #4
 8009426:	d00c      	beq.n	8009442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009428:	4b8f      	ldr	r3, [pc, #572]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f003 030c 	and.w	r3, r3, #12
 8009430:	2b08      	cmp	r3, #8
 8009432:	d112      	bne.n	800945a <HAL_RCC_OscConfig+0x5e>
 8009434:	4b8c      	ldr	r3, [pc, #560]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800943c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009440:	d10b      	bne.n	800945a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009442:	4b89      	ldr	r3, [pc, #548]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d06c      	beq.n	8009528 <HAL_RCC_OscConfig+0x12c>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d168      	bne.n	8009528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e246      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009462:	d106      	bne.n	8009472 <HAL_RCC_OscConfig+0x76>
 8009464:	4b80      	ldr	r3, [pc, #512]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a7f      	ldr	r2, [pc, #508]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800946a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e02e      	b.n	80094d0 <HAL_RCC_OscConfig+0xd4>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10c      	bne.n	8009494 <HAL_RCC_OscConfig+0x98>
 800947a:	4b7b      	ldr	r3, [pc, #492]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a7a      	ldr	r2, [pc, #488]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4b78      	ldr	r3, [pc, #480]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a77      	ldr	r2, [pc, #476]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800948c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	e01d      	b.n	80094d0 <HAL_RCC_OscConfig+0xd4>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800949c:	d10c      	bne.n	80094b8 <HAL_RCC_OscConfig+0xbc>
 800949e:	4b72      	ldr	r3, [pc, #456]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a71      	ldr	r2, [pc, #452]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	4b6f      	ldr	r3, [pc, #444]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a6e      	ldr	r2, [pc, #440]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	e00b      	b.n	80094d0 <HAL_RCC_OscConfig+0xd4>
 80094b8:	4b6b      	ldr	r3, [pc, #428]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a6a      	ldr	r2, [pc, #424]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	4b68      	ldr	r3, [pc, #416]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a67      	ldr	r2, [pc, #412]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d013      	beq.n	8009500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094d8:	f7ff f80e 	bl	80084f8 <HAL_GetTick>
 80094dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094de:	e008      	b.n	80094f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094e0:	f7ff f80a 	bl	80084f8 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b64      	cmp	r3, #100	; 0x64
 80094ec:	d901      	bls.n	80094f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e1fa      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094f2:	4b5d      	ldr	r3, [pc, #372]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0f0      	beq.n	80094e0 <HAL_RCC_OscConfig+0xe4>
 80094fe:	e014      	b.n	800952a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009500:	f7fe fffa 	bl	80084f8 <HAL_GetTick>
 8009504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009506:	e008      	b.n	800951a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009508:	f7fe fff6 	bl	80084f8 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b64      	cmp	r3, #100	; 0x64
 8009514:	d901      	bls.n	800951a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e1e6      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800951a:	4b53      	ldr	r3, [pc, #332]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1f0      	bne.n	8009508 <HAL_RCC_OscConfig+0x10c>
 8009526:	e000      	b.n	800952a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d063      	beq.n	80095fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009536:	4b4c      	ldr	r3, [pc, #304]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f003 030c 	and.w	r3, r3, #12
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00b      	beq.n	800955a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009542:	4b49      	ldr	r3, [pc, #292]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f003 030c 	and.w	r3, r3, #12
 800954a:	2b08      	cmp	r3, #8
 800954c:	d11c      	bne.n	8009588 <HAL_RCC_OscConfig+0x18c>
 800954e:	4b46      	ldr	r3, [pc, #280]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d116      	bne.n	8009588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800955a:	4b43      	ldr	r3, [pc, #268]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d005      	beq.n	8009572 <HAL_RCC_OscConfig+0x176>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d001      	beq.n	8009572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e1ba      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009572:	4b3d      	ldr	r3, [pc, #244]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4939      	ldr	r1, [pc, #228]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009582:	4313      	orrs	r3, r2
 8009584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009586:	e03a      	b.n	80095fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d020      	beq.n	80095d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009590:	4b36      	ldr	r3, [pc, #216]	; (800966c <HAL_RCC_OscConfig+0x270>)
 8009592:	2201      	movs	r2, #1
 8009594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009596:	f7fe ffaf 	bl	80084f8 <HAL_GetTick>
 800959a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800959c:	e008      	b.n	80095b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800959e:	f7fe ffab 	bl	80084f8 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e19b      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095b0:	4b2d      	ldr	r3, [pc, #180]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0f0      	beq.n	800959e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095bc:	4b2a      	ldr	r3, [pc, #168]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	4927      	ldr	r1, [pc, #156]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	600b      	str	r3, [r1, #0]
 80095d0:	e015      	b.n	80095fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095d2:	4b26      	ldr	r3, [pc, #152]	; (800966c <HAL_RCC_OscConfig+0x270>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d8:	f7fe ff8e 	bl	80084f8 <HAL_GetTick>
 80095dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095de:	e008      	b.n	80095f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095e0:	f7fe ff8a 	bl	80084f8 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d901      	bls.n	80095f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e17a      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095f2:	4b1d      	ldr	r3, [pc, #116]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f0      	bne.n	80095e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d03a      	beq.n	8009680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d019      	beq.n	8009646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009612:	4b17      	ldr	r3, [pc, #92]	; (8009670 <HAL_RCC_OscConfig+0x274>)
 8009614:	2201      	movs	r2, #1
 8009616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009618:	f7fe ff6e 	bl	80084f8 <HAL_GetTick>
 800961c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800961e:	e008      	b.n	8009632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009620:	f7fe ff6a 	bl	80084f8 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b02      	cmp	r3, #2
 800962c:	d901      	bls.n	8009632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e15a      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009632:	4b0d      	ldr	r3, [pc, #52]	; (8009668 <HAL_RCC_OscConfig+0x26c>)
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	f003 0302 	and.w	r3, r3, #2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0f0      	beq.n	8009620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800963e:	2001      	movs	r0, #1
 8009640:	f000 fad8 	bl	8009bf4 <RCC_Delay>
 8009644:	e01c      	b.n	8009680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009646:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <HAL_RCC_OscConfig+0x274>)
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800964c:	f7fe ff54 	bl	80084f8 <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009652:	e00f      	b.n	8009674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009654:	f7fe ff50 	bl	80084f8 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d908      	bls.n	8009674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e140      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
 8009666:	bf00      	nop
 8009668:	40021000 	.word	0x40021000
 800966c:	42420000 	.word	0x42420000
 8009670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009674:	4b9e      	ldr	r3, [pc, #632]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e9      	bne.n	8009654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a6 	beq.w	80097da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009692:	4b97      	ldr	r3, [pc, #604]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10d      	bne.n	80096ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800969e:	4b94      	ldr	r3, [pc, #592]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	4a93      	ldr	r2, [pc, #588]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80096a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096a8:	61d3      	str	r3, [r2, #28]
 80096aa:	4b91      	ldr	r3, [pc, #580]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80096ac:	69db      	ldr	r3, [r3, #28]
 80096ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b2:	60bb      	str	r3, [r7, #8]
 80096b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096b6:	2301      	movs	r3, #1
 80096b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096ba:	4b8e      	ldr	r3, [pc, #568]	; (80098f4 <HAL_RCC_OscConfig+0x4f8>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d118      	bne.n	80096f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096c6:	4b8b      	ldr	r3, [pc, #556]	; (80098f4 <HAL_RCC_OscConfig+0x4f8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a8a      	ldr	r2, [pc, #552]	; (80098f4 <HAL_RCC_OscConfig+0x4f8>)
 80096cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096d2:	f7fe ff11 	bl	80084f8 <HAL_GetTick>
 80096d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096d8:	e008      	b.n	80096ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096da:	f7fe ff0d 	bl	80084f8 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	2b64      	cmp	r3, #100	; 0x64
 80096e6:	d901      	bls.n	80096ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e0fd      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096ec:	4b81      	ldr	r3, [pc, #516]	; (80098f4 <HAL_RCC_OscConfig+0x4f8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0f0      	beq.n	80096da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d106      	bne.n	800970e <HAL_RCC_OscConfig+0x312>
 8009700:	4b7b      	ldr	r3, [pc, #492]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	4a7a      	ldr	r2, [pc, #488]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	6213      	str	r3, [r2, #32]
 800970c:	e02d      	b.n	800976a <HAL_RCC_OscConfig+0x36e>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10c      	bne.n	8009730 <HAL_RCC_OscConfig+0x334>
 8009716:	4b76      	ldr	r3, [pc, #472]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	4a75      	ldr	r2, [pc, #468]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	6213      	str	r3, [r2, #32]
 8009722:	4b73      	ldr	r3, [pc, #460]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	4a72      	ldr	r2, [pc, #456]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009728:	f023 0304 	bic.w	r3, r3, #4
 800972c:	6213      	str	r3, [r2, #32]
 800972e:	e01c      	b.n	800976a <HAL_RCC_OscConfig+0x36e>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2b05      	cmp	r3, #5
 8009736:	d10c      	bne.n	8009752 <HAL_RCC_OscConfig+0x356>
 8009738:	4b6d      	ldr	r3, [pc, #436]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	4a6c      	ldr	r2, [pc, #432]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800973e:	f043 0304 	orr.w	r3, r3, #4
 8009742:	6213      	str	r3, [r2, #32]
 8009744:	4b6a      	ldr	r3, [pc, #424]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	4a69      	ldr	r2, [pc, #420]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800974a:	f043 0301 	orr.w	r3, r3, #1
 800974e:	6213      	str	r3, [r2, #32]
 8009750:	e00b      	b.n	800976a <HAL_RCC_OscConfig+0x36e>
 8009752:	4b67      	ldr	r3, [pc, #412]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	4a66      	ldr	r2, [pc, #408]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009758:	f023 0301 	bic.w	r3, r3, #1
 800975c:	6213      	str	r3, [r2, #32]
 800975e:	4b64      	ldr	r3, [pc, #400]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	4a63      	ldr	r2, [pc, #396]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009764:	f023 0304 	bic.w	r3, r3, #4
 8009768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d015      	beq.n	800979e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009772:	f7fe fec1 	bl	80084f8 <HAL_GetTick>
 8009776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009778:	e00a      	b.n	8009790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800977a:	f7fe febd 	bl	80084f8 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	f241 3288 	movw	r2, #5000	; 0x1388
 8009788:	4293      	cmp	r3, r2
 800978a:	d901      	bls.n	8009790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e0ab      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009790:	4b57      	ldr	r3, [pc, #348]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0ee      	beq.n	800977a <HAL_RCC_OscConfig+0x37e>
 800979c:	e014      	b.n	80097c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800979e:	f7fe feab 	bl	80084f8 <HAL_GetTick>
 80097a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097a4:	e00a      	b.n	80097bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a6:	f7fe fea7 	bl	80084f8 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d901      	bls.n	80097bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e095      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097bc:	4b4c      	ldr	r3, [pc, #304]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1ee      	bne.n	80097a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d105      	bne.n	80097da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097ce:	4b48      	ldr	r3, [pc, #288]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	4a47      	ldr	r2, [pc, #284]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80097d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8081 	beq.w	80098e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80097e4:	4b42      	ldr	r3, [pc, #264]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f003 030c 	and.w	r3, r3, #12
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d061      	beq.n	80098b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d146      	bne.n	8009886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097f8:	4b3f      	ldr	r3, [pc, #252]	; (80098f8 <HAL_RCC_OscConfig+0x4fc>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097fe:	f7fe fe7b 	bl	80084f8 <HAL_GetTick>
 8009802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009806:	f7fe fe77 	bl	80084f8 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e067      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009818:	4b35      	ldr	r3, [pc, #212]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f0      	bne.n	8009806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800982c:	d108      	bne.n	8009840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800982e:	4b30      	ldr	r3, [pc, #192]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	492d      	ldr	r1, [pc, #180]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800983c:	4313      	orrs	r3, r2
 800983e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009840:	4b2b      	ldr	r3, [pc, #172]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a19      	ldr	r1, [r3, #32]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	430b      	orrs	r3, r1
 8009852:	4927      	ldr	r1, [pc, #156]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 8009854:	4313      	orrs	r3, r2
 8009856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009858:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <HAL_RCC_OscConfig+0x4fc>)
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800985e:	f7fe fe4b 	bl	80084f8 <HAL_GetTick>
 8009862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009864:	e008      	b.n	8009878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009866:	f7fe fe47 	bl	80084f8 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	2b02      	cmp	r3, #2
 8009872:	d901      	bls.n	8009878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e037      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009878:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0f0      	beq.n	8009866 <HAL_RCC_OscConfig+0x46a>
 8009884:	e02f      	b.n	80098e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009886:	4b1c      	ldr	r3, [pc, #112]	; (80098f8 <HAL_RCC_OscConfig+0x4fc>)
 8009888:	2200      	movs	r2, #0
 800988a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800988c:	f7fe fe34 	bl	80084f8 <HAL_GetTick>
 8009890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009892:	e008      	b.n	80098a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009894:	f7fe fe30 	bl	80084f8 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d901      	bls.n	80098a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e020      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098a6:	4b12      	ldr	r3, [pc, #72]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f0      	bne.n	8009894 <HAL_RCC_OscConfig+0x498>
 80098b2:	e018      	b.n	80098e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d101      	bne.n	80098c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e013      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80098c0:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <HAL_RCC_OscConfig+0x4f4>)
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d106      	bne.n	80098e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098de:	429a      	cmp	r2, r3
 80098e0:	d001      	beq.n	80098e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40021000 	.word	0x40021000
 80098f4:	40007000 	.word	0x40007000
 80098f8:	42420060 	.word	0x42420060

080098fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e0d0      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009910:	4b6a      	ldr	r3, [pc, #424]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d910      	bls.n	8009940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800991e:	4b67      	ldr	r3, [pc, #412]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f023 0207 	bic.w	r2, r3, #7
 8009926:	4965      	ldr	r1, [pc, #404]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	4313      	orrs	r3, r2
 800992c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800992e:	4b63      	ldr	r3, [pc, #396]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d001      	beq.n	8009940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e0b8      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d020      	beq.n	800998e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009958:	4b59      	ldr	r3, [pc, #356]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4a58      	ldr	r2, [pc, #352]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800995e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0308 	and.w	r3, r3, #8
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009970:	4b53      	ldr	r3, [pc, #332]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4a52      	ldr	r2, [pc, #328]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009976:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800997a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800997c:	4b50      	ldr	r3, [pc, #320]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	494d      	ldr	r1, [pc, #308]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800998a:	4313      	orrs	r3, r2
 800998c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d040      	beq.n	8009a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d107      	bne.n	80099b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099a2:	4b47      	ldr	r3, [pc, #284]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d115      	bne.n	80099da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e07f      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d107      	bne.n	80099ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099ba:	4b41      	ldr	r3, [pc, #260]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e073      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099ca:	4b3d      	ldr	r3, [pc, #244]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e06b      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099da:	4b39      	ldr	r3, [pc, #228]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f023 0203 	bic.w	r2, r3, #3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	4936      	ldr	r1, [pc, #216]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80099ec:	f7fe fd84 	bl	80084f8 <HAL_GetTick>
 80099f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099f2:	e00a      	b.n	8009a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099f4:	f7fe fd80 	bl	80084f8 <HAL_GetTick>
 80099f8:	4602      	mov	r2, r0
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e053      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a0a:	4b2d      	ldr	r3, [pc, #180]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f003 020c 	and.w	r2, r3, #12
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d1eb      	bne.n	80099f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a1c:	4b27      	ldr	r3, [pc, #156]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d210      	bcs.n	8009a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a2a:	4b24      	ldr	r3, [pc, #144]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f023 0207 	bic.w	r2, r3, #7
 8009a32:	4922      	ldr	r1, [pc, #136]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a3a:	4b20      	ldr	r3, [pc, #128]	; (8009abc <HAL_RCC_ClockConfig+0x1c0>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0307 	and.w	r3, r3, #7
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d001      	beq.n	8009a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e032      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0304 	and.w	r3, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d008      	beq.n	8009a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a58:	4b19      	ldr	r3, [pc, #100]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	4916      	ldr	r1, [pc, #88]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0308 	and.w	r3, r3, #8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d009      	beq.n	8009a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a76:	4b12      	ldr	r3, [pc, #72]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	490e      	ldr	r1, [pc, #56]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a8a:	f000 f821 	bl	8009ad0 <HAL_RCC_GetSysClockFreq>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	091b      	lsrs	r3, r3, #4
 8009a96:	f003 030f 	and.w	r3, r3, #15
 8009a9a:	490a      	ldr	r1, [pc, #40]	; (8009ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8009a9c:	5ccb      	ldrb	r3, [r1, r3]
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	4a09      	ldr	r2, [pc, #36]	; (8009ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8009aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <HAL_RCC_ClockConfig+0x1d0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fce2 	bl	8008474 <HAL_InitTick>

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40022000 	.word	0x40022000
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	0800d3f8 	.word	0x0800d3f8
 8009ac8:	20000010 	.word	0x20000010
 8009acc:	20000014 	.word	0x20000014

08009ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ad0:	b490      	push	{r4, r7}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009ad6:	4b2a      	ldr	r3, [pc, #168]	; (8009b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009ad8:	1d3c      	adds	r4, r7, #4
 8009ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009ae0:	f240 2301 	movw	r3, #513	; 0x201
 8009ae4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	2300      	movs	r3, #0
 8009aec:	61bb      	str	r3, [r7, #24]
 8009aee:	2300      	movs	r3, #0
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
 8009af2:	2300      	movs	r3, #0
 8009af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009afa:	4b22      	ldr	r3, [pc, #136]	; (8009b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f003 030c 	and.w	r3, r3, #12
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d002      	beq.n	8009b10 <HAL_RCC_GetSysClockFreq+0x40>
 8009b0a:	2b08      	cmp	r3, #8
 8009b0c:	d003      	beq.n	8009b16 <HAL_RCC_GetSysClockFreq+0x46>
 8009b0e:	e02d      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009b10:	4b1d      	ldr	r3, [pc, #116]	; (8009b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b12:	623b      	str	r3, [r7, #32]
      break;
 8009b14:	e02d      	b.n	8009b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	0c9b      	lsrs	r3, r3, #18
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009b22:	4413      	add	r3, r2
 8009b24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009b28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d013      	beq.n	8009b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009b34:	4b13      	ldr	r3, [pc, #76]	; (8009b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	0c5b      	lsrs	r3, r3, #17
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009b42:	4413      	add	r3, r2
 8009b44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009b48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4a0e      	ldr	r2, [pc, #56]	; (8009b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b4e:	fb02 f203 	mul.w	r2, r2, r3
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5a:	e004      	b.n	8009b66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	4a0b      	ldr	r2, [pc, #44]	; (8009b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b60:	fb02 f303 	mul.w	r3, r2, r3
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	623b      	str	r3, [r7, #32]
      break;
 8009b6a:	e002      	b.n	8009b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b6e:	623b      	str	r3, [r7, #32]
      break;
 8009b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b72:	6a3b      	ldr	r3, [r7, #32]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3728      	adds	r7, #40	; 0x28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc90      	pop	{r4, r7}
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	0800bc28 	.word	0x0800bc28
 8009b84:	40021000 	.word	0x40021000
 8009b88:	007a1200 	.word	0x007a1200
 8009b8c:	003d0900 	.word	0x003d0900

08009b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8009b96:	681b      	ldr	r3, [r3, #0]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bc80      	pop	{r7}
 8009b9e:	4770      	bx	lr
 8009ba0:	20000010 	.word	0x20000010

08009ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ba8:	f7ff fff2 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8009bac:	4602      	mov	r2, r0
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	4903      	ldr	r1, [pc, #12]	; (8009bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bba:	5ccb      	ldrb	r3, [r1, r3]
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	0800d408 	.word	0x0800d408

08009bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009bd0:	f7ff ffde 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	4b05      	ldr	r3, [pc, #20]	; (8009bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	0adb      	lsrs	r3, r3, #11
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	4903      	ldr	r1, [pc, #12]	; (8009bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009be2:	5ccb      	ldrb	r3, [r1, r3]
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	40021000 	.word	0x40021000
 8009bf0:	0800d408 	.word	0x0800d408

08009bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <RCC_Delay+0x34>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <RCC_Delay+0x38>)
 8009c02:	fba2 2303 	umull	r2, r3, r2, r3
 8009c06:	0a5b      	lsrs	r3, r3, #9
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
 8009c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009c10:	bf00      	nop
  }
  while (Delay --);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1e5a      	subs	r2, r3, #1
 8009c16:	60fa      	str	r2, [r7, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f9      	bne.n	8009c10 <RCC_Delay+0x1c>
}
 8009c1c:	bf00      	nop
 8009c1e:	bf00      	nop
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bc80      	pop	{r7}
 8009c26:	4770      	bx	lr
 8009c28:	20000010 	.word	0x20000010
 8009c2c:	10624dd3 	.word	0x10624dd3

08009c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e041      	b.n	8009cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d106      	bne.n	8009c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7fd fd6a 	bl	8007730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f000 fa7e 	bl	800a170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d001      	beq.n	8009ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e044      	b.n	8009d72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0201 	orr.w	r2, r2, #1
 8009cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <HAL_TIM_Base_Start_IT+0xac>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d018      	beq.n	8009d3c <HAL_TIM_Base_Start_IT+0x6c>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	; (8009d80 <HAL_TIM_Base_Start_IT+0xb0>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d013      	beq.n	8009d3c <HAL_TIM_Base_Start_IT+0x6c>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1c:	d00e      	beq.n	8009d3c <HAL_TIM_Base_Start_IT+0x6c>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a18      	ldr	r2, [pc, #96]	; (8009d84 <HAL_TIM_Base_Start_IT+0xb4>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d009      	beq.n	8009d3c <HAL_TIM_Base_Start_IT+0x6c>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a16      	ldr	r2, [pc, #88]	; (8009d88 <HAL_TIM_Base_Start_IT+0xb8>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d004      	beq.n	8009d3c <HAL_TIM_Base_Start_IT+0x6c>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a15      	ldr	r2, [pc, #84]	; (8009d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d111      	bne.n	8009d60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b06      	cmp	r3, #6
 8009d4c:	d010      	beq.n	8009d70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0201 	orr.w	r2, r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d5e:	e007      	b.n	8009d70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f042 0201 	orr.w	r2, r2, #1
 8009d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bc80      	pop	{r7}
 8009d7a:	4770      	bx	lr
 8009d7c:	40012c00 	.word	0x40012c00
 8009d80:	40013400 	.word	0x40013400
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	40000c00 	.word	0x40000c00

08009d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d122      	bne.n	8009dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d11b      	bne.n	8009dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0202 	mvn.w	r2, #2
 8009dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f9b1 	bl	800a13a <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e005      	b.n	8009de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f9a4 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f9b3 	bl	800a14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d122      	bne.n	8009e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d11b      	bne.n	8009e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f06f 0204 	mvn.w	r2, #4
 8009e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2202      	movs	r2, #2
 8009e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f987 	bl	800a13a <HAL_TIM_IC_CaptureCallback>
 8009e2c:	e005      	b.n	8009e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f97a 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f989 	bl	800a14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d122      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f003 0308 	and.w	r3, r3, #8
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d11b      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f06f 0208 	mvn.w	r2, #8
 8009e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f95d 	bl	800a13a <HAL_TIM_IC_CaptureCallback>
 8009e80:	e005      	b.n	8009e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f950 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f95f 	bl	800a14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b10      	cmp	r3, #16
 8009ea0:	d122      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0310 	and.w	r3, r3, #16
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d11b      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0210 	mvn.w	r2, #16
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f933 	bl	800a13a <HAL_TIM_IC_CaptureCallback>
 8009ed4:	e005      	b.n	8009ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f926 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f935 	bl	800a14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d10e      	bne.n	8009f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d107      	bne.n	8009f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f06f 0201 	mvn.w	r2, #1
 8009f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7fd fda8 	bl	8007a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b80      	cmp	r3, #128	; 0x80
 8009f20:	d10e      	bne.n	8009f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d107      	bne.n	8009f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa9d 	bl	800a47a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d10e      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f58:	2b40      	cmp	r3, #64	; 0x40
 8009f5a:	d107      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8f9 	bl	800a15e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	d10e      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0320 	and.w	r3, r3, #32
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d107      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f06f 0220 	mvn.w	r2, #32
 8009f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa68 	bl	800a468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_TIM_ConfigClockSource+0x18>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e0b3      	b.n	800a120 <HAL_TIM_ConfigClockSource+0x180>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff0:	d03e      	beq.n	800a070 <HAL_TIM_ConfigClockSource+0xd0>
 8009ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff6:	f200 8087 	bhi.w	800a108 <HAL_TIM_ConfigClockSource+0x168>
 8009ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffe:	f000 8085 	beq.w	800a10c <HAL_TIM_ConfigClockSource+0x16c>
 800a002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a006:	d87f      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a008:	2b70      	cmp	r3, #112	; 0x70
 800a00a:	d01a      	beq.n	800a042 <HAL_TIM_ConfigClockSource+0xa2>
 800a00c:	2b70      	cmp	r3, #112	; 0x70
 800a00e:	d87b      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a010:	2b60      	cmp	r3, #96	; 0x60
 800a012:	d050      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x116>
 800a014:	2b60      	cmp	r3, #96	; 0x60
 800a016:	d877      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a018:	2b50      	cmp	r3, #80	; 0x50
 800a01a:	d03c      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0xf6>
 800a01c:	2b50      	cmp	r3, #80	; 0x50
 800a01e:	d873      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a020:	2b40      	cmp	r3, #64	; 0x40
 800a022:	d058      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x136>
 800a024:	2b40      	cmp	r3, #64	; 0x40
 800a026:	d86f      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a028:	2b30      	cmp	r3, #48	; 0x30
 800a02a:	d064      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x156>
 800a02c:	2b30      	cmp	r3, #48	; 0x30
 800a02e:	d86b      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a030:	2b20      	cmp	r3, #32
 800a032:	d060      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x156>
 800a034:	2b20      	cmp	r3, #32
 800a036:	d867      	bhi.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d05c      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x156>
 800a03c:	2b10      	cmp	r3, #16
 800a03e:	d05a      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a040:	e062      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	6899      	ldr	r1, [r3, #8]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f000 f97e 	bl	800a352 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a064:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	609a      	str	r2, [r3, #8]
      break;
 800a06e:	e04e      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6818      	ldr	r0, [r3, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6899      	ldr	r1, [r3, #8]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f000 f967 	bl	800a352 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689a      	ldr	r2, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a092:	609a      	str	r2, [r3, #8]
      break;
 800a094:	e03b      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	6859      	ldr	r1, [r3, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 f8de 	bl	800a264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2150      	movs	r1, #80	; 0x50
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f935 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 800a0b4:	e02b      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 f8fc 	bl	800a2c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2160      	movs	r1, #96	; 0x60
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 f925 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 800a0d4:	e01b      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6859      	ldr	r1, [r3, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f000 f8be 	bl	800a264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2140      	movs	r1, #64	; 0x40
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f915 	bl	800a31e <TIM_ITRx_SetConfig>
      break;
 800a0f4:	e00b      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f000 f90c 	bl	800a31e <TIM_ITRx_SetConfig>
        break;
 800a106:	e002      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a108:	bf00      	nop
 800a10a:	e000      	b.n	800a10e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a10c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr

0800a13a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a142:	bf00      	nop
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	bc80      	pop	{r7}
 800a15c:	4770      	bx	lr

0800a15e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr

0800a170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a33      	ldr	r2, [pc, #204]	; (800a250 <TIM_Base_SetConfig+0xe0>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d013      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a32      	ldr	r2, [pc, #200]	; (800a254 <TIM_Base_SetConfig+0xe4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00f      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a196:	d00b      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <TIM_Base_SetConfig+0xe8>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d007      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a2e      	ldr	r2, [pc, #184]	; (800a25c <TIM_Base_SetConfig+0xec>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d003      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a2d      	ldr	r2, [pc, #180]	; (800a260 <TIM_Base_SetConfig+0xf0>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d108      	bne.n	800a1c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a22      	ldr	r2, [pc, #136]	; (800a250 <TIM_Base_SetConfig+0xe0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d013      	beq.n	800a1f2 <TIM_Base_SetConfig+0x82>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a21      	ldr	r2, [pc, #132]	; (800a254 <TIM_Base_SetConfig+0xe4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_Base_SetConfig+0x82>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x82>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <TIM_Base_SetConfig+0xe8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_Base_SetConfig+0x82>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a1d      	ldr	r2, [pc, #116]	; (800a25c <TIM_Base_SetConfig+0xec>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_Base_SetConfig+0x82>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <TIM_Base_SetConfig+0xf0>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d108      	bne.n	800a204 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a09      	ldr	r2, [pc, #36]	; (800a250 <TIM_Base_SetConfig+0xe0>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_Base_SetConfig+0xc8>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a08      	ldr	r2, [pc, #32]	; (800a254 <TIM_Base_SetConfig+0xe4>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d103      	bne.n	800a240 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	691a      	ldr	r2, [r3, #16]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	615a      	str	r2, [r3, #20]
}
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bc80      	pop	{r7}
 800a24e:	4770      	bx	lr
 800a250:	40012c00 	.word	0x40012c00
 800a254:	40013400 	.word	0x40013400
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00

0800a264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f023 0201 	bic.w	r2, r3, #1
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a28e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	4313      	orrs	r3, r2
 800a298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f023 030a 	bic.w	r3, r3, #10
 800a2a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	621a      	str	r2, [r3, #32]
}
 800a2b6:	bf00      	nop
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bc80      	pop	{r7}
 800a2be:	4770      	bx	lr

0800a2c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	f023 0210 	bic.w	r2, r3, #16
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	031b      	lsls	r3, r3, #12
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	011b      	lsls	r3, r3, #4
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4313      	orrs	r3, r2
 800a306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	621a      	str	r2, [r3, #32]
}
 800a314:	bf00      	nop
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc80      	pop	{r7}
 800a31c:	4770      	bx	lr

0800a31e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	f043 0307 	orr.w	r3, r3, #7
 800a340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	609a      	str	r2, [r3, #8]
}
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr

0800a352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a352:	b480      	push	{r7}
 800a354:	b087      	sub	sp, #28
 800a356:	af00      	add	r7, sp, #0
 800a358:	60f8      	str	r0, [r7, #12]
 800a35a:	60b9      	str	r1, [r7, #8]
 800a35c:	607a      	str	r2, [r7, #4]
 800a35e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a36c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	021a      	lsls	r2, r3, #8
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	431a      	orrs	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4313      	orrs	r3, r2
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	609a      	str	r2, [r3, #8]
}
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bc80      	pop	{r7}
 800a38e:	4770      	bx	lr

0800a390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e050      	b.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a1b      	ldr	r2, [pc, #108]	; (800a454 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d018      	beq.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a19      	ldr	r2, [pc, #100]	; (800a458 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d013      	beq.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3fe:	d00e      	beq.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a15      	ldr	r2, [pc, #84]	; (800a45c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d009      	beq.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a14      	ldr	r2, [pc, #80]	; (800a460 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d004      	beq.n	800a41e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a12      	ldr	r2, [pc, #72]	; (800a464 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d10c      	bne.n	800a438 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	bc80      	pop	{r7}
 800a452:	4770      	bx	lr
 800a454:	40012c00 	.word	0x40012c00
 800a458:	40013400 	.word	0x40013400
 800a45c:	40000400 	.word	0x40000400
 800a460:	40000800 	.word	0x40000800
 800a464:	40000c00 	.word	0x40000c00

0800a468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	bc80      	pop	{r7}
 800a478:	4770      	bx	lr

0800a47a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr

0800a48c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e03f      	b.n	800a51e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7fd f962 	bl	800777c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2224      	movs	r2, #36	; 0x24
 800a4bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fcb5 	bl	800ae40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	691a      	ldr	r2, [r3, #16]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	695a      	ldr	r2, [r3, #20]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2220      	movs	r2, #32
 800a518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b08a      	sub	sp, #40	; 0x28
 800a52a:	af02      	add	r7, sp, #8
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	603b      	str	r3, [r7, #0]
 800a532:	4613      	mov	r3, r2
 800a534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b20      	cmp	r3, #32
 800a544:	d17c      	bne.n	800a640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <HAL_UART_Transmit+0x2c>
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e075      	b.n	800a642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d101      	bne.n	800a564 <HAL_UART_Transmit+0x3e>
 800a560:	2302      	movs	r3, #2
 800a562:	e06e      	b.n	800a642 <HAL_UART_Transmit+0x11c>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2221      	movs	r2, #33	; 0x21
 800a576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a57a:	f7fd ffbd 	bl	80084f8 <HAL_GetTick>
 800a57e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	88fa      	ldrh	r2, [r7, #6]
 800a584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	88fa      	ldrh	r2, [r7, #6]
 800a58a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d108      	bne.n	800a5a8 <HAL_UART_Transmit+0x82>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	e003      	b.n	800a5b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a5b8:	e02a      	b.n	800a610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2180      	movs	r1, #128	; 0x80
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fac4 	bl	800ab52 <UART_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e036      	b.n	800a642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	e007      	b.n	800a602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	3301      	adds	r3, #1
 800a600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a606:	b29b      	uxth	r3, r3
 800a608:	3b01      	subs	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1cf      	bne.n	800a5ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2200      	movs	r2, #0
 800a622:	2140      	movs	r1, #64	; 0x40
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 fa94 	bl	800ab52 <UART_WaitOnFlagUntilTimeout>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e006      	b.n	800a642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2220      	movs	r2, #32
 800a638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	e000      	b.n	800a642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a640:	2302      	movs	r3, #2
  }
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	4613      	mov	r3, r2
 800a658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b20      	cmp	r3, #32
 800a664:	d166      	bne.n	800a734 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <HAL_UART_Receive_DMA+0x26>
 800a66c:	88fb      	ldrh	r3, [r7, #6]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e05f      	b.n	800a736 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d101      	bne.n	800a684 <HAL_UART_Receive_DMA+0x38>
 800a680:	2302      	movs	r3, #2
 800a682:	e058      	b.n	800a736 <HAL_UART_Receive_DMA+0xea>
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2222      	movs	r2, #34	; 0x22
 800a6a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6aa:	4a25      	ldr	r2, [pc, #148]	; (800a740 <HAL_UART_Receive_DMA+0xf4>)
 800a6ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b2:	4a24      	ldr	r2, [pc, #144]	; (800a744 <HAL_UART_Receive_DMA+0xf8>)
 800a6b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ba:	4a23      	ldr	r2, [pc, #140]	; (800a748 <HAL_UART_Receive_DMA+0xfc>)
 800a6bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800a6c6:	f107 0308 	add.w	r3, r7, #8
 800a6ca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	f7fe f8bd 	bl	800885c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a70e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695a      	ldr	r2, [r3, #20]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f042 0201 	orr.w	r2, r2, #1
 800a71e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	695a      	ldr	r2, [r3, #20]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a72e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	0800aa3b 	.word	0x0800aa3b
 800a744:	0800aaa3 	.word	0x0800aaa3
 800a748:	0800aabf 	.word	0x0800aabf

0800a74c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a762:	2b00      	cmp	r3, #0
 800a764:	bf14      	ite	ne
 800a766:	2301      	movne	r3, #1
 800a768:	2300      	moveq	r3, #0
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b21      	cmp	r3, #33	; 0x21
 800a778:	d116      	bne.n	800a7a8 <HAL_UART_DMAStop+0x5c>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d013      	beq.n	800a7a8 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	695a      	ldr	r2, [r3, #20]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a78e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a794:	2b00      	cmp	r3, #0
 800a796:	d004      	beq.n	800a7a2 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fe f8bc 	bl	800891a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa1f 	bl	800abe6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bf14      	ite	ne
 800a7b6:	2301      	movne	r3, #1
 800a7b8:	2300      	moveq	r3, #0
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b22      	cmp	r3, #34	; 0x22
 800a7c8:	d116      	bne.n	800a7f8 <HAL_UART_DMAStop+0xac>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d013      	beq.n	800a7f8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	695a      	ldr	r2, [r3, #20]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7de:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d004      	beq.n	800a7f2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fe f894 	bl	800891a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa0c 	bl	800ac10 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f003 030f 	and.w	r3, r3, #15
 800a832:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10d      	bne.n	800a856 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	f003 0320 	and.w	r3, r3, #32
 800a840:	2b00      	cmp	r3, #0
 800a842:	d008      	beq.n	800a856 <HAL_UART_IRQHandler+0x52>
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa76 	bl	800ad40 <UART_Receive_IT>
      return;
 800a854:	e0d0      	b.n	800a9f8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 80b0 	beq.w	800a9be <HAL_UART_IRQHandler+0x1ba>
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d105      	bne.n	800a874 <HAL_UART_IRQHandler+0x70>
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 80a5 	beq.w	800a9be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <HAL_UART_IRQHandler+0x90>
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88c:	f043 0201 	orr.w	r2, r3, #1
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00a      	beq.n	800a8b4 <HAL_UART_IRQHandler+0xb0>
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d005      	beq.n	800a8b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ac:	f043 0202 	orr.w	r2, r3, #2
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00a      	beq.n	800a8d4 <HAL_UART_IRQHandler+0xd0>
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8cc:	f043 0204 	orr.w	r2, r3, #4
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f003 0308 	and.w	r3, r3, #8
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00f      	beq.n	800a8fe <HAL_UART_IRQHandler+0xfa>
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	f003 0320 	and.w	r3, r3, #32
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d104      	bne.n	800a8f2 <HAL_UART_IRQHandler+0xee>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d005      	beq.n	800a8fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8f6:	f043 0208 	orr.w	r2, r3, #8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d077      	beq.n	800a9f6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d007      	beq.n	800a920 <HAL_UART_IRQHandler+0x11c>
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fa10 	bl	800ad40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bf14      	ite	ne
 800a92e:	2301      	movne	r3, #1
 800a930:	2300      	moveq	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <HAL_UART_IRQHandler+0x144>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d031      	beq.n	800a9ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 f961 	bl	800ac10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d023      	beq.n	800a9a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695a      	ldr	r2, [r3, #20]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a96a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a970:	2b00      	cmp	r3, #0
 800a972:	d013      	beq.n	800a99c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a978:	4a21      	ldr	r2, [pc, #132]	; (800aa00 <HAL_UART_IRQHandler+0x1fc>)
 800a97a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe f805 	bl	8008990 <HAL_DMA_Abort_IT>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d016      	beq.n	800a9ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a996:	4610      	mov	r0, r2
 800a998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a99a:	e00e      	b.n	800a9ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f843 	bl	800aa28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	e00a      	b.n	800a9ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f83f 	bl	800aa28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9aa:	e006      	b.n	800a9ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f83b 	bl	800aa28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a9b8:	e01d      	b.n	800a9f6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ba:	bf00      	nop
    return;
 800a9bc:	e01b      	b.n	800a9f6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d008      	beq.n	800a9da <HAL_UART_IRQHandler+0x1d6>
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f94d 	bl	800ac72 <UART_Transmit_IT>
    return;
 800a9d8:	e00e      	b.n	800a9f8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x1f4>
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d004      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f98e 	bl	800ad10 <UART_EndTransmit_IT>
    return;
 800a9f4:	e000      	b.n	800a9f8 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a9f6:	bf00      	nop
  }
}
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	0800ac4b 	.word	0x0800ac4b

0800aa04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bc80      	pop	{r7}
 800aa14:	4770      	bx	lr

0800aa16 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa1e:	bf00      	nop
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bc80      	pop	{r7}
 800aa26:	4770      	bx	lr

0800aa28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bc80      	pop	{r7}
 800aa38:	4770      	bx	lr

0800aa3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d11e      	bne.n	800aa94 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68da      	ldr	r2, [r3, #12]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa6a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	695a      	ldr	r2, [r3, #20]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f022 0201 	bic.w	r2, r2, #1
 800aa7a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	695a      	ldr	r2, [r3, #20]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa8a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7fd f85b 	bl	8007b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff ffb0 	bl	800aa16 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bf14      	ite	ne
 800aade:	2301      	movne	r3, #1
 800aae0:	2300      	moveq	r3, #0
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b21      	cmp	r3, #33	; 0x21
 800aaf0:	d108      	bne.n	800ab04 <UART_DMAError+0x46>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aafe:	68b8      	ldr	r0, [r7, #8]
 800ab00:	f000 f871 	bl	800abe6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	bf14      	ite	ne
 800ab12:	2301      	movne	r3, #1
 800ab14:	2300      	moveq	r3, #0
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b22      	cmp	r3, #34	; 0x22
 800ab24:	d108      	bne.n	800ab38 <UART_DMAError+0x7a>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab32:	68b8      	ldr	r0, [r7, #8]
 800ab34:	f000 f86c 	bl	800ac10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3c:	f043 0210 	orr.w	r2, r3, #16
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab44:	68b8      	ldr	r0, [r7, #8]
 800ab46:	f7ff ff6f 	bl	800aa28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	603b      	str	r3, [r7, #0]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab62:	e02c      	b.n	800abbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d028      	beq.n	800abbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d007      	beq.n	800ab82 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab72:	f7fd fcc1 	bl	80084f8 <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d21d      	bcs.n	800abbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	695a      	ldr	r2, [r3, #20]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 0201 	bic.w	r2, r2, #1
 800aba0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2220      	movs	r2, #32
 800aba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2220      	movs	r2, #32
 800abae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e00f      	b.n	800abde <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	4013      	ands	r3, r2
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	429a      	cmp	r2, r3
 800abcc:	bf0c      	ite	eq
 800abce:	2301      	moveq	r3, #1
 800abd0:	2300      	movne	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d0c3      	beq.n	800ab64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800abfc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bc80      	pop	{r7}
 800ac0e:	4770      	bx	lr

0800ac10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	695a      	ldr	r2, [r3, #20]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f022 0201 	bic.w	r2, r2, #1
 800ac36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr

0800ac4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7ff fedf 	bl	800aa28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac6a:	bf00      	nop
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b085      	sub	sp, #20
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b21      	cmp	r3, #33	; 0x21
 800ac84:	d13e      	bne.n	800ad04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac8e:	d114      	bne.n	800acba <UART_Transmit_IT+0x48>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d110      	bne.n	800acba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	1c9a      	adds	r2, r3, #2
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	621a      	str	r2, [r3, #32]
 800acb8:	e008      	b.n	800accc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	1c59      	adds	r1, r3, #1
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	6211      	str	r1, [r2, #32]
 800acc4:	781a      	ldrb	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4619      	mov	r1, r3
 800acda:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10f      	bne.n	800ad00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68da      	ldr	r2, [r3, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	e000      	b.n	800ad06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad04:	2302      	movs	r3, #2
  }
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bc80      	pop	{r7}
 800ad0e:	4770      	bx	lr

0800ad10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff fe67 	bl	800aa04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b22      	cmp	r3, #34	; 0x22
 800ad52:	d170      	bne.n	800ae36 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5c:	d117      	bne.n	800ad8e <UART_Receive_IT+0x4e>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d113      	bne.n	800ad8e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad86:	1c9a      	adds	r2, r3, #2
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ad8c:	e026      	b.n	800addc <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad92:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ada0:	d007      	beq.n	800adb2 <UART_Receive_IT+0x72>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <UART_Receive_IT+0x80>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e008      	b.n	800add2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4619      	mov	r1, r3
 800adea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800adec:	2b00      	cmp	r3, #0
 800adee:	d120      	bne.n	800ae32 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f022 0220 	bic.w	r2, r2, #32
 800adfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68da      	ldr	r2, [r3, #12]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695a      	ldr	r2, [r3, #20]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f022 0201 	bic.w	r2, r2, #1
 800ae1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fc fe91 	bl	8007b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	e002      	b.n	800ae38 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	e000      	b.n	800ae38 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800ae36:	2302      	movs	r3, #2
  }
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ae7a:	f023 030c 	bic.w	r3, r3, #12
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	6812      	ldr	r2, [r2, #0]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	430b      	orrs	r3, r1
 800ae86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	699a      	ldr	r2, [r3, #24]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a2c      	ldr	r2, [pc, #176]	; (800af54 <UART_SetConfig+0x114>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d103      	bne.n	800aeb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800aea8:	f7fe fe90 	bl	8009bcc <HAL_RCC_GetPCLK2Freq>
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	e002      	b.n	800aeb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800aeb0:	f7fe fe78 	bl	8009ba4 <HAL_RCC_GetPCLK1Freq>
 800aeb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009a      	lsls	r2, r3, #2
 800aec0:	441a      	add	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aecc:	4a22      	ldr	r2, [pc, #136]	; (800af58 <UART_SetConfig+0x118>)
 800aece:	fba2 2303 	umull	r2, r3, r2, r3
 800aed2:	095b      	lsrs	r3, r3, #5
 800aed4:	0119      	lsls	r1, r3, #4
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009a      	lsls	r2, r3, #2
 800aee0:	441a      	add	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	fbb2 f2f3 	udiv	r2, r2, r3
 800aeec:	4b1a      	ldr	r3, [pc, #104]	; (800af58 <UART_SetConfig+0x118>)
 800aeee:	fba3 0302 	umull	r0, r3, r3, r2
 800aef2:	095b      	lsrs	r3, r3, #5
 800aef4:	2064      	movs	r0, #100	; 0x64
 800aef6:	fb00 f303 	mul.w	r3, r0, r3
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	011b      	lsls	r3, r3, #4
 800aefe:	3332      	adds	r3, #50	; 0x32
 800af00:	4a15      	ldr	r2, [pc, #84]	; (800af58 <UART_SetConfig+0x118>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af0c:	4419      	add	r1, r3
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009a      	lsls	r2, r3, #2
 800af18:	441a      	add	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	fbb2 f2f3 	udiv	r2, r2, r3
 800af24:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <UART_SetConfig+0x118>)
 800af26:	fba3 0302 	umull	r0, r3, r3, r2
 800af2a:	095b      	lsrs	r3, r3, #5
 800af2c:	2064      	movs	r0, #100	; 0x64
 800af2e:	fb00 f303 	mul.w	r3, r0, r3
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	011b      	lsls	r3, r3, #4
 800af36:	3332      	adds	r3, #50	; 0x32
 800af38:	4a07      	ldr	r2, [pc, #28]	; (800af58 <UART_SetConfig+0x118>)
 800af3a:	fba2 2303 	umull	r2, r3, r2, r3
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	f003 020f 	and.w	r2, r3, #15
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	440a      	add	r2, r1
 800af4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800af4c:	bf00      	nop
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	40013800 	.word	0x40013800
 800af58:	51eb851f 	.word	0x51eb851f

0800af5c <__errno>:
 800af5c:	4b01      	ldr	r3, [pc, #4]	; (800af64 <__errno+0x8>)
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	2000001c 	.word	0x2000001c

0800af68 <__libc_init_array>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	2600      	movs	r6, #0
 800af6c:	4d0c      	ldr	r5, [pc, #48]	; (800afa0 <__libc_init_array+0x38>)
 800af6e:	4c0d      	ldr	r4, [pc, #52]	; (800afa4 <__libc_init_array+0x3c>)
 800af70:	1b64      	subs	r4, r4, r5
 800af72:	10a4      	asrs	r4, r4, #2
 800af74:	42a6      	cmp	r6, r4
 800af76:	d109      	bne.n	800af8c <__libc_init_array+0x24>
 800af78:	f000 fc92 	bl	800b8a0 <_init>
 800af7c:	2600      	movs	r6, #0
 800af7e:	4d0a      	ldr	r5, [pc, #40]	; (800afa8 <__libc_init_array+0x40>)
 800af80:	4c0a      	ldr	r4, [pc, #40]	; (800afac <__libc_init_array+0x44>)
 800af82:	1b64      	subs	r4, r4, r5
 800af84:	10a4      	asrs	r4, r4, #2
 800af86:	42a6      	cmp	r6, r4
 800af88:	d105      	bne.n	800af96 <__libc_init_array+0x2e>
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af90:	4798      	blx	r3
 800af92:	3601      	adds	r6, #1
 800af94:	e7ee      	b.n	800af74 <__libc_init_array+0xc>
 800af96:	f855 3b04 	ldr.w	r3, [r5], #4
 800af9a:	4798      	blx	r3
 800af9c:	3601      	adds	r6, #1
 800af9e:	e7f2      	b.n	800af86 <__libc_init_array+0x1e>
 800afa0:	0800d444 	.word	0x0800d444
 800afa4:	0800d444 	.word	0x0800d444
 800afa8:	0800d444 	.word	0x0800d444
 800afac:	0800d448 	.word	0x0800d448

0800afb0 <memset>:
 800afb0:	4603      	mov	r3, r0
 800afb2:	4402      	add	r2, r0
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d100      	bne.n	800afba <memset+0xa>
 800afb8:	4770      	bx	lr
 800afba:	f803 1b01 	strb.w	r1, [r3], #1
 800afbe:	e7f9      	b.n	800afb4 <memset+0x4>

0800afc0 <siprintf>:
 800afc0:	b40e      	push	{r1, r2, r3}
 800afc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afc6:	b500      	push	{lr}
 800afc8:	b09c      	sub	sp, #112	; 0x70
 800afca:	ab1d      	add	r3, sp, #116	; 0x74
 800afcc:	9002      	str	r0, [sp, #8]
 800afce:	9006      	str	r0, [sp, #24]
 800afd0:	9107      	str	r1, [sp, #28]
 800afd2:	9104      	str	r1, [sp, #16]
 800afd4:	4808      	ldr	r0, [pc, #32]	; (800aff8 <siprintf+0x38>)
 800afd6:	4909      	ldr	r1, [pc, #36]	; (800affc <siprintf+0x3c>)
 800afd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800afdc:	9105      	str	r1, [sp, #20]
 800afde:	6800      	ldr	r0, [r0, #0]
 800afe0:	a902      	add	r1, sp, #8
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	f000 f89e 	bl	800b124 <_svfiprintf_r>
 800afe8:	2200      	movs	r2, #0
 800afea:	9b02      	ldr	r3, [sp, #8]
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	b01c      	add	sp, #112	; 0x70
 800aff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aff4:	b003      	add	sp, #12
 800aff6:	4770      	bx	lr
 800aff8:	2000001c 	.word	0x2000001c
 800affc:	ffff0208 	.word	0xffff0208

0800b000 <strchr>:
 800b000:	4603      	mov	r3, r0
 800b002:	b2c9      	uxtb	r1, r1
 800b004:	4618      	mov	r0, r3
 800b006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b00a:	b112      	cbz	r2, 800b012 <strchr+0x12>
 800b00c:	428a      	cmp	r2, r1
 800b00e:	d1f9      	bne.n	800b004 <strchr+0x4>
 800b010:	4770      	bx	lr
 800b012:	2900      	cmp	r1, #0
 800b014:	bf18      	it	ne
 800b016:	2000      	movne	r0, #0
 800b018:	4770      	bx	lr

0800b01a <strncmp>:
 800b01a:	b510      	push	{r4, lr}
 800b01c:	b16a      	cbz	r2, 800b03a <strncmp+0x20>
 800b01e:	3901      	subs	r1, #1
 800b020:	1884      	adds	r4, r0, r2
 800b022:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b026:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d103      	bne.n	800b036 <strncmp+0x1c>
 800b02e:	42a0      	cmp	r0, r4
 800b030:	d001      	beq.n	800b036 <strncmp+0x1c>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1f5      	bne.n	800b022 <strncmp+0x8>
 800b036:	1a98      	subs	r0, r3, r2
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	4610      	mov	r0, r2
 800b03c:	e7fc      	b.n	800b038 <strncmp+0x1e>

0800b03e <strstr>:
 800b03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b040:	780c      	ldrb	r4, [r1, #0]
 800b042:	b164      	cbz	r4, 800b05e <strstr+0x20>
 800b044:	4603      	mov	r3, r0
 800b046:	781a      	ldrb	r2, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	1c5e      	adds	r6, r3, #1
 800b04c:	b90a      	cbnz	r2, 800b052 <strstr+0x14>
 800b04e:	4610      	mov	r0, r2
 800b050:	e005      	b.n	800b05e <strstr+0x20>
 800b052:	4294      	cmp	r4, r2
 800b054:	d108      	bne.n	800b068 <strstr+0x2a>
 800b056:	460d      	mov	r5, r1
 800b058:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b05c:	b902      	cbnz	r2, 800b060 <strstr+0x22>
 800b05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b060:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b064:	4297      	cmp	r7, r2
 800b066:	d0f7      	beq.n	800b058 <strstr+0x1a>
 800b068:	4633      	mov	r3, r6
 800b06a:	e7ec      	b.n	800b046 <strstr+0x8>

0800b06c <__ssputs_r>:
 800b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	688e      	ldr	r6, [r1, #8]
 800b072:	4682      	mov	sl, r0
 800b074:	429e      	cmp	r6, r3
 800b076:	460c      	mov	r4, r1
 800b078:	4690      	mov	r8, r2
 800b07a:	461f      	mov	r7, r3
 800b07c:	d838      	bhi.n	800b0f0 <__ssputs_r+0x84>
 800b07e:	898a      	ldrh	r2, [r1, #12]
 800b080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b084:	d032      	beq.n	800b0ec <__ssputs_r+0x80>
 800b086:	6825      	ldr	r5, [r4, #0]
 800b088:	6909      	ldr	r1, [r1, #16]
 800b08a:	3301      	adds	r3, #1
 800b08c:	eba5 0901 	sub.w	r9, r5, r1
 800b090:	6965      	ldr	r5, [r4, #20]
 800b092:	444b      	add	r3, r9
 800b094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b09c:	106d      	asrs	r5, r5, #1
 800b09e:	429d      	cmp	r5, r3
 800b0a0:	bf38      	it	cc
 800b0a2:	461d      	movcc	r5, r3
 800b0a4:	0553      	lsls	r3, r2, #21
 800b0a6:	d531      	bpl.n	800b10c <__ssputs_r+0xa0>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f000 fb53 	bl	800b754 <_malloc_r>
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	b950      	cbnz	r0, 800b0c8 <__ssputs_r+0x5c>
 800b0b2:	230c      	movs	r3, #12
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	f8ca 3000 	str.w	r3, [sl]
 800b0bc:	89a3      	ldrh	r3, [r4, #12]
 800b0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c8:	464a      	mov	r2, r9
 800b0ca:	6921      	ldr	r1, [r4, #16]
 800b0cc:	f000 face 	bl	800b66c <memcpy>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	6126      	str	r6, [r4, #16]
 800b0de:	444e      	add	r6, r9
 800b0e0:	6026      	str	r6, [r4, #0]
 800b0e2:	463e      	mov	r6, r7
 800b0e4:	6165      	str	r5, [r4, #20]
 800b0e6:	eba5 0509 	sub.w	r5, r5, r9
 800b0ea:	60a5      	str	r5, [r4, #8]
 800b0ec:	42be      	cmp	r6, r7
 800b0ee:	d900      	bls.n	800b0f2 <__ssputs_r+0x86>
 800b0f0:	463e      	mov	r6, r7
 800b0f2:	4632      	mov	r2, r6
 800b0f4:	4641      	mov	r1, r8
 800b0f6:	6820      	ldr	r0, [r4, #0]
 800b0f8:	f000 fac6 	bl	800b688 <memmove>
 800b0fc:	68a3      	ldr	r3, [r4, #8]
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	1b9b      	subs	r3, r3, r6
 800b102:	4432      	add	r2, r6
 800b104:	2000      	movs	r0, #0
 800b106:	60a3      	str	r3, [r4, #8]
 800b108:	6022      	str	r2, [r4, #0]
 800b10a:	e7db      	b.n	800b0c4 <__ssputs_r+0x58>
 800b10c:	462a      	mov	r2, r5
 800b10e:	f000 fb7b 	bl	800b808 <_realloc_r>
 800b112:	4606      	mov	r6, r0
 800b114:	2800      	cmp	r0, #0
 800b116:	d1e1      	bne.n	800b0dc <__ssputs_r+0x70>
 800b118:	4650      	mov	r0, sl
 800b11a:	6921      	ldr	r1, [r4, #16]
 800b11c:	f000 face 	bl	800b6bc <_free_r>
 800b120:	e7c7      	b.n	800b0b2 <__ssputs_r+0x46>
	...

0800b124 <_svfiprintf_r>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	4698      	mov	r8, r3
 800b12a:	898b      	ldrh	r3, [r1, #12]
 800b12c:	4607      	mov	r7, r0
 800b12e:	061b      	lsls	r3, r3, #24
 800b130:	460d      	mov	r5, r1
 800b132:	4614      	mov	r4, r2
 800b134:	b09d      	sub	sp, #116	; 0x74
 800b136:	d50e      	bpl.n	800b156 <_svfiprintf_r+0x32>
 800b138:	690b      	ldr	r3, [r1, #16]
 800b13a:	b963      	cbnz	r3, 800b156 <_svfiprintf_r+0x32>
 800b13c:	2140      	movs	r1, #64	; 0x40
 800b13e:	f000 fb09 	bl	800b754 <_malloc_r>
 800b142:	6028      	str	r0, [r5, #0]
 800b144:	6128      	str	r0, [r5, #16]
 800b146:	b920      	cbnz	r0, 800b152 <_svfiprintf_r+0x2e>
 800b148:	230c      	movs	r3, #12
 800b14a:	603b      	str	r3, [r7, #0]
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	e0d1      	b.n	800b2f6 <_svfiprintf_r+0x1d2>
 800b152:	2340      	movs	r3, #64	; 0x40
 800b154:	616b      	str	r3, [r5, #20]
 800b156:	2300      	movs	r3, #0
 800b158:	9309      	str	r3, [sp, #36]	; 0x24
 800b15a:	2320      	movs	r3, #32
 800b15c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b160:	2330      	movs	r3, #48	; 0x30
 800b162:	f04f 0901 	mov.w	r9, #1
 800b166:	f8cd 800c 	str.w	r8, [sp, #12]
 800b16a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b310 <_svfiprintf_r+0x1ec>
 800b16e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b172:	4623      	mov	r3, r4
 800b174:	469a      	mov	sl, r3
 800b176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b17a:	b10a      	cbz	r2, 800b180 <_svfiprintf_r+0x5c>
 800b17c:	2a25      	cmp	r2, #37	; 0x25
 800b17e:	d1f9      	bne.n	800b174 <_svfiprintf_r+0x50>
 800b180:	ebba 0b04 	subs.w	fp, sl, r4
 800b184:	d00b      	beq.n	800b19e <_svfiprintf_r+0x7a>
 800b186:	465b      	mov	r3, fp
 800b188:	4622      	mov	r2, r4
 800b18a:	4629      	mov	r1, r5
 800b18c:	4638      	mov	r0, r7
 800b18e:	f7ff ff6d 	bl	800b06c <__ssputs_r>
 800b192:	3001      	adds	r0, #1
 800b194:	f000 80aa 	beq.w	800b2ec <_svfiprintf_r+0x1c8>
 800b198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b19a:	445a      	add	r2, fp
 800b19c:	9209      	str	r2, [sp, #36]	; 0x24
 800b19e:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80a2 	beq.w	800b2ec <_svfiprintf_r+0x1c8>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1b2:	f10a 0a01 	add.w	sl, sl, #1
 800b1b6:	9304      	str	r3, [sp, #16]
 800b1b8:	9307      	str	r3, [sp, #28]
 800b1ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1be:	931a      	str	r3, [sp, #104]	; 0x68
 800b1c0:	4654      	mov	r4, sl
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c8:	4851      	ldr	r0, [pc, #324]	; (800b310 <_svfiprintf_r+0x1ec>)
 800b1ca:	f000 fa41 	bl	800b650 <memchr>
 800b1ce:	9a04      	ldr	r2, [sp, #16]
 800b1d0:	b9d8      	cbnz	r0, 800b20a <_svfiprintf_r+0xe6>
 800b1d2:	06d0      	lsls	r0, r2, #27
 800b1d4:	bf44      	itt	mi
 800b1d6:	2320      	movmi	r3, #32
 800b1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1dc:	0711      	lsls	r1, r2, #28
 800b1de:	bf44      	itt	mi
 800b1e0:	232b      	movmi	r3, #43	; 0x2b
 800b1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b1ec:	d015      	beq.n	800b21a <_svfiprintf_r+0xf6>
 800b1ee:	4654      	mov	r4, sl
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f04f 0c0a 	mov.w	ip, #10
 800b1f6:	9a07      	ldr	r2, [sp, #28]
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1fe:	3b30      	subs	r3, #48	; 0x30
 800b200:	2b09      	cmp	r3, #9
 800b202:	d94e      	bls.n	800b2a2 <_svfiprintf_r+0x17e>
 800b204:	b1b0      	cbz	r0, 800b234 <_svfiprintf_r+0x110>
 800b206:	9207      	str	r2, [sp, #28]
 800b208:	e014      	b.n	800b234 <_svfiprintf_r+0x110>
 800b20a:	eba0 0308 	sub.w	r3, r0, r8
 800b20e:	fa09 f303 	lsl.w	r3, r9, r3
 800b212:	4313      	orrs	r3, r2
 800b214:	46a2      	mov	sl, r4
 800b216:	9304      	str	r3, [sp, #16]
 800b218:	e7d2      	b.n	800b1c0 <_svfiprintf_r+0x9c>
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	1d19      	adds	r1, r3, #4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	9103      	str	r1, [sp, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	bfbb      	ittet	lt
 800b226:	425b      	neglt	r3, r3
 800b228:	f042 0202 	orrlt.w	r2, r2, #2
 800b22c:	9307      	strge	r3, [sp, #28]
 800b22e:	9307      	strlt	r3, [sp, #28]
 800b230:	bfb8      	it	lt
 800b232:	9204      	strlt	r2, [sp, #16]
 800b234:	7823      	ldrb	r3, [r4, #0]
 800b236:	2b2e      	cmp	r3, #46	; 0x2e
 800b238:	d10c      	bne.n	800b254 <_svfiprintf_r+0x130>
 800b23a:	7863      	ldrb	r3, [r4, #1]
 800b23c:	2b2a      	cmp	r3, #42	; 0x2a
 800b23e:	d135      	bne.n	800b2ac <_svfiprintf_r+0x188>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	3402      	adds	r4, #2
 800b244:	1d1a      	adds	r2, r3, #4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	9203      	str	r2, [sp, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfb8      	it	lt
 800b24e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b252:	9305      	str	r3, [sp, #20]
 800b254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b320 <_svfiprintf_r+0x1fc>
 800b258:	2203      	movs	r2, #3
 800b25a:	4650      	mov	r0, sl
 800b25c:	7821      	ldrb	r1, [r4, #0]
 800b25e:	f000 f9f7 	bl	800b650 <memchr>
 800b262:	b140      	cbz	r0, 800b276 <_svfiprintf_r+0x152>
 800b264:	2340      	movs	r3, #64	; 0x40
 800b266:	eba0 000a 	sub.w	r0, r0, sl
 800b26a:	fa03 f000 	lsl.w	r0, r3, r0
 800b26e:	9b04      	ldr	r3, [sp, #16]
 800b270:	3401      	adds	r4, #1
 800b272:	4303      	orrs	r3, r0
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b27a:	2206      	movs	r2, #6
 800b27c:	4825      	ldr	r0, [pc, #148]	; (800b314 <_svfiprintf_r+0x1f0>)
 800b27e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b282:	f000 f9e5 	bl	800b650 <memchr>
 800b286:	2800      	cmp	r0, #0
 800b288:	d038      	beq.n	800b2fc <_svfiprintf_r+0x1d8>
 800b28a:	4b23      	ldr	r3, [pc, #140]	; (800b318 <_svfiprintf_r+0x1f4>)
 800b28c:	bb1b      	cbnz	r3, 800b2d6 <_svfiprintf_r+0x1b2>
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	3307      	adds	r3, #7
 800b292:	f023 0307 	bic.w	r3, r3, #7
 800b296:	3308      	adds	r3, #8
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29c:	4433      	add	r3, r6
 800b29e:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a0:	e767      	b.n	800b172 <_svfiprintf_r+0x4e>
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2aa:	e7a5      	b.n	800b1f8 <_svfiprintf_r+0xd4>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f04f 0c0a 	mov.w	ip, #10
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	3401      	adds	r4, #1
 800b2b6:	9305      	str	r3, [sp, #20]
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2be:	3a30      	subs	r2, #48	; 0x30
 800b2c0:	2a09      	cmp	r2, #9
 800b2c2:	d903      	bls.n	800b2cc <_svfiprintf_r+0x1a8>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0c5      	beq.n	800b254 <_svfiprintf_r+0x130>
 800b2c8:	9105      	str	r1, [sp, #20]
 800b2ca:	e7c3      	b.n	800b254 <_svfiprintf_r+0x130>
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2d4:	e7f0      	b.n	800b2b8 <_svfiprintf_r+0x194>
 800b2d6:	ab03      	add	r3, sp, #12
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	462a      	mov	r2, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <_svfiprintf_r+0x1f8>)
 800b2e0:	a904      	add	r1, sp, #16
 800b2e2:	f3af 8000 	nop.w
 800b2e6:	1c42      	adds	r2, r0, #1
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	d1d6      	bne.n	800b29a <_svfiprintf_r+0x176>
 800b2ec:	89ab      	ldrh	r3, [r5, #12]
 800b2ee:	065b      	lsls	r3, r3, #25
 800b2f0:	f53f af2c 	bmi.w	800b14c <_svfiprintf_r+0x28>
 800b2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2f6:	b01d      	add	sp, #116	; 0x74
 800b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	ab03      	add	r3, sp, #12
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	462a      	mov	r2, r5
 800b302:	4638      	mov	r0, r7
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <_svfiprintf_r+0x1f8>)
 800b306:	a904      	add	r1, sp, #16
 800b308:	f000 f87c 	bl	800b404 <_printf_i>
 800b30c:	e7eb      	b.n	800b2e6 <_svfiprintf_r+0x1c2>
 800b30e:	bf00      	nop
 800b310:	0800d410 	.word	0x0800d410
 800b314:	0800d41a 	.word	0x0800d41a
 800b318:	00000000 	.word	0x00000000
 800b31c:	0800b06d 	.word	0x0800b06d
 800b320:	0800d416 	.word	0x0800d416

0800b324 <_printf_common>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	4616      	mov	r6, r2
 800b32a:	4699      	mov	r9, r3
 800b32c:	688a      	ldr	r2, [r1, #8]
 800b32e:	690b      	ldr	r3, [r1, #16]
 800b330:	4607      	mov	r7, r0
 800b332:	4293      	cmp	r3, r2
 800b334:	bfb8      	it	lt
 800b336:	4613      	movlt	r3, r2
 800b338:	6033      	str	r3, [r6, #0]
 800b33a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b33e:	460c      	mov	r4, r1
 800b340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b344:	b10a      	cbz	r2, 800b34a <_printf_common+0x26>
 800b346:	3301      	adds	r3, #1
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	0699      	lsls	r1, r3, #26
 800b34e:	bf42      	ittt	mi
 800b350:	6833      	ldrmi	r3, [r6, #0]
 800b352:	3302      	addmi	r3, #2
 800b354:	6033      	strmi	r3, [r6, #0]
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	f015 0506 	ands.w	r5, r5, #6
 800b35c:	d106      	bne.n	800b36c <_printf_common+0x48>
 800b35e:	f104 0a19 	add.w	sl, r4, #25
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	6832      	ldr	r2, [r6, #0]
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dc28      	bgt.n	800b3be <_printf_common+0x9a>
 800b36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b370:	1e13      	subs	r3, r2, #0
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	bf18      	it	ne
 800b376:	2301      	movne	r3, #1
 800b378:	0692      	lsls	r2, r2, #26
 800b37a:	d42d      	bmi.n	800b3d8 <_printf_common+0xb4>
 800b37c:	4649      	mov	r1, r9
 800b37e:	4638      	mov	r0, r7
 800b380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b384:	47c0      	blx	r8
 800b386:	3001      	adds	r0, #1
 800b388:	d020      	beq.n	800b3cc <_printf_common+0xa8>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	68e5      	ldr	r5, [r4, #12]
 800b38e:	f003 0306 	and.w	r3, r3, #6
 800b392:	2b04      	cmp	r3, #4
 800b394:	bf18      	it	ne
 800b396:	2500      	movne	r5, #0
 800b398:	6832      	ldr	r2, [r6, #0]
 800b39a:	f04f 0600 	mov.w	r6, #0
 800b39e:	68a3      	ldr	r3, [r4, #8]
 800b3a0:	bf08      	it	eq
 800b3a2:	1aad      	subeq	r5, r5, r2
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	bf08      	it	eq
 800b3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	bfc4      	itt	gt
 800b3b0:	1a9b      	subgt	r3, r3, r2
 800b3b2:	18ed      	addgt	r5, r5, r3
 800b3b4:	341a      	adds	r4, #26
 800b3b6:	42b5      	cmp	r5, r6
 800b3b8:	d11a      	bne.n	800b3f0 <_printf_common+0xcc>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	e008      	b.n	800b3d0 <_printf_common+0xac>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4652      	mov	r2, sl
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	47c0      	blx	r8
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d103      	bne.n	800b3d4 <_printf_common+0xb0>
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	e7c4      	b.n	800b362 <_printf_common+0x3e>
 800b3d8:	2030      	movs	r0, #48	; 0x30
 800b3da:	18e1      	adds	r1, r4, r3
 800b3dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3e6:	4422      	add	r2, r4
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3ee:	e7c5      	b.n	800b37c <_printf_common+0x58>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	47c0      	blx	r8
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d0e6      	beq.n	800b3cc <_printf_common+0xa8>
 800b3fe:	3601      	adds	r6, #1
 800b400:	e7d9      	b.n	800b3b6 <_printf_common+0x92>
	...

0800b404 <_printf_i>:
 800b404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b408:	460c      	mov	r4, r1
 800b40a:	7e27      	ldrb	r7, [r4, #24]
 800b40c:	4691      	mov	r9, r2
 800b40e:	2f78      	cmp	r7, #120	; 0x78
 800b410:	4680      	mov	r8, r0
 800b412:	469a      	mov	sl, r3
 800b414:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b41a:	d807      	bhi.n	800b42c <_printf_i+0x28>
 800b41c:	2f62      	cmp	r7, #98	; 0x62
 800b41e:	d80a      	bhi.n	800b436 <_printf_i+0x32>
 800b420:	2f00      	cmp	r7, #0
 800b422:	f000 80d9 	beq.w	800b5d8 <_printf_i+0x1d4>
 800b426:	2f58      	cmp	r7, #88	; 0x58
 800b428:	f000 80a4 	beq.w	800b574 <_printf_i+0x170>
 800b42c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b434:	e03a      	b.n	800b4ac <_printf_i+0xa8>
 800b436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b43a:	2b15      	cmp	r3, #21
 800b43c:	d8f6      	bhi.n	800b42c <_printf_i+0x28>
 800b43e:	a001      	add	r0, pc, #4	; (adr r0, 800b444 <_printf_i+0x40>)
 800b440:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b444:	0800b49d 	.word	0x0800b49d
 800b448:	0800b4b1 	.word	0x0800b4b1
 800b44c:	0800b42d 	.word	0x0800b42d
 800b450:	0800b42d 	.word	0x0800b42d
 800b454:	0800b42d 	.word	0x0800b42d
 800b458:	0800b42d 	.word	0x0800b42d
 800b45c:	0800b4b1 	.word	0x0800b4b1
 800b460:	0800b42d 	.word	0x0800b42d
 800b464:	0800b42d 	.word	0x0800b42d
 800b468:	0800b42d 	.word	0x0800b42d
 800b46c:	0800b42d 	.word	0x0800b42d
 800b470:	0800b5bf 	.word	0x0800b5bf
 800b474:	0800b4e1 	.word	0x0800b4e1
 800b478:	0800b5a1 	.word	0x0800b5a1
 800b47c:	0800b42d 	.word	0x0800b42d
 800b480:	0800b42d 	.word	0x0800b42d
 800b484:	0800b5e1 	.word	0x0800b5e1
 800b488:	0800b42d 	.word	0x0800b42d
 800b48c:	0800b4e1 	.word	0x0800b4e1
 800b490:	0800b42d 	.word	0x0800b42d
 800b494:	0800b42d 	.word	0x0800b42d
 800b498:	0800b5a9 	.word	0x0800b5a9
 800b49c:	680b      	ldr	r3, [r1, #0]
 800b49e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4a2:	1d1a      	adds	r2, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	600a      	str	r2, [r1, #0]
 800b4a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e0a4      	b.n	800b5fa <_printf_i+0x1f6>
 800b4b0:	6825      	ldr	r5, [r4, #0]
 800b4b2:	6808      	ldr	r0, [r1, #0]
 800b4b4:	062e      	lsls	r6, r5, #24
 800b4b6:	f100 0304 	add.w	r3, r0, #4
 800b4ba:	d50a      	bpl.n	800b4d2 <_printf_i+0xce>
 800b4bc:	6805      	ldr	r5, [r0, #0]
 800b4be:	600b      	str	r3, [r1, #0]
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	da03      	bge.n	800b4cc <_printf_i+0xc8>
 800b4c4:	232d      	movs	r3, #45	; 0x2d
 800b4c6:	426d      	negs	r5, r5
 800b4c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4cc:	230a      	movs	r3, #10
 800b4ce:	485e      	ldr	r0, [pc, #376]	; (800b648 <_printf_i+0x244>)
 800b4d0:	e019      	b.n	800b506 <_printf_i+0x102>
 800b4d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4d6:	6805      	ldr	r5, [r0, #0]
 800b4d8:	600b      	str	r3, [r1, #0]
 800b4da:	bf18      	it	ne
 800b4dc:	b22d      	sxthne	r5, r5
 800b4de:	e7ef      	b.n	800b4c0 <_printf_i+0xbc>
 800b4e0:	680b      	ldr	r3, [r1, #0]
 800b4e2:	6825      	ldr	r5, [r4, #0]
 800b4e4:	1d18      	adds	r0, r3, #4
 800b4e6:	6008      	str	r0, [r1, #0]
 800b4e8:	0628      	lsls	r0, r5, #24
 800b4ea:	d501      	bpl.n	800b4f0 <_printf_i+0xec>
 800b4ec:	681d      	ldr	r5, [r3, #0]
 800b4ee:	e002      	b.n	800b4f6 <_printf_i+0xf2>
 800b4f0:	0669      	lsls	r1, r5, #25
 800b4f2:	d5fb      	bpl.n	800b4ec <_printf_i+0xe8>
 800b4f4:	881d      	ldrh	r5, [r3, #0]
 800b4f6:	2f6f      	cmp	r7, #111	; 0x6f
 800b4f8:	bf0c      	ite	eq
 800b4fa:	2308      	moveq	r3, #8
 800b4fc:	230a      	movne	r3, #10
 800b4fe:	4852      	ldr	r0, [pc, #328]	; (800b648 <_printf_i+0x244>)
 800b500:	2100      	movs	r1, #0
 800b502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b506:	6866      	ldr	r6, [r4, #4]
 800b508:	2e00      	cmp	r6, #0
 800b50a:	bfa8      	it	ge
 800b50c:	6821      	ldrge	r1, [r4, #0]
 800b50e:	60a6      	str	r6, [r4, #8]
 800b510:	bfa4      	itt	ge
 800b512:	f021 0104 	bicge.w	r1, r1, #4
 800b516:	6021      	strge	r1, [r4, #0]
 800b518:	b90d      	cbnz	r5, 800b51e <_printf_i+0x11a>
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	d04d      	beq.n	800b5ba <_printf_i+0x1b6>
 800b51e:	4616      	mov	r6, r2
 800b520:	fbb5 f1f3 	udiv	r1, r5, r3
 800b524:	fb03 5711 	mls	r7, r3, r1, r5
 800b528:	5dc7      	ldrb	r7, [r0, r7]
 800b52a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b52e:	462f      	mov	r7, r5
 800b530:	42bb      	cmp	r3, r7
 800b532:	460d      	mov	r5, r1
 800b534:	d9f4      	bls.n	800b520 <_printf_i+0x11c>
 800b536:	2b08      	cmp	r3, #8
 800b538:	d10b      	bne.n	800b552 <_printf_i+0x14e>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	07df      	lsls	r7, r3, #31
 800b53e:	d508      	bpl.n	800b552 <_printf_i+0x14e>
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	6861      	ldr	r1, [r4, #4]
 800b544:	4299      	cmp	r1, r3
 800b546:	bfde      	ittt	le
 800b548:	2330      	movle	r3, #48	; 0x30
 800b54a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b54e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b552:	1b92      	subs	r2, r2, r6
 800b554:	6122      	str	r2, [r4, #16]
 800b556:	464b      	mov	r3, r9
 800b558:	4621      	mov	r1, r4
 800b55a:	4640      	mov	r0, r8
 800b55c:	f8cd a000 	str.w	sl, [sp]
 800b560:	aa03      	add	r2, sp, #12
 800b562:	f7ff fedf 	bl	800b324 <_printf_common>
 800b566:	3001      	adds	r0, #1
 800b568:	d14c      	bne.n	800b604 <_printf_i+0x200>
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295
 800b56e:	b004      	add	sp, #16
 800b570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b574:	4834      	ldr	r0, [pc, #208]	; (800b648 <_printf_i+0x244>)
 800b576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b57a:	680e      	ldr	r6, [r1, #0]
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b582:	061f      	lsls	r7, r3, #24
 800b584:	600e      	str	r6, [r1, #0]
 800b586:	d514      	bpl.n	800b5b2 <_printf_i+0x1ae>
 800b588:	07d9      	lsls	r1, r3, #31
 800b58a:	bf44      	itt	mi
 800b58c:	f043 0320 	orrmi.w	r3, r3, #32
 800b590:	6023      	strmi	r3, [r4, #0]
 800b592:	b91d      	cbnz	r5, 800b59c <_printf_i+0x198>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	f023 0320 	bic.w	r3, r3, #32
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	2310      	movs	r3, #16
 800b59e:	e7af      	b.n	800b500 <_printf_i+0xfc>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	f043 0320 	orr.w	r3, r3, #32
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	2378      	movs	r3, #120	; 0x78
 800b5aa:	4828      	ldr	r0, [pc, #160]	; (800b64c <_printf_i+0x248>)
 800b5ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5b0:	e7e3      	b.n	800b57a <_printf_i+0x176>
 800b5b2:	065e      	lsls	r6, r3, #25
 800b5b4:	bf48      	it	mi
 800b5b6:	b2ad      	uxthmi	r5, r5
 800b5b8:	e7e6      	b.n	800b588 <_printf_i+0x184>
 800b5ba:	4616      	mov	r6, r2
 800b5bc:	e7bb      	b.n	800b536 <_printf_i+0x132>
 800b5be:	680b      	ldr	r3, [r1, #0]
 800b5c0:	6826      	ldr	r6, [r4, #0]
 800b5c2:	1d1d      	adds	r5, r3, #4
 800b5c4:	6960      	ldr	r0, [r4, #20]
 800b5c6:	600d      	str	r5, [r1, #0]
 800b5c8:	0635      	lsls	r5, r6, #24
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	d501      	bpl.n	800b5d2 <_printf_i+0x1ce>
 800b5ce:	6018      	str	r0, [r3, #0]
 800b5d0:	e002      	b.n	800b5d8 <_printf_i+0x1d4>
 800b5d2:	0671      	lsls	r1, r6, #25
 800b5d4:	d5fb      	bpl.n	800b5ce <_printf_i+0x1ca>
 800b5d6:	8018      	strh	r0, [r3, #0]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4616      	mov	r6, r2
 800b5dc:	6123      	str	r3, [r4, #16]
 800b5de:	e7ba      	b.n	800b556 <_printf_i+0x152>
 800b5e0:	680b      	ldr	r3, [r1, #0]
 800b5e2:	1d1a      	adds	r2, r3, #4
 800b5e4:	600a      	str	r2, [r1, #0]
 800b5e6:	681e      	ldr	r6, [r3, #0]
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	6862      	ldr	r2, [r4, #4]
 800b5ee:	f000 f82f 	bl	800b650 <memchr>
 800b5f2:	b108      	cbz	r0, 800b5f8 <_printf_i+0x1f4>
 800b5f4:	1b80      	subs	r0, r0, r6
 800b5f6:	6060      	str	r0, [r4, #4]
 800b5f8:	6863      	ldr	r3, [r4, #4]
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b602:	e7a8      	b.n	800b556 <_printf_i+0x152>
 800b604:	4632      	mov	r2, r6
 800b606:	4649      	mov	r1, r9
 800b608:	4640      	mov	r0, r8
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	47d0      	blx	sl
 800b60e:	3001      	adds	r0, #1
 800b610:	d0ab      	beq.n	800b56a <_printf_i+0x166>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	079b      	lsls	r3, r3, #30
 800b616:	d413      	bmi.n	800b640 <_printf_i+0x23c>
 800b618:	68e0      	ldr	r0, [r4, #12]
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	4298      	cmp	r0, r3
 800b61e:	bfb8      	it	lt
 800b620:	4618      	movlt	r0, r3
 800b622:	e7a4      	b.n	800b56e <_printf_i+0x16a>
 800b624:	2301      	movs	r3, #1
 800b626:	4632      	mov	r2, r6
 800b628:	4649      	mov	r1, r9
 800b62a:	4640      	mov	r0, r8
 800b62c:	47d0      	blx	sl
 800b62e:	3001      	adds	r0, #1
 800b630:	d09b      	beq.n	800b56a <_printf_i+0x166>
 800b632:	3501      	adds	r5, #1
 800b634:	68e3      	ldr	r3, [r4, #12]
 800b636:	9903      	ldr	r1, [sp, #12]
 800b638:	1a5b      	subs	r3, r3, r1
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	dcf2      	bgt.n	800b624 <_printf_i+0x220>
 800b63e:	e7eb      	b.n	800b618 <_printf_i+0x214>
 800b640:	2500      	movs	r5, #0
 800b642:	f104 0619 	add.w	r6, r4, #25
 800b646:	e7f5      	b.n	800b634 <_printf_i+0x230>
 800b648:	0800d421 	.word	0x0800d421
 800b64c:	0800d432 	.word	0x0800d432

0800b650 <memchr>:
 800b650:	4603      	mov	r3, r0
 800b652:	b510      	push	{r4, lr}
 800b654:	b2c9      	uxtb	r1, r1
 800b656:	4402      	add	r2, r0
 800b658:	4293      	cmp	r3, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	d101      	bne.n	800b662 <memchr+0x12>
 800b65e:	2000      	movs	r0, #0
 800b660:	e003      	b.n	800b66a <memchr+0x1a>
 800b662:	7804      	ldrb	r4, [r0, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	428c      	cmp	r4, r1
 800b668:	d1f6      	bne.n	800b658 <memchr+0x8>
 800b66a:	bd10      	pop	{r4, pc}

0800b66c <memcpy>:
 800b66c:	440a      	add	r2, r1
 800b66e:	4291      	cmp	r1, r2
 800b670:	f100 33ff 	add.w	r3, r0, #4294967295
 800b674:	d100      	bne.n	800b678 <memcpy+0xc>
 800b676:	4770      	bx	lr
 800b678:	b510      	push	{r4, lr}
 800b67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b67e:	4291      	cmp	r1, r2
 800b680:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b684:	d1f9      	bne.n	800b67a <memcpy+0xe>
 800b686:	bd10      	pop	{r4, pc}

0800b688 <memmove>:
 800b688:	4288      	cmp	r0, r1
 800b68a:	b510      	push	{r4, lr}
 800b68c:	eb01 0402 	add.w	r4, r1, r2
 800b690:	d902      	bls.n	800b698 <memmove+0x10>
 800b692:	4284      	cmp	r4, r0
 800b694:	4623      	mov	r3, r4
 800b696:	d807      	bhi.n	800b6a8 <memmove+0x20>
 800b698:	1e43      	subs	r3, r0, #1
 800b69a:	42a1      	cmp	r1, r4
 800b69c:	d008      	beq.n	800b6b0 <memmove+0x28>
 800b69e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6a6:	e7f8      	b.n	800b69a <memmove+0x12>
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	4402      	add	r2, r0
 800b6ac:	428a      	cmp	r2, r1
 800b6ae:	d100      	bne.n	800b6b2 <memmove+0x2a>
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ba:	e7f7      	b.n	800b6ac <memmove+0x24>

0800b6bc <_free_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4605      	mov	r5, r0
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	d043      	beq.n	800b74c <_free_r+0x90>
 800b6c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c8:	1f0c      	subs	r4, r1, #4
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	bfb8      	it	lt
 800b6ce:	18e4      	addlt	r4, r4, r3
 800b6d0:	f000 f8d0 	bl	800b874 <__malloc_lock>
 800b6d4:	4a1e      	ldr	r2, [pc, #120]	; (800b750 <_free_r+0x94>)
 800b6d6:	6813      	ldr	r3, [r2, #0]
 800b6d8:	4610      	mov	r0, r2
 800b6da:	b933      	cbnz	r3, 800b6ea <_free_r+0x2e>
 800b6dc:	6063      	str	r3, [r4, #4]
 800b6de:	6014      	str	r4, [r2, #0]
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e6:	f000 b8cb 	b.w	800b880 <__malloc_unlock>
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	d90a      	bls.n	800b704 <_free_r+0x48>
 800b6ee:	6821      	ldr	r1, [r4, #0]
 800b6f0:	1862      	adds	r2, r4, r1
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	bf01      	itttt	eq
 800b6f6:	681a      	ldreq	r2, [r3, #0]
 800b6f8:	685b      	ldreq	r3, [r3, #4]
 800b6fa:	1852      	addeq	r2, r2, r1
 800b6fc:	6022      	streq	r2, [r4, #0]
 800b6fe:	6063      	str	r3, [r4, #4]
 800b700:	6004      	str	r4, [r0, #0]
 800b702:	e7ed      	b.n	800b6e0 <_free_r+0x24>
 800b704:	461a      	mov	r2, r3
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	b10b      	cbz	r3, 800b70e <_free_r+0x52>
 800b70a:	42a3      	cmp	r3, r4
 800b70c:	d9fa      	bls.n	800b704 <_free_r+0x48>
 800b70e:	6811      	ldr	r1, [r2, #0]
 800b710:	1850      	adds	r0, r2, r1
 800b712:	42a0      	cmp	r0, r4
 800b714:	d10b      	bne.n	800b72e <_free_r+0x72>
 800b716:	6820      	ldr	r0, [r4, #0]
 800b718:	4401      	add	r1, r0
 800b71a:	1850      	adds	r0, r2, r1
 800b71c:	4283      	cmp	r3, r0
 800b71e:	6011      	str	r1, [r2, #0]
 800b720:	d1de      	bne.n	800b6e0 <_free_r+0x24>
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	4401      	add	r1, r0
 800b728:	6011      	str	r1, [r2, #0]
 800b72a:	6053      	str	r3, [r2, #4]
 800b72c:	e7d8      	b.n	800b6e0 <_free_r+0x24>
 800b72e:	d902      	bls.n	800b736 <_free_r+0x7a>
 800b730:	230c      	movs	r3, #12
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	e7d4      	b.n	800b6e0 <_free_r+0x24>
 800b736:	6820      	ldr	r0, [r4, #0]
 800b738:	1821      	adds	r1, r4, r0
 800b73a:	428b      	cmp	r3, r1
 800b73c:	bf01      	itttt	eq
 800b73e:	6819      	ldreq	r1, [r3, #0]
 800b740:	685b      	ldreq	r3, [r3, #4]
 800b742:	1809      	addeq	r1, r1, r0
 800b744:	6021      	streq	r1, [r4, #0]
 800b746:	6063      	str	r3, [r4, #4]
 800b748:	6054      	str	r4, [r2, #4]
 800b74a:	e7c9      	b.n	800b6e0 <_free_r+0x24>
 800b74c:	bd38      	pop	{r3, r4, r5, pc}
 800b74e:	bf00      	nop
 800b750:	200001fc 	.word	0x200001fc

0800b754 <_malloc_r>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	1ccd      	adds	r5, r1, #3
 800b758:	f025 0503 	bic.w	r5, r5, #3
 800b75c:	3508      	adds	r5, #8
 800b75e:	2d0c      	cmp	r5, #12
 800b760:	bf38      	it	cc
 800b762:	250c      	movcc	r5, #12
 800b764:	2d00      	cmp	r5, #0
 800b766:	4606      	mov	r6, r0
 800b768:	db01      	blt.n	800b76e <_malloc_r+0x1a>
 800b76a:	42a9      	cmp	r1, r5
 800b76c:	d903      	bls.n	800b776 <_malloc_r+0x22>
 800b76e:	230c      	movs	r3, #12
 800b770:	6033      	str	r3, [r6, #0]
 800b772:	2000      	movs	r0, #0
 800b774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b776:	f000 f87d 	bl	800b874 <__malloc_lock>
 800b77a:	4921      	ldr	r1, [pc, #132]	; (800b800 <_malloc_r+0xac>)
 800b77c:	680a      	ldr	r2, [r1, #0]
 800b77e:	4614      	mov	r4, r2
 800b780:	b99c      	cbnz	r4, 800b7aa <_malloc_r+0x56>
 800b782:	4f20      	ldr	r7, [pc, #128]	; (800b804 <_malloc_r+0xb0>)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	b923      	cbnz	r3, 800b792 <_malloc_r+0x3e>
 800b788:	4621      	mov	r1, r4
 800b78a:	4630      	mov	r0, r6
 800b78c:	f000 f862 	bl	800b854 <_sbrk_r>
 800b790:	6038      	str	r0, [r7, #0]
 800b792:	4629      	mov	r1, r5
 800b794:	4630      	mov	r0, r6
 800b796:	f000 f85d 	bl	800b854 <_sbrk_r>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d123      	bne.n	800b7e6 <_malloc_r+0x92>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	6033      	str	r3, [r6, #0]
 800b7a4:	f000 f86c 	bl	800b880 <__malloc_unlock>
 800b7a8:	e7e3      	b.n	800b772 <_malloc_r+0x1e>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	1b5b      	subs	r3, r3, r5
 800b7ae:	d417      	bmi.n	800b7e0 <_malloc_r+0x8c>
 800b7b0:	2b0b      	cmp	r3, #11
 800b7b2:	d903      	bls.n	800b7bc <_malloc_r+0x68>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	441c      	add	r4, r3
 800b7b8:	6025      	str	r5, [r4, #0]
 800b7ba:	e004      	b.n	800b7c6 <_malloc_r+0x72>
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	42a2      	cmp	r2, r4
 800b7c0:	bf0c      	ite	eq
 800b7c2:	600b      	streq	r3, [r1, #0]
 800b7c4:	6053      	strne	r3, [r2, #4]
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	f000 f85a 	bl	800b880 <__malloc_unlock>
 800b7cc:	f104 000b 	add.w	r0, r4, #11
 800b7d0:	1d23      	adds	r3, r4, #4
 800b7d2:	f020 0007 	bic.w	r0, r0, #7
 800b7d6:	1ac2      	subs	r2, r0, r3
 800b7d8:	d0cc      	beq.n	800b774 <_malloc_r+0x20>
 800b7da:	1a1b      	subs	r3, r3, r0
 800b7dc:	50a3      	str	r3, [r4, r2]
 800b7de:	e7c9      	b.n	800b774 <_malloc_r+0x20>
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	6864      	ldr	r4, [r4, #4]
 800b7e4:	e7cc      	b.n	800b780 <_malloc_r+0x2c>
 800b7e6:	1cc4      	adds	r4, r0, #3
 800b7e8:	f024 0403 	bic.w	r4, r4, #3
 800b7ec:	42a0      	cmp	r0, r4
 800b7ee:	d0e3      	beq.n	800b7b8 <_malloc_r+0x64>
 800b7f0:	1a21      	subs	r1, r4, r0
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 f82e 	bl	800b854 <_sbrk_r>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	d1dd      	bne.n	800b7b8 <_malloc_r+0x64>
 800b7fc:	e7cf      	b.n	800b79e <_malloc_r+0x4a>
 800b7fe:	bf00      	nop
 800b800:	200001fc 	.word	0x200001fc
 800b804:	20000200 	.word	0x20000200

0800b808 <_realloc_r>:
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	4607      	mov	r7, r0
 800b80c:	4614      	mov	r4, r2
 800b80e:	460e      	mov	r6, r1
 800b810:	b921      	cbnz	r1, 800b81c <_realloc_r+0x14>
 800b812:	4611      	mov	r1, r2
 800b814:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b818:	f7ff bf9c 	b.w	800b754 <_malloc_r>
 800b81c:	b922      	cbnz	r2, 800b828 <_realloc_r+0x20>
 800b81e:	f7ff ff4d 	bl	800b6bc <_free_r>
 800b822:	4625      	mov	r5, r4
 800b824:	4628      	mov	r0, r5
 800b826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b828:	f000 f830 	bl	800b88c <_malloc_usable_size_r>
 800b82c:	42a0      	cmp	r0, r4
 800b82e:	d20f      	bcs.n	800b850 <_realloc_r+0x48>
 800b830:	4621      	mov	r1, r4
 800b832:	4638      	mov	r0, r7
 800b834:	f7ff ff8e 	bl	800b754 <_malloc_r>
 800b838:	4605      	mov	r5, r0
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d0f2      	beq.n	800b824 <_realloc_r+0x1c>
 800b83e:	4631      	mov	r1, r6
 800b840:	4622      	mov	r2, r4
 800b842:	f7ff ff13 	bl	800b66c <memcpy>
 800b846:	4631      	mov	r1, r6
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff ff37 	bl	800b6bc <_free_r>
 800b84e:	e7e9      	b.n	800b824 <_realloc_r+0x1c>
 800b850:	4635      	mov	r5, r6
 800b852:	e7e7      	b.n	800b824 <_realloc_r+0x1c>

0800b854 <_sbrk_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	2300      	movs	r3, #0
 800b858:	4d05      	ldr	r5, [pc, #20]	; (800b870 <_sbrk_r+0x1c>)
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	f7fc fd90 	bl	8008384 <_sbrk>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_sbrk_r+0x1a>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_sbrk_r+0x1a>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	20001b68 	.word	0x20001b68

0800b874 <__malloc_lock>:
 800b874:	4801      	ldr	r0, [pc, #4]	; (800b87c <__malloc_lock+0x8>)
 800b876:	f000 b811 	b.w	800b89c <__retarget_lock_acquire_recursive>
 800b87a:	bf00      	nop
 800b87c:	20001b70 	.word	0x20001b70

0800b880 <__malloc_unlock>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__malloc_unlock+0x8>)
 800b882:	f000 b80c 	b.w	800b89e <__retarget_lock_release_recursive>
 800b886:	bf00      	nop
 800b888:	20001b70 	.word	0x20001b70

0800b88c <_malloc_usable_size_r>:
 800b88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b890:	1f18      	subs	r0, r3, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	bfbc      	itt	lt
 800b896:	580b      	ldrlt	r3, [r1, r0]
 800b898:	18c0      	addlt	r0, r0, r3
 800b89a:	4770      	bx	lr

0800b89c <__retarget_lock_acquire_recursive>:
 800b89c:	4770      	bx	lr

0800b89e <__retarget_lock_release_recursive>:
 800b89e:	4770      	bx	lr

0800b8a0 <_init>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	bf00      	nop
 800b8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a6:	bc08      	pop	{r3}
 800b8a8:	469e      	mov	lr, r3
 800b8aa:	4770      	bx	lr

0800b8ac <_fini>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr
